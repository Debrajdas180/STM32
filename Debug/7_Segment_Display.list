
7_Segment_Display.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004538  080000c0  080000c0  000100c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000038  080045f8  080045f8  000145f8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004630  08004630  000200cc  2**0
                  CONTENTS
  4 .ARM          00000000  08004630  08004630  000200cc  2**0
                  CONTENTS
  5 .preinit_array 00000000  08004630  08004630  000200cc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004630  08004630  00014630  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08004634  08004634  00014634  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000000cc  20000000  08004638  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000010c  200000cc  08004704  000200cc  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200001d8  08004704  000201d8  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  000200cc  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000edc1  00000000  00000000  000200f4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001fad  00000000  00000000  0002eeb5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000c98  00000000  00000000  00030e68  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000bd0  00000000  00000000  00031b00  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00019c31  00000000  00000000  000326d0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000f47d  00000000  00000000  0004c301  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00097d70  00000000  00000000  0005b77e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000f34ee  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002cf4  00000000  00000000  000f3540  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	; (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	; (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	; (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	200000cc 	.word	0x200000cc
 80000e0:	00000000 	.word	0x00000000
 80000e4:	080045e0 	.word	0x080045e0

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	; (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	; (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	; (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			; (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	200000d0 	.word	0x200000d0
 8000104:	080045e0 	.word	0x080045e0

08000108 <strlen>:
 8000108:	2300      	movs	r3, #0
 800010a:	5cc2      	ldrb	r2, [r0, r3]
 800010c:	3301      	adds	r3, #1
 800010e:	2a00      	cmp	r2, #0
 8000110:	d1fb      	bne.n	800010a <strlen+0x2>
 8000112:	1e58      	subs	r0, r3, #1
 8000114:	4770      	bx	lr
	...

08000118 <__udivsi3>:
 8000118:	2200      	movs	r2, #0
 800011a:	0843      	lsrs	r3, r0, #1
 800011c:	428b      	cmp	r3, r1
 800011e:	d374      	bcc.n	800020a <__udivsi3+0xf2>
 8000120:	0903      	lsrs	r3, r0, #4
 8000122:	428b      	cmp	r3, r1
 8000124:	d35f      	bcc.n	80001e6 <__udivsi3+0xce>
 8000126:	0a03      	lsrs	r3, r0, #8
 8000128:	428b      	cmp	r3, r1
 800012a:	d344      	bcc.n	80001b6 <__udivsi3+0x9e>
 800012c:	0b03      	lsrs	r3, r0, #12
 800012e:	428b      	cmp	r3, r1
 8000130:	d328      	bcc.n	8000184 <__udivsi3+0x6c>
 8000132:	0c03      	lsrs	r3, r0, #16
 8000134:	428b      	cmp	r3, r1
 8000136:	d30d      	bcc.n	8000154 <__udivsi3+0x3c>
 8000138:	22ff      	movs	r2, #255	; 0xff
 800013a:	0209      	lsls	r1, r1, #8
 800013c:	ba12      	rev	r2, r2
 800013e:	0c03      	lsrs	r3, r0, #16
 8000140:	428b      	cmp	r3, r1
 8000142:	d302      	bcc.n	800014a <__udivsi3+0x32>
 8000144:	1212      	asrs	r2, r2, #8
 8000146:	0209      	lsls	r1, r1, #8
 8000148:	d065      	beq.n	8000216 <__udivsi3+0xfe>
 800014a:	0b03      	lsrs	r3, r0, #12
 800014c:	428b      	cmp	r3, r1
 800014e:	d319      	bcc.n	8000184 <__udivsi3+0x6c>
 8000150:	e000      	b.n	8000154 <__udivsi3+0x3c>
 8000152:	0a09      	lsrs	r1, r1, #8
 8000154:	0bc3      	lsrs	r3, r0, #15
 8000156:	428b      	cmp	r3, r1
 8000158:	d301      	bcc.n	800015e <__udivsi3+0x46>
 800015a:	03cb      	lsls	r3, r1, #15
 800015c:	1ac0      	subs	r0, r0, r3
 800015e:	4152      	adcs	r2, r2
 8000160:	0b83      	lsrs	r3, r0, #14
 8000162:	428b      	cmp	r3, r1
 8000164:	d301      	bcc.n	800016a <__udivsi3+0x52>
 8000166:	038b      	lsls	r3, r1, #14
 8000168:	1ac0      	subs	r0, r0, r3
 800016a:	4152      	adcs	r2, r2
 800016c:	0b43      	lsrs	r3, r0, #13
 800016e:	428b      	cmp	r3, r1
 8000170:	d301      	bcc.n	8000176 <__udivsi3+0x5e>
 8000172:	034b      	lsls	r3, r1, #13
 8000174:	1ac0      	subs	r0, r0, r3
 8000176:	4152      	adcs	r2, r2
 8000178:	0b03      	lsrs	r3, r0, #12
 800017a:	428b      	cmp	r3, r1
 800017c:	d301      	bcc.n	8000182 <__udivsi3+0x6a>
 800017e:	030b      	lsls	r3, r1, #12
 8000180:	1ac0      	subs	r0, r0, r3
 8000182:	4152      	adcs	r2, r2
 8000184:	0ac3      	lsrs	r3, r0, #11
 8000186:	428b      	cmp	r3, r1
 8000188:	d301      	bcc.n	800018e <__udivsi3+0x76>
 800018a:	02cb      	lsls	r3, r1, #11
 800018c:	1ac0      	subs	r0, r0, r3
 800018e:	4152      	adcs	r2, r2
 8000190:	0a83      	lsrs	r3, r0, #10
 8000192:	428b      	cmp	r3, r1
 8000194:	d301      	bcc.n	800019a <__udivsi3+0x82>
 8000196:	028b      	lsls	r3, r1, #10
 8000198:	1ac0      	subs	r0, r0, r3
 800019a:	4152      	adcs	r2, r2
 800019c:	0a43      	lsrs	r3, r0, #9
 800019e:	428b      	cmp	r3, r1
 80001a0:	d301      	bcc.n	80001a6 <__udivsi3+0x8e>
 80001a2:	024b      	lsls	r3, r1, #9
 80001a4:	1ac0      	subs	r0, r0, r3
 80001a6:	4152      	adcs	r2, r2
 80001a8:	0a03      	lsrs	r3, r0, #8
 80001aa:	428b      	cmp	r3, r1
 80001ac:	d301      	bcc.n	80001b2 <__udivsi3+0x9a>
 80001ae:	020b      	lsls	r3, r1, #8
 80001b0:	1ac0      	subs	r0, r0, r3
 80001b2:	4152      	adcs	r2, r2
 80001b4:	d2cd      	bcs.n	8000152 <__udivsi3+0x3a>
 80001b6:	09c3      	lsrs	r3, r0, #7
 80001b8:	428b      	cmp	r3, r1
 80001ba:	d301      	bcc.n	80001c0 <__udivsi3+0xa8>
 80001bc:	01cb      	lsls	r3, r1, #7
 80001be:	1ac0      	subs	r0, r0, r3
 80001c0:	4152      	adcs	r2, r2
 80001c2:	0983      	lsrs	r3, r0, #6
 80001c4:	428b      	cmp	r3, r1
 80001c6:	d301      	bcc.n	80001cc <__udivsi3+0xb4>
 80001c8:	018b      	lsls	r3, r1, #6
 80001ca:	1ac0      	subs	r0, r0, r3
 80001cc:	4152      	adcs	r2, r2
 80001ce:	0943      	lsrs	r3, r0, #5
 80001d0:	428b      	cmp	r3, r1
 80001d2:	d301      	bcc.n	80001d8 <__udivsi3+0xc0>
 80001d4:	014b      	lsls	r3, r1, #5
 80001d6:	1ac0      	subs	r0, r0, r3
 80001d8:	4152      	adcs	r2, r2
 80001da:	0903      	lsrs	r3, r0, #4
 80001dc:	428b      	cmp	r3, r1
 80001de:	d301      	bcc.n	80001e4 <__udivsi3+0xcc>
 80001e0:	010b      	lsls	r3, r1, #4
 80001e2:	1ac0      	subs	r0, r0, r3
 80001e4:	4152      	adcs	r2, r2
 80001e6:	08c3      	lsrs	r3, r0, #3
 80001e8:	428b      	cmp	r3, r1
 80001ea:	d301      	bcc.n	80001f0 <__udivsi3+0xd8>
 80001ec:	00cb      	lsls	r3, r1, #3
 80001ee:	1ac0      	subs	r0, r0, r3
 80001f0:	4152      	adcs	r2, r2
 80001f2:	0883      	lsrs	r3, r0, #2
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d301      	bcc.n	80001fc <__udivsi3+0xe4>
 80001f8:	008b      	lsls	r3, r1, #2
 80001fa:	1ac0      	subs	r0, r0, r3
 80001fc:	4152      	adcs	r2, r2
 80001fe:	0843      	lsrs	r3, r0, #1
 8000200:	428b      	cmp	r3, r1
 8000202:	d301      	bcc.n	8000208 <__udivsi3+0xf0>
 8000204:	004b      	lsls	r3, r1, #1
 8000206:	1ac0      	subs	r0, r0, r3
 8000208:	4152      	adcs	r2, r2
 800020a:	1a41      	subs	r1, r0, r1
 800020c:	d200      	bcs.n	8000210 <__udivsi3+0xf8>
 800020e:	4601      	mov	r1, r0
 8000210:	4152      	adcs	r2, r2
 8000212:	4610      	mov	r0, r2
 8000214:	4770      	bx	lr
 8000216:	e7ff      	b.n	8000218 <__udivsi3+0x100>
 8000218:	b501      	push	{r0, lr}
 800021a:	2000      	movs	r0, #0
 800021c:	f000 f806 	bl	800022c <__aeabi_idiv0>
 8000220:	bd02      	pop	{r1, pc}
 8000222:	46c0      	nop			; (mov r8, r8)

08000224 <__aeabi_uidivmod>:
 8000224:	2900      	cmp	r1, #0
 8000226:	d0f7      	beq.n	8000218 <__udivsi3+0x100>
 8000228:	e776      	b.n	8000118 <__udivsi3>
 800022a:	4770      	bx	lr

0800022c <__aeabi_idiv0>:
 800022c:	4770      	bx	lr
 800022e:	46c0      	nop			; (mov r8, r8)

08000230 <disp_setNumber>:
//	HAL_GPIO_WritePin(LE_GPIO_port, LE_pin, 1);
//	i = 0;
//	HAL_GPIO_WritePin(OE_GPIO_port, OE_pin, 0);
//}
//}
void disp_setNumber(uint8_t *value){
 8000230:	b580      	push	{r7, lr}
 8000232:	b082      	sub	sp, #8
 8000234:	af00      	add	r7, sp, #0
 8000236:	6078      	str	r0, [r7, #4]

	static volatile int i = 0;
	static volatile uint8_t digit ;
	digit =(*value)-'0';
 8000238:	687b      	ldr	r3, [r7, #4]
 800023a:	781b      	ldrb	r3, [r3, #0]
 800023c:	3b30      	subs	r3, #48	; 0x30
 800023e:	b2da      	uxtb	r2, r3
 8000240:	4b1f      	ldr	r3, [pc, #124]	; (80002c0 <disp_setNumber+0x90>)
 8000242:	701a      	strb	r2, [r3, #0]
//	HAL_GPIO_WritePin(SDA_GPIO_Port, SDA_Pin, 0);
	  if (var[digit] & (uint32_t)1<<i)
 8000244:	4b1e      	ldr	r3, [pc, #120]	; (80002c0 <disp_setNumber+0x90>)
 8000246:	781b      	ldrb	r3, [r3, #0]
 8000248:	b2db      	uxtb	r3, r3
 800024a:	001a      	movs	r2, r3
 800024c:	4b1d      	ldr	r3, [pc, #116]	; (80002c4 <disp_setNumber+0x94>)
 800024e:	0092      	lsls	r2, r2, #2
 8000250:	58d2      	ldr	r2, [r2, r3]
 8000252:	4b1d      	ldr	r3, [pc, #116]	; (80002c8 <disp_setNumber+0x98>)
 8000254:	681b      	ldr	r3, [r3, #0]
 8000256:	40da      	lsrs	r2, r3
 8000258:	0013      	movs	r3, r2
 800025a:	2201      	movs	r2, #1
 800025c:	4013      	ands	r3, r2
 800025e:	d006      	beq.n	800026e <disp_setNumber+0x3e>
	  	HAL_GPIO_WritePin(SDA_GPIO_Port, SDA_Pin, 1);
 8000260:	4b1a      	ldr	r3, [pc, #104]	; (80002cc <disp_setNumber+0x9c>)
 8000262:	2201      	movs	r2, #1
 8000264:	2102      	movs	r1, #2
 8000266:	0018      	movs	r0, r3
 8000268:	f000 fee8 	bl	800103c <HAL_GPIO_WritePin>
 800026c:	e005      	b.n	800027a <disp_setNumber+0x4a>
	  else
	  	HAL_GPIO_WritePin(SDA_GPIO_Port, SDA_Pin, 0);
 800026e:	4b17      	ldr	r3, [pc, #92]	; (80002cc <disp_setNumber+0x9c>)
 8000270:	2200      	movs	r2, #0
 8000272:	2102      	movs	r1, #2
 8000274:	0018      	movs	r0, r3
 8000276:	f000 fee1 	bl	800103c <HAL_GPIO_WritePin>
	  i++;
 800027a:	4b13      	ldr	r3, [pc, #76]	; (80002c8 <disp_setNumber+0x98>)
 800027c:	681b      	ldr	r3, [r3, #0]
 800027e:	1c5a      	adds	r2, r3, #1
 8000280:	4b11      	ldr	r3, [pc, #68]	; (80002c8 <disp_setNumber+0x98>)
 8000282:	601a      	str	r2, [r3, #0]
	  if (i==32){
 8000284:	4b10      	ldr	r3, [pc, #64]	; (80002c8 <disp_setNumber+0x98>)
 8000286:	681b      	ldr	r3, [r3, #0]
 8000288:	2b20      	cmp	r3, #32
 800028a:	d115      	bne.n	80002b8 <disp_setNumber+0x88>
	  	i = 0;
 800028c:	4b0e      	ldr	r3, [pc, #56]	; (80002c8 <disp_setNumber+0x98>)
 800028e:	2200      	movs	r2, #0
 8000290:	601a      	str	r2, [r3, #0]
	  	HAL_GPIO_WritePin(LE_GPIO_port, LE_pin, 1);
 8000292:	2380      	movs	r3, #128	; 0x80
 8000294:	00db      	lsls	r3, r3, #3
 8000296:	480d      	ldr	r0, [pc, #52]	; (80002cc <disp_setNumber+0x9c>)
 8000298:	2201      	movs	r2, #1
 800029a:	0019      	movs	r1, r3
 800029c:	f000 fece 	bl	800103c <HAL_GPIO_WritePin>
	  	HAL_GPIO_WritePin(OE_GPIO_port, OE_pin, 0);
 80002a0:	2380      	movs	r3, #128	; 0x80
 80002a2:	021b      	lsls	r3, r3, #8
 80002a4:	4809      	ldr	r0, [pc, #36]	; (80002cc <disp_setNumber+0x9c>)
 80002a6:	2200      	movs	r2, #0
 80002a8:	0019      	movs	r1, r3
 80002aa:	f000 fec7 	bl	800103c <HAL_GPIO_WritePin>
	  	HAL_TIM_PWM_Stop_IT(&htim1, TIM_CHANNEL_1);
 80002ae:	4b08      	ldr	r3, [pc, #32]	; (80002d0 <disp_setNumber+0xa0>)
 80002b0:	2100      	movs	r1, #0
 80002b2:	0018      	movs	r0, r3
 80002b4:	f001 fe78 	bl	8001fa8 <HAL_TIM_PWM_Stop_IT>
}
}
 80002b8:	46c0      	nop			; (mov r8, r8)
 80002ba:	46bd      	mov	sp, r7
 80002bc:	b002      	add	sp, #8
 80002be:	bd80      	pop	{r7, pc}
 80002c0:	200000e8 	.word	0x200000e8
 80002c4:	20000000 	.word	0x20000000
 80002c8:	200000ec 	.word	0x200000ec
 80002cc:	48000400 	.word	0x48000400
 80002d0:	200000f0 	.word	0x200000f0

080002d4 <HAL_UART_RxCpltCallback>:
size_t length = 0;
size_t g_receivedFlag=0;



void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart){
 80002d4:	b580      	push	{r7, lr}
 80002d6:	b082      	sub	sp, #8
 80002d8:	af00      	add	r7, sp, #0
 80002da:	6078      	str	r0, [r7, #4]
	if(length<10 && (rbuf[length]!='\r' && rbuf[length]!='\n') ){
 80002dc:	4b18      	ldr	r3, [pc, #96]	; (8000340 <HAL_UART_RxCpltCallback+0x6c>)
 80002de:	681b      	ldr	r3, [r3, #0]
 80002e0:	2b09      	cmp	r3, #9
 80002e2:	d81a      	bhi.n	800031a <HAL_UART_RxCpltCallback+0x46>
 80002e4:	4b16      	ldr	r3, [pc, #88]	; (8000340 <HAL_UART_RxCpltCallback+0x6c>)
 80002e6:	681b      	ldr	r3, [r3, #0]
 80002e8:	4a16      	ldr	r2, [pc, #88]	; (8000344 <HAL_UART_RxCpltCallback+0x70>)
 80002ea:	5cd3      	ldrb	r3, [r2, r3]
 80002ec:	2b0d      	cmp	r3, #13
 80002ee:	d014      	beq.n	800031a <HAL_UART_RxCpltCallback+0x46>
 80002f0:	4b13      	ldr	r3, [pc, #76]	; (8000340 <HAL_UART_RxCpltCallback+0x6c>)
 80002f2:	681b      	ldr	r3, [r3, #0]
 80002f4:	4a13      	ldr	r2, [pc, #76]	; (8000344 <HAL_UART_RxCpltCallback+0x70>)
 80002f6:	5cd3      	ldrb	r3, [r2, r3]
 80002f8:	2b0a      	cmp	r3, #10
 80002fa:	d00e      	beq.n	800031a <HAL_UART_RxCpltCallback+0x46>
		length++;
 80002fc:	4b10      	ldr	r3, [pc, #64]	; (8000340 <HAL_UART_RxCpltCallback+0x6c>)
 80002fe:	681b      	ldr	r3, [r3, #0]
 8000300:	1c5a      	adds	r2, r3, #1
 8000302:	4b0f      	ldr	r3, [pc, #60]	; (8000340 <HAL_UART_RxCpltCallback+0x6c>)
 8000304:	601a      	str	r2, [r3, #0]
		HAL_UART_Receive_IT(&huart2,rbuf+length,1);
 8000306:	4b0e      	ldr	r3, [pc, #56]	; (8000340 <HAL_UART_RxCpltCallback+0x6c>)
 8000308:	681a      	ldr	r2, [r3, #0]
 800030a:	4b0e      	ldr	r3, [pc, #56]	; (8000344 <HAL_UART_RxCpltCallback+0x70>)
 800030c:	18d1      	adds	r1, r2, r3
 800030e:	4b0e      	ldr	r3, [pc, #56]	; (8000348 <HAL_UART_RxCpltCallback+0x74>)
 8000310:	2201      	movs	r2, #1
 8000312:	0018      	movs	r0, r3
 8000314:	f002 feae 	bl	8003074 <HAL_UART_Receive_IT>
	}else if(rbuf[length]=='\r' || rbuf[length]=='\n'){
		g_receivedFlag=1;

	}
}
 8000318:	e00e      	b.n	8000338 <HAL_UART_RxCpltCallback+0x64>
	}else if(rbuf[length]=='\r' || rbuf[length]=='\n'){
 800031a:	4b09      	ldr	r3, [pc, #36]	; (8000340 <HAL_UART_RxCpltCallback+0x6c>)
 800031c:	681b      	ldr	r3, [r3, #0]
 800031e:	4a09      	ldr	r2, [pc, #36]	; (8000344 <HAL_UART_RxCpltCallback+0x70>)
 8000320:	5cd3      	ldrb	r3, [r2, r3]
 8000322:	2b0d      	cmp	r3, #13
 8000324:	d005      	beq.n	8000332 <HAL_UART_RxCpltCallback+0x5e>
 8000326:	4b06      	ldr	r3, [pc, #24]	; (8000340 <HAL_UART_RxCpltCallback+0x6c>)
 8000328:	681b      	ldr	r3, [r3, #0]
 800032a:	4a06      	ldr	r2, [pc, #24]	; (8000344 <HAL_UART_RxCpltCallback+0x70>)
 800032c:	5cd3      	ldrb	r3, [r2, r3]
 800032e:	2b0a      	cmp	r3, #10
 8000330:	d102      	bne.n	8000338 <HAL_UART_RxCpltCallback+0x64>
		g_receivedFlag=1;
 8000332:	4b06      	ldr	r3, [pc, #24]	; (800034c <HAL_UART_RxCpltCallback+0x78>)
 8000334:	2201      	movs	r2, #1
 8000336:	601a      	str	r2, [r3, #0]
}
 8000338:	46c0      	nop			; (mov r8, r8)
 800033a:	46bd      	mov	sp, r7
 800033c:	b002      	add	sp, #8
 800033e:	bd80      	pop	{r7, pc}
 8000340:	200001cc 	.word	0x200001cc
 8000344:	200001c0 	.word	0x200001c0
 8000348:	20000138 	.word	0x20000138
 800034c:	200001d0 	.word	0x200001d0

08000350 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000350:	b580      	push	{r7, lr}
 8000352:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000354:	f000 fb3a 	bl	80009cc <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000358:	f000 f856 	bl	8000408 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800035c:	f000 f98e 	bl	800067c <MX_GPIO_Init>
  MX_TIM1_Init();
 8000360:	f000 f8a6 	bl	80004b0 <MX_TIM1_Init>
  MX_USART2_UART_Init();
 8000364:	f000 f95a 	bl	800061c <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */
  TIM1->CCR1 = 50 ;
 8000368:	4b20      	ldr	r3, [pc, #128]	; (80003ec <main+0x9c>)
 800036a:	2232      	movs	r2, #50	; 0x32
 800036c:	635a      	str	r2, [r3, #52]	; 0x34
  HAL_TIM_PWM_Start_IT(&htim1, TIM_CHANNEL_1);
 800036e:	4b20      	ldr	r3, [pc, #128]	; (80003f0 <main+0xa0>)
 8000370:	2100      	movs	r1, #0
 8000372:	0018      	movs	r0, r3
 8000374:	f001 fd18 	bl	8001da8 <HAL_TIM_PWM_Start_IT>
  HAL_UART_Transmit_IT(&huart2, tbuf, strlen((char*)tbuf));
 8000378:	4b1e      	ldr	r3, [pc, #120]	; (80003f4 <main+0xa4>)
 800037a:	0018      	movs	r0, r3
 800037c:	f7ff fec4 	bl	8000108 <strlen>
 8000380:	0003      	movs	r3, r0
 8000382:	b29a      	uxth	r2, r3
 8000384:	491b      	ldr	r1, [pc, #108]	; (80003f4 <main+0xa4>)
 8000386:	4b1c      	ldr	r3, [pc, #112]	; (80003f8 <main+0xa8>)
 8000388:	0018      	movs	r0, r3
 800038a:	f002 fe03 	bl	8002f94 <HAL_UART_Transmit_IT>
  HAL_UART_Receive_IT(&huart2,rbuf, 1);
 800038e:	491b      	ldr	r1, [pc, #108]	; (80003fc <main+0xac>)
 8000390:	4b19      	ldr	r3, [pc, #100]	; (80003f8 <main+0xa8>)
 8000392:	2201      	movs	r2, #1
 8000394:	0018      	movs	r0, r3
 8000396:	f002 fe6d 	bl	8003074 <HAL_UART_Receive_IT>
  disp_setNumber(rbuf);
 800039a:	4b18      	ldr	r3, [pc, #96]	; (80003fc <main+0xac>)
 800039c:	0018      	movs	r0, r3
 800039e:	f7ff ff47 	bl	8000230 <disp_setNumber>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {

	  if(g_receivedFlag){
 80003a2:	4b17      	ldr	r3, [pc, #92]	; (8000400 <main+0xb0>)
 80003a4:	681b      	ldr	r3, [r3, #0]
 80003a6:	2b00      	cmp	r3, #0
 80003a8:	d0fb      	beq.n	80003a2 <main+0x52>
			  HAL_UART_Transmit_IT(&huart2, rbuf, length);
 80003aa:	4b16      	ldr	r3, [pc, #88]	; (8000404 <main+0xb4>)
 80003ac:	681b      	ldr	r3, [r3, #0]
 80003ae:	b29a      	uxth	r2, r3
 80003b0:	4912      	ldr	r1, [pc, #72]	; (80003fc <main+0xac>)
 80003b2:	4b11      	ldr	r3, [pc, #68]	; (80003f8 <main+0xa8>)
 80003b4:	0018      	movs	r0, r3
 80003b6:	f002 fded 	bl	8002f94 <HAL_UART_Transmit_IT>
			  g_receivedFlag=0;
 80003ba:	4b11      	ldr	r3, [pc, #68]	; (8000400 <main+0xb0>)
 80003bc:	2200      	movs	r2, #0
 80003be:	601a      	str	r2, [r3, #0]
			  length=0;
 80003c0:	4b10      	ldr	r3, [pc, #64]	; (8000404 <main+0xb4>)
 80003c2:	2200      	movs	r2, #0
 80003c4:	601a      	str	r2, [r3, #0]
			  HAL_UART_Transmit_IT(&huart2, tbuf, strlen((char*)tbuf));
 80003c6:	4b0b      	ldr	r3, [pc, #44]	; (80003f4 <main+0xa4>)
 80003c8:	0018      	movs	r0, r3
 80003ca:	f7ff fe9d 	bl	8000108 <strlen>
 80003ce:	0003      	movs	r3, r0
 80003d0:	b29a      	uxth	r2, r3
 80003d2:	4908      	ldr	r1, [pc, #32]	; (80003f4 <main+0xa4>)
 80003d4:	4b08      	ldr	r3, [pc, #32]	; (80003f8 <main+0xa8>)
 80003d6:	0018      	movs	r0, r3
 80003d8:	f002 fddc 	bl	8002f94 <HAL_UART_Transmit_IT>
			  HAL_UART_Receive_IT(&huart2,rbuf, 1);
 80003dc:	4907      	ldr	r1, [pc, #28]	; (80003fc <main+0xac>)
 80003de:	4b06      	ldr	r3, [pc, #24]	; (80003f8 <main+0xa8>)
 80003e0:	2201      	movs	r2, #1
 80003e2:	0018      	movs	r0, r3
 80003e4:	f002 fe46 	bl	8003074 <HAL_UART_Receive_IT>
	  if(g_receivedFlag){
 80003e8:	e7db      	b.n	80003a2 <main+0x52>
 80003ea:	46c0      	nop			; (mov r8, r8)
 80003ec:	40012c00 	.word	0x40012c00
 80003f0:	200000f0 	.word	0x200000f0
 80003f4:	20000028 	.word	0x20000028
 80003f8:	20000138 	.word	0x20000138
 80003fc:	200001c0 	.word	0x200001c0
 8000400:	200001d0 	.word	0x200001d0
 8000404:	200001cc 	.word	0x200001cc

08000408 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000408:	b590      	push	{r4, r7, lr}
 800040a:	b099      	sub	sp, #100	; 0x64
 800040c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800040e:	242c      	movs	r4, #44	; 0x2c
 8000410:	193b      	adds	r3, r7, r4
 8000412:	0018      	movs	r0, r3
 8000414:	2334      	movs	r3, #52	; 0x34
 8000416:	001a      	movs	r2, r3
 8000418:	2100      	movs	r1, #0
 800041a:	f004 f8d9 	bl	80045d0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800041e:	231c      	movs	r3, #28
 8000420:	18fb      	adds	r3, r7, r3
 8000422:	0018      	movs	r0, r3
 8000424:	2310      	movs	r3, #16
 8000426:	001a      	movs	r2, r3
 8000428:	2100      	movs	r1, #0
 800042a:	f004 f8d1 	bl	80045d0 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800042e:	003b      	movs	r3, r7
 8000430:	0018      	movs	r0, r3
 8000432:	231c      	movs	r3, #28
 8000434:	001a      	movs	r2, r3
 8000436:	2100      	movs	r1, #0
 8000438:	f004 f8ca 	bl	80045d0 <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI48;
 800043c:	193b      	adds	r3, r7, r4
 800043e:	2220      	movs	r2, #32
 8000440:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
 8000442:	193b      	adds	r3, r7, r4
 8000444:	2201      	movs	r2, #1
 8000446:	621a      	str	r2, [r3, #32]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000448:	193b      	adds	r3, r7, r4
 800044a:	2200      	movs	r2, #0
 800044c:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800044e:	193b      	adds	r3, r7, r4
 8000450:	0018      	movs	r0, r3
 8000452:	f000 fe11 	bl	8001078 <HAL_RCC_OscConfig>
 8000456:	1e03      	subs	r3, r0, #0
 8000458:	d001      	beq.n	800045e <SystemClock_Config+0x56>
  {
    Error_Handler();
 800045a:	f000 f971 	bl	8000740 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800045e:	211c      	movs	r1, #28
 8000460:	187b      	adds	r3, r7, r1
 8000462:	2207      	movs	r2, #7
 8000464:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI48;
 8000466:	187b      	adds	r3, r7, r1
 8000468:	2203      	movs	r2, #3
 800046a:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800046c:	187b      	adds	r3, r7, r1
 800046e:	2200      	movs	r2, #0
 8000470:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000472:	187b      	adds	r3, r7, r1
 8000474:	2200      	movs	r2, #0
 8000476:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8000478:	187b      	adds	r3, r7, r1
 800047a:	2101      	movs	r1, #1
 800047c:	0018      	movs	r0, r3
 800047e:	f001 f981 	bl	8001784 <HAL_RCC_ClockConfig>
 8000482:	1e03      	subs	r3, r0, #0
 8000484:	d001      	beq.n	800048a <SystemClock_Config+0x82>
  {
    Error_Handler();
 8000486:	f000 f95b 	bl	8000740 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 800048a:	003b      	movs	r3, r7
 800048c:	2202      	movs	r2, #2
 800048e:	601a      	str	r2, [r3, #0]
  PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8000490:	003b      	movs	r3, r7
 8000492:	2200      	movs	r2, #0
 8000494:	60da      	str	r2, [r3, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000496:	003b      	movs	r3, r7
 8000498:	0018      	movs	r0, r3
 800049a:	f001 fadf 	bl	8001a5c <HAL_RCCEx_PeriphCLKConfig>
 800049e:	1e03      	subs	r3, r0, #0
 80004a0:	d001      	beq.n	80004a6 <SystemClock_Config+0x9e>
  {
    Error_Handler();
 80004a2:	f000 f94d 	bl	8000740 <Error_Handler>
  }
}
 80004a6:	46c0      	nop			; (mov r8, r8)
 80004a8:	46bd      	mov	sp, r7
 80004aa:	b019      	add	sp, #100	; 0x64
 80004ac:	bd90      	pop	{r4, r7, pc}
	...

080004b0 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 80004b0:	b580      	push	{r7, lr}
 80004b2:	b096      	sub	sp, #88	; 0x58
 80004b4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80004b6:	2348      	movs	r3, #72	; 0x48
 80004b8:	18fb      	adds	r3, r7, r3
 80004ba:	0018      	movs	r0, r3
 80004bc:	2310      	movs	r3, #16
 80004be:	001a      	movs	r2, r3
 80004c0:	2100      	movs	r1, #0
 80004c2:	f004 f885 	bl	80045d0 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80004c6:	2340      	movs	r3, #64	; 0x40
 80004c8:	18fb      	adds	r3, r7, r3
 80004ca:	0018      	movs	r0, r3
 80004cc:	2308      	movs	r3, #8
 80004ce:	001a      	movs	r2, r3
 80004d0:	2100      	movs	r1, #0
 80004d2:	f004 f87d 	bl	80045d0 <memset>
  TIM_OC_InitTypeDef sConfigOC = {0};
 80004d6:	2324      	movs	r3, #36	; 0x24
 80004d8:	18fb      	adds	r3, r7, r3
 80004da:	0018      	movs	r0, r3
 80004dc:	231c      	movs	r3, #28
 80004de:	001a      	movs	r2, r3
 80004e0:	2100      	movs	r1, #0
 80004e2:	f004 f875 	bl	80045d0 <memset>
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 80004e6:	1d3b      	adds	r3, r7, #4
 80004e8:	0018      	movs	r0, r3
 80004ea:	2320      	movs	r3, #32
 80004ec:	001a      	movs	r2, r3
 80004ee:	2100      	movs	r1, #0
 80004f0:	f004 f86e 	bl	80045d0 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 80004f4:	4b46      	ldr	r3, [pc, #280]	; (8000610 <MX_TIM1_Init+0x160>)
 80004f6:	4a47      	ldr	r2, [pc, #284]	; (8000614 <MX_TIM1_Init+0x164>)
 80004f8:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 10000;
 80004fa:	4b45      	ldr	r3, [pc, #276]	; (8000610 <MX_TIM1_Init+0x160>)
 80004fc:	4a46      	ldr	r2, [pc, #280]	; (8000618 <MX_TIM1_Init+0x168>)
 80004fe:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000500:	4b43      	ldr	r3, [pc, #268]	; (8000610 <MX_TIM1_Init+0x160>)
 8000502:	2200      	movs	r2, #0
 8000504:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 150;
 8000506:	4b42      	ldr	r3, [pc, #264]	; (8000610 <MX_TIM1_Init+0x160>)
 8000508:	2296      	movs	r2, #150	; 0x96
 800050a:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800050c:	4b40      	ldr	r3, [pc, #256]	; (8000610 <MX_TIM1_Init+0x160>)
 800050e:	2200      	movs	r2, #0
 8000510:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8000512:	4b3f      	ldr	r3, [pc, #252]	; (8000610 <MX_TIM1_Init+0x160>)
 8000514:	2200      	movs	r2, #0
 8000516:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8000518:	4b3d      	ldr	r3, [pc, #244]	; (8000610 <MX_TIM1_Init+0x160>)
 800051a:	2280      	movs	r2, #128	; 0x80
 800051c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 800051e:	4b3c      	ldr	r3, [pc, #240]	; (8000610 <MX_TIM1_Init+0x160>)
 8000520:	0018      	movs	r0, r3
 8000522:	f001 fb99 	bl	8001c58 <HAL_TIM_Base_Init>
 8000526:	1e03      	subs	r3, r0, #0
 8000528:	d001      	beq.n	800052e <MX_TIM1_Init+0x7e>
  {
    Error_Handler();
 800052a:	f000 f909 	bl	8000740 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800052e:	2148      	movs	r1, #72	; 0x48
 8000530:	187b      	adds	r3, r7, r1
 8000532:	2280      	movs	r2, #128	; 0x80
 8000534:	0152      	lsls	r2, r2, #5
 8000536:	601a      	str	r2, [r3, #0]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8000538:	187a      	adds	r2, r7, r1
 800053a:	4b35      	ldr	r3, [pc, #212]	; (8000610 <MX_TIM1_Init+0x160>)
 800053c:	0011      	movs	r1, r2
 800053e:	0018      	movs	r0, r3
 8000540:	f001 ffd2 	bl	80024e8 <HAL_TIM_ConfigClockSource>
 8000544:	1e03      	subs	r3, r0, #0
 8000546:	d001      	beq.n	800054c <MX_TIM1_Init+0x9c>
  {
    Error_Handler();
 8000548:	f000 f8fa 	bl	8000740 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 800054c:	4b30      	ldr	r3, [pc, #192]	; (8000610 <MX_TIM1_Init+0x160>)
 800054e:	0018      	movs	r0, r3
 8000550:	f001 fbd2 	bl	8001cf8 <HAL_TIM_PWM_Init>
 8000554:	1e03      	subs	r3, r0, #0
 8000556:	d001      	beq.n	800055c <MX_TIM1_Init+0xac>
  {
    Error_Handler();
 8000558:	f000 f8f2 	bl	8000740 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800055c:	2140      	movs	r1, #64	; 0x40
 800055e:	187b      	adds	r3, r7, r1
 8000560:	2200      	movs	r2, #0
 8000562:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000564:	187b      	adds	r3, r7, r1
 8000566:	2200      	movs	r2, #0
 8000568:	605a      	str	r2, [r3, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 800056a:	187a      	adds	r2, r7, r1
 800056c:	4b28      	ldr	r3, [pc, #160]	; (8000610 <MX_TIM1_Init+0x160>)
 800056e:	0011      	movs	r1, r2
 8000570:	0018      	movs	r0, r3
 8000572:	f002 fbef 	bl	8002d54 <HAL_TIMEx_MasterConfigSynchronization>
 8000576:	1e03      	subs	r3, r0, #0
 8000578:	d001      	beq.n	800057e <MX_TIM1_Init+0xce>
  {
    Error_Handler();
 800057a:	f000 f8e1 	bl	8000740 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800057e:	2124      	movs	r1, #36	; 0x24
 8000580:	187b      	adds	r3, r7, r1
 8000582:	2260      	movs	r2, #96	; 0x60
 8000584:	601a      	str	r2, [r3, #0]
  sConfigOC.Pulse = 50;
 8000586:	187b      	adds	r3, r7, r1
 8000588:	2232      	movs	r2, #50	; 0x32
 800058a:	605a      	str	r2, [r3, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800058c:	187b      	adds	r3, r7, r1
 800058e:	2200      	movs	r2, #0
 8000590:	609a      	str	r2, [r3, #8]
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8000592:	187b      	adds	r3, r7, r1
 8000594:	2200      	movs	r2, #0
 8000596:	60da      	str	r2, [r3, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000598:	187b      	adds	r3, r7, r1
 800059a:	2200      	movs	r2, #0
 800059c:	611a      	str	r2, [r3, #16]
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 800059e:	187b      	adds	r3, r7, r1
 80005a0:	2200      	movs	r2, #0
 80005a2:	615a      	str	r2, [r3, #20]
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 80005a4:	187b      	adds	r3, r7, r1
 80005a6:	2200      	movs	r2, #0
 80005a8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80005aa:	1879      	adds	r1, r7, r1
 80005ac:	4b18      	ldr	r3, [pc, #96]	; (8000610 <MX_TIM1_Init+0x160>)
 80005ae:	2200      	movs	r2, #0
 80005b0:	0018      	movs	r0, r3
 80005b2:	f001 fed3 	bl	800235c <HAL_TIM_PWM_ConfigChannel>
 80005b6:	1e03      	subs	r3, r0, #0
 80005b8:	d001      	beq.n	80005be <MX_TIM1_Init+0x10e>
  {
    Error_Handler();
 80005ba:	f000 f8c1 	bl	8000740 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 80005be:	1d3b      	adds	r3, r7, #4
 80005c0:	2200      	movs	r2, #0
 80005c2:	601a      	str	r2, [r3, #0]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 80005c4:	1d3b      	adds	r3, r7, #4
 80005c6:	2200      	movs	r2, #0
 80005c8:	605a      	str	r2, [r3, #4]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 80005ca:	1d3b      	adds	r3, r7, #4
 80005cc:	2200      	movs	r2, #0
 80005ce:	609a      	str	r2, [r3, #8]
  sBreakDeadTimeConfig.DeadTime = 0;
 80005d0:	1d3b      	adds	r3, r7, #4
 80005d2:	2200      	movs	r2, #0
 80005d4:	60da      	str	r2, [r3, #12]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 80005d6:	1d3b      	adds	r3, r7, #4
 80005d8:	2200      	movs	r2, #0
 80005da:	611a      	str	r2, [r3, #16]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 80005dc:	1d3b      	adds	r3, r7, #4
 80005de:	2280      	movs	r2, #128	; 0x80
 80005e0:	0192      	lsls	r2, r2, #6
 80005e2:	615a      	str	r2, [r3, #20]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 80005e4:	1d3b      	adds	r3, r7, #4
 80005e6:	2200      	movs	r2, #0
 80005e8:	61da      	str	r2, [r3, #28]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 80005ea:	1d3a      	adds	r2, r7, #4
 80005ec:	4b08      	ldr	r3, [pc, #32]	; (8000610 <MX_TIM1_Init+0x160>)
 80005ee:	0011      	movs	r1, r2
 80005f0:	0018      	movs	r0, r3
 80005f2:	f002 fc0d 	bl	8002e10 <HAL_TIMEx_ConfigBreakDeadTime>
 80005f6:	1e03      	subs	r3, r0, #0
 80005f8:	d001      	beq.n	80005fe <MX_TIM1_Init+0x14e>
  {
    Error_Handler();
 80005fa:	f000 f8a1 	bl	8000740 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 80005fe:	4b04      	ldr	r3, [pc, #16]	; (8000610 <MX_TIM1_Init+0x160>)
 8000600:	0018      	movs	r0, r3
 8000602:	f000 f8ef 	bl	80007e4 <HAL_TIM_MspPostInit>

}
 8000606:	46c0      	nop			; (mov r8, r8)
 8000608:	46bd      	mov	sp, r7
 800060a:	b016      	add	sp, #88	; 0x58
 800060c:	bd80      	pop	{r7, pc}
 800060e:	46c0      	nop			; (mov r8, r8)
 8000610:	200000f0 	.word	0x200000f0
 8000614:	40012c00 	.word	0x40012c00
 8000618:	00002710 	.word	0x00002710

0800061c <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 800061c:	b580      	push	{r7, lr}
 800061e:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000620:	4b14      	ldr	r3, [pc, #80]	; (8000674 <MX_USART2_UART_Init+0x58>)
 8000622:	4a15      	ldr	r2, [pc, #84]	; (8000678 <MX_USART2_UART_Init+0x5c>)
 8000624:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000626:	4b13      	ldr	r3, [pc, #76]	; (8000674 <MX_USART2_UART_Init+0x58>)
 8000628:	22e1      	movs	r2, #225	; 0xe1
 800062a:	0252      	lsls	r2, r2, #9
 800062c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800062e:	4b11      	ldr	r3, [pc, #68]	; (8000674 <MX_USART2_UART_Init+0x58>)
 8000630:	2200      	movs	r2, #0
 8000632:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000634:	4b0f      	ldr	r3, [pc, #60]	; (8000674 <MX_USART2_UART_Init+0x58>)
 8000636:	2200      	movs	r2, #0
 8000638:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800063a:	4b0e      	ldr	r3, [pc, #56]	; (8000674 <MX_USART2_UART_Init+0x58>)
 800063c:	2200      	movs	r2, #0
 800063e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000640:	4b0c      	ldr	r3, [pc, #48]	; (8000674 <MX_USART2_UART_Init+0x58>)
 8000642:	220c      	movs	r2, #12
 8000644:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000646:	4b0b      	ldr	r3, [pc, #44]	; (8000674 <MX_USART2_UART_Init+0x58>)
 8000648:	2200      	movs	r2, #0
 800064a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 800064c:	4b09      	ldr	r3, [pc, #36]	; (8000674 <MX_USART2_UART_Init+0x58>)
 800064e:	2200      	movs	r2, #0
 8000650:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000652:	4b08      	ldr	r3, [pc, #32]	; (8000674 <MX_USART2_UART_Init+0x58>)
 8000654:	2200      	movs	r2, #0
 8000656:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000658:	4b06      	ldr	r3, [pc, #24]	; (8000674 <MX_USART2_UART_Init+0x58>)
 800065a:	2200      	movs	r2, #0
 800065c:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800065e:	4b05      	ldr	r3, [pc, #20]	; (8000674 <MX_USART2_UART_Init+0x58>)
 8000660:	0018      	movs	r0, r3
 8000662:	f002 fc43 	bl	8002eec <HAL_UART_Init>
 8000666:	1e03      	subs	r3, r0, #0
 8000668:	d001      	beq.n	800066e <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 800066a:	f000 f869 	bl	8000740 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800066e:	46c0      	nop			; (mov r8, r8)
 8000670:	46bd      	mov	sp, r7
 8000672:	bd80      	pop	{r7, pc}
 8000674:	20000138 	.word	0x20000138
 8000678:	40004400 	.word	0x40004400

0800067c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800067c:	b590      	push	{r4, r7, lr}
 800067e:	b089      	sub	sp, #36	; 0x24
 8000680:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000682:	240c      	movs	r4, #12
 8000684:	193b      	adds	r3, r7, r4
 8000686:	0018      	movs	r0, r3
 8000688:	2314      	movs	r3, #20
 800068a:	001a      	movs	r2, r3
 800068c:	2100      	movs	r1, #0
 800068e:	f003 ff9f 	bl	80045d0 <memset>
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000692:	4b29      	ldr	r3, [pc, #164]	; (8000738 <MX_GPIO_Init+0xbc>)
 8000694:	695a      	ldr	r2, [r3, #20]
 8000696:	4b28      	ldr	r3, [pc, #160]	; (8000738 <MX_GPIO_Init+0xbc>)
 8000698:	2180      	movs	r1, #128	; 0x80
 800069a:	0289      	lsls	r1, r1, #10
 800069c:	430a      	orrs	r2, r1
 800069e:	615a      	str	r2, [r3, #20]
 80006a0:	4b25      	ldr	r3, [pc, #148]	; (8000738 <MX_GPIO_Init+0xbc>)
 80006a2:	695a      	ldr	r2, [r3, #20]
 80006a4:	2380      	movs	r3, #128	; 0x80
 80006a6:	029b      	lsls	r3, r3, #10
 80006a8:	4013      	ands	r3, r2
 80006aa:	60bb      	str	r3, [r7, #8]
 80006ac:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80006ae:	4b22      	ldr	r3, [pc, #136]	; (8000738 <MX_GPIO_Init+0xbc>)
 80006b0:	695a      	ldr	r2, [r3, #20]
 80006b2:	4b21      	ldr	r3, [pc, #132]	; (8000738 <MX_GPIO_Init+0xbc>)
 80006b4:	2180      	movs	r1, #128	; 0x80
 80006b6:	02c9      	lsls	r1, r1, #11
 80006b8:	430a      	orrs	r2, r1
 80006ba:	615a      	str	r2, [r3, #20]
 80006bc:	4b1e      	ldr	r3, [pc, #120]	; (8000738 <MX_GPIO_Init+0xbc>)
 80006be:	695a      	ldr	r2, [r3, #20]
 80006c0:	2380      	movs	r3, #128	; 0x80
 80006c2:	02db      	lsls	r3, r3, #11
 80006c4:	4013      	ands	r3, r2
 80006c6:	607b      	str	r3, [r7, #4]
 80006c8:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_1, GPIO_PIN_SET);
 80006ca:	4b1c      	ldr	r3, [pc, #112]	; (800073c <MX_GPIO_Init+0xc0>)
 80006cc:	2201      	movs	r2, #1
 80006ce:	2102      	movs	r1, #2
 80006d0:	0018      	movs	r0, r3
 80006d2:	f000 fcb3 	bl	800103c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_10|GPIO_PIN_15, GPIO_PIN_RESET);
 80006d6:	2384      	movs	r3, #132	; 0x84
 80006d8:	021b      	lsls	r3, r3, #8
 80006da:	4818      	ldr	r0, [pc, #96]	; (800073c <MX_GPIO_Init+0xc0>)
 80006dc:	2200      	movs	r2, #0
 80006de:	0019      	movs	r1, r3
 80006e0:	f000 fcac 	bl	800103c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PB1 */
  GPIO_InitStruct.Pin = GPIO_PIN_1;
 80006e4:	193b      	adds	r3, r7, r4
 80006e6:	2202      	movs	r2, #2
 80006e8:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80006ea:	193b      	adds	r3, r7, r4
 80006ec:	2201      	movs	r2, #1
 80006ee:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006f0:	193b      	adds	r3, r7, r4
 80006f2:	2200      	movs	r2, #0
 80006f4:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80006f6:	193b      	adds	r3, r7, r4
 80006f8:	2203      	movs	r2, #3
 80006fa:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80006fc:	193b      	adds	r3, r7, r4
 80006fe:	4a0f      	ldr	r2, [pc, #60]	; (800073c <MX_GPIO_Init+0xc0>)
 8000700:	0019      	movs	r1, r3
 8000702:	0010      	movs	r0, r2
 8000704:	f000 fb22 	bl	8000d4c <HAL_GPIO_Init>

  /*Configure GPIO pins : PB10 PB15 */
  GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_15;
 8000708:	0021      	movs	r1, r4
 800070a:	187b      	adds	r3, r7, r1
 800070c:	2284      	movs	r2, #132	; 0x84
 800070e:	0212      	lsls	r2, r2, #8
 8000710:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000712:	187b      	adds	r3, r7, r1
 8000714:	2201      	movs	r2, #1
 8000716:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000718:	187b      	adds	r3, r7, r1
 800071a:	2200      	movs	r2, #0
 800071c:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800071e:	187b      	adds	r3, r7, r1
 8000720:	2200      	movs	r2, #0
 8000722:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000724:	187b      	adds	r3, r7, r1
 8000726:	4a05      	ldr	r2, [pc, #20]	; (800073c <MX_GPIO_Init+0xc0>)
 8000728:	0019      	movs	r1, r3
 800072a:	0010      	movs	r0, r2
 800072c:	f000 fb0e 	bl	8000d4c <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000730:	46c0      	nop			; (mov r8, r8)
 8000732:	46bd      	mov	sp, r7
 8000734:	b009      	add	sp, #36	; 0x24
 8000736:	bd90      	pop	{r4, r7, pc}
 8000738:	40021000 	.word	0x40021000
 800073c:	48000400 	.word	0x48000400

08000740 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000740:	b580      	push	{r7, lr}
 8000742:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000744:	b672      	cpsid	i
}
 8000746:	46c0      	nop			; (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000748:	e7fe      	b.n	8000748 <Error_Handler+0x8>
	...

0800074c <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800074c:	b580      	push	{r7, lr}
 800074e:	b082      	sub	sp, #8
 8000750:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000752:	4b0f      	ldr	r3, [pc, #60]	; (8000790 <HAL_MspInit+0x44>)
 8000754:	699a      	ldr	r2, [r3, #24]
 8000756:	4b0e      	ldr	r3, [pc, #56]	; (8000790 <HAL_MspInit+0x44>)
 8000758:	2101      	movs	r1, #1
 800075a:	430a      	orrs	r2, r1
 800075c:	619a      	str	r2, [r3, #24]
 800075e:	4b0c      	ldr	r3, [pc, #48]	; (8000790 <HAL_MspInit+0x44>)
 8000760:	699b      	ldr	r3, [r3, #24]
 8000762:	2201      	movs	r2, #1
 8000764:	4013      	ands	r3, r2
 8000766:	607b      	str	r3, [r7, #4]
 8000768:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800076a:	4b09      	ldr	r3, [pc, #36]	; (8000790 <HAL_MspInit+0x44>)
 800076c:	69da      	ldr	r2, [r3, #28]
 800076e:	4b08      	ldr	r3, [pc, #32]	; (8000790 <HAL_MspInit+0x44>)
 8000770:	2180      	movs	r1, #128	; 0x80
 8000772:	0549      	lsls	r1, r1, #21
 8000774:	430a      	orrs	r2, r1
 8000776:	61da      	str	r2, [r3, #28]
 8000778:	4b05      	ldr	r3, [pc, #20]	; (8000790 <HAL_MspInit+0x44>)
 800077a:	69da      	ldr	r2, [r3, #28]
 800077c:	2380      	movs	r3, #128	; 0x80
 800077e:	055b      	lsls	r3, r3, #21
 8000780:	4013      	ands	r3, r2
 8000782:	603b      	str	r3, [r7, #0]
 8000784:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000786:	46c0      	nop			; (mov r8, r8)
 8000788:	46bd      	mov	sp, r7
 800078a:	b002      	add	sp, #8
 800078c:	bd80      	pop	{r7, pc}
 800078e:	46c0      	nop			; (mov r8, r8)
 8000790:	40021000 	.word	0x40021000

08000794 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000794:	b580      	push	{r7, lr}
 8000796:	b084      	sub	sp, #16
 8000798:	af00      	add	r7, sp, #0
 800079a:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 800079c:	687b      	ldr	r3, [r7, #4]
 800079e:	681b      	ldr	r3, [r3, #0]
 80007a0:	4a0e      	ldr	r2, [pc, #56]	; (80007dc <HAL_TIM_Base_MspInit+0x48>)
 80007a2:	4293      	cmp	r3, r2
 80007a4:	d115      	bne.n	80007d2 <HAL_TIM_Base_MspInit+0x3e>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80007a6:	4b0e      	ldr	r3, [pc, #56]	; (80007e0 <HAL_TIM_Base_MspInit+0x4c>)
 80007a8:	699a      	ldr	r2, [r3, #24]
 80007aa:	4b0d      	ldr	r3, [pc, #52]	; (80007e0 <HAL_TIM_Base_MspInit+0x4c>)
 80007ac:	2180      	movs	r1, #128	; 0x80
 80007ae:	0109      	lsls	r1, r1, #4
 80007b0:	430a      	orrs	r2, r1
 80007b2:	619a      	str	r2, [r3, #24]
 80007b4:	4b0a      	ldr	r3, [pc, #40]	; (80007e0 <HAL_TIM_Base_MspInit+0x4c>)
 80007b6:	699a      	ldr	r2, [r3, #24]
 80007b8:	2380      	movs	r3, #128	; 0x80
 80007ba:	011b      	lsls	r3, r3, #4
 80007bc:	4013      	ands	r3, r2
 80007be:	60fb      	str	r3, [r7, #12]
 80007c0:	68fb      	ldr	r3, [r7, #12]
    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_CC_IRQn, 0, 0);
 80007c2:	2200      	movs	r2, #0
 80007c4:	2100      	movs	r1, #0
 80007c6:	200e      	movs	r0, #14
 80007c8:	f000 fa10 	bl	8000bec <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_CC_IRQn);
 80007cc:	200e      	movs	r0, #14
 80007ce:	f000 fa22 	bl	8000c16 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 80007d2:	46c0      	nop			; (mov r8, r8)
 80007d4:	46bd      	mov	sp, r7
 80007d6:	b004      	add	sp, #16
 80007d8:	bd80      	pop	{r7, pc}
 80007da:	46c0      	nop			; (mov r8, r8)
 80007dc:	40012c00 	.word	0x40012c00
 80007e0:	40021000 	.word	0x40021000

080007e4 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 80007e4:	b590      	push	{r4, r7, lr}
 80007e6:	b089      	sub	sp, #36	; 0x24
 80007e8:	af00      	add	r7, sp, #0
 80007ea:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80007ec:	240c      	movs	r4, #12
 80007ee:	193b      	adds	r3, r7, r4
 80007f0:	0018      	movs	r0, r3
 80007f2:	2314      	movs	r3, #20
 80007f4:	001a      	movs	r2, r3
 80007f6:	2100      	movs	r1, #0
 80007f8:	f003 feea 	bl	80045d0 <memset>
  if(htim->Instance==TIM1)
 80007fc:	687b      	ldr	r3, [r7, #4]
 80007fe:	681b      	ldr	r3, [r3, #0]
 8000800:	4a16      	ldr	r2, [pc, #88]	; (800085c <HAL_TIM_MspPostInit+0x78>)
 8000802:	4293      	cmp	r3, r2
 8000804:	d125      	bne.n	8000852 <HAL_TIM_MspPostInit+0x6e>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000806:	4b16      	ldr	r3, [pc, #88]	; (8000860 <HAL_TIM_MspPostInit+0x7c>)
 8000808:	695a      	ldr	r2, [r3, #20]
 800080a:	4b15      	ldr	r3, [pc, #84]	; (8000860 <HAL_TIM_MspPostInit+0x7c>)
 800080c:	2180      	movs	r1, #128	; 0x80
 800080e:	0289      	lsls	r1, r1, #10
 8000810:	430a      	orrs	r2, r1
 8000812:	615a      	str	r2, [r3, #20]
 8000814:	4b12      	ldr	r3, [pc, #72]	; (8000860 <HAL_TIM_MspPostInit+0x7c>)
 8000816:	695a      	ldr	r2, [r3, #20]
 8000818:	2380      	movs	r3, #128	; 0x80
 800081a:	029b      	lsls	r3, r3, #10
 800081c:	4013      	ands	r3, r2
 800081e:	60bb      	str	r3, [r7, #8]
 8000820:	68bb      	ldr	r3, [r7, #8]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8000822:	193b      	adds	r3, r7, r4
 8000824:	2280      	movs	r2, #128	; 0x80
 8000826:	0052      	lsls	r2, r2, #1
 8000828:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800082a:	0021      	movs	r1, r4
 800082c:	187b      	adds	r3, r7, r1
 800082e:	2202      	movs	r2, #2
 8000830:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000832:	187b      	adds	r3, r7, r1
 8000834:	2200      	movs	r2, #0
 8000836:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000838:	187b      	adds	r3, r7, r1
 800083a:	2200      	movs	r2, #0
 800083c:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM1;
 800083e:	187b      	adds	r3, r7, r1
 8000840:	2202      	movs	r2, #2
 8000842:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000844:	187a      	adds	r2, r7, r1
 8000846:	2390      	movs	r3, #144	; 0x90
 8000848:	05db      	lsls	r3, r3, #23
 800084a:	0011      	movs	r1, r2
 800084c:	0018      	movs	r0, r3
 800084e:	f000 fa7d 	bl	8000d4c <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 8000852:	46c0      	nop			; (mov r8, r8)
 8000854:	46bd      	mov	sp, r7
 8000856:	b009      	add	sp, #36	; 0x24
 8000858:	bd90      	pop	{r4, r7, pc}
 800085a:	46c0      	nop			; (mov r8, r8)
 800085c:	40012c00 	.word	0x40012c00
 8000860:	40021000 	.word	0x40021000

08000864 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000864:	b590      	push	{r4, r7, lr}
 8000866:	b08b      	sub	sp, #44	; 0x2c
 8000868:	af00      	add	r7, sp, #0
 800086a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800086c:	2414      	movs	r4, #20
 800086e:	193b      	adds	r3, r7, r4
 8000870:	0018      	movs	r0, r3
 8000872:	2314      	movs	r3, #20
 8000874:	001a      	movs	r2, r3
 8000876:	2100      	movs	r1, #0
 8000878:	f003 feaa 	bl	80045d0 <memset>
  if(huart->Instance==USART2)
 800087c:	687b      	ldr	r3, [r7, #4]
 800087e:	681b      	ldr	r3, [r3, #0]
 8000880:	4a20      	ldr	r2, [pc, #128]	; (8000904 <HAL_UART_MspInit+0xa0>)
 8000882:	4293      	cmp	r3, r2
 8000884:	d13a      	bne.n	80008fc <HAL_UART_MspInit+0x98>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000886:	4b20      	ldr	r3, [pc, #128]	; (8000908 <HAL_UART_MspInit+0xa4>)
 8000888:	69da      	ldr	r2, [r3, #28]
 800088a:	4b1f      	ldr	r3, [pc, #124]	; (8000908 <HAL_UART_MspInit+0xa4>)
 800088c:	2180      	movs	r1, #128	; 0x80
 800088e:	0289      	lsls	r1, r1, #10
 8000890:	430a      	orrs	r2, r1
 8000892:	61da      	str	r2, [r3, #28]
 8000894:	4b1c      	ldr	r3, [pc, #112]	; (8000908 <HAL_UART_MspInit+0xa4>)
 8000896:	69da      	ldr	r2, [r3, #28]
 8000898:	2380      	movs	r3, #128	; 0x80
 800089a:	029b      	lsls	r3, r3, #10
 800089c:	4013      	ands	r3, r2
 800089e:	613b      	str	r3, [r7, #16]
 80008a0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80008a2:	4b19      	ldr	r3, [pc, #100]	; (8000908 <HAL_UART_MspInit+0xa4>)
 80008a4:	695a      	ldr	r2, [r3, #20]
 80008a6:	4b18      	ldr	r3, [pc, #96]	; (8000908 <HAL_UART_MspInit+0xa4>)
 80008a8:	2180      	movs	r1, #128	; 0x80
 80008aa:	0289      	lsls	r1, r1, #10
 80008ac:	430a      	orrs	r2, r1
 80008ae:	615a      	str	r2, [r3, #20]
 80008b0:	4b15      	ldr	r3, [pc, #84]	; (8000908 <HAL_UART_MspInit+0xa4>)
 80008b2:	695a      	ldr	r2, [r3, #20]
 80008b4:	2380      	movs	r3, #128	; 0x80
 80008b6:	029b      	lsls	r3, r3, #10
 80008b8:	4013      	ands	r3, r2
 80008ba:	60fb      	str	r3, [r7, #12]
 80008bc:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 80008be:	0021      	movs	r1, r4
 80008c0:	187b      	adds	r3, r7, r1
 80008c2:	220c      	movs	r2, #12
 80008c4:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80008c6:	187b      	adds	r3, r7, r1
 80008c8:	2202      	movs	r2, #2
 80008ca:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008cc:	187b      	adds	r3, r7, r1
 80008ce:	2200      	movs	r2, #0
 80008d0:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80008d2:	187b      	adds	r3, r7, r1
 80008d4:	2203      	movs	r2, #3
 80008d6:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_USART2;
 80008d8:	187b      	adds	r3, r7, r1
 80008da:	2201      	movs	r2, #1
 80008dc:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80008de:	187a      	adds	r2, r7, r1
 80008e0:	2390      	movs	r3, #144	; 0x90
 80008e2:	05db      	lsls	r3, r3, #23
 80008e4:	0011      	movs	r1, r2
 80008e6:	0018      	movs	r0, r3
 80008e8:	f000 fa30 	bl	8000d4c <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 80008ec:	2200      	movs	r2, #0
 80008ee:	2100      	movs	r1, #0
 80008f0:	201c      	movs	r0, #28
 80008f2:	f000 f97b 	bl	8000bec <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 80008f6:	201c      	movs	r0, #28
 80008f8:	f000 f98d 	bl	8000c16 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 80008fc:	46c0      	nop			; (mov r8, r8)
 80008fe:	46bd      	mov	sp, r7
 8000900:	b00b      	add	sp, #44	; 0x2c
 8000902:	bd90      	pop	{r4, r7, pc}
 8000904:	40004400 	.word	0x40004400
 8000908:	40021000 	.word	0x40021000

0800090c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800090c:	b580      	push	{r7, lr}
 800090e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000910:	e7fe      	b.n	8000910 <NMI_Handler+0x4>

08000912 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000912:	b580      	push	{r7, lr}
 8000914:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000916:	e7fe      	b.n	8000916 <HardFault_Handler+0x4>

08000918 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000918:	b580      	push	{r7, lr}
 800091a:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 800091c:	46c0      	nop			; (mov r8, r8)
 800091e:	46bd      	mov	sp, r7
 8000920:	bd80      	pop	{r7, pc}

08000922 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000922:	b580      	push	{r7, lr}
 8000924:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000926:	46c0      	nop			; (mov r8, r8)
 8000928:	46bd      	mov	sp, r7
 800092a:	bd80      	pop	{r7, pc}

0800092c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800092c:	b580      	push	{r7, lr}
 800092e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000930:	f000 f894 	bl	8000a5c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000934:	46c0      	nop			; (mov r8, r8)
 8000936:	46bd      	mov	sp, r7
 8000938:	bd80      	pop	{r7, pc}
	...

0800093c <TIM1_CC_IRQHandler>:
/**
  * @brief This function handles TIM1 capture compare interrupt.
  */

void TIM1_CC_IRQHandler(void)
{
 800093c:	b580      	push	{r7, lr}
 800093e:	af00      	add	r7, sp, #0




  /* USER CODE END TIM1_CC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8000940:	4b03      	ldr	r3, [pc, #12]	; (8000950 <TIM1_CC_IRQHandler+0x14>)
 8000942:	0018      	movs	r0, r3
 8000944:	f001 fbf4 	bl	8002130 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_CC_IRQn 1 */

  /* USER CODE END TIM1_CC_IRQn 1 */
}
 8000948:	46c0      	nop			; (mov r8, r8)
 800094a:	46bd      	mov	sp, r7
 800094c:	bd80      	pop	{r7, pc}
 800094e:	46c0      	nop			; (mov r8, r8)
 8000950:	200000f0 	.word	0x200000f0

08000954 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt / USART2 wake-up interrupt through EXTI line 26.
  */
void USART2_IRQHandler(void)
{
 8000954:	b580      	push	{r7, lr}
 8000956:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8000958:	4b03      	ldr	r3, [pc, #12]	; (8000968 <USART2_IRQHandler+0x14>)
 800095a:	0018      	movs	r0, r3
 800095c:	f002 fbe2 	bl	8003124 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8000960:	46c0      	nop			; (mov r8, r8)
 8000962:	46bd      	mov	sp, r7
 8000964:	bd80      	pop	{r7, pc}
 8000966:	46c0      	nop			; (mov r8, r8)
 8000968:	20000138 	.word	0x20000138

0800096c <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800096c:	b580      	push	{r7, lr}
 800096e:	af00      	add	r7, sp, #0
                         before branch to main program. This call is made inside
                         the "startup_stm32f0xx.s" file.
                         User can setups the default system clock (System clock source, PLL Multiplier
                         and Divider factors, AHB/APBx prescalers and Flash settings).
   */
}
 8000970:	46c0      	nop			; (mov r8, r8)
 8000972:	46bd      	mov	sp, r7
 8000974:	bd80      	pop	{r7, pc}
	...

08000978 <Reset_Handler>:
 8000978:	480d      	ldr	r0, [pc, #52]	; (80009b0 <LoopForever+0x2>)
 800097a:	4685      	mov	sp, r0
 800097c:	f7ff fff6 	bl	800096c <SystemInit>
 8000980:	480c      	ldr	r0, [pc, #48]	; (80009b4 <LoopForever+0x6>)
 8000982:	490d      	ldr	r1, [pc, #52]	; (80009b8 <LoopForever+0xa>)
 8000984:	4a0d      	ldr	r2, [pc, #52]	; (80009bc <LoopForever+0xe>)
 8000986:	2300      	movs	r3, #0
 8000988:	e002      	b.n	8000990 <LoopCopyDataInit>

0800098a <CopyDataInit>:
 800098a:	58d4      	ldr	r4, [r2, r3]
 800098c:	50c4      	str	r4, [r0, r3]
 800098e:	3304      	adds	r3, #4

08000990 <LoopCopyDataInit>:
 8000990:	18c4      	adds	r4, r0, r3
 8000992:	428c      	cmp	r4, r1
 8000994:	d3f9      	bcc.n	800098a <CopyDataInit>
 8000996:	4a0a      	ldr	r2, [pc, #40]	; (80009c0 <LoopForever+0x12>)
 8000998:	4c0a      	ldr	r4, [pc, #40]	; (80009c4 <LoopForever+0x16>)
 800099a:	2300      	movs	r3, #0
 800099c:	e001      	b.n	80009a2 <LoopFillZerobss>

0800099e <FillZerobss>:
 800099e:	6013      	str	r3, [r2, #0]
 80009a0:	3204      	adds	r2, #4

080009a2 <LoopFillZerobss>:
 80009a2:	42a2      	cmp	r2, r4
 80009a4:	d3fb      	bcc.n	800099e <FillZerobss>
 80009a6:	f003 fdef 	bl	8004588 <__libc_init_array>
 80009aa:	f7ff fcd1 	bl	8000350 <main>

080009ae <LoopForever>:
 80009ae:	e7fe      	b.n	80009ae <LoopForever>
 80009b0:	20004000 	.word	0x20004000
 80009b4:	20000000 	.word	0x20000000
 80009b8:	200000cc 	.word	0x200000cc
 80009bc:	08004638 	.word	0x08004638
 80009c0:	200000cc 	.word	0x200000cc
 80009c4:	200001d8 	.word	0x200001d8

080009c8 <ADC1_COMP_IRQHandler>:
 80009c8:	e7fe      	b.n	80009c8 <ADC1_COMP_IRQHandler>
	...

080009cc <HAL_Init>:
  *       In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80009cc:	b580      	push	{r7, lr}
 80009ce:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */ 
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80009d0:	4b07      	ldr	r3, [pc, #28]	; (80009f0 <HAL_Init+0x24>)
 80009d2:	681a      	ldr	r2, [r3, #0]
 80009d4:	4b06      	ldr	r3, [pc, #24]	; (80009f0 <HAL_Init+0x24>)
 80009d6:	2110      	movs	r1, #16
 80009d8:	430a      	orrs	r2, r1
 80009da:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */

  HAL_InitTick(TICK_INT_PRIORITY);
 80009dc:	2003      	movs	r0, #3
 80009de:	f000 f809 	bl	80009f4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80009e2:	f7ff feb3 	bl	800074c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80009e6:	2300      	movs	r3, #0
}
 80009e8:	0018      	movs	r0, r3
 80009ea:	46bd      	mov	sp, r7
 80009ec:	bd80      	pop	{r7, pc}
 80009ee:	46c0      	nop			; (mov r8, r8)
 80009f0:	40022000 	.word	0x40022000

080009f4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80009f4:	b590      	push	{r4, r7, lr}
 80009f6:	b083      	sub	sp, #12
 80009f8:	af00      	add	r7, sp, #0
 80009fa:	6078      	str	r0, [r7, #4]
  /*Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80009fc:	4b14      	ldr	r3, [pc, #80]	; (8000a50 <HAL_InitTick+0x5c>)
 80009fe:	681c      	ldr	r4, [r3, #0]
 8000a00:	4b14      	ldr	r3, [pc, #80]	; (8000a54 <HAL_InitTick+0x60>)
 8000a02:	781b      	ldrb	r3, [r3, #0]
 8000a04:	0019      	movs	r1, r3
 8000a06:	23fa      	movs	r3, #250	; 0xfa
 8000a08:	0098      	lsls	r0, r3, #2
 8000a0a:	f7ff fb85 	bl	8000118 <__udivsi3>
 8000a0e:	0003      	movs	r3, r0
 8000a10:	0019      	movs	r1, r3
 8000a12:	0020      	movs	r0, r4
 8000a14:	f7ff fb80 	bl	8000118 <__udivsi3>
 8000a18:	0003      	movs	r3, r0
 8000a1a:	0018      	movs	r0, r3
 8000a1c:	f000 f90b 	bl	8000c36 <HAL_SYSTICK_Config>
 8000a20:	1e03      	subs	r3, r0, #0
 8000a22:	d001      	beq.n	8000a28 <HAL_InitTick+0x34>
  {
    return HAL_ERROR;
 8000a24:	2301      	movs	r3, #1
 8000a26:	e00f      	b.n	8000a48 <HAL_InitTick+0x54>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000a28:	687b      	ldr	r3, [r7, #4]
 8000a2a:	2b03      	cmp	r3, #3
 8000a2c:	d80b      	bhi.n	8000a46 <HAL_InitTick+0x52>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000a2e:	6879      	ldr	r1, [r7, #4]
 8000a30:	2301      	movs	r3, #1
 8000a32:	425b      	negs	r3, r3
 8000a34:	2200      	movs	r2, #0
 8000a36:	0018      	movs	r0, r3
 8000a38:	f000 f8d8 	bl	8000bec <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000a3c:	4b06      	ldr	r3, [pc, #24]	; (8000a58 <HAL_InitTick+0x64>)
 8000a3e:	687a      	ldr	r2, [r7, #4]
 8000a40:	601a      	str	r2, [r3, #0]
  {
    return HAL_ERROR;
  }

   /* Return function status */
  return HAL_OK;
 8000a42:	2300      	movs	r3, #0
 8000a44:	e000      	b.n	8000a48 <HAL_InitTick+0x54>
    return HAL_ERROR;
 8000a46:	2301      	movs	r3, #1
}
 8000a48:	0018      	movs	r0, r3
 8000a4a:	46bd      	mov	sp, r7
 8000a4c:	b003      	add	sp, #12
 8000a4e:	bd90      	pop	{r4, r7, pc}
 8000a50:	200000c0 	.word	0x200000c0
 8000a54:	200000c8 	.word	0x200000c8
 8000a58:	200000c4 	.word	0x200000c4

08000a5c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000a5c:	b580      	push	{r7, lr}
 8000a5e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000a60:	4b05      	ldr	r3, [pc, #20]	; (8000a78 <HAL_IncTick+0x1c>)
 8000a62:	781b      	ldrb	r3, [r3, #0]
 8000a64:	001a      	movs	r2, r3
 8000a66:	4b05      	ldr	r3, [pc, #20]	; (8000a7c <HAL_IncTick+0x20>)
 8000a68:	681b      	ldr	r3, [r3, #0]
 8000a6a:	18d2      	adds	r2, r2, r3
 8000a6c:	4b03      	ldr	r3, [pc, #12]	; (8000a7c <HAL_IncTick+0x20>)
 8000a6e:	601a      	str	r2, [r3, #0]
}
 8000a70:	46c0      	nop			; (mov r8, r8)
 8000a72:	46bd      	mov	sp, r7
 8000a74:	bd80      	pop	{r7, pc}
 8000a76:	46c0      	nop			; (mov r8, r8)
 8000a78:	200000c8 	.word	0x200000c8
 8000a7c:	200001d4 	.word	0x200001d4

08000a80 <HAL_GetTick>:
  * @note   This function is declared as __weak  to be overwritten  in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000a80:	b580      	push	{r7, lr}
 8000a82:	af00      	add	r7, sp, #0
  return uwTick;
 8000a84:	4b02      	ldr	r3, [pc, #8]	; (8000a90 <HAL_GetTick+0x10>)
 8000a86:	681b      	ldr	r3, [r3, #0]
}
 8000a88:	0018      	movs	r0, r3
 8000a8a:	46bd      	mov	sp, r7
 8000a8c:	bd80      	pop	{r7, pc}
 8000a8e:	46c0      	nop			; (mov r8, r8)
 8000a90:	200001d4 	.word	0x200001d4

08000a94 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000a94:	b580      	push	{r7, lr}
 8000a96:	b082      	sub	sp, #8
 8000a98:	af00      	add	r7, sp, #0
 8000a9a:	0002      	movs	r2, r0
 8000a9c:	1dfb      	adds	r3, r7, #7
 8000a9e:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8000aa0:	1dfb      	adds	r3, r7, #7
 8000aa2:	781b      	ldrb	r3, [r3, #0]
 8000aa4:	2b7f      	cmp	r3, #127	; 0x7f
 8000aa6:	d809      	bhi.n	8000abc <__NVIC_EnableIRQ+0x28>
  {
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000aa8:	1dfb      	adds	r3, r7, #7
 8000aaa:	781b      	ldrb	r3, [r3, #0]
 8000aac:	001a      	movs	r2, r3
 8000aae:	231f      	movs	r3, #31
 8000ab0:	401a      	ands	r2, r3
 8000ab2:	4b04      	ldr	r3, [pc, #16]	; (8000ac4 <__NVIC_EnableIRQ+0x30>)
 8000ab4:	2101      	movs	r1, #1
 8000ab6:	4091      	lsls	r1, r2
 8000ab8:	000a      	movs	r2, r1
 8000aba:	601a      	str	r2, [r3, #0]
  }
}
 8000abc:	46c0      	nop			; (mov r8, r8)
 8000abe:	46bd      	mov	sp, r7
 8000ac0:	b002      	add	sp, #8
 8000ac2:	bd80      	pop	{r7, pc}
 8000ac4:	e000e100 	.word	0xe000e100

08000ac8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000ac8:	b590      	push	{r4, r7, lr}
 8000aca:	b083      	sub	sp, #12
 8000acc:	af00      	add	r7, sp, #0
 8000ace:	0002      	movs	r2, r0
 8000ad0:	6039      	str	r1, [r7, #0]
 8000ad2:	1dfb      	adds	r3, r7, #7
 8000ad4:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8000ad6:	1dfb      	adds	r3, r7, #7
 8000ad8:	781b      	ldrb	r3, [r3, #0]
 8000ada:	2b7f      	cmp	r3, #127	; 0x7f
 8000adc:	d828      	bhi.n	8000b30 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000ade:	4a2f      	ldr	r2, [pc, #188]	; (8000b9c <__NVIC_SetPriority+0xd4>)
 8000ae0:	1dfb      	adds	r3, r7, #7
 8000ae2:	781b      	ldrb	r3, [r3, #0]
 8000ae4:	b25b      	sxtb	r3, r3
 8000ae6:	089b      	lsrs	r3, r3, #2
 8000ae8:	33c0      	adds	r3, #192	; 0xc0
 8000aea:	009b      	lsls	r3, r3, #2
 8000aec:	589b      	ldr	r3, [r3, r2]
 8000aee:	1dfa      	adds	r2, r7, #7
 8000af0:	7812      	ldrb	r2, [r2, #0]
 8000af2:	0011      	movs	r1, r2
 8000af4:	2203      	movs	r2, #3
 8000af6:	400a      	ands	r2, r1
 8000af8:	00d2      	lsls	r2, r2, #3
 8000afa:	21ff      	movs	r1, #255	; 0xff
 8000afc:	4091      	lsls	r1, r2
 8000afe:	000a      	movs	r2, r1
 8000b00:	43d2      	mvns	r2, r2
 8000b02:	401a      	ands	r2, r3
 8000b04:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8000b06:	683b      	ldr	r3, [r7, #0]
 8000b08:	019b      	lsls	r3, r3, #6
 8000b0a:	22ff      	movs	r2, #255	; 0xff
 8000b0c:	401a      	ands	r2, r3
 8000b0e:	1dfb      	adds	r3, r7, #7
 8000b10:	781b      	ldrb	r3, [r3, #0]
 8000b12:	0018      	movs	r0, r3
 8000b14:	2303      	movs	r3, #3
 8000b16:	4003      	ands	r3, r0
 8000b18:	00db      	lsls	r3, r3, #3
 8000b1a:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000b1c:	481f      	ldr	r0, [pc, #124]	; (8000b9c <__NVIC_SetPriority+0xd4>)
 8000b1e:	1dfb      	adds	r3, r7, #7
 8000b20:	781b      	ldrb	r3, [r3, #0]
 8000b22:	b25b      	sxtb	r3, r3
 8000b24:	089b      	lsrs	r3, r3, #2
 8000b26:	430a      	orrs	r2, r1
 8000b28:	33c0      	adds	r3, #192	; 0xc0
 8000b2a:	009b      	lsls	r3, r3, #2
 8000b2c:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 8000b2e:	e031      	b.n	8000b94 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000b30:	4a1b      	ldr	r2, [pc, #108]	; (8000ba0 <__NVIC_SetPriority+0xd8>)
 8000b32:	1dfb      	adds	r3, r7, #7
 8000b34:	781b      	ldrb	r3, [r3, #0]
 8000b36:	0019      	movs	r1, r3
 8000b38:	230f      	movs	r3, #15
 8000b3a:	400b      	ands	r3, r1
 8000b3c:	3b08      	subs	r3, #8
 8000b3e:	089b      	lsrs	r3, r3, #2
 8000b40:	3306      	adds	r3, #6
 8000b42:	009b      	lsls	r3, r3, #2
 8000b44:	18d3      	adds	r3, r2, r3
 8000b46:	3304      	adds	r3, #4
 8000b48:	681b      	ldr	r3, [r3, #0]
 8000b4a:	1dfa      	adds	r2, r7, #7
 8000b4c:	7812      	ldrb	r2, [r2, #0]
 8000b4e:	0011      	movs	r1, r2
 8000b50:	2203      	movs	r2, #3
 8000b52:	400a      	ands	r2, r1
 8000b54:	00d2      	lsls	r2, r2, #3
 8000b56:	21ff      	movs	r1, #255	; 0xff
 8000b58:	4091      	lsls	r1, r2
 8000b5a:	000a      	movs	r2, r1
 8000b5c:	43d2      	mvns	r2, r2
 8000b5e:	401a      	ands	r2, r3
 8000b60:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8000b62:	683b      	ldr	r3, [r7, #0]
 8000b64:	019b      	lsls	r3, r3, #6
 8000b66:	22ff      	movs	r2, #255	; 0xff
 8000b68:	401a      	ands	r2, r3
 8000b6a:	1dfb      	adds	r3, r7, #7
 8000b6c:	781b      	ldrb	r3, [r3, #0]
 8000b6e:	0018      	movs	r0, r3
 8000b70:	2303      	movs	r3, #3
 8000b72:	4003      	ands	r3, r0
 8000b74:	00db      	lsls	r3, r3, #3
 8000b76:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000b78:	4809      	ldr	r0, [pc, #36]	; (8000ba0 <__NVIC_SetPriority+0xd8>)
 8000b7a:	1dfb      	adds	r3, r7, #7
 8000b7c:	781b      	ldrb	r3, [r3, #0]
 8000b7e:	001c      	movs	r4, r3
 8000b80:	230f      	movs	r3, #15
 8000b82:	4023      	ands	r3, r4
 8000b84:	3b08      	subs	r3, #8
 8000b86:	089b      	lsrs	r3, r3, #2
 8000b88:	430a      	orrs	r2, r1
 8000b8a:	3306      	adds	r3, #6
 8000b8c:	009b      	lsls	r3, r3, #2
 8000b8e:	18c3      	adds	r3, r0, r3
 8000b90:	3304      	adds	r3, #4
 8000b92:	601a      	str	r2, [r3, #0]
}
 8000b94:	46c0      	nop			; (mov r8, r8)
 8000b96:	46bd      	mov	sp, r7
 8000b98:	b003      	add	sp, #12
 8000b9a:	bd90      	pop	{r4, r7, pc}
 8000b9c:	e000e100 	.word	0xe000e100
 8000ba0:	e000ed00 	.word	0xe000ed00

08000ba4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000ba4:	b580      	push	{r7, lr}
 8000ba6:	b082      	sub	sp, #8
 8000ba8:	af00      	add	r7, sp, #0
 8000baa:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000bac:	687b      	ldr	r3, [r7, #4]
 8000bae:	1e5a      	subs	r2, r3, #1
 8000bb0:	2380      	movs	r3, #128	; 0x80
 8000bb2:	045b      	lsls	r3, r3, #17
 8000bb4:	429a      	cmp	r2, r3
 8000bb6:	d301      	bcc.n	8000bbc <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000bb8:	2301      	movs	r3, #1
 8000bba:	e010      	b.n	8000bde <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000bbc:	4b0a      	ldr	r3, [pc, #40]	; (8000be8 <SysTick_Config+0x44>)
 8000bbe:	687a      	ldr	r2, [r7, #4]
 8000bc0:	3a01      	subs	r2, #1
 8000bc2:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000bc4:	2301      	movs	r3, #1
 8000bc6:	425b      	negs	r3, r3
 8000bc8:	2103      	movs	r1, #3
 8000bca:	0018      	movs	r0, r3
 8000bcc:	f7ff ff7c 	bl	8000ac8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000bd0:	4b05      	ldr	r3, [pc, #20]	; (8000be8 <SysTick_Config+0x44>)
 8000bd2:	2200      	movs	r2, #0
 8000bd4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000bd6:	4b04      	ldr	r3, [pc, #16]	; (8000be8 <SysTick_Config+0x44>)
 8000bd8:	2207      	movs	r2, #7
 8000bda:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000bdc:	2300      	movs	r3, #0
}
 8000bde:	0018      	movs	r0, r3
 8000be0:	46bd      	mov	sp, r7
 8000be2:	b002      	add	sp, #8
 8000be4:	bd80      	pop	{r7, pc}
 8000be6:	46c0      	nop			; (mov r8, r8)
 8000be8:	e000e010 	.word	0xe000e010

08000bec <HAL_NVIC_SetPriority>:
  *         with stm32f0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0 based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000bec:	b580      	push	{r7, lr}
 8000bee:	b084      	sub	sp, #16
 8000bf0:	af00      	add	r7, sp, #0
 8000bf2:	60b9      	str	r1, [r7, #8]
 8000bf4:	607a      	str	r2, [r7, #4]
 8000bf6:	210f      	movs	r1, #15
 8000bf8:	187b      	adds	r3, r7, r1
 8000bfa:	1c02      	adds	r2, r0, #0
 8000bfc:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 8000bfe:	68ba      	ldr	r2, [r7, #8]
 8000c00:	187b      	adds	r3, r7, r1
 8000c02:	781b      	ldrb	r3, [r3, #0]
 8000c04:	b25b      	sxtb	r3, r3
 8000c06:	0011      	movs	r1, r2
 8000c08:	0018      	movs	r0, r3
 8000c0a:	f7ff ff5d 	bl	8000ac8 <__NVIC_SetPriority>
}
 8000c0e:	46c0      	nop			; (mov r8, r8)
 8000c10:	46bd      	mov	sp, r7
 8000c12:	b004      	add	sp, #16
 8000c14:	bd80      	pop	{r7, pc}

08000c16 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f0xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000c16:	b580      	push	{r7, lr}
 8000c18:	b082      	sub	sp, #8
 8000c1a:	af00      	add	r7, sp, #0
 8000c1c:	0002      	movs	r2, r0
 8000c1e:	1dfb      	adds	r3, r7, #7
 8000c20:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000c22:	1dfb      	adds	r3, r7, #7
 8000c24:	781b      	ldrb	r3, [r3, #0]
 8000c26:	b25b      	sxtb	r3, r3
 8000c28:	0018      	movs	r0, r3
 8000c2a:	f7ff ff33 	bl	8000a94 <__NVIC_EnableIRQ>
}
 8000c2e:	46c0      	nop			; (mov r8, r8)
 8000c30:	46bd      	mov	sp, r7
 8000c32:	b002      	add	sp, #8
 8000c34:	bd80      	pop	{r7, pc}

08000c36 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000c36:	b580      	push	{r7, lr}
 8000c38:	b082      	sub	sp, #8
 8000c3a:	af00      	add	r7, sp, #0
 8000c3c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000c3e:	687b      	ldr	r3, [r7, #4]
 8000c40:	0018      	movs	r0, r3
 8000c42:	f7ff ffaf 	bl	8000ba4 <SysTick_Config>
 8000c46:	0003      	movs	r3, r0
}
 8000c48:	0018      	movs	r0, r3
 8000c4a:	46bd      	mov	sp, r7
 8000c4c:	b002      	add	sp, #8
 8000c4e:	bd80      	pop	{r7, pc}

08000c50 <HAL_DMA_Abort>:
  * @param  hdma  pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8000c50:	b580      	push	{r7, lr}
 8000c52:	b082      	sub	sp, #8
 8000c54:	af00      	add	r7, sp, #0
 8000c56:	6078      	str	r0, [r7, #4]
  if (hdma->State != HAL_DMA_STATE_BUSY)
 8000c58:	687b      	ldr	r3, [r7, #4]
 8000c5a:	2221      	movs	r2, #33	; 0x21
 8000c5c:	5c9b      	ldrb	r3, [r3, r2]
 8000c5e:	b2db      	uxtb	r3, r3
 8000c60:	2b02      	cmp	r3, #2
 8000c62:	d008      	beq.n	8000c76 <HAL_DMA_Abort+0x26>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000c64:	687b      	ldr	r3, [r7, #4]
 8000c66:	2204      	movs	r2, #4
 8000c68:	639a      	str	r2, [r3, #56]	; 0x38

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000c6a:	687b      	ldr	r3, [r7, #4]
 8000c6c:	2220      	movs	r2, #32
 8000c6e:	2100      	movs	r1, #0
 8000c70:	5499      	strb	r1, [r3, r2]

    return HAL_ERROR;
 8000c72:	2301      	movs	r3, #1
 8000c74:	e020      	b.n	8000cb8 <HAL_DMA_Abort+0x68>
  }
  else
  {
    /* Disable DMA IT */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8000c76:	687b      	ldr	r3, [r7, #4]
 8000c78:	681b      	ldr	r3, [r3, #0]
 8000c7a:	681a      	ldr	r2, [r3, #0]
 8000c7c:	687b      	ldr	r3, [r7, #4]
 8000c7e:	681b      	ldr	r3, [r3, #0]
 8000c80:	210e      	movs	r1, #14
 8000c82:	438a      	bics	r2, r1
 8000c84:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 8000c86:	687b      	ldr	r3, [r7, #4]
 8000c88:	681b      	ldr	r3, [r3, #0]
 8000c8a:	681a      	ldr	r2, [r3, #0]
 8000c8c:	687b      	ldr	r3, [r7, #4]
 8000c8e:	681b      	ldr	r3, [r3, #0]
 8000c90:	2101      	movs	r1, #1
 8000c92:	438a      	bics	r2, r1
 8000c94:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_FLAG_GL1 << hdma->ChannelIndex);
 8000c96:	687b      	ldr	r3, [r7, #4]
 8000c98:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000c9a:	687b      	ldr	r3, [r7, #4]
 8000c9c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000c9e:	2101      	movs	r1, #1
 8000ca0:	4091      	lsls	r1, r2
 8000ca2:	000a      	movs	r2, r1
 8000ca4:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8000ca6:	687b      	ldr	r3, [r7, #4]
 8000ca8:	2221      	movs	r2, #33	; 0x21
 8000caa:	2101      	movs	r1, #1
 8000cac:	5499      	strb	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);
 8000cae:	687b      	ldr	r3, [r7, #4]
 8000cb0:	2220      	movs	r2, #32
 8000cb2:	2100      	movs	r1, #0
 8000cb4:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8000cb6:	2300      	movs	r3, #0
}
 8000cb8:	0018      	movs	r0, r3
 8000cba:	46bd      	mov	sp, r7
 8000cbc:	b002      	add	sp, #8
 8000cbe:	bd80      	pop	{r7, pc}

08000cc0 <HAL_DMA_Abort_IT>:
  * @param  hdma  pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8000cc0:	b580      	push	{r7, lr}
 8000cc2:	b084      	sub	sp, #16
 8000cc4:	af00      	add	r7, sp, #0
 8000cc6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8000cc8:	210f      	movs	r1, #15
 8000cca:	187b      	adds	r3, r7, r1
 8000ccc:	2200      	movs	r2, #0
 8000cce:	701a      	strb	r2, [r3, #0]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 8000cd0:	687b      	ldr	r3, [r7, #4]
 8000cd2:	2221      	movs	r2, #33	; 0x21
 8000cd4:	5c9b      	ldrb	r3, [r3, r2]
 8000cd6:	b2db      	uxtb	r3, r3
 8000cd8:	2b02      	cmp	r3, #2
 8000cda:	d006      	beq.n	8000cea <HAL_DMA_Abort_IT+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000cdc:	687b      	ldr	r3, [r7, #4]
 8000cde:	2204      	movs	r2, #4
 8000ce0:	639a      	str	r2, [r3, #56]	; 0x38

    status = HAL_ERROR;
 8000ce2:	187b      	adds	r3, r7, r1
 8000ce4:	2201      	movs	r2, #1
 8000ce6:	701a      	strb	r2, [r3, #0]
 8000ce8:	e028      	b.n	8000d3c <HAL_DMA_Abort_IT+0x7c>
  }
  else
  {

    /* Disable DMA IT */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8000cea:	687b      	ldr	r3, [r7, #4]
 8000cec:	681b      	ldr	r3, [r3, #0]
 8000cee:	681a      	ldr	r2, [r3, #0]
 8000cf0:	687b      	ldr	r3, [r7, #4]
 8000cf2:	681b      	ldr	r3, [r3, #0]
 8000cf4:	210e      	movs	r1, #14
 8000cf6:	438a      	bics	r2, r1
 8000cf8:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 8000cfa:	687b      	ldr	r3, [r7, #4]
 8000cfc:	681b      	ldr	r3, [r3, #0]
 8000cfe:	681a      	ldr	r2, [r3, #0]
 8000d00:	687b      	ldr	r3, [r7, #4]
 8000d02:	681b      	ldr	r3, [r3, #0]
 8000d04:	2101      	movs	r1, #1
 8000d06:	438a      	bics	r2, r1
 8000d08:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 8000d0a:	687b      	ldr	r3, [r7, #4]
 8000d0c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000d0e:	687b      	ldr	r3, [r7, #4]
 8000d10:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000d12:	2101      	movs	r1, #1
 8000d14:	4091      	lsls	r1, r2
 8000d16:	000a      	movs	r2, r1
 8000d18:	605a      	str	r2, [r3, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8000d1a:	687b      	ldr	r3, [r7, #4]
 8000d1c:	2221      	movs	r2, #33	; 0x21
 8000d1e:	2101      	movs	r1, #1
 8000d20:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000d22:	687b      	ldr	r3, [r7, #4]
 8000d24:	2220      	movs	r2, #32
 8000d26:	2100      	movs	r1, #0
 8000d28:	5499      	strb	r1, [r3, r2]

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 8000d2a:	687b      	ldr	r3, [r7, #4]
 8000d2c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000d2e:	2b00      	cmp	r3, #0
 8000d30:	d004      	beq.n	8000d3c <HAL_DMA_Abort_IT+0x7c>
    {
      hdma->XferAbortCallback(hdma);
 8000d32:	687b      	ldr	r3, [r7, #4]
 8000d34:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000d36:	687a      	ldr	r2, [r7, #4]
 8000d38:	0010      	movs	r0, r2
 8000d3a:	4798      	blx	r3
    }
  }
  return status;
 8000d3c:	230f      	movs	r3, #15
 8000d3e:	18fb      	adds	r3, r7, r3
 8000d40:	781b      	ldrb	r3, [r3, #0]
}
 8000d42:	0018      	movs	r0, r3
 8000d44:	46bd      	mov	sp, r7
 8000d46:	b004      	add	sp, #16
 8000d48:	bd80      	pop	{r7, pc}
	...

08000d4c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000d4c:	b580      	push	{r7, lr}
 8000d4e:	b086      	sub	sp, #24
 8000d50:	af00      	add	r7, sp, #0
 8000d52:	6078      	str	r0, [r7, #4]
 8000d54:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000d56:	2300      	movs	r3, #0
 8000d58:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000d5a:	e155      	b.n	8001008 <HAL_GPIO_Init+0x2bc>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8000d5c:	683b      	ldr	r3, [r7, #0]
 8000d5e:	681b      	ldr	r3, [r3, #0]
 8000d60:	2101      	movs	r1, #1
 8000d62:	697a      	ldr	r2, [r7, #20]
 8000d64:	4091      	lsls	r1, r2
 8000d66:	000a      	movs	r2, r1
 8000d68:	4013      	ands	r3, r2
 8000d6a:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8000d6c:	68fb      	ldr	r3, [r7, #12]
 8000d6e:	2b00      	cmp	r3, #0
 8000d70:	d100      	bne.n	8000d74 <HAL_GPIO_Init+0x28>
 8000d72:	e146      	b.n	8001002 <HAL_GPIO_Init+0x2b6>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8000d74:	683b      	ldr	r3, [r7, #0]
 8000d76:	685b      	ldr	r3, [r3, #4]
 8000d78:	2203      	movs	r2, #3
 8000d7a:	4013      	ands	r3, r2
 8000d7c:	2b01      	cmp	r3, #1
 8000d7e:	d005      	beq.n	8000d8c <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8000d80:	683b      	ldr	r3, [r7, #0]
 8000d82:	685b      	ldr	r3, [r3, #4]
 8000d84:	2203      	movs	r2, #3
 8000d86:	4013      	ands	r3, r2
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8000d88:	2b02      	cmp	r3, #2
 8000d8a:	d130      	bne.n	8000dee <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000d8c:	687b      	ldr	r3, [r7, #4]
 8000d8e:	689b      	ldr	r3, [r3, #8]
 8000d90:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8000d92:	697b      	ldr	r3, [r7, #20]
 8000d94:	005b      	lsls	r3, r3, #1
 8000d96:	2203      	movs	r2, #3
 8000d98:	409a      	lsls	r2, r3
 8000d9a:	0013      	movs	r3, r2
 8000d9c:	43da      	mvns	r2, r3
 8000d9e:	693b      	ldr	r3, [r7, #16]
 8000da0:	4013      	ands	r3, r2
 8000da2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8000da4:	683b      	ldr	r3, [r7, #0]
 8000da6:	68da      	ldr	r2, [r3, #12]
 8000da8:	697b      	ldr	r3, [r7, #20]
 8000daa:	005b      	lsls	r3, r3, #1
 8000dac:	409a      	lsls	r2, r3
 8000dae:	0013      	movs	r3, r2
 8000db0:	693a      	ldr	r2, [r7, #16]
 8000db2:	4313      	orrs	r3, r2
 8000db4:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8000db6:	687b      	ldr	r3, [r7, #4]
 8000db8:	693a      	ldr	r2, [r7, #16]
 8000dba:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000dbc:	687b      	ldr	r3, [r7, #4]
 8000dbe:	685b      	ldr	r3, [r3, #4]
 8000dc0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000dc2:	2201      	movs	r2, #1
 8000dc4:	697b      	ldr	r3, [r7, #20]
 8000dc6:	409a      	lsls	r2, r3
 8000dc8:	0013      	movs	r3, r2
 8000dca:	43da      	mvns	r2, r3
 8000dcc:	693b      	ldr	r3, [r7, #16]
 8000dce:	4013      	ands	r3, r2
 8000dd0:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000dd2:	683b      	ldr	r3, [r7, #0]
 8000dd4:	685b      	ldr	r3, [r3, #4]
 8000dd6:	091b      	lsrs	r3, r3, #4
 8000dd8:	2201      	movs	r2, #1
 8000dda:	401a      	ands	r2, r3
 8000ddc:	697b      	ldr	r3, [r7, #20]
 8000dde:	409a      	lsls	r2, r3
 8000de0:	0013      	movs	r3, r2
 8000de2:	693a      	ldr	r2, [r7, #16]
 8000de4:	4313      	orrs	r3, r2
 8000de6:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8000de8:	687b      	ldr	r3, [r7, #4]
 8000dea:	693a      	ldr	r2, [r7, #16]
 8000dec:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000dee:	683b      	ldr	r3, [r7, #0]
 8000df0:	685b      	ldr	r3, [r3, #4]
 8000df2:	2203      	movs	r2, #3
 8000df4:	4013      	ands	r3, r2
 8000df6:	2b03      	cmp	r3, #3
 8000df8:	d017      	beq.n	8000e2a <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8000dfa:	687b      	ldr	r3, [r7, #4]
 8000dfc:	68db      	ldr	r3, [r3, #12]
 8000dfe:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8000e00:	697b      	ldr	r3, [r7, #20]
 8000e02:	005b      	lsls	r3, r3, #1
 8000e04:	2203      	movs	r2, #3
 8000e06:	409a      	lsls	r2, r3
 8000e08:	0013      	movs	r3, r2
 8000e0a:	43da      	mvns	r2, r3
 8000e0c:	693b      	ldr	r3, [r7, #16]
 8000e0e:	4013      	ands	r3, r2
 8000e10:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8000e12:	683b      	ldr	r3, [r7, #0]
 8000e14:	689a      	ldr	r2, [r3, #8]
 8000e16:	697b      	ldr	r3, [r7, #20]
 8000e18:	005b      	lsls	r3, r3, #1
 8000e1a:	409a      	lsls	r2, r3
 8000e1c:	0013      	movs	r3, r2
 8000e1e:	693a      	ldr	r2, [r7, #16]
 8000e20:	4313      	orrs	r3, r2
 8000e22:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8000e24:	687b      	ldr	r3, [r7, #4]
 8000e26:	693a      	ldr	r2, [r7, #16]
 8000e28:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000e2a:	683b      	ldr	r3, [r7, #0]
 8000e2c:	685b      	ldr	r3, [r3, #4]
 8000e2e:	2203      	movs	r2, #3
 8000e30:	4013      	ands	r3, r2
 8000e32:	2b02      	cmp	r3, #2
 8000e34:	d123      	bne.n	8000e7e <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8000e36:	697b      	ldr	r3, [r7, #20]
 8000e38:	08da      	lsrs	r2, r3, #3
 8000e3a:	687b      	ldr	r3, [r7, #4]
 8000e3c:	3208      	adds	r2, #8
 8000e3e:	0092      	lsls	r2, r2, #2
 8000e40:	58d3      	ldr	r3, [r2, r3]
 8000e42:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8000e44:	697b      	ldr	r3, [r7, #20]
 8000e46:	2207      	movs	r2, #7
 8000e48:	4013      	ands	r3, r2
 8000e4a:	009b      	lsls	r3, r3, #2
 8000e4c:	220f      	movs	r2, #15
 8000e4e:	409a      	lsls	r2, r3
 8000e50:	0013      	movs	r3, r2
 8000e52:	43da      	mvns	r2, r3
 8000e54:	693b      	ldr	r3, [r7, #16]
 8000e56:	4013      	ands	r3, r2
 8000e58:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8000e5a:	683b      	ldr	r3, [r7, #0]
 8000e5c:	691a      	ldr	r2, [r3, #16]
 8000e5e:	697b      	ldr	r3, [r7, #20]
 8000e60:	2107      	movs	r1, #7
 8000e62:	400b      	ands	r3, r1
 8000e64:	009b      	lsls	r3, r3, #2
 8000e66:	409a      	lsls	r2, r3
 8000e68:	0013      	movs	r3, r2
 8000e6a:	693a      	ldr	r2, [r7, #16]
 8000e6c:	4313      	orrs	r3, r2
 8000e6e:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8000e70:	697b      	ldr	r3, [r7, #20]
 8000e72:	08da      	lsrs	r2, r3, #3
 8000e74:	687b      	ldr	r3, [r7, #4]
 8000e76:	3208      	adds	r2, #8
 8000e78:	0092      	lsls	r2, r2, #2
 8000e7a:	6939      	ldr	r1, [r7, #16]
 8000e7c:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000e7e:	687b      	ldr	r3, [r7, #4]
 8000e80:	681b      	ldr	r3, [r3, #0]
 8000e82:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8000e84:	697b      	ldr	r3, [r7, #20]
 8000e86:	005b      	lsls	r3, r3, #1
 8000e88:	2203      	movs	r2, #3
 8000e8a:	409a      	lsls	r2, r3
 8000e8c:	0013      	movs	r3, r2
 8000e8e:	43da      	mvns	r2, r3
 8000e90:	693b      	ldr	r3, [r7, #16]
 8000e92:	4013      	ands	r3, r2
 8000e94:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8000e96:	683b      	ldr	r3, [r7, #0]
 8000e98:	685b      	ldr	r3, [r3, #4]
 8000e9a:	2203      	movs	r2, #3
 8000e9c:	401a      	ands	r2, r3
 8000e9e:	697b      	ldr	r3, [r7, #20]
 8000ea0:	005b      	lsls	r3, r3, #1
 8000ea2:	409a      	lsls	r2, r3
 8000ea4:	0013      	movs	r3, r2
 8000ea6:	693a      	ldr	r2, [r7, #16]
 8000ea8:	4313      	orrs	r3, r2
 8000eaa:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8000eac:	687b      	ldr	r3, [r7, #4]
 8000eae:	693a      	ldr	r2, [r7, #16]
 8000eb0:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8000eb2:	683b      	ldr	r3, [r7, #0]
 8000eb4:	685a      	ldr	r2, [r3, #4]
 8000eb6:	23c0      	movs	r3, #192	; 0xc0
 8000eb8:	029b      	lsls	r3, r3, #10
 8000eba:	4013      	ands	r3, r2
 8000ebc:	d100      	bne.n	8000ec0 <HAL_GPIO_Init+0x174>
 8000ebe:	e0a0      	b.n	8001002 <HAL_GPIO_Init+0x2b6>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000ec0:	4b57      	ldr	r3, [pc, #348]	; (8001020 <HAL_GPIO_Init+0x2d4>)
 8000ec2:	699a      	ldr	r2, [r3, #24]
 8000ec4:	4b56      	ldr	r3, [pc, #344]	; (8001020 <HAL_GPIO_Init+0x2d4>)
 8000ec6:	2101      	movs	r1, #1
 8000ec8:	430a      	orrs	r2, r1
 8000eca:	619a      	str	r2, [r3, #24]
 8000ecc:	4b54      	ldr	r3, [pc, #336]	; (8001020 <HAL_GPIO_Init+0x2d4>)
 8000ece:	699b      	ldr	r3, [r3, #24]
 8000ed0:	2201      	movs	r2, #1
 8000ed2:	4013      	ands	r3, r2
 8000ed4:	60bb      	str	r3, [r7, #8]
 8000ed6:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8000ed8:	4a52      	ldr	r2, [pc, #328]	; (8001024 <HAL_GPIO_Init+0x2d8>)
 8000eda:	697b      	ldr	r3, [r7, #20]
 8000edc:	089b      	lsrs	r3, r3, #2
 8000ede:	3302      	adds	r3, #2
 8000ee0:	009b      	lsls	r3, r3, #2
 8000ee2:	589b      	ldr	r3, [r3, r2]
 8000ee4:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8000ee6:	697b      	ldr	r3, [r7, #20]
 8000ee8:	2203      	movs	r2, #3
 8000eea:	4013      	ands	r3, r2
 8000eec:	009b      	lsls	r3, r3, #2
 8000eee:	220f      	movs	r2, #15
 8000ef0:	409a      	lsls	r2, r3
 8000ef2:	0013      	movs	r3, r2
 8000ef4:	43da      	mvns	r2, r3
 8000ef6:	693b      	ldr	r3, [r7, #16]
 8000ef8:	4013      	ands	r3, r2
 8000efa:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8000efc:	687a      	ldr	r2, [r7, #4]
 8000efe:	2390      	movs	r3, #144	; 0x90
 8000f00:	05db      	lsls	r3, r3, #23
 8000f02:	429a      	cmp	r2, r3
 8000f04:	d019      	beq.n	8000f3a <HAL_GPIO_Init+0x1ee>
 8000f06:	687b      	ldr	r3, [r7, #4]
 8000f08:	4a47      	ldr	r2, [pc, #284]	; (8001028 <HAL_GPIO_Init+0x2dc>)
 8000f0a:	4293      	cmp	r3, r2
 8000f0c:	d013      	beq.n	8000f36 <HAL_GPIO_Init+0x1ea>
 8000f0e:	687b      	ldr	r3, [r7, #4]
 8000f10:	4a46      	ldr	r2, [pc, #280]	; (800102c <HAL_GPIO_Init+0x2e0>)
 8000f12:	4293      	cmp	r3, r2
 8000f14:	d00d      	beq.n	8000f32 <HAL_GPIO_Init+0x1e6>
 8000f16:	687b      	ldr	r3, [r7, #4]
 8000f18:	4a45      	ldr	r2, [pc, #276]	; (8001030 <HAL_GPIO_Init+0x2e4>)
 8000f1a:	4293      	cmp	r3, r2
 8000f1c:	d007      	beq.n	8000f2e <HAL_GPIO_Init+0x1e2>
 8000f1e:	687b      	ldr	r3, [r7, #4]
 8000f20:	4a44      	ldr	r2, [pc, #272]	; (8001034 <HAL_GPIO_Init+0x2e8>)
 8000f22:	4293      	cmp	r3, r2
 8000f24:	d101      	bne.n	8000f2a <HAL_GPIO_Init+0x1de>
 8000f26:	2304      	movs	r3, #4
 8000f28:	e008      	b.n	8000f3c <HAL_GPIO_Init+0x1f0>
 8000f2a:	2305      	movs	r3, #5
 8000f2c:	e006      	b.n	8000f3c <HAL_GPIO_Init+0x1f0>
 8000f2e:	2303      	movs	r3, #3
 8000f30:	e004      	b.n	8000f3c <HAL_GPIO_Init+0x1f0>
 8000f32:	2302      	movs	r3, #2
 8000f34:	e002      	b.n	8000f3c <HAL_GPIO_Init+0x1f0>
 8000f36:	2301      	movs	r3, #1
 8000f38:	e000      	b.n	8000f3c <HAL_GPIO_Init+0x1f0>
 8000f3a:	2300      	movs	r3, #0
 8000f3c:	697a      	ldr	r2, [r7, #20]
 8000f3e:	2103      	movs	r1, #3
 8000f40:	400a      	ands	r2, r1
 8000f42:	0092      	lsls	r2, r2, #2
 8000f44:	4093      	lsls	r3, r2
 8000f46:	693a      	ldr	r2, [r7, #16]
 8000f48:	4313      	orrs	r3, r2
 8000f4a:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8000f4c:	4935      	ldr	r1, [pc, #212]	; (8001024 <HAL_GPIO_Init+0x2d8>)
 8000f4e:	697b      	ldr	r3, [r7, #20]
 8000f50:	089b      	lsrs	r3, r3, #2
 8000f52:	3302      	adds	r3, #2
 8000f54:	009b      	lsls	r3, r3, #2
 8000f56:	693a      	ldr	r2, [r7, #16]
 8000f58:	505a      	str	r2, [r3, r1]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8000f5a:	4b37      	ldr	r3, [pc, #220]	; (8001038 <HAL_GPIO_Init+0x2ec>)
 8000f5c:	689b      	ldr	r3, [r3, #8]
 8000f5e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000f60:	68fb      	ldr	r3, [r7, #12]
 8000f62:	43da      	mvns	r2, r3
 8000f64:	693b      	ldr	r3, [r7, #16]
 8000f66:	4013      	ands	r3, r2
 8000f68:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8000f6a:	683b      	ldr	r3, [r7, #0]
 8000f6c:	685a      	ldr	r2, [r3, #4]
 8000f6e:	2380      	movs	r3, #128	; 0x80
 8000f70:	035b      	lsls	r3, r3, #13
 8000f72:	4013      	ands	r3, r2
 8000f74:	d003      	beq.n	8000f7e <HAL_GPIO_Init+0x232>
        {
          temp |= iocurrent;
 8000f76:	693a      	ldr	r2, [r7, #16]
 8000f78:	68fb      	ldr	r3, [r7, #12]
 8000f7a:	4313      	orrs	r3, r2
 8000f7c:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8000f7e:	4b2e      	ldr	r3, [pc, #184]	; (8001038 <HAL_GPIO_Init+0x2ec>)
 8000f80:	693a      	ldr	r2, [r7, #16]
 8000f82:	609a      	str	r2, [r3, #8]

        temp = EXTI->FTSR;
 8000f84:	4b2c      	ldr	r3, [pc, #176]	; (8001038 <HAL_GPIO_Init+0x2ec>)
 8000f86:	68db      	ldr	r3, [r3, #12]
 8000f88:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000f8a:	68fb      	ldr	r3, [r7, #12]
 8000f8c:	43da      	mvns	r2, r3
 8000f8e:	693b      	ldr	r3, [r7, #16]
 8000f90:	4013      	ands	r3, r2
 8000f92:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8000f94:	683b      	ldr	r3, [r7, #0]
 8000f96:	685a      	ldr	r2, [r3, #4]
 8000f98:	2380      	movs	r3, #128	; 0x80
 8000f9a:	039b      	lsls	r3, r3, #14
 8000f9c:	4013      	ands	r3, r2
 8000f9e:	d003      	beq.n	8000fa8 <HAL_GPIO_Init+0x25c>
        {
          temp |= iocurrent;
 8000fa0:	693a      	ldr	r2, [r7, #16]
 8000fa2:	68fb      	ldr	r3, [r7, #12]
 8000fa4:	4313      	orrs	r3, r2
 8000fa6:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8000fa8:	4b23      	ldr	r3, [pc, #140]	; (8001038 <HAL_GPIO_Init+0x2ec>)
 8000faa:	693a      	ldr	r2, [r7, #16]
 8000fac:	60da      	str	r2, [r3, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR;
 8000fae:	4b22      	ldr	r3, [pc, #136]	; (8001038 <HAL_GPIO_Init+0x2ec>)
 8000fb0:	685b      	ldr	r3, [r3, #4]
 8000fb2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000fb4:	68fb      	ldr	r3, [r7, #12]
 8000fb6:	43da      	mvns	r2, r3
 8000fb8:	693b      	ldr	r3, [r7, #16]
 8000fba:	4013      	ands	r3, r2
 8000fbc:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8000fbe:	683b      	ldr	r3, [r7, #0]
 8000fc0:	685a      	ldr	r2, [r3, #4]
 8000fc2:	2380      	movs	r3, #128	; 0x80
 8000fc4:	029b      	lsls	r3, r3, #10
 8000fc6:	4013      	ands	r3, r2
 8000fc8:	d003      	beq.n	8000fd2 <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 8000fca:	693a      	ldr	r2, [r7, #16]
 8000fcc:	68fb      	ldr	r3, [r7, #12]
 8000fce:	4313      	orrs	r3, r2
 8000fd0:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8000fd2:	4b19      	ldr	r3, [pc, #100]	; (8001038 <HAL_GPIO_Init+0x2ec>)
 8000fd4:	693a      	ldr	r2, [r7, #16]
 8000fd6:	605a      	str	r2, [r3, #4]

        temp = EXTI->IMR;
 8000fd8:	4b17      	ldr	r3, [pc, #92]	; (8001038 <HAL_GPIO_Init+0x2ec>)
 8000fda:	681b      	ldr	r3, [r3, #0]
 8000fdc:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000fde:	68fb      	ldr	r3, [r7, #12]
 8000fe0:	43da      	mvns	r2, r3
 8000fe2:	693b      	ldr	r3, [r7, #16]
 8000fe4:	4013      	ands	r3, r2
 8000fe6:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8000fe8:	683b      	ldr	r3, [r7, #0]
 8000fea:	685a      	ldr	r2, [r3, #4]
 8000fec:	2380      	movs	r3, #128	; 0x80
 8000fee:	025b      	lsls	r3, r3, #9
 8000ff0:	4013      	ands	r3, r2
 8000ff2:	d003      	beq.n	8000ffc <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 8000ff4:	693a      	ldr	r2, [r7, #16]
 8000ff6:	68fb      	ldr	r3, [r7, #12]
 8000ff8:	4313      	orrs	r3, r2
 8000ffa:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8000ffc:	4b0e      	ldr	r3, [pc, #56]	; (8001038 <HAL_GPIO_Init+0x2ec>)
 8000ffe:	693a      	ldr	r2, [r7, #16]
 8001000:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 8001002:	697b      	ldr	r3, [r7, #20]
 8001004:	3301      	adds	r3, #1
 8001006:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001008:	683b      	ldr	r3, [r7, #0]
 800100a:	681a      	ldr	r2, [r3, #0]
 800100c:	697b      	ldr	r3, [r7, #20]
 800100e:	40da      	lsrs	r2, r3
 8001010:	1e13      	subs	r3, r2, #0
 8001012:	d000      	beq.n	8001016 <HAL_GPIO_Init+0x2ca>
 8001014:	e6a2      	b.n	8000d5c <HAL_GPIO_Init+0x10>
  } 
}
 8001016:	46c0      	nop			; (mov r8, r8)
 8001018:	46c0      	nop			; (mov r8, r8)
 800101a:	46bd      	mov	sp, r7
 800101c:	b006      	add	sp, #24
 800101e:	bd80      	pop	{r7, pc}
 8001020:	40021000 	.word	0x40021000
 8001024:	40010000 	.word	0x40010000
 8001028:	48000400 	.word	0x48000400
 800102c:	48000800 	.word	0x48000800
 8001030:	48000c00 	.word	0x48000c00
 8001034:	48001000 	.word	0x48001000
 8001038:	40010400 	.word	0x40010400

0800103c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800103c:	b580      	push	{r7, lr}
 800103e:	b082      	sub	sp, #8
 8001040:	af00      	add	r7, sp, #0
 8001042:	6078      	str	r0, [r7, #4]
 8001044:	0008      	movs	r0, r1
 8001046:	0011      	movs	r1, r2
 8001048:	1cbb      	adds	r3, r7, #2
 800104a:	1c02      	adds	r2, r0, #0
 800104c:	801a      	strh	r2, [r3, #0]
 800104e:	1c7b      	adds	r3, r7, #1
 8001050:	1c0a      	adds	r2, r1, #0
 8001052:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001054:	1c7b      	adds	r3, r7, #1
 8001056:	781b      	ldrb	r3, [r3, #0]
 8001058:	2b00      	cmp	r3, #0
 800105a:	d004      	beq.n	8001066 <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800105c:	1cbb      	adds	r3, r7, #2
 800105e:	881a      	ldrh	r2, [r3, #0]
 8001060:	687b      	ldr	r3, [r7, #4]
 8001062:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001064:	e003      	b.n	800106e <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001066:	1cbb      	adds	r3, r7, #2
 8001068:	881a      	ldrh	r2, [r3, #0]
 800106a:	687b      	ldr	r3, [r7, #4]
 800106c:	629a      	str	r2, [r3, #40]	; 0x28
}
 800106e:	46c0      	nop			; (mov r8, r8)
 8001070:	46bd      	mov	sp, r7
 8001072:	b002      	add	sp, #8
 8001074:	bd80      	pop	{r7, pc}
	...

08001078 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001078:	b580      	push	{r7, lr}
 800107a:	b088      	sub	sp, #32
 800107c:	af00      	add	r7, sp, #0
 800107e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  uint32_t pll_config2;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001080:	687b      	ldr	r3, [r7, #4]
 8001082:	2b00      	cmp	r3, #0
 8001084:	d102      	bne.n	800108c <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8001086:	2301      	movs	r3, #1
 8001088:	f000 fb76 	bl	8001778 <HAL_RCC_OscConfig+0x700>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800108c:	687b      	ldr	r3, [r7, #4]
 800108e:	681b      	ldr	r3, [r3, #0]
 8001090:	2201      	movs	r2, #1
 8001092:	4013      	ands	r3, r2
 8001094:	d100      	bne.n	8001098 <HAL_RCC_OscConfig+0x20>
 8001096:	e08e      	b.n	80011b6 <HAL_RCC_OscConfig+0x13e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8001098:	4bc5      	ldr	r3, [pc, #788]	; (80013b0 <HAL_RCC_OscConfig+0x338>)
 800109a:	685b      	ldr	r3, [r3, #4]
 800109c:	220c      	movs	r2, #12
 800109e:	4013      	ands	r3, r2
 80010a0:	2b04      	cmp	r3, #4
 80010a2:	d00e      	beq.n	80010c2 <HAL_RCC_OscConfig+0x4a>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80010a4:	4bc2      	ldr	r3, [pc, #776]	; (80013b0 <HAL_RCC_OscConfig+0x338>)
 80010a6:	685b      	ldr	r3, [r3, #4]
 80010a8:	220c      	movs	r2, #12
 80010aa:	4013      	ands	r3, r2
 80010ac:	2b08      	cmp	r3, #8
 80010ae:	d117      	bne.n	80010e0 <HAL_RCC_OscConfig+0x68>
 80010b0:	4bbf      	ldr	r3, [pc, #764]	; (80013b0 <HAL_RCC_OscConfig+0x338>)
 80010b2:	685a      	ldr	r2, [r3, #4]
 80010b4:	23c0      	movs	r3, #192	; 0xc0
 80010b6:	025b      	lsls	r3, r3, #9
 80010b8:	401a      	ands	r2, r3
 80010ba:	2380      	movs	r3, #128	; 0x80
 80010bc:	025b      	lsls	r3, r3, #9
 80010be:	429a      	cmp	r2, r3
 80010c0:	d10e      	bne.n	80010e0 <HAL_RCC_OscConfig+0x68>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80010c2:	4bbb      	ldr	r3, [pc, #748]	; (80013b0 <HAL_RCC_OscConfig+0x338>)
 80010c4:	681a      	ldr	r2, [r3, #0]
 80010c6:	2380      	movs	r3, #128	; 0x80
 80010c8:	029b      	lsls	r3, r3, #10
 80010ca:	4013      	ands	r3, r2
 80010cc:	d100      	bne.n	80010d0 <HAL_RCC_OscConfig+0x58>
 80010ce:	e071      	b.n	80011b4 <HAL_RCC_OscConfig+0x13c>
 80010d0:	687b      	ldr	r3, [r7, #4]
 80010d2:	685b      	ldr	r3, [r3, #4]
 80010d4:	2b00      	cmp	r3, #0
 80010d6:	d000      	beq.n	80010da <HAL_RCC_OscConfig+0x62>
 80010d8:	e06c      	b.n	80011b4 <HAL_RCC_OscConfig+0x13c>
      {
        return HAL_ERROR;
 80010da:	2301      	movs	r3, #1
 80010dc:	f000 fb4c 	bl	8001778 <HAL_RCC_OscConfig+0x700>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80010e0:	687b      	ldr	r3, [r7, #4]
 80010e2:	685b      	ldr	r3, [r3, #4]
 80010e4:	2b01      	cmp	r3, #1
 80010e6:	d107      	bne.n	80010f8 <HAL_RCC_OscConfig+0x80>
 80010e8:	4bb1      	ldr	r3, [pc, #708]	; (80013b0 <HAL_RCC_OscConfig+0x338>)
 80010ea:	681a      	ldr	r2, [r3, #0]
 80010ec:	4bb0      	ldr	r3, [pc, #704]	; (80013b0 <HAL_RCC_OscConfig+0x338>)
 80010ee:	2180      	movs	r1, #128	; 0x80
 80010f0:	0249      	lsls	r1, r1, #9
 80010f2:	430a      	orrs	r2, r1
 80010f4:	601a      	str	r2, [r3, #0]
 80010f6:	e02f      	b.n	8001158 <HAL_RCC_OscConfig+0xe0>
 80010f8:	687b      	ldr	r3, [r7, #4]
 80010fa:	685b      	ldr	r3, [r3, #4]
 80010fc:	2b00      	cmp	r3, #0
 80010fe:	d10c      	bne.n	800111a <HAL_RCC_OscConfig+0xa2>
 8001100:	4bab      	ldr	r3, [pc, #684]	; (80013b0 <HAL_RCC_OscConfig+0x338>)
 8001102:	681a      	ldr	r2, [r3, #0]
 8001104:	4baa      	ldr	r3, [pc, #680]	; (80013b0 <HAL_RCC_OscConfig+0x338>)
 8001106:	49ab      	ldr	r1, [pc, #684]	; (80013b4 <HAL_RCC_OscConfig+0x33c>)
 8001108:	400a      	ands	r2, r1
 800110a:	601a      	str	r2, [r3, #0]
 800110c:	4ba8      	ldr	r3, [pc, #672]	; (80013b0 <HAL_RCC_OscConfig+0x338>)
 800110e:	681a      	ldr	r2, [r3, #0]
 8001110:	4ba7      	ldr	r3, [pc, #668]	; (80013b0 <HAL_RCC_OscConfig+0x338>)
 8001112:	49a9      	ldr	r1, [pc, #676]	; (80013b8 <HAL_RCC_OscConfig+0x340>)
 8001114:	400a      	ands	r2, r1
 8001116:	601a      	str	r2, [r3, #0]
 8001118:	e01e      	b.n	8001158 <HAL_RCC_OscConfig+0xe0>
 800111a:	687b      	ldr	r3, [r7, #4]
 800111c:	685b      	ldr	r3, [r3, #4]
 800111e:	2b05      	cmp	r3, #5
 8001120:	d10e      	bne.n	8001140 <HAL_RCC_OscConfig+0xc8>
 8001122:	4ba3      	ldr	r3, [pc, #652]	; (80013b0 <HAL_RCC_OscConfig+0x338>)
 8001124:	681a      	ldr	r2, [r3, #0]
 8001126:	4ba2      	ldr	r3, [pc, #648]	; (80013b0 <HAL_RCC_OscConfig+0x338>)
 8001128:	2180      	movs	r1, #128	; 0x80
 800112a:	02c9      	lsls	r1, r1, #11
 800112c:	430a      	orrs	r2, r1
 800112e:	601a      	str	r2, [r3, #0]
 8001130:	4b9f      	ldr	r3, [pc, #636]	; (80013b0 <HAL_RCC_OscConfig+0x338>)
 8001132:	681a      	ldr	r2, [r3, #0]
 8001134:	4b9e      	ldr	r3, [pc, #632]	; (80013b0 <HAL_RCC_OscConfig+0x338>)
 8001136:	2180      	movs	r1, #128	; 0x80
 8001138:	0249      	lsls	r1, r1, #9
 800113a:	430a      	orrs	r2, r1
 800113c:	601a      	str	r2, [r3, #0]
 800113e:	e00b      	b.n	8001158 <HAL_RCC_OscConfig+0xe0>
 8001140:	4b9b      	ldr	r3, [pc, #620]	; (80013b0 <HAL_RCC_OscConfig+0x338>)
 8001142:	681a      	ldr	r2, [r3, #0]
 8001144:	4b9a      	ldr	r3, [pc, #616]	; (80013b0 <HAL_RCC_OscConfig+0x338>)
 8001146:	499b      	ldr	r1, [pc, #620]	; (80013b4 <HAL_RCC_OscConfig+0x33c>)
 8001148:	400a      	ands	r2, r1
 800114a:	601a      	str	r2, [r3, #0]
 800114c:	4b98      	ldr	r3, [pc, #608]	; (80013b0 <HAL_RCC_OscConfig+0x338>)
 800114e:	681a      	ldr	r2, [r3, #0]
 8001150:	4b97      	ldr	r3, [pc, #604]	; (80013b0 <HAL_RCC_OscConfig+0x338>)
 8001152:	4999      	ldr	r1, [pc, #612]	; (80013b8 <HAL_RCC_OscConfig+0x340>)
 8001154:	400a      	ands	r2, r1
 8001156:	601a      	str	r2, [r3, #0]
      

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001158:	687b      	ldr	r3, [r7, #4]
 800115a:	685b      	ldr	r3, [r3, #4]
 800115c:	2b00      	cmp	r3, #0
 800115e:	d014      	beq.n	800118a <HAL_RCC_OscConfig+0x112>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001160:	f7ff fc8e 	bl	8000a80 <HAL_GetTick>
 8001164:	0003      	movs	r3, r0
 8001166:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001168:	e008      	b.n	800117c <HAL_RCC_OscConfig+0x104>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800116a:	f7ff fc89 	bl	8000a80 <HAL_GetTick>
 800116e:	0002      	movs	r2, r0
 8001170:	69bb      	ldr	r3, [r7, #24]
 8001172:	1ad3      	subs	r3, r2, r3
 8001174:	2b64      	cmp	r3, #100	; 0x64
 8001176:	d901      	bls.n	800117c <HAL_RCC_OscConfig+0x104>
          {
            return HAL_TIMEOUT;
 8001178:	2303      	movs	r3, #3
 800117a:	e2fd      	b.n	8001778 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800117c:	4b8c      	ldr	r3, [pc, #560]	; (80013b0 <HAL_RCC_OscConfig+0x338>)
 800117e:	681a      	ldr	r2, [r3, #0]
 8001180:	2380      	movs	r3, #128	; 0x80
 8001182:	029b      	lsls	r3, r3, #10
 8001184:	4013      	ands	r3, r2
 8001186:	d0f0      	beq.n	800116a <HAL_RCC_OscConfig+0xf2>
 8001188:	e015      	b.n	80011b6 <HAL_RCC_OscConfig+0x13e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800118a:	f7ff fc79 	bl	8000a80 <HAL_GetTick>
 800118e:	0003      	movs	r3, r0
 8001190:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001192:	e008      	b.n	80011a6 <HAL_RCC_OscConfig+0x12e>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001194:	f7ff fc74 	bl	8000a80 <HAL_GetTick>
 8001198:	0002      	movs	r2, r0
 800119a:	69bb      	ldr	r3, [r7, #24]
 800119c:	1ad3      	subs	r3, r2, r3
 800119e:	2b64      	cmp	r3, #100	; 0x64
 80011a0:	d901      	bls.n	80011a6 <HAL_RCC_OscConfig+0x12e>
          {
            return HAL_TIMEOUT;
 80011a2:	2303      	movs	r3, #3
 80011a4:	e2e8      	b.n	8001778 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80011a6:	4b82      	ldr	r3, [pc, #520]	; (80013b0 <HAL_RCC_OscConfig+0x338>)
 80011a8:	681a      	ldr	r2, [r3, #0]
 80011aa:	2380      	movs	r3, #128	; 0x80
 80011ac:	029b      	lsls	r3, r3, #10
 80011ae:	4013      	ands	r3, r2
 80011b0:	d1f0      	bne.n	8001194 <HAL_RCC_OscConfig+0x11c>
 80011b2:	e000      	b.n	80011b6 <HAL_RCC_OscConfig+0x13e>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80011b4:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80011b6:	687b      	ldr	r3, [r7, #4]
 80011b8:	681b      	ldr	r3, [r3, #0]
 80011ba:	2202      	movs	r2, #2
 80011bc:	4013      	ands	r3, r2
 80011be:	d100      	bne.n	80011c2 <HAL_RCC_OscConfig+0x14a>
 80011c0:	e06c      	b.n	800129c <HAL_RCC_OscConfig+0x224>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 80011c2:	4b7b      	ldr	r3, [pc, #492]	; (80013b0 <HAL_RCC_OscConfig+0x338>)
 80011c4:	685b      	ldr	r3, [r3, #4]
 80011c6:	220c      	movs	r2, #12
 80011c8:	4013      	ands	r3, r2
 80011ca:	d00e      	beq.n	80011ea <HAL_RCC_OscConfig+0x172>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 80011cc:	4b78      	ldr	r3, [pc, #480]	; (80013b0 <HAL_RCC_OscConfig+0x338>)
 80011ce:	685b      	ldr	r3, [r3, #4]
 80011d0:	220c      	movs	r2, #12
 80011d2:	4013      	ands	r3, r2
 80011d4:	2b08      	cmp	r3, #8
 80011d6:	d11f      	bne.n	8001218 <HAL_RCC_OscConfig+0x1a0>
 80011d8:	4b75      	ldr	r3, [pc, #468]	; (80013b0 <HAL_RCC_OscConfig+0x338>)
 80011da:	685a      	ldr	r2, [r3, #4]
 80011dc:	23c0      	movs	r3, #192	; 0xc0
 80011de:	025b      	lsls	r3, r3, #9
 80011e0:	401a      	ands	r2, r3
 80011e2:	2380      	movs	r3, #128	; 0x80
 80011e4:	021b      	lsls	r3, r3, #8
 80011e6:	429a      	cmp	r2, r3
 80011e8:	d116      	bne.n	8001218 <HAL_RCC_OscConfig+0x1a0>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80011ea:	4b71      	ldr	r3, [pc, #452]	; (80013b0 <HAL_RCC_OscConfig+0x338>)
 80011ec:	681b      	ldr	r3, [r3, #0]
 80011ee:	2202      	movs	r2, #2
 80011f0:	4013      	ands	r3, r2
 80011f2:	d005      	beq.n	8001200 <HAL_RCC_OscConfig+0x188>
 80011f4:	687b      	ldr	r3, [r7, #4]
 80011f6:	68db      	ldr	r3, [r3, #12]
 80011f8:	2b01      	cmp	r3, #1
 80011fa:	d001      	beq.n	8001200 <HAL_RCC_OscConfig+0x188>
      {
        return HAL_ERROR;
 80011fc:	2301      	movs	r3, #1
 80011fe:	e2bb      	b.n	8001778 <HAL_RCC_OscConfig+0x700>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001200:	4b6b      	ldr	r3, [pc, #428]	; (80013b0 <HAL_RCC_OscConfig+0x338>)
 8001202:	681b      	ldr	r3, [r3, #0]
 8001204:	22f8      	movs	r2, #248	; 0xf8
 8001206:	4393      	bics	r3, r2
 8001208:	0019      	movs	r1, r3
 800120a:	687b      	ldr	r3, [r7, #4]
 800120c:	691b      	ldr	r3, [r3, #16]
 800120e:	00da      	lsls	r2, r3, #3
 8001210:	4b67      	ldr	r3, [pc, #412]	; (80013b0 <HAL_RCC_OscConfig+0x338>)
 8001212:	430a      	orrs	r2, r1
 8001214:	601a      	str	r2, [r3, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001216:	e041      	b.n	800129c <HAL_RCC_OscConfig+0x224>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001218:	687b      	ldr	r3, [r7, #4]
 800121a:	68db      	ldr	r3, [r3, #12]
 800121c:	2b00      	cmp	r3, #0
 800121e:	d024      	beq.n	800126a <HAL_RCC_OscConfig+0x1f2>
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001220:	4b63      	ldr	r3, [pc, #396]	; (80013b0 <HAL_RCC_OscConfig+0x338>)
 8001222:	681a      	ldr	r2, [r3, #0]
 8001224:	4b62      	ldr	r3, [pc, #392]	; (80013b0 <HAL_RCC_OscConfig+0x338>)
 8001226:	2101      	movs	r1, #1
 8001228:	430a      	orrs	r2, r1
 800122a:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800122c:	f7ff fc28 	bl	8000a80 <HAL_GetTick>
 8001230:	0003      	movs	r3, r0
 8001232:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001234:	e008      	b.n	8001248 <HAL_RCC_OscConfig+0x1d0>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001236:	f7ff fc23 	bl	8000a80 <HAL_GetTick>
 800123a:	0002      	movs	r2, r0
 800123c:	69bb      	ldr	r3, [r7, #24]
 800123e:	1ad3      	subs	r3, r2, r3
 8001240:	2b02      	cmp	r3, #2
 8001242:	d901      	bls.n	8001248 <HAL_RCC_OscConfig+0x1d0>
          {
            return HAL_TIMEOUT;
 8001244:	2303      	movs	r3, #3
 8001246:	e297      	b.n	8001778 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001248:	4b59      	ldr	r3, [pc, #356]	; (80013b0 <HAL_RCC_OscConfig+0x338>)
 800124a:	681b      	ldr	r3, [r3, #0]
 800124c:	2202      	movs	r2, #2
 800124e:	4013      	ands	r3, r2
 8001250:	d0f1      	beq.n	8001236 <HAL_RCC_OscConfig+0x1be>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001252:	4b57      	ldr	r3, [pc, #348]	; (80013b0 <HAL_RCC_OscConfig+0x338>)
 8001254:	681b      	ldr	r3, [r3, #0]
 8001256:	22f8      	movs	r2, #248	; 0xf8
 8001258:	4393      	bics	r3, r2
 800125a:	0019      	movs	r1, r3
 800125c:	687b      	ldr	r3, [r7, #4]
 800125e:	691b      	ldr	r3, [r3, #16]
 8001260:	00da      	lsls	r2, r3, #3
 8001262:	4b53      	ldr	r3, [pc, #332]	; (80013b0 <HAL_RCC_OscConfig+0x338>)
 8001264:	430a      	orrs	r2, r1
 8001266:	601a      	str	r2, [r3, #0]
 8001268:	e018      	b.n	800129c <HAL_RCC_OscConfig+0x224>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800126a:	4b51      	ldr	r3, [pc, #324]	; (80013b0 <HAL_RCC_OscConfig+0x338>)
 800126c:	681a      	ldr	r2, [r3, #0]
 800126e:	4b50      	ldr	r3, [pc, #320]	; (80013b0 <HAL_RCC_OscConfig+0x338>)
 8001270:	2101      	movs	r1, #1
 8001272:	438a      	bics	r2, r1
 8001274:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001276:	f7ff fc03 	bl	8000a80 <HAL_GetTick>
 800127a:	0003      	movs	r3, r0
 800127c:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800127e:	e008      	b.n	8001292 <HAL_RCC_OscConfig+0x21a>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001280:	f7ff fbfe 	bl	8000a80 <HAL_GetTick>
 8001284:	0002      	movs	r2, r0
 8001286:	69bb      	ldr	r3, [r7, #24]
 8001288:	1ad3      	subs	r3, r2, r3
 800128a:	2b02      	cmp	r3, #2
 800128c:	d901      	bls.n	8001292 <HAL_RCC_OscConfig+0x21a>
          {
            return HAL_TIMEOUT;
 800128e:	2303      	movs	r3, #3
 8001290:	e272      	b.n	8001778 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001292:	4b47      	ldr	r3, [pc, #284]	; (80013b0 <HAL_RCC_OscConfig+0x338>)
 8001294:	681b      	ldr	r3, [r3, #0]
 8001296:	2202      	movs	r2, #2
 8001298:	4013      	ands	r3, r2
 800129a:	d1f1      	bne.n	8001280 <HAL_RCC_OscConfig+0x208>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800129c:	687b      	ldr	r3, [r7, #4]
 800129e:	681b      	ldr	r3, [r3, #0]
 80012a0:	2208      	movs	r2, #8
 80012a2:	4013      	ands	r3, r2
 80012a4:	d036      	beq.n	8001314 <HAL_RCC_OscConfig+0x29c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80012a6:	687b      	ldr	r3, [r7, #4]
 80012a8:	69db      	ldr	r3, [r3, #28]
 80012aa:	2b00      	cmp	r3, #0
 80012ac:	d019      	beq.n	80012e2 <HAL_RCC_OscConfig+0x26a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80012ae:	4b40      	ldr	r3, [pc, #256]	; (80013b0 <HAL_RCC_OscConfig+0x338>)
 80012b0:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80012b2:	4b3f      	ldr	r3, [pc, #252]	; (80013b0 <HAL_RCC_OscConfig+0x338>)
 80012b4:	2101      	movs	r1, #1
 80012b6:	430a      	orrs	r2, r1
 80012b8:	625a      	str	r2, [r3, #36]	; 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80012ba:	f7ff fbe1 	bl	8000a80 <HAL_GetTick>
 80012be:	0003      	movs	r3, r0
 80012c0:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80012c2:	e008      	b.n	80012d6 <HAL_RCC_OscConfig+0x25e>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80012c4:	f7ff fbdc 	bl	8000a80 <HAL_GetTick>
 80012c8:	0002      	movs	r2, r0
 80012ca:	69bb      	ldr	r3, [r7, #24]
 80012cc:	1ad3      	subs	r3, r2, r3
 80012ce:	2b02      	cmp	r3, #2
 80012d0:	d901      	bls.n	80012d6 <HAL_RCC_OscConfig+0x25e>
        {
          return HAL_TIMEOUT;
 80012d2:	2303      	movs	r3, #3
 80012d4:	e250      	b.n	8001778 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80012d6:	4b36      	ldr	r3, [pc, #216]	; (80013b0 <HAL_RCC_OscConfig+0x338>)
 80012d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80012da:	2202      	movs	r2, #2
 80012dc:	4013      	ands	r3, r2
 80012de:	d0f1      	beq.n	80012c4 <HAL_RCC_OscConfig+0x24c>
 80012e0:	e018      	b.n	8001314 <HAL_RCC_OscConfig+0x29c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80012e2:	4b33      	ldr	r3, [pc, #204]	; (80013b0 <HAL_RCC_OscConfig+0x338>)
 80012e4:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80012e6:	4b32      	ldr	r3, [pc, #200]	; (80013b0 <HAL_RCC_OscConfig+0x338>)
 80012e8:	2101      	movs	r1, #1
 80012ea:	438a      	bics	r2, r1
 80012ec:	625a      	str	r2, [r3, #36]	; 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80012ee:	f7ff fbc7 	bl	8000a80 <HAL_GetTick>
 80012f2:	0003      	movs	r3, r0
 80012f4:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80012f6:	e008      	b.n	800130a <HAL_RCC_OscConfig+0x292>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80012f8:	f7ff fbc2 	bl	8000a80 <HAL_GetTick>
 80012fc:	0002      	movs	r2, r0
 80012fe:	69bb      	ldr	r3, [r7, #24]
 8001300:	1ad3      	subs	r3, r2, r3
 8001302:	2b02      	cmp	r3, #2
 8001304:	d901      	bls.n	800130a <HAL_RCC_OscConfig+0x292>
        {
          return HAL_TIMEOUT;
 8001306:	2303      	movs	r3, #3
 8001308:	e236      	b.n	8001778 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800130a:	4b29      	ldr	r3, [pc, #164]	; (80013b0 <HAL_RCC_OscConfig+0x338>)
 800130c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800130e:	2202      	movs	r2, #2
 8001310:	4013      	ands	r3, r2
 8001312:	d1f1      	bne.n	80012f8 <HAL_RCC_OscConfig+0x280>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001314:	687b      	ldr	r3, [r7, #4]
 8001316:	681b      	ldr	r3, [r3, #0]
 8001318:	2204      	movs	r2, #4
 800131a:	4013      	ands	r3, r2
 800131c:	d100      	bne.n	8001320 <HAL_RCC_OscConfig+0x2a8>
 800131e:	e0b5      	b.n	800148c <HAL_RCC_OscConfig+0x414>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001320:	201f      	movs	r0, #31
 8001322:	183b      	adds	r3, r7, r0
 8001324:	2200      	movs	r2, #0
 8001326:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001328:	4b21      	ldr	r3, [pc, #132]	; (80013b0 <HAL_RCC_OscConfig+0x338>)
 800132a:	69da      	ldr	r2, [r3, #28]
 800132c:	2380      	movs	r3, #128	; 0x80
 800132e:	055b      	lsls	r3, r3, #21
 8001330:	4013      	ands	r3, r2
 8001332:	d110      	bne.n	8001356 <HAL_RCC_OscConfig+0x2de>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001334:	4b1e      	ldr	r3, [pc, #120]	; (80013b0 <HAL_RCC_OscConfig+0x338>)
 8001336:	69da      	ldr	r2, [r3, #28]
 8001338:	4b1d      	ldr	r3, [pc, #116]	; (80013b0 <HAL_RCC_OscConfig+0x338>)
 800133a:	2180      	movs	r1, #128	; 0x80
 800133c:	0549      	lsls	r1, r1, #21
 800133e:	430a      	orrs	r2, r1
 8001340:	61da      	str	r2, [r3, #28]
 8001342:	4b1b      	ldr	r3, [pc, #108]	; (80013b0 <HAL_RCC_OscConfig+0x338>)
 8001344:	69da      	ldr	r2, [r3, #28]
 8001346:	2380      	movs	r3, #128	; 0x80
 8001348:	055b      	lsls	r3, r3, #21
 800134a:	4013      	ands	r3, r2
 800134c:	60fb      	str	r3, [r7, #12]
 800134e:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8001350:	183b      	adds	r3, r7, r0
 8001352:	2201      	movs	r2, #1
 8001354:	701a      	strb	r2, [r3, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001356:	4b19      	ldr	r3, [pc, #100]	; (80013bc <HAL_RCC_OscConfig+0x344>)
 8001358:	681a      	ldr	r2, [r3, #0]
 800135a:	2380      	movs	r3, #128	; 0x80
 800135c:	005b      	lsls	r3, r3, #1
 800135e:	4013      	ands	r3, r2
 8001360:	d11a      	bne.n	8001398 <HAL_RCC_OscConfig+0x320>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001362:	4b16      	ldr	r3, [pc, #88]	; (80013bc <HAL_RCC_OscConfig+0x344>)
 8001364:	681a      	ldr	r2, [r3, #0]
 8001366:	4b15      	ldr	r3, [pc, #84]	; (80013bc <HAL_RCC_OscConfig+0x344>)
 8001368:	2180      	movs	r1, #128	; 0x80
 800136a:	0049      	lsls	r1, r1, #1
 800136c:	430a      	orrs	r2, r1
 800136e:	601a      	str	r2, [r3, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001370:	f7ff fb86 	bl	8000a80 <HAL_GetTick>
 8001374:	0003      	movs	r3, r0
 8001376:	61bb      	str	r3, [r7, #24]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001378:	e008      	b.n	800138c <HAL_RCC_OscConfig+0x314>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800137a:	f7ff fb81 	bl	8000a80 <HAL_GetTick>
 800137e:	0002      	movs	r2, r0
 8001380:	69bb      	ldr	r3, [r7, #24]
 8001382:	1ad3      	subs	r3, r2, r3
 8001384:	2b64      	cmp	r3, #100	; 0x64
 8001386:	d901      	bls.n	800138c <HAL_RCC_OscConfig+0x314>
        {
          return HAL_TIMEOUT;
 8001388:	2303      	movs	r3, #3
 800138a:	e1f5      	b.n	8001778 <HAL_RCC_OscConfig+0x700>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800138c:	4b0b      	ldr	r3, [pc, #44]	; (80013bc <HAL_RCC_OscConfig+0x344>)
 800138e:	681a      	ldr	r2, [r3, #0]
 8001390:	2380      	movs	r3, #128	; 0x80
 8001392:	005b      	lsls	r3, r3, #1
 8001394:	4013      	ands	r3, r2
 8001396:	d0f0      	beq.n	800137a <HAL_RCC_OscConfig+0x302>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001398:	687b      	ldr	r3, [r7, #4]
 800139a:	689b      	ldr	r3, [r3, #8]
 800139c:	2b01      	cmp	r3, #1
 800139e:	d10f      	bne.n	80013c0 <HAL_RCC_OscConfig+0x348>
 80013a0:	4b03      	ldr	r3, [pc, #12]	; (80013b0 <HAL_RCC_OscConfig+0x338>)
 80013a2:	6a1a      	ldr	r2, [r3, #32]
 80013a4:	4b02      	ldr	r3, [pc, #8]	; (80013b0 <HAL_RCC_OscConfig+0x338>)
 80013a6:	2101      	movs	r1, #1
 80013a8:	430a      	orrs	r2, r1
 80013aa:	621a      	str	r2, [r3, #32]
 80013ac:	e036      	b.n	800141c <HAL_RCC_OscConfig+0x3a4>
 80013ae:	46c0      	nop			; (mov r8, r8)
 80013b0:	40021000 	.word	0x40021000
 80013b4:	fffeffff 	.word	0xfffeffff
 80013b8:	fffbffff 	.word	0xfffbffff
 80013bc:	40007000 	.word	0x40007000
 80013c0:	687b      	ldr	r3, [r7, #4]
 80013c2:	689b      	ldr	r3, [r3, #8]
 80013c4:	2b00      	cmp	r3, #0
 80013c6:	d10c      	bne.n	80013e2 <HAL_RCC_OscConfig+0x36a>
 80013c8:	4bca      	ldr	r3, [pc, #808]	; (80016f4 <HAL_RCC_OscConfig+0x67c>)
 80013ca:	6a1a      	ldr	r2, [r3, #32]
 80013cc:	4bc9      	ldr	r3, [pc, #804]	; (80016f4 <HAL_RCC_OscConfig+0x67c>)
 80013ce:	2101      	movs	r1, #1
 80013d0:	438a      	bics	r2, r1
 80013d2:	621a      	str	r2, [r3, #32]
 80013d4:	4bc7      	ldr	r3, [pc, #796]	; (80016f4 <HAL_RCC_OscConfig+0x67c>)
 80013d6:	6a1a      	ldr	r2, [r3, #32]
 80013d8:	4bc6      	ldr	r3, [pc, #792]	; (80016f4 <HAL_RCC_OscConfig+0x67c>)
 80013da:	2104      	movs	r1, #4
 80013dc:	438a      	bics	r2, r1
 80013de:	621a      	str	r2, [r3, #32]
 80013e0:	e01c      	b.n	800141c <HAL_RCC_OscConfig+0x3a4>
 80013e2:	687b      	ldr	r3, [r7, #4]
 80013e4:	689b      	ldr	r3, [r3, #8]
 80013e6:	2b05      	cmp	r3, #5
 80013e8:	d10c      	bne.n	8001404 <HAL_RCC_OscConfig+0x38c>
 80013ea:	4bc2      	ldr	r3, [pc, #776]	; (80016f4 <HAL_RCC_OscConfig+0x67c>)
 80013ec:	6a1a      	ldr	r2, [r3, #32]
 80013ee:	4bc1      	ldr	r3, [pc, #772]	; (80016f4 <HAL_RCC_OscConfig+0x67c>)
 80013f0:	2104      	movs	r1, #4
 80013f2:	430a      	orrs	r2, r1
 80013f4:	621a      	str	r2, [r3, #32]
 80013f6:	4bbf      	ldr	r3, [pc, #764]	; (80016f4 <HAL_RCC_OscConfig+0x67c>)
 80013f8:	6a1a      	ldr	r2, [r3, #32]
 80013fa:	4bbe      	ldr	r3, [pc, #760]	; (80016f4 <HAL_RCC_OscConfig+0x67c>)
 80013fc:	2101      	movs	r1, #1
 80013fe:	430a      	orrs	r2, r1
 8001400:	621a      	str	r2, [r3, #32]
 8001402:	e00b      	b.n	800141c <HAL_RCC_OscConfig+0x3a4>
 8001404:	4bbb      	ldr	r3, [pc, #748]	; (80016f4 <HAL_RCC_OscConfig+0x67c>)
 8001406:	6a1a      	ldr	r2, [r3, #32]
 8001408:	4bba      	ldr	r3, [pc, #744]	; (80016f4 <HAL_RCC_OscConfig+0x67c>)
 800140a:	2101      	movs	r1, #1
 800140c:	438a      	bics	r2, r1
 800140e:	621a      	str	r2, [r3, #32]
 8001410:	4bb8      	ldr	r3, [pc, #736]	; (80016f4 <HAL_RCC_OscConfig+0x67c>)
 8001412:	6a1a      	ldr	r2, [r3, #32]
 8001414:	4bb7      	ldr	r3, [pc, #732]	; (80016f4 <HAL_RCC_OscConfig+0x67c>)
 8001416:	2104      	movs	r1, #4
 8001418:	438a      	bics	r2, r1
 800141a:	621a      	str	r2, [r3, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800141c:	687b      	ldr	r3, [r7, #4]
 800141e:	689b      	ldr	r3, [r3, #8]
 8001420:	2b00      	cmp	r3, #0
 8001422:	d014      	beq.n	800144e <HAL_RCC_OscConfig+0x3d6>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001424:	f7ff fb2c 	bl	8000a80 <HAL_GetTick>
 8001428:	0003      	movs	r3, r0
 800142a:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800142c:	e009      	b.n	8001442 <HAL_RCC_OscConfig+0x3ca>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800142e:	f7ff fb27 	bl	8000a80 <HAL_GetTick>
 8001432:	0002      	movs	r2, r0
 8001434:	69bb      	ldr	r3, [r7, #24]
 8001436:	1ad3      	subs	r3, r2, r3
 8001438:	4aaf      	ldr	r2, [pc, #700]	; (80016f8 <HAL_RCC_OscConfig+0x680>)
 800143a:	4293      	cmp	r3, r2
 800143c:	d901      	bls.n	8001442 <HAL_RCC_OscConfig+0x3ca>
        {
          return HAL_TIMEOUT;
 800143e:	2303      	movs	r3, #3
 8001440:	e19a      	b.n	8001778 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001442:	4bac      	ldr	r3, [pc, #688]	; (80016f4 <HAL_RCC_OscConfig+0x67c>)
 8001444:	6a1b      	ldr	r3, [r3, #32]
 8001446:	2202      	movs	r2, #2
 8001448:	4013      	ands	r3, r2
 800144a:	d0f0      	beq.n	800142e <HAL_RCC_OscConfig+0x3b6>
 800144c:	e013      	b.n	8001476 <HAL_RCC_OscConfig+0x3fe>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800144e:	f7ff fb17 	bl	8000a80 <HAL_GetTick>
 8001452:	0003      	movs	r3, r0
 8001454:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001456:	e009      	b.n	800146c <HAL_RCC_OscConfig+0x3f4>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001458:	f7ff fb12 	bl	8000a80 <HAL_GetTick>
 800145c:	0002      	movs	r2, r0
 800145e:	69bb      	ldr	r3, [r7, #24]
 8001460:	1ad3      	subs	r3, r2, r3
 8001462:	4aa5      	ldr	r2, [pc, #660]	; (80016f8 <HAL_RCC_OscConfig+0x680>)
 8001464:	4293      	cmp	r3, r2
 8001466:	d901      	bls.n	800146c <HAL_RCC_OscConfig+0x3f4>
        {
          return HAL_TIMEOUT;
 8001468:	2303      	movs	r3, #3
 800146a:	e185      	b.n	8001778 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800146c:	4ba1      	ldr	r3, [pc, #644]	; (80016f4 <HAL_RCC_OscConfig+0x67c>)
 800146e:	6a1b      	ldr	r3, [r3, #32]
 8001470:	2202      	movs	r2, #2
 8001472:	4013      	ands	r3, r2
 8001474:	d1f0      	bne.n	8001458 <HAL_RCC_OscConfig+0x3e0>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8001476:	231f      	movs	r3, #31
 8001478:	18fb      	adds	r3, r7, r3
 800147a:	781b      	ldrb	r3, [r3, #0]
 800147c:	2b01      	cmp	r3, #1
 800147e:	d105      	bne.n	800148c <HAL_RCC_OscConfig+0x414>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001480:	4b9c      	ldr	r3, [pc, #624]	; (80016f4 <HAL_RCC_OscConfig+0x67c>)
 8001482:	69da      	ldr	r2, [r3, #28]
 8001484:	4b9b      	ldr	r3, [pc, #620]	; (80016f4 <HAL_RCC_OscConfig+0x67c>)
 8001486:	499d      	ldr	r1, [pc, #628]	; (80016fc <HAL_RCC_OscConfig+0x684>)
 8001488:	400a      	ands	r2, r1
 800148a:	61da      	str	r2, [r3, #28]
    }
  }

  /*----------------------------- HSI14 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI14) == RCC_OSCILLATORTYPE_HSI14)
 800148c:	687b      	ldr	r3, [r7, #4]
 800148e:	681b      	ldr	r3, [r3, #0]
 8001490:	2210      	movs	r2, #16
 8001492:	4013      	ands	r3, r2
 8001494:	d063      	beq.n	800155e <HAL_RCC_OscConfig+0x4e6>
    /* Check the parameters */
    assert_param(IS_RCC_HSI14(RCC_OscInitStruct->HSI14State));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSI14CalibrationValue));

    /* Check the HSI14 State */
    if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ON)
 8001496:	687b      	ldr	r3, [r7, #4]
 8001498:	695b      	ldr	r3, [r3, #20]
 800149a:	2b01      	cmp	r3, #1
 800149c:	d12a      	bne.n	80014f4 <HAL_RCC_OscConfig+0x47c>
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 800149e:	4b95      	ldr	r3, [pc, #596]	; (80016f4 <HAL_RCC_OscConfig+0x67c>)
 80014a0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80014a2:	4b94      	ldr	r3, [pc, #592]	; (80016f4 <HAL_RCC_OscConfig+0x67c>)
 80014a4:	2104      	movs	r1, #4
 80014a6:	430a      	orrs	r2, r1
 80014a8:	635a      	str	r2, [r3, #52]	; 0x34

      /* Enable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_ENABLE();
 80014aa:	4b92      	ldr	r3, [pc, #584]	; (80016f4 <HAL_RCC_OscConfig+0x67c>)
 80014ac:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80014ae:	4b91      	ldr	r3, [pc, #580]	; (80016f4 <HAL_RCC_OscConfig+0x67c>)
 80014b0:	2101      	movs	r1, #1
 80014b2:	430a      	orrs	r2, r1
 80014b4:	635a      	str	r2, [r3, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80014b6:	f7ff fae3 	bl	8000a80 <HAL_GetTick>
 80014ba:	0003      	movs	r3, r0
 80014bc:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 80014be:	e008      	b.n	80014d2 <HAL_RCC_OscConfig+0x45a>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 80014c0:	f7ff fade 	bl	8000a80 <HAL_GetTick>
 80014c4:	0002      	movs	r2, r0
 80014c6:	69bb      	ldr	r3, [r7, #24]
 80014c8:	1ad3      	subs	r3, r2, r3
 80014ca:	2b02      	cmp	r3, #2
 80014cc:	d901      	bls.n	80014d2 <HAL_RCC_OscConfig+0x45a>
        {
          return HAL_TIMEOUT;
 80014ce:	2303      	movs	r3, #3
 80014d0:	e152      	b.n	8001778 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 80014d2:	4b88      	ldr	r3, [pc, #544]	; (80016f4 <HAL_RCC_OscConfig+0x67c>)
 80014d4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80014d6:	2202      	movs	r2, #2
 80014d8:	4013      	ands	r3, r2
 80014da:	d0f1      	beq.n	80014c0 <HAL_RCC_OscConfig+0x448>
        }      
      } 

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 80014dc:	4b85      	ldr	r3, [pc, #532]	; (80016f4 <HAL_RCC_OscConfig+0x67c>)
 80014de:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80014e0:	22f8      	movs	r2, #248	; 0xf8
 80014e2:	4393      	bics	r3, r2
 80014e4:	0019      	movs	r1, r3
 80014e6:	687b      	ldr	r3, [r7, #4]
 80014e8:	699b      	ldr	r3, [r3, #24]
 80014ea:	00da      	lsls	r2, r3, #3
 80014ec:	4b81      	ldr	r3, [pc, #516]	; (80016f4 <HAL_RCC_OscConfig+0x67c>)
 80014ee:	430a      	orrs	r2, r1
 80014f0:	635a      	str	r2, [r3, #52]	; 0x34
 80014f2:	e034      	b.n	800155e <HAL_RCC_OscConfig+0x4e6>
    }
    else if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ADC_CONTROL)
 80014f4:	687b      	ldr	r3, [r7, #4]
 80014f6:	695b      	ldr	r3, [r3, #20]
 80014f8:	3305      	adds	r3, #5
 80014fa:	d111      	bne.n	8001520 <HAL_RCC_OscConfig+0x4a8>
    {
      /* Enable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_ENABLE();
 80014fc:	4b7d      	ldr	r3, [pc, #500]	; (80016f4 <HAL_RCC_OscConfig+0x67c>)
 80014fe:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001500:	4b7c      	ldr	r3, [pc, #496]	; (80016f4 <HAL_RCC_OscConfig+0x67c>)
 8001502:	2104      	movs	r1, #4
 8001504:	438a      	bics	r2, r1
 8001506:	635a      	str	r2, [r3, #52]	; 0x34

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 8001508:	4b7a      	ldr	r3, [pc, #488]	; (80016f4 <HAL_RCC_OscConfig+0x67c>)
 800150a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800150c:	22f8      	movs	r2, #248	; 0xf8
 800150e:	4393      	bics	r3, r2
 8001510:	0019      	movs	r1, r3
 8001512:	687b      	ldr	r3, [r7, #4]
 8001514:	699b      	ldr	r3, [r3, #24]
 8001516:	00da      	lsls	r2, r3, #3
 8001518:	4b76      	ldr	r3, [pc, #472]	; (80016f4 <HAL_RCC_OscConfig+0x67c>)
 800151a:	430a      	orrs	r2, r1
 800151c:	635a      	str	r2, [r3, #52]	; 0x34
 800151e:	e01e      	b.n	800155e <HAL_RCC_OscConfig+0x4e6>
    }
    else
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 8001520:	4b74      	ldr	r3, [pc, #464]	; (80016f4 <HAL_RCC_OscConfig+0x67c>)
 8001522:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001524:	4b73      	ldr	r3, [pc, #460]	; (80016f4 <HAL_RCC_OscConfig+0x67c>)
 8001526:	2104      	movs	r1, #4
 8001528:	430a      	orrs	r2, r1
 800152a:	635a      	str	r2, [r3, #52]	; 0x34

      /* Disable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_DISABLE();
 800152c:	4b71      	ldr	r3, [pc, #452]	; (80016f4 <HAL_RCC_OscConfig+0x67c>)
 800152e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001530:	4b70      	ldr	r3, [pc, #448]	; (80016f4 <HAL_RCC_OscConfig+0x67c>)
 8001532:	2101      	movs	r1, #1
 8001534:	438a      	bics	r2, r1
 8001536:	635a      	str	r2, [r3, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001538:	f7ff faa2 	bl	8000a80 <HAL_GetTick>
 800153c:	0003      	movs	r3, r0
 800153e:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 8001540:	e008      	b.n	8001554 <HAL_RCC_OscConfig+0x4dc>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 8001542:	f7ff fa9d 	bl	8000a80 <HAL_GetTick>
 8001546:	0002      	movs	r2, r0
 8001548:	69bb      	ldr	r3, [r7, #24]
 800154a:	1ad3      	subs	r3, r2, r3
 800154c:	2b02      	cmp	r3, #2
 800154e:	d901      	bls.n	8001554 <HAL_RCC_OscConfig+0x4dc>
        {
          return HAL_TIMEOUT;
 8001550:	2303      	movs	r3, #3
 8001552:	e111      	b.n	8001778 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 8001554:	4b67      	ldr	r3, [pc, #412]	; (80016f4 <HAL_RCC_OscConfig+0x67c>)
 8001556:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001558:	2202      	movs	r2, #2
 800155a:	4013      	ands	r3, r2
 800155c:	d1f1      	bne.n	8001542 <HAL_RCC_OscConfig+0x4ca>
    }
  }

#if defined(RCC_HSI48_SUPPORT)
  /*----------------------------- HSI48 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 800155e:	687b      	ldr	r3, [r7, #4]
 8001560:	681b      	ldr	r3, [r3, #0]
 8001562:	2220      	movs	r2, #32
 8001564:	4013      	ands	r3, r2
 8001566:	d05c      	beq.n	8001622 <HAL_RCC_OscConfig+0x5aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* When the HSI48 is used as system clock it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI48) ||
 8001568:	4b62      	ldr	r3, [pc, #392]	; (80016f4 <HAL_RCC_OscConfig+0x67c>)
 800156a:	685b      	ldr	r3, [r3, #4]
 800156c:	220c      	movs	r2, #12
 800156e:	4013      	ands	r3, r2
 8001570:	2b0c      	cmp	r3, #12
 8001572:	d00e      	beq.n	8001592 <HAL_RCC_OscConfig+0x51a>
       ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI48)))
 8001574:	4b5f      	ldr	r3, [pc, #380]	; (80016f4 <HAL_RCC_OscConfig+0x67c>)
 8001576:	685b      	ldr	r3, [r3, #4]
 8001578:	220c      	movs	r2, #12
 800157a:	4013      	ands	r3, r2
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI48) ||
 800157c:	2b08      	cmp	r3, #8
 800157e:	d114      	bne.n	80015aa <HAL_RCC_OscConfig+0x532>
       ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI48)))
 8001580:	4b5c      	ldr	r3, [pc, #368]	; (80016f4 <HAL_RCC_OscConfig+0x67c>)
 8001582:	685a      	ldr	r2, [r3, #4]
 8001584:	23c0      	movs	r3, #192	; 0xc0
 8001586:	025b      	lsls	r3, r3, #9
 8001588:	401a      	ands	r2, r3
 800158a:	23c0      	movs	r3, #192	; 0xc0
 800158c:	025b      	lsls	r3, r3, #9
 800158e:	429a      	cmp	r2, r3
 8001590:	d10b      	bne.n	80015aa <HAL_RCC_OscConfig+0x532>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET) && (RCC_OscInitStruct->HSI48State != RCC_HSI48_ON))
 8001592:	4b58      	ldr	r3, [pc, #352]	; (80016f4 <HAL_RCC_OscConfig+0x67c>)
 8001594:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001596:	2380      	movs	r3, #128	; 0x80
 8001598:	029b      	lsls	r3, r3, #10
 800159a:	4013      	ands	r3, r2
 800159c:	d040      	beq.n	8001620 <HAL_RCC_OscConfig+0x5a8>
 800159e:	687b      	ldr	r3, [r7, #4]
 80015a0:	6a1b      	ldr	r3, [r3, #32]
 80015a2:	2b01      	cmp	r3, #1
 80015a4:	d03c      	beq.n	8001620 <HAL_RCC_OscConfig+0x5a8>
      {
        return HAL_ERROR;
 80015a6:	2301      	movs	r3, #1
 80015a8:	e0e6      	b.n	8001778 <HAL_RCC_OscConfig+0x700>
      }
    }
    else
    {
      /* Check the HSI48 State */
      if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 80015aa:	687b      	ldr	r3, [r7, #4]
 80015ac:	6a1b      	ldr	r3, [r3, #32]
 80015ae:	2b00      	cmp	r3, #0
 80015b0:	d01b      	beq.n	80015ea <HAL_RCC_OscConfig+0x572>
      {
        /* Enable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_ENABLE();
 80015b2:	4b50      	ldr	r3, [pc, #320]	; (80016f4 <HAL_RCC_OscConfig+0x67c>)
 80015b4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80015b6:	4b4f      	ldr	r3, [pc, #316]	; (80016f4 <HAL_RCC_OscConfig+0x67c>)
 80015b8:	2180      	movs	r1, #128	; 0x80
 80015ba:	0249      	lsls	r1, r1, #9
 80015bc:	430a      	orrs	r2, r1
 80015be:	635a      	str	r2, [r3, #52]	; 0x34

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80015c0:	f7ff fa5e 	bl	8000a80 <HAL_GetTick>
 80015c4:	0003      	movs	r3, r0
 80015c6:	61bb      	str	r3, [r7, #24]
      
        /* Wait till HSI48 is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == RESET)
 80015c8:	e008      	b.n	80015dc <HAL_RCC_OscConfig+0x564>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80015ca:	f7ff fa59 	bl	8000a80 <HAL_GetTick>
 80015ce:	0002      	movs	r2, r0
 80015d0:	69bb      	ldr	r3, [r7, #24]
 80015d2:	1ad3      	subs	r3, r2, r3
 80015d4:	2b02      	cmp	r3, #2
 80015d6:	d901      	bls.n	80015dc <HAL_RCC_OscConfig+0x564>
          {
            return HAL_TIMEOUT;
 80015d8:	2303      	movs	r3, #3
 80015da:	e0cd      	b.n	8001778 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == RESET)
 80015dc:	4b45      	ldr	r3, [pc, #276]	; (80016f4 <HAL_RCC_OscConfig+0x67c>)
 80015de:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80015e0:	2380      	movs	r3, #128	; 0x80
 80015e2:	029b      	lsls	r3, r3, #10
 80015e4:	4013      	ands	r3, r2
 80015e6:	d0f0      	beq.n	80015ca <HAL_RCC_OscConfig+0x552>
 80015e8:	e01b      	b.n	8001622 <HAL_RCC_OscConfig+0x5aa>
        } 
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_DISABLE();
 80015ea:	4b42      	ldr	r3, [pc, #264]	; (80016f4 <HAL_RCC_OscConfig+0x67c>)
 80015ec:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80015ee:	4b41      	ldr	r3, [pc, #260]	; (80016f4 <HAL_RCC_OscConfig+0x67c>)
 80015f0:	4943      	ldr	r1, [pc, #268]	; (8001700 <HAL_RCC_OscConfig+0x688>)
 80015f2:	400a      	ands	r2, r1
 80015f4:	635a      	str	r2, [r3, #52]	; 0x34

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80015f6:	f7ff fa43 	bl	8000a80 <HAL_GetTick>
 80015fa:	0003      	movs	r3, r0
 80015fc:	61bb      	str	r3, [r7, #24]
      
        /* Wait till HSI48 is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET)
 80015fe:	e008      	b.n	8001612 <HAL_RCC_OscConfig+0x59a>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001600:	f7ff fa3e 	bl	8000a80 <HAL_GetTick>
 8001604:	0002      	movs	r2, r0
 8001606:	69bb      	ldr	r3, [r7, #24]
 8001608:	1ad3      	subs	r3, r2, r3
 800160a:	2b02      	cmp	r3, #2
 800160c:	d901      	bls.n	8001612 <HAL_RCC_OscConfig+0x59a>
          {
            return HAL_TIMEOUT;
 800160e:	2303      	movs	r3, #3
 8001610:	e0b2      	b.n	8001778 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET)
 8001612:	4b38      	ldr	r3, [pc, #224]	; (80016f4 <HAL_RCC_OscConfig+0x67c>)
 8001614:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001616:	2380      	movs	r3, #128	; 0x80
 8001618:	029b      	lsls	r3, r3, #10
 800161a:	4013      	ands	r3, r2
 800161c:	d1f0      	bne.n	8001600 <HAL_RCC_OscConfig+0x588>
 800161e:	e000      	b.n	8001622 <HAL_RCC_OscConfig+0x5aa>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET) && (RCC_OscInitStruct->HSI48State != RCC_HSI48_ON))
 8001620:	46c0      	nop			; (mov r8, r8)
#endif /* RCC_HSI48_SUPPORT */
       
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001622:	687b      	ldr	r3, [r7, #4]
 8001624:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001626:	2b00      	cmp	r3, #0
 8001628:	d100      	bne.n	800162c <HAL_RCC_OscConfig+0x5b4>
 800162a:	e0a4      	b.n	8001776 <HAL_RCC_OscConfig+0x6fe>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800162c:	4b31      	ldr	r3, [pc, #196]	; (80016f4 <HAL_RCC_OscConfig+0x67c>)
 800162e:	685b      	ldr	r3, [r3, #4]
 8001630:	220c      	movs	r2, #12
 8001632:	4013      	ands	r3, r2
 8001634:	2b08      	cmp	r3, #8
 8001636:	d100      	bne.n	800163a <HAL_RCC_OscConfig+0x5c2>
 8001638:	e078      	b.n	800172c <HAL_RCC_OscConfig+0x6b4>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800163a:	687b      	ldr	r3, [r7, #4]
 800163c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800163e:	2b02      	cmp	r3, #2
 8001640:	d14c      	bne.n	80016dc <HAL_RCC_OscConfig+0x664>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001642:	4b2c      	ldr	r3, [pc, #176]	; (80016f4 <HAL_RCC_OscConfig+0x67c>)
 8001644:	681a      	ldr	r2, [r3, #0]
 8001646:	4b2b      	ldr	r3, [pc, #172]	; (80016f4 <HAL_RCC_OscConfig+0x67c>)
 8001648:	492e      	ldr	r1, [pc, #184]	; (8001704 <HAL_RCC_OscConfig+0x68c>)
 800164a:	400a      	ands	r2, r1
 800164c:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800164e:	f7ff fa17 	bl	8000a80 <HAL_GetTick>
 8001652:	0003      	movs	r3, r0
 8001654:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001656:	e008      	b.n	800166a <HAL_RCC_OscConfig+0x5f2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001658:	f7ff fa12 	bl	8000a80 <HAL_GetTick>
 800165c:	0002      	movs	r2, r0
 800165e:	69bb      	ldr	r3, [r7, #24]
 8001660:	1ad3      	subs	r3, r2, r3
 8001662:	2b02      	cmp	r3, #2
 8001664:	d901      	bls.n	800166a <HAL_RCC_OscConfig+0x5f2>
          {
            return HAL_TIMEOUT;
 8001666:	2303      	movs	r3, #3
 8001668:	e086      	b.n	8001778 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800166a:	4b22      	ldr	r3, [pc, #136]	; (80016f4 <HAL_RCC_OscConfig+0x67c>)
 800166c:	681a      	ldr	r2, [r3, #0]
 800166e:	2380      	movs	r3, #128	; 0x80
 8001670:	049b      	lsls	r3, r3, #18
 8001672:	4013      	ands	r3, r2
 8001674:	d1f0      	bne.n	8001658 <HAL_RCC_OscConfig+0x5e0>
          }
        }

        /* Configure the main PLL clock source, predivider and multiplication factor. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001676:	4b1f      	ldr	r3, [pc, #124]	; (80016f4 <HAL_RCC_OscConfig+0x67c>)
 8001678:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800167a:	220f      	movs	r2, #15
 800167c:	4393      	bics	r3, r2
 800167e:	0019      	movs	r1, r3
 8001680:	687b      	ldr	r3, [r7, #4]
 8001682:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001684:	4b1b      	ldr	r3, [pc, #108]	; (80016f4 <HAL_RCC_OscConfig+0x67c>)
 8001686:	430a      	orrs	r2, r1
 8001688:	62da      	str	r2, [r3, #44]	; 0x2c
 800168a:	4b1a      	ldr	r3, [pc, #104]	; (80016f4 <HAL_RCC_OscConfig+0x67c>)
 800168c:	685b      	ldr	r3, [r3, #4]
 800168e:	4a1e      	ldr	r2, [pc, #120]	; (8001708 <HAL_RCC_OscConfig+0x690>)
 8001690:	4013      	ands	r3, r2
 8001692:	0019      	movs	r1, r3
 8001694:	687b      	ldr	r3, [r7, #4]
 8001696:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001698:	687b      	ldr	r3, [r7, #4]
 800169a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800169c:	431a      	orrs	r2, r3
 800169e:	4b15      	ldr	r3, [pc, #84]	; (80016f4 <HAL_RCC_OscConfig+0x67c>)
 80016a0:	430a      	orrs	r2, r1
 80016a2:	605a      	str	r2, [r3, #4]
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80016a4:	4b13      	ldr	r3, [pc, #76]	; (80016f4 <HAL_RCC_OscConfig+0x67c>)
 80016a6:	681a      	ldr	r2, [r3, #0]
 80016a8:	4b12      	ldr	r3, [pc, #72]	; (80016f4 <HAL_RCC_OscConfig+0x67c>)
 80016aa:	2180      	movs	r1, #128	; 0x80
 80016ac:	0449      	lsls	r1, r1, #17
 80016ae:	430a      	orrs	r2, r1
 80016b0:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80016b2:	f7ff f9e5 	bl	8000a80 <HAL_GetTick>
 80016b6:	0003      	movs	r3, r0
 80016b8:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80016ba:	e008      	b.n	80016ce <HAL_RCC_OscConfig+0x656>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80016bc:	f7ff f9e0 	bl	8000a80 <HAL_GetTick>
 80016c0:	0002      	movs	r2, r0
 80016c2:	69bb      	ldr	r3, [r7, #24]
 80016c4:	1ad3      	subs	r3, r2, r3
 80016c6:	2b02      	cmp	r3, #2
 80016c8:	d901      	bls.n	80016ce <HAL_RCC_OscConfig+0x656>
          {
            return HAL_TIMEOUT;
 80016ca:	2303      	movs	r3, #3
 80016cc:	e054      	b.n	8001778 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80016ce:	4b09      	ldr	r3, [pc, #36]	; (80016f4 <HAL_RCC_OscConfig+0x67c>)
 80016d0:	681a      	ldr	r2, [r3, #0]
 80016d2:	2380      	movs	r3, #128	; 0x80
 80016d4:	049b      	lsls	r3, r3, #18
 80016d6:	4013      	ands	r3, r2
 80016d8:	d0f0      	beq.n	80016bc <HAL_RCC_OscConfig+0x644>
 80016da:	e04c      	b.n	8001776 <HAL_RCC_OscConfig+0x6fe>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80016dc:	4b05      	ldr	r3, [pc, #20]	; (80016f4 <HAL_RCC_OscConfig+0x67c>)
 80016de:	681a      	ldr	r2, [r3, #0]
 80016e0:	4b04      	ldr	r3, [pc, #16]	; (80016f4 <HAL_RCC_OscConfig+0x67c>)
 80016e2:	4908      	ldr	r1, [pc, #32]	; (8001704 <HAL_RCC_OscConfig+0x68c>)
 80016e4:	400a      	ands	r2, r1
 80016e6:	601a      	str	r2, [r3, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80016e8:	f7ff f9ca 	bl	8000a80 <HAL_GetTick>
 80016ec:	0003      	movs	r3, r0
 80016ee:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80016f0:	e015      	b.n	800171e <HAL_RCC_OscConfig+0x6a6>
 80016f2:	46c0      	nop			; (mov r8, r8)
 80016f4:	40021000 	.word	0x40021000
 80016f8:	00001388 	.word	0x00001388
 80016fc:	efffffff 	.word	0xefffffff
 8001700:	fffeffff 	.word	0xfffeffff
 8001704:	feffffff 	.word	0xfeffffff
 8001708:	ffc27fff 	.word	0xffc27fff
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800170c:	f7ff f9b8 	bl	8000a80 <HAL_GetTick>
 8001710:	0002      	movs	r2, r0
 8001712:	69bb      	ldr	r3, [r7, #24]
 8001714:	1ad3      	subs	r3, r2, r3
 8001716:	2b02      	cmp	r3, #2
 8001718:	d901      	bls.n	800171e <HAL_RCC_OscConfig+0x6a6>
          {
            return HAL_TIMEOUT;
 800171a:	2303      	movs	r3, #3
 800171c:	e02c      	b.n	8001778 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800171e:	4b18      	ldr	r3, [pc, #96]	; (8001780 <HAL_RCC_OscConfig+0x708>)
 8001720:	681a      	ldr	r2, [r3, #0]
 8001722:	2380      	movs	r3, #128	; 0x80
 8001724:	049b      	lsls	r3, r3, #18
 8001726:	4013      	ands	r3, r2
 8001728:	d1f0      	bne.n	800170c <HAL_RCC_OscConfig+0x694>
 800172a:	e024      	b.n	8001776 <HAL_RCC_OscConfig+0x6fe>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800172c:	687b      	ldr	r3, [r7, #4]
 800172e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001730:	2b01      	cmp	r3, #1
 8001732:	d101      	bne.n	8001738 <HAL_RCC_OscConfig+0x6c0>
      {
        return HAL_ERROR;
 8001734:	2301      	movs	r3, #1
 8001736:	e01f      	b.n	8001778 <HAL_RCC_OscConfig+0x700>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config  = RCC->CFGR;
 8001738:	4b11      	ldr	r3, [pc, #68]	; (8001780 <HAL_RCC_OscConfig+0x708>)
 800173a:	685b      	ldr	r3, [r3, #4]
 800173c:	617b      	str	r3, [r7, #20]
        pll_config2 = RCC->CFGR2;
 800173e:	4b10      	ldr	r3, [pc, #64]	; (8001780 <HAL_RCC_OscConfig+0x708>)
 8001740:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001742:	613b      	str	r3, [r7, #16]
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001744:	697a      	ldr	r2, [r7, #20]
 8001746:	23c0      	movs	r3, #192	; 0xc0
 8001748:	025b      	lsls	r3, r3, #9
 800174a:	401a      	ands	r2, r3
 800174c:	687b      	ldr	r3, [r7, #4]
 800174e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001750:	429a      	cmp	r2, r3
 8001752:	d10e      	bne.n	8001772 <HAL_RCC_OscConfig+0x6fa>
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 8001754:	693b      	ldr	r3, [r7, #16]
 8001756:	220f      	movs	r2, #15
 8001758:	401a      	ands	r2, r3
 800175a:	687b      	ldr	r3, [r7, #4]
 800175c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800175e:	429a      	cmp	r2, r3
 8001760:	d107      	bne.n	8001772 <HAL_RCC_OscConfig+0x6fa>
           (READ_BIT(pll_config,  RCC_CFGR_PLLMUL)  != RCC_OscInitStruct->PLL.PLLMUL))
 8001762:	697a      	ldr	r2, [r7, #20]
 8001764:	23f0      	movs	r3, #240	; 0xf0
 8001766:	039b      	lsls	r3, r3, #14
 8001768:	401a      	ands	r2, r3
 800176a:	687b      	ldr	r3, [r7, #4]
 800176c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 800176e:	429a      	cmp	r2, r3
 8001770:	d001      	beq.n	8001776 <HAL_RCC_OscConfig+0x6fe>
        {
          return HAL_ERROR;
 8001772:	2301      	movs	r3, #1
 8001774:	e000      	b.n	8001778 <HAL_RCC_OscConfig+0x700>
        }
      }
    }
  }

  return HAL_OK;
 8001776:	2300      	movs	r3, #0
}
 8001778:	0018      	movs	r0, r3
 800177a:	46bd      	mov	sp, r7
 800177c:	b008      	add	sp, #32
 800177e:	bd80      	pop	{r7, pc}
 8001780:	40021000 	.word	0x40021000

08001784 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001784:	b580      	push	{r7, lr}
 8001786:	b084      	sub	sp, #16
 8001788:	af00      	add	r7, sp, #0
 800178a:	6078      	str	r0, [r7, #4]
 800178c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800178e:	687b      	ldr	r3, [r7, #4]
 8001790:	2b00      	cmp	r3, #0
 8001792:	d101      	bne.n	8001798 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001794:	2301      	movs	r3, #1
 8001796:	e0bf      	b.n	8001918 <HAL_RCC_ClockConfig+0x194>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001798:	4b61      	ldr	r3, [pc, #388]	; (8001920 <HAL_RCC_ClockConfig+0x19c>)
 800179a:	681b      	ldr	r3, [r3, #0]
 800179c:	2201      	movs	r2, #1
 800179e:	4013      	ands	r3, r2
 80017a0:	683a      	ldr	r2, [r7, #0]
 80017a2:	429a      	cmp	r2, r3
 80017a4:	d911      	bls.n	80017ca <HAL_RCC_ClockConfig+0x46>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80017a6:	4b5e      	ldr	r3, [pc, #376]	; (8001920 <HAL_RCC_ClockConfig+0x19c>)
 80017a8:	681b      	ldr	r3, [r3, #0]
 80017aa:	2201      	movs	r2, #1
 80017ac:	4393      	bics	r3, r2
 80017ae:	0019      	movs	r1, r3
 80017b0:	4b5b      	ldr	r3, [pc, #364]	; (8001920 <HAL_RCC_ClockConfig+0x19c>)
 80017b2:	683a      	ldr	r2, [r7, #0]
 80017b4:	430a      	orrs	r2, r1
 80017b6:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80017b8:	4b59      	ldr	r3, [pc, #356]	; (8001920 <HAL_RCC_ClockConfig+0x19c>)
 80017ba:	681b      	ldr	r3, [r3, #0]
 80017bc:	2201      	movs	r2, #1
 80017be:	4013      	ands	r3, r2
 80017c0:	683a      	ldr	r2, [r7, #0]
 80017c2:	429a      	cmp	r2, r3
 80017c4:	d001      	beq.n	80017ca <HAL_RCC_ClockConfig+0x46>
    {
      return HAL_ERROR;
 80017c6:	2301      	movs	r3, #1
 80017c8:	e0a6      	b.n	8001918 <HAL_RCC_ClockConfig+0x194>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80017ca:	687b      	ldr	r3, [r7, #4]
 80017cc:	681b      	ldr	r3, [r3, #0]
 80017ce:	2202      	movs	r2, #2
 80017d0:	4013      	ands	r3, r2
 80017d2:	d015      	beq.n	8001800 <HAL_RCC_ClockConfig+0x7c>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80017d4:	687b      	ldr	r3, [r7, #4]
 80017d6:	681b      	ldr	r3, [r3, #0]
 80017d8:	2204      	movs	r2, #4
 80017da:	4013      	ands	r3, r2
 80017dc:	d006      	beq.n	80017ec <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 80017de:	4b51      	ldr	r3, [pc, #324]	; (8001924 <HAL_RCC_ClockConfig+0x1a0>)
 80017e0:	685a      	ldr	r2, [r3, #4]
 80017e2:	4b50      	ldr	r3, [pc, #320]	; (8001924 <HAL_RCC_ClockConfig+0x1a0>)
 80017e4:	21e0      	movs	r1, #224	; 0xe0
 80017e6:	00c9      	lsls	r1, r1, #3
 80017e8:	430a      	orrs	r2, r1
 80017ea:	605a      	str	r2, [r3, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80017ec:	4b4d      	ldr	r3, [pc, #308]	; (8001924 <HAL_RCC_ClockConfig+0x1a0>)
 80017ee:	685b      	ldr	r3, [r3, #4]
 80017f0:	22f0      	movs	r2, #240	; 0xf0
 80017f2:	4393      	bics	r3, r2
 80017f4:	0019      	movs	r1, r3
 80017f6:	687b      	ldr	r3, [r7, #4]
 80017f8:	689a      	ldr	r2, [r3, #8]
 80017fa:	4b4a      	ldr	r3, [pc, #296]	; (8001924 <HAL_RCC_ClockConfig+0x1a0>)
 80017fc:	430a      	orrs	r2, r1
 80017fe:	605a      	str	r2, [r3, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001800:	687b      	ldr	r3, [r7, #4]
 8001802:	681b      	ldr	r3, [r3, #0]
 8001804:	2201      	movs	r2, #1
 8001806:	4013      	ands	r3, r2
 8001808:	d04c      	beq.n	80018a4 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800180a:	687b      	ldr	r3, [r7, #4]
 800180c:	685b      	ldr	r3, [r3, #4]
 800180e:	2b01      	cmp	r3, #1
 8001810:	d107      	bne.n	8001822 <HAL_RCC_ClockConfig+0x9e>
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001812:	4b44      	ldr	r3, [pc, #272]	; (8001924 <HAL_RCC_ClockConfig+0x1a0>)
 8001814:	681a      	ldr	r2, [r3, #0]
 8001816:	2380      	movs	r3, #128	; 0x80
 8001818:	029b      	lsls	r3, r3, #10
 800181a:	4013      	ands	r3, r2
 800181c:	d120      	bne.n	8001860 <HAL_RCC_ClockConfig+0xdc>
      {
        return HAL_ERROR;
 800181e:	2301      	movs	r3, #1
 8001820:	e07a      	b.n	8001918 <HAL_RCC_ClockConfig+0x194>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001822:	687b      	ldr	r3, [r7, #4]
 8001824:	685b      	ldr	r3, [r3, #4]
 8001826:	2b02      	cmp	r3, #2
 8001828:	d107      	bne.n	800183a <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800182a:	4b3e      	ldr	r3, [pc, #248]	; (8001924 <HAL_RCC_ClockConfig+0x1a0>)
 800182c:	681a      	ldr	r2, [r3, #0]
 800182e:	2380      	movs	r3, #128	; 0x80
 8001830:	049b      	lsls	r3, r3, #18
 8001832:	4013      	ands	r3, r2
 8001834:	d114      	bne.n	8001860 <HAL_RCC_ClockConfig+0xdc>
      {
        return HAL_ERROR;
 8001836:	2301      	movs	r3, #1
 8001838:	e06e      	b.n	8001918 <HAL_RCC_ClockConfig+0x194>
      }
    }
#if defined(RCC_CFGR_SWS_HSI48)
    /* HSI48 is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI48)
 800183a:	687b      	ldr	r3, [r7, #4]
 800183c:	685b      	ldr	r3, [r3, #4]
 800183e:	2b03      	cmp	r3, #3
 8001840:	d107      	bne.n	8001852 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the HSI48 ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == RESET)
 8001842:	4b38      	ldr	r3, [pc, #224]	; (8001924 <HAL_RCC_ClockConfig+0x1a0>)
 8001844:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001846:	2380      	movs	r3, #128	; 0x80
 8001848:	029b      	lsls	r3, r3, #10
 800184a:	4013      	ands	r3, r2
 800184c:	d108      	bne.n	8001860 <HAL_RCC_ClockConfig+0xdc>
      {
        return HAL_ERROR;
 800184e:	2301      	movs	r3, #1
 8001850:	e062      	b.n	8001918 <HAL_RCC_ClockConfig+0x194>
#endif /* RCC_CFGR_SWS_HSI48 */
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001852:	4b34      	ldr	r3, [pc, #208]	; (8001924 <HAL_RCC_ClockConfig+0x1a0>)
 8001854:	681b      	ldr	r3, [r3, #0]
 8001856:	2202      	movs	r2, #2
 8001858:	4013      	ands	r3, r2
 800185a:	d101      	bne.n	8001860 <HAL_RCC_ClockConfig+0xdc>
      {
        return HAL_ERROR;
 800185c:	2301      	movs	r3, #1
 800185e:	e05b      	b.n	8001918 <HAL_RCC_ClockConfig+0x194>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001860:	4b30      	ldr	r3, [pc, #192]	; (8001924 <HAL_RCC_ClockConfig+0x1a0>)
 8001862:	685b      	ldr	r3, [r3, #4]
 8001864:	2203      	movs	r2, #3
 8001866:	4393      	bics	r3, r2
 8001868:	0019      	movs	r1, r3
 800186a:	687b      	ldr	r3, [r7, #4]
 800186c:	685a      	ldr	r2, [r3, #4]
 800186e:	4b2d      	ldr	r3, [pc, #180]	; (8001924 <HAL_RCC_ClockConfig+0x1a0>)
 8001870:	430a      	orrs	r2, r1
 8001872:	605a      	str	r2, [r3, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001874:	f7ff f904 	bl	8000a80 <HAL_GetTick>
 8001878:	0003      	movs	r3, r0
 800187a:	60fb      	str	r3, [r7, #12]
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800187c:	e009      	b.n	8001892 <HAL_RCC_ClockConfig+0x10e>
    {
      if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 800187e:	f7ff f8ff 	bl	8000a80 <HAL_GetTick>
 8001882:	0002      	movs	r2, r0
 8001884:	68fb      	ldr	r3, [r7, #12]
 8001886:	1ad3      	subs	r3, r2, r3
 8001888:	4a27      	ldr	r2, [pc, #156]	; (8001928 <HAL_RCC_ClockConfig+0x1a4>)
 800188a:	4293      	cmp	r3, r2
 800188c:	d901      	bls.n	8001892 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800188e:	2303      	movs	r3, #3
 8001890:	e042      	b.n	8001918 <HAL_RCC_ClockConfig+0x194>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001892:	4b24      	ldr	r3, [pc, #144]	; (8001924 <HAL_RCC_ClockConfig+0x1a0>)
 8001894:	685b      	ldr	r3, [r3, #4]
 8001896:	220c      	movs	r2, #12
 8001898:	401a      	ands	r2, r3
 800189a:	687b      	ldr	r3, [r7, #4]
 800189c:	685b      	ldr	r3, [r3, #4]
 800189e:	009b      	lsls	r3, r3, #2
 80018a0:	429a      	cmp	r2, r3
 80018a2:	d1ec      	bne.n	800187e <HAL_RCC_ClockConfig+0xfa>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80018a4:	4b1e      	ldr	r3, [pc, #120]	; (8001920 <HAL_RCC_ClockConfig+0x19c>)
 80018a6:	681b      	ldr	r3, [r3, #0]
 80018a8:	2201      	movs	r2, #1
 80018aa:	4013      	ands	r3, r2
 80018ac:	683a      	ldr	r2, [r7, #0]
 80018ae:	429a      	cmp	r2, r3
 80018b0:	d211      	bcs.n	80018d6 <HAL_RCC_ClockConfig+0x152>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80018b2:	4b1b      	ldr	r3, [pc, #108]	; (8001920 <HAL_RCC_ClockConfig+0x19c>)
 80018b4:	681b      	ldr	r3, [r3, #0]
 80018b6:	2201      	movs	r2, #1
 80018b8:	4393      	bics	r3, r2
 80018ba:	0019      	movs	r1, r3
 80018bc:	4b18      	ldr	r3, [pc, #96]	; (8001920 <HAL_RCC_ClockConfig+0x19c>)
 80018be:	683a      	ldr	r2, [r7, #0]
 80018c0:	430a      	orrs	r2, r1
 80018c2:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80018c4:	4b16      	ldr	r3, [pc, #88]	; (8001920 <HAL_RCC_ClockConfig+0x19c>)
 80018c6:	681b      	ldr	r3, [r3, #0]
 80018c8:	2201      	movs	r2, #1
 80018ca:	4013      	ands	r3, r2
 80018cc:	683a      	ldr	r2, [r7, #0]
 80018ce:	429a      	cmp	r2, r3
 80018d0:	d001      	beq.n	80018d6 <HAL_RCC_ClockConfig+0x152>
    {
      return HAL_ERROR;
 80018d2:	2301      	movs	r3, #1
 80018d4:	e020      	b.n	8001918 <HAL_RCC_ClockConfig+0x194>
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80018d6:	687b      	ldr	r3, [r7, #4]
 80018d8:	681b      	ldr	r3, [r3, #0]
 80018da:	2204      	movs	r2, #4
 80018dc:	4013      	ands	r3, r2
 80018de:	d009      	beq.n	80018f4 <HAL_RCC_ClockConfig+0x170>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 80018e0:	4b10      	ldr	r3, [pc, #64]	; (8001924 <HAL_RCC_ClockConfig+0x1a0>)
 80018e2:	685b      	ldr	r3, [r3, #4]
 80018e4:	4a11      	ldr	r2, [pc, #68]	; (800192c <HAL_RCC_ClockConfig+0x1a8>)
 80018e6:	4013      	ands	r3, r2
 80018e8:	0019      	movs	r1, r3
 80018ea:	687b      	ldr	r3, [r7, #4]
 80018ec:	68da      	ldr	r2, [r3, #12]
 80018ee:	4b0d      	ldr	r3, [pc, #52]	; (8001924 <HAL_RCC_ClockConfig+0x1a0>)
 80018f0:	430a      	orrs	r2, r1
 80018f2:	605a      	str	r2, [r3, #4]
  }
  
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 80018f4:	f000 f820 	bl	8001938 <HAL_RCC_GetSysClockFreq>
 80018f8:	0001      	movs	r1, r0
 80018fa:	4b0a      	ldr	r3, [pc, #40]	; (8001924 <HAL_RCC_ClockConfig+0x1a0>)
 80018fc:	685b      	ldr	r3, [r3, #4]
 80018fe:	091b      	lsrs	r3, r3, #4
 8001900:	220f      	movs	r2, #15
 8001902:	4013      	ands	r3, r2
 8001904:	4a0a      	ldr	r2, [pc, #40]	; (8001930 <HAL_RCC_ClockConfig+0x1ac>)
 8001906:	5cd3      	ldrb	r3, [r2, r3]
 8001908:	000a      	movs	r2, r1
 800190a:	40da      	lsrs	r2, r3
 800190c:	4b09      	ldr	r3, [pc, #36]	; (8001934 <HAL_RCC_ClockConfig+0x1b0>)
 800190e:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (TICK_INT_PRIORITY);
 8001910:	2003      	movs	r0, #3
 8001912:	f7ff f86f 	bl	80009f4 <HAL_InitTick>
  
  return HAL_OK;
 8001916:	2300      	movs	r3, #0
}
 8001918:	0018      	movs	r0, r3
 800191a:	46bd      	mov	sp, r7
 800191c:	b004      	add	sp, #16
 800191e:	bd80      	pop	{r7, pc}
 8001920:	40022000 	.word	0x40022000
 8001924:	40021000 	.word	0x40021000
 8001928:	00001388 	.word	0x00001388
 800192c:	fffff8ff 	.word	0xfffff8ff
 8001930:	080045f8 	.word	0x080045f8
 8001934:	200000c0 	.word	0x200000c0

08001938 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001938:	b580      	push	{r7, lr}
 800193a:	b086      	sub	sp, #24
 800193c:	af00      	add	r7, sp, #0
  static const uint8_t aPLLMULFactorTable[16U] = { 2U,  3U,  4U,  5U,  6U,  7U,  8U,  9U,
                                                   10U, 11U, 12U, 13U, 14U, 15U, 16U, 16U};
  static const uint8_t aPredivFactorTable[16U] = { 1U, 2U,  3U,  4U,  5U,  6U,  7U,  8U,
                                                   9U,10U, 11U, 12U, 13U, 14U, 15U, 16U};

  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800193e:	2300      	movs	r3, #0
 8001940:	60fb      	str	r3, [r7, #12]
 8001942:	2300      	movs	r3, #0
 8001944:	60bb      	str	r3, [r7, #8]
 8001946:	2300      	movs	r3, #0
 8001948:	617b      	str	r3, [r7, #20]
 800194a:	2300      	movs	r3, #0
 800194c:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 800194e:	2300      	movs	r3, #0
 8001950:	613b      	str	r3, [r7, #16]
  
  tmpreg = RCC->CFGR;
 8001952:	4b2d      	ldr	r3, [pc, #180]	; (8001a08 <HAL_RCC_GetSysClockFreq+0xd0>)
 8001954:	685b      	ldr	r3, [r3, #4]
 8001956:	60fb      	str	r3, [r7, #12]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8001958:	68fb      	ldr	r3, [r7, #12]
 800195a:	220c      	movs	r2, #12
 800195c:	4013      	ands	r3, r2
 800195e:	2b0c      	cmp	r3, #12
 8001960:	d046      	beq.n	80019f0 <HAL_RCC_GetSysClockFreq+0xb8>
 8001962:	d848      	bhi.n	80019f6 <HAL_RCC_GetSysClockFreq+0xbe>
 8001964:	2b04      	cmp	r3, #4
 8001966:	d002      	beq.n	800196e <HAL_RCC_GetSysClockFreq+0x36>
 8001968:	2b08      	cmp	r3, #8
 800196a:	d003      	beq.n	8001974 <HAL_RCC_GetSysClockFreq+0x3c>
 800196c:	e043      	b.n	80019f6 <HAL_RCC_GetSysClockFreq+0xbe>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 800196e:	4b27      	ldr	r3, [pc, #156]	; (8001a0c <HAL_RCC_GetSysClockFreq+0xd4>)
 8001970:	613b      	str	r3, [r7, #16]
      break;
 8001972:	e043      	b.n	80019fc <HAL_RCC_GetSysClockFreq+0xc4>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_BITNUMBER];
 8001974:	68fb      	ldr	r3, [r7, #12]
 8001976:	0c9b      	lsrs	r3, r3, #18
 8001978:	220f      	movs	r2, #15
 800197a:	4013      	ands	r3, r2
 800197c:	4a24      	ldr	r2, [pc, #144]	; (8001a10 <HAL_RCC_GetSysClockFreq+0xd8>)
 800197e:	5cd3      	ldrb	r3, [r2, r3]
 8001980:	607b      	str	r3, [r7, #4]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> RCC_CFGR2_PREDIV_BITNUMBER];
 8001982:	4b21      	ldr	r3, [pc, #132]	; (8001a08 <HAL_RCC_GetSysClockFreq+0xd0>)
 8001984:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001986:	220f      	movs	r2, #15
 8001988:	4013      	ands	r3, r2
 800198a:	4a22      	ldr	r2, [pc, #136]	; (8001a14 <HAL_RCC_GetSysClockFreq+0xdc>)
 800198c:	5cd3      	ldrb	r3, [r2, r3]
 800198e:	60bb      	str	r3, [r7, #8]
      if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 8001990:	68fa      	ldr	r2, [r7, #12]
 8001992:	23c0      	movs	r3, #192	; 0xc0
 8001994:	025b      	lsls	r3, r3, #9
 8001996:	401a      	ands	r2, r3
 8001998:	2380      	movs	r3, #128	; 0x80
 800199a:	025b      	lsls	r3, r3, #9
 800199c:	429a      	cmp	r2, r3
 800199e:	d109      	bne.n	80019b4 <HAL_RCC_GetSysClockFreq+0x7c>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 80019a0:	68b9      	ldr	r1, [r7, #8]
 80019a2:	481a      	ldr	r0, [pc, #104]	; (8001a0c <HAL_RCC_GetSysClockFreq+0xd4>)
 80019a4:	f7fe fbb8 	bl	8000118 <__udivsi3>
 80019a8:	0003      	movs	r3, r0
 80019aa:	001a      	movs	r2, r3
 80019ac:	687b      	ldr	r3, [r7, #4]
 80019ae:	4353      	muls	r3, r2
 80019b0:	617b      	str	r3, [r7, #20]
 80019b2:	e01a      	b.n	80019ea <HAL_RCC_GetSysClockFreq+0xb2>
      }
#if defined(RCC_CFGR_PLLSRC_HSI48_PREDIV)
      else if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSI48)
 80019b4:	68fa      	ldr	r2, [r7, #12]
 80019b6:	23c0      	movs	r3, #192	; 0xc0
 80019b8:	025b      	lsls	r3, r3, #9
 80019ba:	401a      	ands	r2, r3
 80019bc:	23c0      	movs	r3, #192	; 0xc0
 80019be:	025b      	lsls	r3, r3, #9
 80019c0:	429a      	cmp	r2, r3
 80019c2:	d109      	bne.n	80019d8 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        /* HSI48 used as PLL clock source : PLLCLK = HSI48/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI48_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 80019c4:	68b9      	ldr	r1, [r7, #8]
 80019c6:	4814      	ldr	r0, [pc, #80]	; (8001a18 <HAL_RCC_GetSysClockFreq+0xe0>)
 80019c8:	f7fe fba6 	bl	8000118 <__udivsi3>
 80019cc:	0003      	movs	r3, r0
 80019ce:	001a      	movs	r2, r3
 80019d0:	687b      	ldr	r3, [r7, #4]
 80019d2:	4353      	muls	r3, r2
 80019d4:	617b      	str	r3, [r7, #20]
 80019d6:	e008      	b.n	80019ea <HAL_RCC_GetSysClockFreq+0xb2>
#endif /* RCC_CFGR_PLLSRC_HSI48_PREDIV */
      else
      {
#if  (defined(STM32F042x6) || defined(STM32F048xx) || defined(STM32F070x6) || defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx) || defined(STM32F070xB) || defined(STM32F091xC) || defined(STM32F098xx) || defined(STM32F030xC))
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 80019d8:	68b9      	ldr	r1, [r7, #8]
 80019da:	480c      	ldr	r0, [pc, #48]	; (8001a0c <HAL_RCC_GetSysClockFreq+0xd4>)
 80019dc:	f7fe fb9c 	bl	8000118 <__udivsi3>
 80019e0:	0003      	movs	r3, r0
 80019e2:	001a      	movs	r2, r3
 80019e4:	687b      	ldr	r3, [r7, #4]
 80019e6:	4353      	muls	r3, r2
 80019e8:	617b      	str	r3, [r7, #20]
#else
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
#endif
      }
      sysclockfreq = pllclk;
 80019ea:	697b      	ldr	r3, [r7, #20]
 80019ec:	613b      	str	r3, [r7, #16]
      break;
 80019ee:	e005      	b.n	80019fc <HAL_RCC_GetSysClockFreq+0xc4>
    }
#if defined(RCC_CFGR_SWS_HSI48)
    case RCC_SYSCLKSOURCE_STATUS_HSI48:    /* HSI48 used as system clock source */
    {
      sysclockfreq = HSI48_VALUE;
 80019f0:	4b09      	ldr	r3, [pc, #36]	; (8001a18 <HAL_RCC_GetSysClockFreq+0xe0>)
 80019f2:	613b      	str	r3, [r7, #16]
      break;
 80019f4:	e002      	b.n	80019fc <HAL_RCC_GetSysClockFreq+0xc4>
    }
#endif /* RCC_CFGR_SWS_HSI48 */
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80019f6:	4b05      	ldr	r3, [pc, #20]	; (8001a0c <HAL_RCC_GetSysClockFreq+0xd4>)
 80019f8:	613b      	str	r3, [r7, #16]
      break;
 80019fa:	46c0      	nop			; (mov r8, r8)
    }
  }
  return sysclockfreq;
 80019fc:	693b      	ldr	r3, [r7, #16]
}
 80019fe:	0018      	movs	r0, r3
 8001a00:	46bd      	mov	sp, r7
 8001a02:	b006      	add	sp, #24
 8001a04:	bd80      	pop	{r7, pc}
 8001a06:	46c0      	nop			; (mov r8, r8)
 8001a08:	40021000 	.word	0x40021000
 8001a0c:	007a1200 	.word	0x007a1200
 8001a10:	08004610 	.word	0x08004610
 8001a14:	08004620 	.word	0x08004620
 8001a18:	02dc6c00 	.word	0x02dc6c00

08001a1c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001a1c:	b580      	push	{r7, lr}
 8001a1e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001a20:	4b02      	ldr	r3, [pc, #8]	; (8001a2c <HAL_RCC_GetHCLKFreq+0x10>)
 8001a22:	681b      	ldr	r3, [r3, #0]
}
 8001a24:	0018      	movs	r0, r3
 8001a26:	46bd      	mov	sp, r7
 8001a28:	bd80      	pop	{r7, pc}
 8001a2a:	46c0      	nop			; (mov r8, r8)
 8001a2c:	200000c0 	.word	0x200000c0

08001a30 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001a30:	b580      	push	{r7, lr}
 8001a32:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE) >> RCC_CFGR_PPRE_BITNUMBER]);
 8001a34:	f7ff fff2 	bl	8001a1c <HAL_RCC_GetHCLKFreq>
 8001a38:	0001      	movs	r1, r0
 8001a3a:	4b06      	ldr	r3, [pc, #24]	; (8001a54 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001a3c:	685b      	ldr	r3, [r3, #4]
 8001a3e:	0a1b      	lsrs	r3, r3, #8
 8001a40:	2207      	movs	r2, #7
 8001a42:	4013      	ands	r3, r2
 8001a44:	4a04      	ldr	r2, [pc, #16]	; (8001a58 <HAL_RCC_GetPCLK1Freq+0x28>)
 8001a46:	5cd3      	ldrb	r3, [r2, r3]
 8001a48:	40d9      	lsrs	r1, r3
 8001a4a:	000b      	movs	r3, r1
}    
 8001a4c:	0018      	movs	r0, r3
 8001a4e:	46bd      	mov	sp, r7
 8001a50:	bd80      	pop	{r7, pc}
 8001a52:	46c0      	nop			; (mov r8, r8)
 8001a54:	40021000 	.word	0x40021000
 8001a58:	08004608 	.word	0x08004608

08001a5c <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8001a5c:	b580      	push	{r7, lr}
 8001a5e:	b086      	sub	sp, #24
 8001a60:	af00      	add	r7, sp, #0
 8001a62:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8001a64:	2300      	movs	r3, #0
 8001a66:	613b      	str	r3, [r7, #16]
  uint32_t temp_reg = 0U;
 8001a68:	2300      	movs	r3, #0
 8001a6a:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8001a6c:	687b      	ldr	r3, [r7, #4]
 8001a6e:	681a      	ldr	r2, [r3, #0]
 8001a70:	2380      	movs	r3, #128	; 0x80
 8001a72:	025b      	lsls	r3, r3, #9
 8001a74:	4013      	ands	r3, r2
 8001a76:	d100      	bne.n	8001a7a <HAL_RCCEx_PeriphCLKConfig+0x1e>
 8001a78:	e08e      	b.n	8001b98 <HAL_RCCEx_PeriphCLKConfig+0x13c>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));
    
    FlagStatus       pwrclkchanged = RESET;
 8001a7a:	2017      	movs	r0, #23
 8001a7c:	183b      	adds	r3, r7, r0
 8001a7e:	2200      	movs	r2, #0
 8001a80:	701a      	strb	r2, [r3, #0]

    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001a82:	4b6e      	ldr	r3, [pc, #440]	; (8001c3c <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8001a84:	69da      	ldr	r2, [r3, #28]
 8001a86:	2380      	movs	r3, #128	; 0x80
 8001a88:	055b      	lsls	r3, r3, #21
 8001a8a:	4013      	ands	r3, r2
 8001a8c:	d110      	bne.n	8001ab0 <HAL_RCCEx_PeriphCLKConfig+0x54>
    {
    __HAL_RCC_PWR_CLK_ENABLE();
 8001a8e:	4b6b      	ldr	r3, [pc, #428]	; (8001c3c <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8001a90:	69da      	ldr	r2, [r3, #28]
 8001a92:	4b6a      	ldr	r3, [pc, #424]	; (8001c3c <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8001a94:	2180      	movs	r1, #128	; 0x80
 8001a96:	0549      	lsls	r1, r1, #21
 8001a98:	430a      	orrs	r2, r1
 8001a9a:	61da      	str	r2, [r3, #28]
 8001a9c:	4b67      	ldr	r3, [pc, #412]	; (8001c3c <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8001a9e:	69da      	ldr	r2, [r3, #28]
 8001aa0:	2380      	movs	r3, #128	; 0x80
 8001aa2:	055b      	lsls	r3, r3, #21
 8001aa4:	4013      	ands	r3, r2
 8001aa6:	60bb      	str	r3, [r7, #8]
 8001aa8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001aaa:	183b      	adds	r3, r7, r0
 8001aac:	2201      	movs	r2, #1
 8001aae:	701a      	strb	r2, [r3, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001ab0:	4b63      	ldr	r3, [pc, #396]	; (8001c40 <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 8001ab2:	681a      	ldr	r2, [r3, #0]
 8001ab4:	2380      	movs	r3, #128	; 0x80
 8001ab6:	005b      	lsls	r3, r3, #1
 8001ab8:	4013      	ands	r3, r2
 8001aba:	d11a      	bne.n	8001af2 <HAL_RCCEx_PeriphCLKConfig+0x96>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001abc:	4b60      	ldr	r3, [pc, #384]	; (8001c40 <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 8001abe:	681a      	ldr	r2, [r3, #0]
 8001ac0:	4b5f      	ldr	r3, [pc, #380]	; (8001c40 <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 8001ac2:	2180      	movs	r1, #128	; 0x80
 8001ac4:	0049      	lsls	r1, r1, #1
 8001ac6:	430a      	orrs	r2, r1
 8001ac8:	601a      	str	r2, [r3, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001aca:	f7fe ffd9 	bl	8000a80 <HAL_GetTick>
 8001ace:	0003      	movs	r3, r0
 8001ad0:	613b      	str	r3, [r7, #16]
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001ad2:	e008      	b.n	8001ae6 <HAL_RCCEx_PeriphCLKConfig+0x8a>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001ad4:	f7fe ffd4 	bl	8000a80 <HAL_GetTick>
 8001ad8:	0002      	movs	r2, r0
 8001ada:	693b      	ldr	r3, [r7, #16]
 8001adc:	1ad3      	subs	r3, r2, r3
 8001ade:	2b64      	cmp	r3, #100	; 0x64
 8001ae0:	d901      	bls.n	8001ae6 <HAL_RCCEx_PeriphCLKConfig+0x8a>
        {
          return HAL_TIMEOUT;
 8001ae2:	2303      	movs	r3, #3
 8001ae4:	e0a6      	b.n	8001c34 <HAL_RCCEx_PeriphCLKConfig+0x1d8>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001ae6:	4b56      	ldr	r3, [pc, #344]	; (8001c40 <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 8001ae8:	681a      	ldr	r2, [r3, #0]
 8001aea:	2380      	movs	r3, #128	; 0x80
 8001aec:	005b      	lsls	r3, r3, #1
 8001aee:	4013      	ands	r3, r2
 8001af0:	d0f0      	beq.n	8001ad4 <HAL_RCCEx_PeriphCLKConfig+0x78>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8001af2:	4b52      	ldr	r3, [pc, #328]	; (8001c3c <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8001af4:	6a1a      	ldr	r2, [r3, #32]
 8001af6:	23c0      	movs	r3, #192	; 0xc0
 8001af8:	009b      	lsls	r3, r3, #2
 8001afa:	4013      	ands	r3, r2
 8001afc:	60fb      	str	r3, [r7, #12]
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8001afe:	68fb      	ldr	r3, [r7, #12]
 8001b00:	2b00      	cmp	r3, #0
 8001b02:	d034      	beq.n	8001b6e <HAL_RCCEx_PeriphCLKConfig+0x112>
 8001b04:	687b      	ldr	r3, [r7, #4]
 8001b06:	685a      	ldr	r2, [r3, #4]
 8001b08:	23c0      	movs	r3, #192	; 0xc0
 8001b0a:	009b      	lsls	r3, r3, #2
 8001b0c:	4013      	ands	r3, r2
 8001b0e:	68fa      	ldr	r2, [r7, #12]
 8001b10:	429a      	cmp	r2, r3
 8001b12:	d02c      	beq.n	8001b6e <HAL_RCCEx_PeriphCLKConfig+0x112>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8001b14:	4b49      	ldr	r3, [pc, #292]	; (8001c3c <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8001b16:	6a1b      	ldr	r3, [r3, #32]
 8001b18:	4a4a      	ldr	r2, [pc, #296]	; (8001c44 <HAL_RCCEx_PeriphCLKConfig+0x1e8>)
 8001b1a:	4013      	ands	r3, r2
 8001b1c:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8001b1e:	4b47      	ldr	r3, [pc, #284]	; (8001c3c <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8001b20:	6a1a      	ldr	r2, [r3, #32]
 8001b22:	4b46      	ldr	r3, [pc, #280]	; (8001c3c <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8001b24:	2180      	movs	r1, #128	; 0x80
 8001b26:	0249      	lsls	r1, r1, #9
 8001b28:	430a      	orrs	r2, r1
 8001b2a:	621a      	str	r2, [r3, #32]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8001b2c:	4b43      	ldr	r3, [pc, #268]	; (8001c3c <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8001b2e:	6a1a      	ldr	r2, [r3, #32]
 8001b30:	4b42      	ldr	r3, [pc, #264]	; (8001c3c <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8001b32:	4945      	ldr	r1, [pc, #276]	; (8001c48 <HAL_RCCEx_PeriphCLKConfig+0x1ec>)
 8001b34:	400a      	ands	r2, r1
 8001b36:	621a      	str	r2, [r3, #32]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8001b38:	4b40      	ldr	r3, [pc, #256]	; (8001c3c <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8001b3a:	68fa      	ldr	r2, [r7, #12]
 8001b3c:	621a      	str	r2, [r3, #32]
      
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8001b3e:	68fb      	ldr	r3, [r7, #12]
 8001b40:	2201      	movs	r2, #1
 8001b42:	4013      	ands	r3, r2
 8001b44:	d013      	beq.n	8001b6e <HAL_RCCEx_PeriphCLKConfig+0x112>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001b46:	f7fe ff9b 	bl	8000a80 <HAL_GetTick>
 8001b4a:	0003      	movs	r3, r0
 8001b4c:	613b      	str	r3, [r7, #16]
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001b4e:	e009      	b.n	8001b64 <HAL_RCCEx_PeriphCLKConfig+0x108>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001b50:	f7fe ff96 	bl	8000a80 <HAL_GetTick>
 8001b54:	0002      	movs	r2, r0
 8001b56:	693b      	ldr	r3, [r7, #16]
 8001b58:	1ad3      	subs	r3, r2, r3
 8001b5a:	4a3c      	ldr	r2, [pc, #240]	; (8001c4c <HAL_RCCEx_PeriphCLKConfig+0x1f0>)
 8001b5c:	4293      	cmp	r3, r2
 8001b5e:	d901      	bls.n	8001b64 <HAL_RCCEx_PeriphCLKConfig+0x108>
          {
            return HAL_TIMEOUT;
 8001b60:	2303      	movs	r3, #3
 8001b62:	e067      	b.n	8001c34 <HAL_RCCEx_PeriphCLKConfig+0x1d8>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001b64:	4b35      	ldr	r3, [pc, #212]	; (8001c3c <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8001b66:	6a1b      	ldr	r3, [r3, #32]
 8001b68:	2202      	movs	r2, #2
 8001b6a:	4013      	ands	r3, r2
 8001b6c:	d0f0      	beq.n	8001b50 <HAL_RCCEx_PeriphCLKConfig+0xf4>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8001b6e:	4b33      	ldr	r3, [pc, #204]	; (8001c3c <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8001b70:	6a1b      	ldr	r3, [r3, #32]
 8001b72:	4a34      	ldr	r2, [pc, #208]	; (8001c44 <HAL_RCCEx_PeriphCLKConfig+0x1e8>)
 8001b74:	4013      	ands	r3, r2
 8001b76:	0019      	movs	r1, r3
 8001b78:	687b      	ldr	r3, [r7, #4]
 8001b7a:	685a      	ldr	r2, [r3, #4]
 8001b7c:	4b2f      	ldr	r3, [pc, #188]	; (8001c3c <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8001b7e:	430a      	orrs	r2, r1
 8001b80:	621a      	str	r2, [r3, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8001b82:	2317      	movs	r3, #23
 8001b84:	18fb      	adds	r3, r7, r3
 8001b86:	781b      	ldrb	r3, [r3, #0]
 8001b88:	2b01      	cmp	r3, #1
 8001b8a:	d105      	bne.n	8001b98 <HAL_RCCEx_PeriphCLKConfig+0x13c>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001b8c:	4b2b      	ldr	r3, [pc, #172]	; (8001c3c <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8001b8e:	69da      	ldr	r2, [r3, #28]
 8001b90:	4b2a      	ldr	r3, [pc, #168]	; (8001c3c <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8001b92:	492f      	ldr	r1, [pc, #188]	; (8001c50 <HAL_RCCEx_PeriphCLKConfig+0x1f4>)
 8001b94:	400a      	ands	r2, r1
 8001b96:	61da      	str	r2, [r3, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8001b98:	687b      	ldr	r3, [r7, #4]
 8001b9a:	681b      	ldr	r3, [r3, #0]
 8001b9c:	2201      	movs	r2, #1
 8001b9e:	4013      	ands	r3, r2
 8001ba0:	d009      	beq.n	8001bb6 <HAL_RCCEx_PeriphCLKConfig+0x15a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8001ba2:	4b26      	ldr	r3, [pc, #152]	; (8001c3c <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8001ba4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ba6:	2203      	movs	r2, #3
 8001ba8:	4393      	bics	r3, r2
 8001baa:	0019      	movs	r1, r3
 8001bac:	687b      	ldr	r3, [r7, #4]
 8001bae:	689a      	ldr	r2, [r3, #8]
 8001bb0:	4b22      	ldr	r3, [pc, #136]	; (8001c3c <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8001bb2:	430a      	orrs	r2, r1
 8001bb4:	631a      	str	r2, [r3, #48]	; 0x30
  }
  
#if defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx)\
 || defined(STM32F091xC) || defined(STM32F098xx)
  /*----------------------------- USART2 Configuration --------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8001bb6:	687b      	ldr	r3, [r7, #4]
 8001bb8:	681b      	ldr	r3, [r3, #0]
 8001bba:	2202      	movs	r2, #2
 8001bbc:	4013      	ands	r3, r2
 8001bbe:	d009      	beq.n	8001bd4 <HAL_RCCEx_PeriphCLKConfig+0x178>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));
    
    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8001bc0:	4b1e      	ldr	r3, [pc, #120]	; (8001c3c <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8001bc2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001bc4:	4a23      	ldr	r2, [pc, #140]	; (8001c54 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8001bc6:	4013      	ands	r3, r2
 8001bc8:	0019      	movs	r1, r3
 8001bca:	687b      	ldr	r3, [r7, #4]
 8001bcc:	68da      	ldr	r2, [r3, #12]
 8001bce:	4b1b      	ldr	r3, [pc, #108]	; (8001c3c <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8001bd0:	430a      	orrs	r2, r1
 8001bd2:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
  }
#endif /* STM32F091xC || STM32F098xx */  

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8001bd4:	687b      	ldr	r3, [r7, #4]
 8001bd6:	681b      	ldr	r3, [r3, #0]
 8001bd8:	2220      	movs	r2, #32
 8001bda:	4013      	ands	r3, r2
 8001bdc:	d009      	beq.n	8001bf2 <HAL_RCCEx_PeriphCLKConfig+0x196>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8001bde:	4b17      	ldr	r3, [pc, #92]	; (8001c3c <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8001be0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001be2:	2210      	movs	r2, #16
 8001be4:	4393      	bics	r3, r2
 8001be6:	0019      	movs	r1, r3
 8001be8:	687b      	ldr	r3, [r7, #4]
 8001bea:	691a      	ldr	r2, [r3, #16]
 8001bec:	4b13      	ldr	r3, [pc, #76]	; (8001c3c <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8001bee:	430a      	orrs	r2, r1
 8001bf0:	631a      	str	r2, [r3, #48]	; 0x30
  }

#if defined(STM32F042x6) || defined(STM32F048xx) || defined(STM32F072xB) || defined(STM32F078xx) || defined(STM32F070xB) || defined(STM32F070x6)
  /*------------------------------ USB Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8001bf2:	687b      	ldr	r3, [r7, #4]
 8001bf4:	681a      	ldr	r2, [r3, #0]
 8001bf6:	2380      	movs	r3, #128	; 0x80
 8001bf8:	029b      	lsls	r3, r3, #10
 8001bfa:	4013      	ands	r3, r2
 8001bfc:	d009      	beq.n	8001c12 <HAL_RCCEx_PeriphCLKConfig+0x1b6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    
    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8001bfe:	4b0f      	ldr	r3, [pc, #60]	; (8001c3c <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8001c00:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c02:	2280      	movs	r2, #128	; 0x80
 8001c04:	4393      	bics	r3, r2
 8001c06:	0019      	movs	r1, r3
 8001c08:	687b      	ldr	r3, [r7, #4]
 8001c0a:	699a      	ldr	r2, [r3, #24]
 8001c0c:	4b0b      	ldr	r3, [pc, #44]	; (8001c3c <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8001c0e:	430a      	orrs	r2, r1
 8001c10:	631a      	str	r2, [r3, #48]	; 0x30
#if defined(STM32F042x6) || defined(STM32F048xx)\
 || defined(STM32F051x8) || defined(STM32F058xx)\
 || defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx)\
 || defined(STM32F091xC) || defined(STM32F098xx)
  /*------------------------------ CEC clock Configuration -------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8001c12:	687b      	ldr	r3, [r7, #4]
 8001c14:	681a      	ldr	r2, [r3, #0]
 8001c16:	2380      	movs	r3, #128	; 0x80
 8001c18:	00db      	lsls	r3, r3, #3
 8001c1a:	4013      	ands	r3, r2
 8001c1c:	d009      	beq.n	8001c32 <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8001c1e:	4b07      	ldr	r3, [pc, #28]	; (8001c3c <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8001c20:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c22:	2240      	movs	r2, #64	; 0x40
 8001c24:	4393      	bics	r3, r2
 8001c26:	0019      	movs	r1, r3
 8001c28:	687b      	ldr	r3, [r7, #4]
 8001c2a:	695a      	ldr	r2, [r3, #20]
 8001c2c:	4b03      	ldr	r3, [pc, #12]	; (8001c3c <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8001c2e:	430a      	orrs	r2, r1
 8001c30:	631a      	str	r2, [r3, #48]	; 0x30
#endif /* STM32F042x6 || STM32F048xx ||                */
       /* STM32F051x8 || STM32F058xx ||                */
       /* STM32F071xB || STM32F072xB || STM32F078xx || */
       /* STM32F091xC || STM32F098xx */
  
  return HAL_OK;
 8001c32:	2300      	movs	r3, #0
}
 8001c34:	0018      	movs	r0, r3
 8001c36:	46bd      	mov	sp, r7
 8001c38:	b006      	add	sp, #24
 8001c3a:	bd80      	pop	{r7, pc}
 8001c3c:	40021000 	.word	0x40021000
 8001c40:	40007000 	.word	0x40007000
 8001c44:	fffffcff 	.word	0xfffffcff
 8001c48:	fffeffff 	.word	0xfffeffff
 8001c4c:	00001388 	.word	0x00001388
 8001c50:	efffffff 	.word	0xefffffff
 8001c54:	fffcffff 	.word	0xfffcffff

08001c58 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8001c58:	b580      	push	{r7, lr}
 8001c5a:	b082      	sub	sp, #8
 8001c5c:	af00      	add	r7, sp, #0
 8001c5e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001c60:	687b      	ldr	r3, [r7, #4]
 8001c62:	2b00      	cmp	r3, #0
 8001c64:	d101      	bne.n	8001c6a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8001c66:	2301      	movs	r3, #1
 8001c68:	e042      	b.n	8001cf0 <HAL_TIM_Base_Init+0x98>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001c6a:	687b      	ldr	r3, [r7, #4]
 8001c6c:	223d      	movs	r2, #61	; 0x3d
 8001c6e:	5c9b      	ldrb	r3, [r3, r2]
 8001c70:	b2db      	uxtb	r3, r3
 8001c72:	2b00      	cmp	r3, #0
 8001c74:	d107      	bne.n	8001c86 <HAL_TIM_Base_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001c76:	687b      	ldr	r3, [r7, #4]
 8001c78:	223c      	movs	r2, #60	; 0x3c
 8001c7a:	2100      	movs	r1, #0
 8001c7c:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8001c7e:	687b      	ldr	r3, [r7, #4]
 8001c80:	0018      	movs	r0, r3
 8001c82:	f7fe fd87 	bl	8000794 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001c86:	687b      	ldr	r3, [r7, #4]
 8001c88:	223d      	movs	r2, #61	; 0x3d
 8001c8a:	2102      	movs	r1, #2
 8001c8c:	5499      	strb	r1, [r3, r2]

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001c8e:	687b      	ldr	r3, [r7, #4]
 8001c90:	681a      	ldr	r2, [r3, #0]
 8001c92:	687b      	ldr	r3, [r7, #4]
 8001c94:	3304      	adds	r3, #4
 8001c96:	0019      	movs	r1, r3
 8001c98:	0010      	movs	r0, r2
 8001c9a:	f000 fd21 	bl	80026e0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8001c9e:	687b      	ldr	r3, [r7, #4]
 8001ca0:	2246      	movs	r2, #70	; 0x46
 8001ca2:	2101      	movs	r1, #1
 8001ca4:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001ca6:	687b      	ldr	r3, [r7, #4]
 8001ca8:	223e      	movs	r2, #62	; 0x3e
 8001caa:	2101      	movs	r1, #1
 8001cac:	5499      	strb	r1, [r3, r2]
 8001cae:	687b      	ldr	r3, [r7, #4]
 8001cb0:	223f      	movs	r2, #63	; 0x3f
 8001cb2:	2101      	movs	r1, #1
 8001cb4:	5499      	strb	r1, [r3, r2]
 8001cb6:	687b      	ldr	r3, [r7, #4]
 8001cb8:	2240      	movs	r2, #64	; 0x40
 8001cba:	2101      	movs	r1, #1
 8001cbc:	5499      	strb	r1, [r3, r2]
 8001cbe:	687b      	ldr	r3, [r7, #4]
 8001cc0:	2241      	movs	r2, #65	; 0x41
 8001cc2:	2101      	movs	r1, #1
 8001cc4:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001cc6:	687b      	ldr	r3, [r7, #4]
 8001cc8:	2242      	movs	r2, #66	; 0x42
 8001cca:	2101      	movs	r1, #1
 8001ccc:	5499      	strb	r1, [r3, r2]
 8001cce:	687b      	ldr	r3, [r7, #4]
 8001cd0:	2243      	movs	r2, #67	; 0x43
 8001cd2:	2101      	movs	r1, #1
 8001cd4:	5499      	strb	r1, [r3, r2]
 8001cd6:	687b      	ldr	r3, [r7, #4]
 8001cd8:	2244      	movs	r2, #68	; 0x44
 8001cda:	2101      	movs	r1, #1
 8001cdc:	5499      	strb	r1, [r3, r2]
 8001cde:	687b      	ldr	r3, [r7, #4]
 8001ce0:	2245      	movs	r2, #69	; 0x45
 8001ce2:	2101      	movs	r1, #1
 8001ce4:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001ce6:	687b      	ldr	r3, [r7, #4]
 8001ce8:	223d      	movs	r2, #61	; 0x3d
 8001cea:	2101      	movs	r1, #1
 8001cec:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8001cee:	2300      	movs	r3, #0
}
 8001cf0:	0018      	movs	r0, r3
 8001cf2:	46bd      	mov	sp, r7
 8001cf4:	b002      	add	sp, #8
 8001cf6:	bd80      	pop	{r7, pc}

08001cf8 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8001cf8:	b580      	push	{r7, lr}
 8001cfa:	b082      	sub	sp, #8
 8001cfc:	af00      	add	r7, sp, #0
 8001cfe:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001d00:	687b      	ldr	r3, [r7, #4]
 8001d02:	2b00      	cmp	r3, #0
 8001d04:	d101      	bne.n	8001d0a <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8001d06:	2301      	movs	r3, #1
 8001d08:	e042      	b.n	8001d90 <HAL_TIM_PWM_Init+0x98>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001d0a:	687b      	ldr	r3, [r7, #4]
 8001d0c:	223d      	movs	r2, #61	; 0x3d
 8001d0e:	5c9b      	ldrb	r3, [r3, r2]
 8001d10:	b2db      	uxtb	r3, r3
 8001d12:	2b00      	cmp	r3, #0
 8001d14:	d107      	bne.n	8001d26 <HAL_TIM_PWM_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001d16:	687b      	ldr	r3, [r7, #4]
 8001d18:	223c      	movs	r2, #60	; 0x3c
 8001d1a:	2100      	movs	r1, #0
 8001d1c:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8001d1e:	687b      	ldr	r3, [r7, #4]
 8001d20:	0018      	movs	r0, r3
 8001d22:	f000 f839 	bl	8001d98 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001d26:	687b      	ldr	r3, [r7, #4]
 8001d28:	223d      	movs	r2, #61	; 0x3d
 8001d2a:	2102      	movs	r1, #2
 8001d2c:	5499      	strb	r1, [r3, r2]

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001d2e:	687b      	ldr	r3, [r7, #4]
 8001d30:	681a      	ldr	r2, [r3, #0]
 8001d32:	687b      	ldr	r3, [r7, #4]
 8001d34:	3304      	adds	r3, #4
 8001d36:	0019      	movs	r1, r3
 8001d38:	0010      	movs	r0, r2
 8001d3a:	f000 fcd1 	bl	80026e0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8001d3e:	687b      	ldr	r3, [r7, #4]
 8001d40:	2246      	movs	r2, #70	; 0x46
 8001d42:	2101      	movs	r1, #1
 8001d44:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001d46:	687b      	ldr	r3, [r7, #4]
 8001d48:	223e      	movs	r2, #62	; 0x3e
 8001d4a:	2101      	movs	r1, #1
 8001d4c:	5499      	strb	r1, [r3, r2]
 8001d4e:	687b      	ldr	r3, [r7, #4]
 8001d50:	223f      	movs	r2, #63	; 0x3f
 8001d52:	2101      	movs	r1, #1
 8001d54:	5499      	strb	r1, [r3, r2]
 8001d56:	687b      	ldr	r3, [r7, #4]
 8001d58:	2240      	movs	r2, #64	; 0x40
 8001d5a:	2101      	movs	r1, #1
 8001d5c:	5499      	strb	r1, [r3, r2]
 8001d5e:	687b      	ldr	r3, [r7, #4]
 8001d60:	2241      	movs	r2, #65	; 0x41
 8001d62:	2101      	movs	r1, #1
 8001d64:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001d66:	687b      	ldr	r3, [r7, #4]
 8001d68:	2242      	movs	r2, #66	; 0x42
 8001d6a:	2101      	movs	r1, #1
 8001d6c:	5499      	strb	r1, [r3, r2]
 8001d6e:	687b      	ldr	r3, [r7, #4]
 8001d70:	2243      	movs	r2, #67	; 0x43
 8001d72:	2101      	movs	r1, #1
 8001d74:	5499      	strb	r1, [r3, r2]
 8001d76:	687b      	ldr	r3, [r7, #4]
 8001d78:	2244      	movs	r2, #68	; 0x44
 8001d7a:	2101      	movs	r1, #1
 8001d7c:	5499      	strb	r1, [r3, r2]
 8001d7e:	687b      	ldr	r3, [r7, #4]
 8001d80:	2245      	movs	r2, #69	; 0x45
 8001d82:	2101      	movs	r1, #1
 8001d84:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001d86:	687b      	ldr	r3, [r7, #4]
 8001d88:	223d      	movs	r2, #61	; 0x3d
 8001d8a:	2101      	movs	r1, #1
 8001d8c:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8001d8e:	2300      	movs	r3, #0
}
 8001d90:	0018      	movs	r0, r3
 8001d92:	46bd      	mov	sp, r7
 8001d94:	b002      	add	sp, #8
 8001d96:	bd80      	pop	{r7, pc}

08001d98 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8001d98:	b580      	push	{r7, lr}
 8001d9a:	b082      	sub	sp, #8
 8001d9c:	af00      	add	r7, sp, #0
 8001d9e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8001da0:	46c0      	nop			; (mov r8, r8)
 8001da2:	46bd      	mov	sp, r7
 8001da4:	b002      	add	sp, #8
 8001da6:	bd80      	pop	{r7, pc}

08001da8 <HAL_TIM_PWM_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8001da8:	b580      	push	{r7, lr}
 8001daa:	b084      	sub	sp, #16
 8001dac:	af00      	add	r7, sp, #0
 8001dae:	6078      	str	r0, [r7, #4]
 8001db0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8001db2:	230f      	movs	r3, #15
 8001db4:	18fb      	adds	r3, r7, r3
 8001db6:	2200      	movs	r2, #0
 8001db8:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8001dba:	683b      	ldr	r3, [r7, #0]
 8001dbc:	2b00      	cmp	r3, #0
 8001dbe:	d108      	bne.n	8001dd2 <HAL_TIM_PWM_Start_IT+0x2a>
 8001dc0:	687b      	ldr	r3, [r7, #4]
 8001dc2:	223e      	movs	r2, #62	; 0x3e
 8001dc4:	5c9b      	ldrb	r3, [r3, r2]
 8001dc6:	b2db      	uxtb	r3, r3
 8001dc8:	3b01      	subs	r3, #1
 8001dca:	1e5a      	subs	r2, r3, #1
 8001dcc:	4193      	sbcs	r3, r2
 8001dce:	b2db      	uxtb	r3, r3
 8001dd0:	e01f      	b.n	8001e12 <HAL_TIM_PWM_Start_IT+0x6a>
 8001dd2:	683b      	ldr	r3, [r7, #0]
 8001dd4:	2b04      	cmp	r3, #4
 8001dd6:	d108      	bne.n	8001dea <HAL_TIM_PWM_Start_IT+0x42>
 8001dd8:	687b      	ldr	r3, [r7, #4]
 8001dda:	223f      	movs	r2, #63	; 0x3f
 8001ddc:	5c9b      	ldrb	r3, [r3, r2]
 8001dde:	b2db      	uxtb	r3, r3
 8001de0:	3b01      	subs	r3, #1
 8001de2:	1e5a      	subs	r2, r3, #1
 8001de4:	4193      	sbcs	r3, r2
 8001de6:	b2db      	uxtb	r3, r3
 8001de8:	e013      	b.n	8001e12 <HAL_TIM_PWM_Start_IT+0x6a>
 8001dea:	683b      	ldr	r3, [r7, #0]
 8001dec:	2b08      	cmp	r3, #8
 8001dee:	d108      	bne.n	8001e02 <HAL_TIM_PWM_Start_IT+0x5a>
 8001df0:	687b      	ldr	r3, [r7, #4]
 8001df2:	2240      	movs	r2, #64	; 0x40
 8001df4:	5c9b      	ldrb	r3, [r3, r2]
 8001df6:	b2db      	uxtb	r3, r3
 8001df8:	3b01      	subs	r3, #1
 8001dfa:	1e5a      	subs	r2, r3, #1
 8001dfc:	4193      	sbcs	r3, r2
 8001dfe:	b2db      	uxtb	r3, r3
 8001e00:	e007      	b.n	8001e12 <HAL_TIM_PWM_Start_IT+0x6a>
 8001e02:	687b      	ldr	r3, [r7, #4]
 8001e04:	2241      	movs	r2, #65	; 0x41
 8001e06:	5c9b      	ldrb	r3, [r3, r2]
 8001e08:	b2db      	uxtb	r3, r3
 8001e0a:	3b01      	subs	r3, #1
 8001e0c:	1e5a      	subs	r2, r3, #1
 8001e0e:	4193      	sbcs	r3, r2
 8001e10:	b2db      	uxtb	r3, r3
 8001e12:	2b00      	cmp	r3, #0
 8001e14:	d001      	beq.n	8001e1a <HAL_TIM_PWM_Start_IT+0x72>
  {
    return HAL_ERROR;
 8001e16:	2301      	movs	r3, #1
 8001e18:	e0b7      	b.n	8001f8a <HAL_TIM_PWM_Start_IT+0x1e2>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8001e1a:	683b      	ldr	r3, [r7, #0]
 8001e1c:	2b00      	cmp	r3, #0
 8001e1e:	d104      	bne.n	8001e2a <HAL_TIM_PWM_Start_IT+0x82>
 8001e20:	687b      	ldr	r3, [r7, #4]
 8001e22:	223e      	movs	r2, #62	; 0x3e
 8001e24:	2102      	movs	r1, #2
 8001e26:	5499      	strb	r1, [r3, r2]
 8001e28:	e013      	b.n	8001e52 <HAL_TIM_PWM_Start_IT+0xaa>
 8001e2a:	683b      	ldr	r3, [r7, #0]
 8001e2c:	2b04      	cmp	r3, #4
 8001e2e:	d104      	bne.n	8001e3a <HAL_TIM_PWM_Start_IT+0x92>
 8001e30:	687b      	ldr	r3, [r7, #4]
 8001e32:	223f      	movs	r2, #63	; 0x3f
 8001e34:	2102      	movs	r1, #2
 8001e36:	5499      	strb	r1, [r3, r2]
 8001e38:	e00b      	b.n	8001e52 <HAL_TIM_PWM_Start_IT+0xaa>
 8001e3a:	683b      	ldr	r3, [r7, #0]
 8001e3c:	2b08      	cmp	r3, #8
 8001e3e:	d104      	bne.n	8001e4a <HAL_TIM_PWM_Start_IT+0xa2>
 8001e40:	687b      	ldr	r3, [r7, #4]
 8001e42:	2240      	movs	r2, #64	; 0x40
 8001e44:	2102      	movs	r1, #2
 8001e46:	5499      	strb	r1, [r3, r2]
 8001e48:	e003      	b.n	8001e52 <HAL_TIM_PWM_Start_IT+0xaa>
 8001e4a:	687b      	ldr	r3, [r7, #4]
 8001e4c:	2241      	movs	r2, #65	; 0x41
 8001e4e:	2102      	movs	r1, #2
 8001e50:	5499      	strb	r1, [r3, r2]

  switch (Channel)
 8001e52:	683b      	ldr	r3, [r7, #0]
 8001e54:	2b0c      	cmp	r3, #12
 8001e56:	d02a      	beq.n	8001eae <HAL_TIM_PWM_Start_IT+0x106>
 8001e58:	683b      	ldr	r3, [r7, #0]
 8001e5a:	2b0c      	cmp	r3, #12
 8001e5c:	d830      	bhi.n	8001ec0 <HAL_TIM_PWM_Start_IT+0x118>
 8001e5e:	683b      	ldr	r3, [r7, #0]
 8001e60:	2b08      	cmp	r3, #8
 8001e62:	d01b      	beq.n	8001e9c <HAL_TIM_PWM_Start_IT+0xf4>
 8001e64:	683b      	ldr	r3, [r7, #0]
 8001e66:	2b08      	cmp	r3, #8
 8001e68:	d82a      	bhi.n	8001ec0 <HAL_TIM_PWM_Start_IT+0x118>
 8001e6a:	683b      	ldr	r3, [r7, #0]
 8001e6c:	2b00      	cmp	r3, #0
 8001e6e:	d003      	beq.n	8001e78 <HAL_TIM_PWM_Start_IT+0xd0>
 8001e70:	683b      	ldr	r3, [r7, #0]
 8001e72:	2b04      	cmp	r3, #4
 8001e74:	d009      	beq.n	8001e8a <HAL_TIM_PWM_Start_IT+0xe2>
 8001e76:	e023      	b.n	8001ec0 <HAL_TIM_PWM_Start_IT+0x118>
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8001e78:	687b      	ldr	r3, [r7, #4]
 8001e7a:	681b      	ldr	r3, [r3, #0]
 8001e7c:	68da      	ldr	r2, [r3, #12]
 8001e7e:	687b      	ldr	r3, [r7, #4]
 8001e80:	681b      	ldr	r3, [r3, #0]
 8001e82:	2102      	movs	r1, #2
 8001e84:	430a      	orrs	r2, r1
 8001e86:	60da      	str	r2, [r3, #12]
      break;
 8001e88:	e01f      	b.n	8001eca <HAL_TIM_PWM_Start_IT+0x122>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 8001e8a:	687b      	ldr	r3, [r7, #4]
 8001e8c:	681b      	ldr	r3, [r3, #0]
 8001e8e:	68da      	ldr	r2, [r3, #12]
 8001e90:	687b      	ldr	r3, [r7, #4]
 8001e92:	681b      	ldr	r3, [r3, #0]
 8001e94:	2104      	movs	r1, #4
 8001e96:	430a      	orrs	r2, r1
 8001e98:	60da      	str	r2, [r3, #12]
      break;
 8001e9a:	e016      	b.n	8001eca <HAL_TIM_PWM_Start_IT+0x122>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 8001e9c:	687b      	ldr	r3, [r7, #4]
 8001e9e:	681b      	ldr	r3, [r3, #0]
 8001ea0:	68da      	ldr	r2, [r3, #12]
 8001ea2:	687b      	ldr	r3, [r7, #4]
 8001ea4:	681b      	ldr	r3, [r3, #0]
 8001ea6:	2108      	movs	r1, #8
 8001ea8:	430a      	orrs	r2, r1
 8001eaa:	60da      	str	r2, [r3, #12]
      break;
 8001eac:	e00d      	b.n	8001eca <HAL_TIM_PWM_Start_IT+0x122>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 8001eae:	687b      	ldr	r3, [r7, #4]
 8001eb0:	681b      	ldr	r3, [r3, #0]
 8001eb2:	68da      	ldr	r2, [r3, #12]
 8001eb4:	687b      	ldr	r3, [r7, #4]
 8001eb6:	681b      	ldr	r3, [r3, #0]
 8001eb8:	2110      	movs	r1, #16
 8001eba:	430a      	orrs	r2, r1
 8001ebc:	60da      	str	r2, [r3, #12]
      break;
 8001ebe:	e004      	b.n	8001eca <HAL_TIM_PWM_Start_IT+0x122>
    }

    default:
      status = HAL_ERROR;
 8001ec0:	230f      	movs	r3, #15
 8001ec2:	18fb      	adds	r3, r7, r3
 8001ec4:	2201      	movs	r2, #1
 8001ec6:	701a      	strb	r2, [r3, #0]
      break;
 8001ec8:	46c0      	nop			; (mov r8, r8)
  }

  if (status == HAL_OK)
 8001eca:	230f      	movs	r3, #15
 8001ecc:	18fb      	adds	r3, r7, r3
 8001ece:	781b      	ldrb	r3, [r3, #0]
 8001ed0:	2b00      	cmp	r3, #0
 8001ed2:	d157      	bne.n	8001f84 <HAL_TIM_PWM_Start_IT+0x1dc>
  {
    /* Enable the Capture compare channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8001ed4:	687b      	ldr	r3, [r7, #4]
 8001ed6:	681b      	ldr	r3, [r3, #0]
 8001ed8:	6839      	ldr	r1, [r7, #0]
 8001eda:	2201      	movs	r2, #1
 8001edc:	0018      	movs	r0, r3
 8001ede:	f000 ff15 	bl	8002d0c <TIM_CCxChannelCmd>

    if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8001ee2:	687b      	ldr	r3, [r7, #4]
 8001ee4:	681b      	ldr	r3, [r3, #0]
 8001ee6:	4a2b      	ldr	r2, [pc, #172]	; (8001f94 <HAL_TIM_PWM_Start_IT+0x1ec>)
 8001ee8:	4293      	cmp	r3, r2
 8001eea:	d00e      	beq.n	8001f0a <HAL_TIM_PWM_Start_IT+0x162>
 8001eec:	687b      	ldr	r3, [r7, #4]
 8001eee:	681b      	ldr	r3, [r3, #0]
 8001ef0:	4a29      	ldr	r2, [pc, #164]	; (8001f98 <HAL_TIM_PWM_Start_IT+0x1f0>)
 8001ef2:	4293      	cmp	r3, r2
 8001ef4:	d009      	beq.n	8001f0a <HAL_TIM_PWM_Start_IT+0x162>
 8001ef6:	687b      	ldr	r3, [r7, #4]
 8001ef8:	681b      	ldr	r3, [r3, #0]
 8001efa:	4a28      	ldr	r2, [pc, #160]	; (8001f9c <HAL_TIM_PWM_Start_IT+0x1f4>)
 8001efc:	4293      	cmp	r3, r2
 8001efe:	d004      	beq.n	8001f0a <HAL_TIM_PWM_Start_IT+0x162>
 8001f00:	687b      	ldr	r3, [r7, #4]
 8001f02:	681b      	ldr	r3, [r3, #0]
 8001f04:	4a26      	ldr	r2, [pc, #152]	; (8001fa0 <HAL_TIM_PWM_Start_IT+0x1f8>)
 8001f06:	4293      	cmp	r3, r2
 8001f08:	d101      	bne.n	8001f0e <HAL_TIM_PWM_Start_IT+0x166>
 8001f0a:	2301      	movs	r3, #1
 8001f0c:	e000      	b.n	8001f10 <HAL_TIM_PWM_Start_IT+0x168>
 8001f0e:	2300      	movs	r3, #0
 8001f10:	2b00      	cmp	r3, #0
 8001f12:	d008      	beq.n	8001f26 <HAL_TIM_PWM_Start_IT+0x17e>
    {
      /* Enable the main output */
      __HAL_TIM_MOE_ENABLE(htim);
 8001f14:	687b      	ldr	r3, [r7, #4]
 8001f16:	681b      	ldr	r3, [r3, #0]
 8001f18:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8001f1a:	687b      	ldr	r3, [r7, #4]
 8001f1c:	681b      	ldr	r3, [r3, #0]
 8001f1e:	2180      	movs	r1, #128	; 0x80
 8001f20:	0209      	lsls	r1, r1, #8
 8001f22:	430a      	orrs	r2, r1
 8001f24:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8001f26:	687b      	ldr	r3, [r7, #4]
 8001f28:	681b      	ldr	r3, [r3, #0]
 8001f2a:	4a1a      	ldr	r2, [pc, #104]	; (8001f94 <HAL_TIM_PWM_Start_IT+0x1ec>)
 8001f2c:	4293      	cmp	r3, r2
 8001f2e:	d00f      	beq.n	8001f50 <HAL_TIM_PWM_Start_IT+0x1a8>
 8001f30:	687b      	ldr	r3, [r7, #4]
 8001f32:	681a      	ldr	r2, [r3, #0]
 8001f34:	2380      	movs	r3, #128	; 0x80
 8001f36:	05db      	lsls	r3, r3, #23
 8001f38:	429a      	cmp	r2, r3
 8001f3a:	d009      	beq.n	8001f50 <HAL_TIM_PWM_Start_IT+0x1a8>
 8001f3c:	687b      	ldr	r3, [r7, #4]
 8001f3e:	681b      	ldr	r3, [r3, #0]
 8001f40:	4a18      	ldr	r2, [pc, #96]	; (8001fa4 <HAL_TIM_PWM_Start_IT+0x1fc>)
 8001f42:	4293      	cmp	r3, r2
 8001f44:	d004      	beq.n	8001f50 <HAL_TIM_PWM_Start_IT+0x1a8>
 8001f46:	687b      	ldr	r3, [r7, #4]
 8001f48:	681b      	ldr	r3, [r3, #0]
 8001f4a:	4a13      	ldr	r2, [pc, #76]	; (8001f98 <HAL_TIM_PWM_Start_IT+0x1f0>)
 8001f4c:	4293      	cmp	r3, r2
 8001f4e:	d111      	bne.n	8001f74 <HAL_TIM_PWM_Start_IT+0x1cc>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8001f50:	687b      	ldr	r3, [r7, #4]
 8001f52:	681b      	ldr	r3, [r3, #0]
 8001f54:	689b      	ldr	r3, [r3, #8]
 8001f56:	2207      	movs	r2, #7
 8001f58:	4013      	ands	r3, r2
 8001f5a:	60bb      	str	r3, [r7, #8]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001f5c:	68bb      	ldr	r3, [r7, #8]
 8001f5e:	2b06      	cmp	r3, #6
 8001f60:	d010      	beq.n	8001f84 <HAL_TIM_PWM_Start_IT+0x1dc>
      {
        __HAL_TIM_ENABLE(htim);
 8001f62:	687b      	ldr	r3, [r7, #4]
 8001f64:	681b      	ldr	r3, [r3, #0]
 8001f66:	681a      	ldr	r2, [r3, #0]
 8001f68:	687b      	ldr	r3, [r7, #4]
 8001f6a:	681b      	ldr	r3, [r3, #0]
 8001f6c:	2101      	movs	r1, #1
 8001f6e:	430a      	orrs	r2, r1
 8001f70:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001f72:	e007      	b.n	8001f84 <HAL_TIM_PWM_Start_IT+0x1dc>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 8001f74:	687b      	ldr	r3, [r7, #4]
 8001f76:	681b      	ldr	r3, [r3, #0]
 8001f78:	681a      	ldr	r2, [r3, #0]
 8001f7a:	687b      	ldr	r3, [r7, #4]
 8001f7c:	681b      	ldr	r3, [r3, #0]
 8001f7e:	2101      	movs	r1, #1
 8001f80:	430a      	orrs	r2, r1
 8001f82:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return status;
 8001f84:	230f      	movs	r3, #15
 8001f86:	18fb      	adds	r3, r7, r3
 8001f88:	781b      	ldrb	r3, [r3, #0]
}
 8001f8a:	0018      	movs	r0, r3
 8001f8c:	46bd      	mov	sp, r7
 8001f8e:	b004      	add	sp, #16
 8001f90:	bd80      	pop	{r7, pc}
 8001f92:	46c0      	nop			; (mov r8, r8)
 8001f94:	40012c00 	.word	0x40012c00
 8001f98:	40014000 	.word	0x40014000
 8001f9c:	40014400 	.word	0x40014400
 8001fa0:	40014800 	.word	0x40014800
 8001fa4:	40000400 	.word	0x40000400

08001fa8 <HAL_TIM_PWM_Stop_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8001fa8:	b580      	push	{r7, lr}
 8001faa:	b084      	sub	sp, #16
 8001fac:	af00      	add	r7, sp, #0
 8001fae:	6078      	str	r0, [r7, #4]
 8001fb0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8001fb2:	230f      	movs	r3, #15
 8001fb4:	18fb      	adds	r3, r7, r3
 8001fb6:	2200      	movs	r2, #0
 8001fb8:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  switch (Channel)
 8001fba:	683b      	ldr	r3, [r7, #0]
 8001fbc:	2b0c      	cmp	r3, #12
 8001fbe:	d02a      	beq.n	8002016 <HAL_TIM_PWM_Stop_IT+0x6e>
 8001fc0:	683b      	ldr	r3, [r7, #0]
 8001fc2:	2b0c      	cmp	r3, #12
 8001fc4:	d830      	bhi.n	8002028 <HAL_TIM_PWM_Stop_IT+0x80>
 8001fc6:	683b      	ldr	r3, [r7, #0]
 8001fc8:	2b08      	cmp	r3, #8
 8001fca:	d01b      	beq.n	8002004 <HAL_TIM_PWM_Stop_IT+0x5c>
 8001fcc:	683b      	ldr	r3, [r7, #0]
 8001fce:	2b08      	cmp	r3, #8
 8001fd0:	d82a      	bhi.n	8002028 <HAL_TIM_PWM_Stop_IT+0x80>
 8001fd2:	683b      	ldr	r3, [r7, #0]
 8001fd4:	2b00      	cmp	r3, #0
 8001fd6:	d003      	beq.n	8001fe0 <HAL_TIM_PWM_Stop_IT+0x38>
 8001fd8:	683b      	ldr	r3, [r7, #0]
 8001fda:	2b04      	cmp	r3, #4
 8001fdc:	d009      	beq.n	8001ff2 <HAL_TIM_PWM_Stop_IT+0x4a>
 8001fde:	e023      	b.n	8002028 <HAL_TIM_PWM_Stop_IT+0x80>
  {
    case TIM_CHANNEL_1:
    {
      /* Disable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC1);
 8001fe0:	687b      	ldr	r3, [r7, #4]
 8001fe2:	681b      	ldr	r3, [r3, #0]
 8001fe4:	68da      	ldr	r2, [r3, #12]
 8001fe6:	687b      	ldr	r3, [r7, #4]
 8001fe8:	681b      	ldr	r3, [r3, #0]
 8001fea:	2102      	movs	r1, #2
 8001fec:	438a      	bics	r2, r1
 8001fee:	60da      	str	r2, [r3, #12]
      break;
 8001ff0:	e01f      	b.n	8002032 <HAL_TIM_PWM_Stop_IT+0x8a>
    }

    case TIM_CHANNEL_2:
    {
      /* Disable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC2);
 8001ff2:	687b      	ldr	r3, [r7, #4]
 8001ff4:	681b      	ldr	r3, [r3, #0]
 8001ff6:	68da      	ldr	r2, [r3, #12]
 8001ff8:	687b      	ldr	r3, [r7, #4]
 8001ffa:	681b      	ldr	r3, [r3, #0]
 8001ffc:	2104      	movs	r1, #4
 8001ffe:	438a      	bics	r2, r1
 8002000:	60da      	str	r2, [r3, #12]
      break;
 8002002:	e016      	b.n	8002032 <HAL_TIM_PWM_Stop_IT+0x8a>
    }

    case TIM_CHANNEL_3:
    {
      /* Disable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC3);
 8002004:	687b      	ldr	r3, [r7, #4]
 8002006:	681b      	ldr	r3, [r3, #0]
 8002008:	68da      	ldr	r2, [r3, #12]
 800200a:	687b      	ldr	r3, [r7, #4]
 800200c:	681b      	ldr	r3, [r3, #0]
 800200e:	2108      	movs	r1, #8
 8002010:	438a      	bics	r2, r1
 8002012:	60da      	str	r2, [r3, #12]
      break;
 8002014:	e00d      	b.n	8002032 <HAL_TIM_PWM_Stop_IT+0x8a>
    }

    case TIM_CHANNEL_4:
    {
      /* Disable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC4);
 8002016:	687b      	ldr	r3, [r7, #4]
 8002018:	681b      	ldr	r3, [r3, #0]
 800201a:	68da      	ldr	r2, [r3, #12]
 800201c:	687b      	ldr	r3, [r7, #4]
 800201e:	681b      	ldr	r3, [r3, #0]
 8002020:	2110      	movs	r1, #16
 8002022:	438a      	bics	r2, r1
 8002024:	60da      	str	r2, [r3, #12]
      break;
 8002026:	e004      	b.n	8002032 <HAL_TIM_PWM_Stop_IT+0x8a>
    }

    default:
      status = HAL_ERROR;
 8002028:	230f      	movs	r3, #15
 800202a:	18fb      	adds	r3, r7, r3
 800202c:	2201      	movs	r2, #1
 800202e:	701a      	strb	r2, [r3, #0]
      break;
 8002030:	46c0      	nop			; (mov r8, r8)
  }

  if (status == HAL_OK)
 8002032:	230f      	movs	r3, #15
 8002034:	18fb      	adds	r3, r7, r3
 8002036:	781b      	ldrb	r3, [r3, #0]
 8002038:	2b00      	cmp	r3, #0
 800203a:	d000      	beq.n	800203e <HAL_TIM_PWM_Stop_IT+0x96>
 800203c:	e063      	b.n	8002106 <HAL_TIM_PWM_Stop_IT+0x15e>
  {
    /* Disable the Capture compare channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 800203e:	687b      	ldr	r3, [r7, #4]
 8002040:	681b      	ldr	r3, [r3, #0]
 8002042:	6839      	ldr	r1, [r7, #0]
 8002044:	2200      	movs	r2, #0
 8002046:	0018      	movs	r0, r3
 8002048:	f000 fe60 	bl	8002d0c <TIM_CCxChannelCmd>

    if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800204c:	687b      	ldr	r3, [r7, #4]
 800204e:	681b      	ldr	r3, [r3, #0]
 8002050:	4a30      	ldr	r2, [pc, #192]	; (8002114 <HAL_TIM_PWM_Stop_IT+0x16c>)
 8002052:	4293      	cmp	r3, r2
 8002054:	d00e      	beq.n	8002074 <HAL_TIM_PWM_Stop_IT+0xcc>
 8002056:	687b      	ldr	r3, [r7, #4]
 8002058:	681b      	ldr	r3, [r3, #0]
 800205a:	4a2f      	ldr	r2, [pc, #188]	; (8002118 <HAL_TIM_PWM_Stop_IT+0x170>)
 800205c:	4293      	cmp	r3, r2
 800205e:	d009      	beq.n	8002074 <HAL_TIM_PWM_Stop_IT+0xcc>
 8002060:	687b      	ldr	r3, [r7, #4]
 8002062:	681b      	ldr	r3, [r3, #0]
 8002064:	4a2d      	ldr	r2, [pc, #180]	; (800211c <HAL_TIM_PWM_Stop_IT+0x174>)
 8002066:	4293      	cmp	r3, r2
 8002068:	d004      	beq.n	8002074 <HAL_TIM_PWM_Stop_IT+0xcc>
 800206a:	687b      	ldr	r3, [r7, #4]
 800206c:	681b      	ldr	r3, [r3, #0]
 800206e:	4a2c      	ldr	r2, [pc, #176]	; (8002120 <HAL_TIM_PWM_Stop_IT+0x178>)
 8002070:	4293      	cmp	r3, r2
 8002072:	d101      	bne.n	8002078 <HAL_TIM_PWM_Stop_IT+0xd0>
 8002074:	2301      	movs	r3, #1
 8002076:	e000      	b.n	800207a <HAL_TIM_PWM_Stop_IT+0xd2>
 8002078:	2300      	movs	r3, #0
 800207a:	2b00      	cmp	r3, #0
 800207c:	d013      	beq.n	80020a6 <HAL_TIM_PWM_Stop_IT+0xfe>
    {
      /* Disable the Main Output */
      __HAL_TIM_MOE_DISABLE(htim);
 800207e:	687b      	ldr	r3, [r7, #4]
 8002080:	681b      	ldr	r3, [r3, #0]
 8002082:	6a1b      	ldr	r3, [r3, #32]
 8002084:	4a27      	ldr	r2, [pc, #156]	; (8002124 <HAL_TIM_PWM_Stop_IT+0x17c>)
 8002086:	4013      	ands	r3, r2
 8002088:	d10d      	bne.n	80020a6 <HAL_TIM_PWM_Stop_IT+0xfe>
 800208a:	687b      	ldr	r3, [r7, #4]
 800208c:	681b      	ldr	r3, [r3, #0]
 800208e:	6a1b      	ldr	r3, [r3, #32]
 8002090:	4a25      	ldr	r2, [pc, #148]	; (8002128 <HAL_TIM_PWM_Stop_IT+0x180>)
 8002092:	4013      	ands	r3, r2
 8002094:	d107      	bne.n	80020a6 <HAL_TIM_PWM_Stop_IT+0xfe>
 8002096:	687b      	ldr	r3, [r7, #4]
 8002098:	681b      	ldr	r3, [r3, #0]
 800209a:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800209c:	687b      	ldr	r3, [r7, #4]
 800209e:	681b      	ldr	r3, [r3, #0]
 80020a0:	4922      	ldr	r1, [pc, #136]	; (800212c <HAL_TIM_PWM_Stop_IT+0x184>)
 80020a2:	400a      	ands	r2, r1
 80020a4:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Disable the Peripheral */
    __HAL_TIM_DISABLE(htim);
 80020a6:	687b      	ldr	r3, [r7, #4]
 80020a8:	681b      	ldr	r3, [r3, #0]
 80020aa:	6a1b      	ldr	r3, [r3, #32]
 80020ac:	4a1d      	ldr	r2, [pc, #116]	; (8002124 <HAL_TIM_PWM_Stop_IT+0x17c>)
 80020ae:	4013      	ands	r3, r2
 80020b0:	d10d      	bne.n	80020ce <HAL_TIM_PWM_Stop_IT+0x126>
 80020b2:	687b      	ldr	r3, [r7, #4]
 80020b4:	681b      	ldr	r3, [r3, #0]
 80020b6:	6a1b      	ldr	r3, [r3, #32]
 80020b8:	4a1b      	ldr	r2, [pc, #108]	; (8002128 <HAL_TIM_PWM_Stop_IT+0x180>)
 80020ba:	4013      	ands	r3, r2
 80020bc:	d107      	bne.n	80020ce <HAL_TIM_PWM_Stop_IT+0x126>
 80020be:	687b      	ldr	r3, [r7, #4]
 80020c0:	681b      	ldr	r3, [r3, #0]
 80020c2:	681a      	ldr	r2, [r3, #0]
 80020c4:	687b      	ldr	r3, [r7, #4]
 80020c6:	681b      	ldr	r3, [r3, #0]
 80020c8:	2101      	movs	r1, #1
 80020ca:	438a      	bics	r2, r1
 80020cc:	601a      	str	r2, [r3, #0]

    /* Set the TIM channel state */
    TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 80020ce:	683b      	ldr	r3, [r7, #0]
 80020d0:	2b00      	cmp	r3, #0
 80020d2:	d104      	bne.n	80020de <HAL_TIM_PWM_Stop_IT+0x136>
 80020d4:	687b      	ldr	r3, [r7, #4]
 80020d6:	223e      	movs	r2, #62	; 0x3e
 80020d8:	2101      	movs	r1, #1
 80020da:	5499      	strb	r1, [r3, r2]
 80020dc:	e013      	b.n	8002106 <HAL_TIM_PWM_Stop_IT+0x15e>
 80020de:	683b      	ldr	r3, [r7, #0]
 80020e0:	2b04      	cmp	r3, #4
 80020e2:	d104      	bne.n	80020ee <HAL_TIM_PWM_Stop_IT+0x146>
 80020e4:	687b      	ldr	r3, [r7, #4]
 80020e6:	223f      	movs	r2, #63	; 0x3f
 80020e8:	2101      	movs	r1, #1
 80020ea:	5499      	strb	r1, [r3, r2]
 80020ec:	e00b      	b.n	8002106 <HAL_TIM_PWM_Stop_IT+0x15e>
 80020ee:	683b      	ldr	r3, [r7, #0]
 80020f0:	2b08      	cmp	r3, #8
 80020f2:	d104      	bne.n	80020fe <HAL_TIM_PWM_Stop_IT+0x156>
 80020f4:	687b      	ldr	r3, [r7, #4]
 80020f6:	2240      	movs	r2, #64	; 0x40
 80020f8:	2101      	movs	r1, #1
 80020fa:	5499      	strb	r1, [r3, r2]
 80020fc:	e003      	b.n	8002106 <HAL_TIM_PWM_Stop_IT+0x15e>
 80020fe:	687b      	ldr	r3, [r7, #4]
 8002100:	2241      	movs	r2, #65	; 0x41
 8002102:	2101      	movs	r1, #1
 8002104:	5499      	strb	r1, [r3, r2]
  }

  /* Return function status */
  return status;
 8002106:	230f      	movs	r3, #15
 8002108:	18fb      	adds	r3, r7, r3
 800210a:	781b      	ldrb	r3, [r3, #0]
}
 800210c:	0018      	movs	r0, r3
 800210e:	46bd      	mov	sp, r7
 8002110:	b004      	add	sp, #16
 8002112:	bd80      	pop	{r7, pc}
 8002114:	40012c00 	.word	0x40012c00
 8002118:	40014000 	.word	0x40014000
 800211c:	40014400 	.word	0x40014400
 8002120:	40014800 	.word	0x40014800
 8002124:	00001111 	.word	0x00001111
 8002128:	00000444 	.word	0x00000444
 800212c:	ffff7fff 	.word	0xffff7fff

08002130 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8002130:	b580      	push	{r7, lr}
 8002132:	b082      	sub	sp, #8
 8002134:	af00      	add	r7, sp, #0
 8002136:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8002138:	687b      	ldr	r3, [r7, #4]
 800213a:	681b      	ldr	r3, [r3, #0]
 800213c:	691b      	ldr	r3, [r3, #16]
 800213e:	2202      	movs	r2, #2
 8002140:	4013      	ands	r3, r2
 8002142:	2b02      	cmp	r3, #2
 8002144:	d124      	bne.n	8002190 <HAL_TIM_IRQHandler+0x60>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8002146:	687b      	ldr	r3, [r7, #4]
 8002148:	681b      	ldr	r3, [r3, #0]
 800214a:	68db      	ldr	r3, [r3, #12]
 800214c:	2202      	movs	r2, #2
 800214e:	4013      	ands	r3, r2
 8002150:	2b02      	cmp	r3, #2
 8002152:	d11d      	bne.n	8002190 <HAL_TIM_IRQHandler+0x60>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8002154:	687b      	ldr	r3, [r7, #4]
 8002156:	681b      	ldr	r3, [r3, #0]
 8002158:	2203      	movs	r2, #3
 800215a:	4252      	negs	r2, r2
 800215c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800215e:	687b      	ldr	r3, [r7, #4]
 8002160:	2201      	movs	r2, #1
 8002162:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002164:	687b      	ldr	r3, [r7, #4]
 8002166:	681b      	ldr	r3, [r3, #0]
 8002168:	699b      	ldr	r3, [r3, #24]
 800216a:	2203      	movs	r2, #3
 800216c:	4013      	ands	r3, r2
 800216e:	d004      	beq.n	800217a <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8002170:	687b      	ldr	r3, [r7, #4]
 8002172:	0018      	movs	r0, r3
 8002174:	f000 fa9c 	bl	80026b0 <HAL_TIM_IC_CaptureCallback>
 8002178:	e007      	b.n	800218a <HAL_TIM_IRQHandler+0x5a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800217a:	687b      	ldr	r3, [r7, #4]
 800217c:	0018      	movs	r0, r3
 800217e:	f000 fa8f 	bl	80026a0 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002182:	687b      	ldr	r3, [r7, #4]
 8002184:	0018      	movs	r0, r3
 8002186:	f000 fa9b 	bl	80026c0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800218a:	687b      	ldr	r3, [r7, #4]
 800218c:	2200      	movs	r2, #0
 800218e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8002190:	687b      	ldr	r3, [r7, #4]
 8002192:	681b      	ldr	r3, [r3, #0]
 8002194:	691b      	ldr	r3, [r3, #16]
 8002196:	2204      	movs	r2, #4
 8002198:	4013      	ands	r3, r2
 800219a:	2b04      	cmp	r3, #4
 800219c:	d125      	bne.n	80021ea <HAL_TIM_IRQHandler+0xba>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800219e:	687b      	ldr	r3, [r7, #4]
 80021a0:	681b      	ldr	r3, [r3, #0]
 80021a2:	68db      	ldr	r3, [r3, #12]
 80021a4:	2204      	movs	r2, #4
 80021a6:	4013      	ands	r3, r2
 80021a8:	2b04      	cmp	r3, #4
 80021aa:	d11e      	bne.n	80021ea <HAL_TIM_IRQHandler+0xba>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80021ac:	687b      	ldr	r3, [r7, #4]
 80021ae:	681b      	ldr	r3, [r3, #0]
 80021b0:	2205      	movs	r2, #5
 80021b2:	4252      	negs	r2, r2
 80021b4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80021b6:	687b      	ldr	r3, [r7, #4]
 80021b8:	2202      	movs	r2, #2
 80021ba:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80021bc:	687b      	ldr	r3, [r7, #4]
 80021be:	681b      	ldr	r3, [r3, #0]
 80021c0:	699a      	ldr	r2, [r3, #24]
 80021c2:	23c0      	movs	r3, #192	; 0xc0
 80021c4:	009b      	lsls	r3, r3, #2
 80021c6:	4013      	ands	r3, r2
 80021c8:	d004      	beq.n	80021d4 <HAL_TIM_IRQHandler+0xa4>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80021ca:	687b      	ldr	r3, [r7, #4]
 80021cc:	0018      	movs	r0, r3
 80021ce:	f000 fa6f 	bl	80026b0 <HAL_TIM_IC_CaptureCallback>
 80021d2:	e007      	b.n	80021e4 <HAL_TIM_IRQHandler+0xb4>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80021d4:	687b      	ldr	r3, [r7, #4]
 80021d6:	0018      	movs	r0, r3
 80021d8:	f000 fa62 	bl	80026a0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80021dc:	687b      	ldr	r3, [r7, #4]
 80021de:	0018      	movs	r0, r3
 80021e0:	f000 fa6e 	bl	80026c0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80021e4:	687b      	ldr	r3, [r7, #4]
 80021e6:	2200      	movs	r2, #0
 80021e8:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80021ea:	687b      	ldr	r3, [r7, #4]
 80021ec:	681b      	ldr	r3, [r3, #0]
 80021ee:	691b      	ldr	r3, [r3, #16]
 80021f0:	2208      	movs	r2, #8
 80021f2:	4013      	ands	r3, r2
 80021f4:	2b08      	cmp	r3, #8
 80021f6:	d124      	bne.n	8002242 <HAL_TIM_IRQHandler+0x112>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80021f8:	687b      	ldr	r3, [r7, #4]
 80021fa:	681b      	ldr	r3, [r3, #0]
 80021fc:	68db      	ldr	r3, [r3, #12]
 80021fe:	2208      	movs	r2, #8
 8002200:	4013      	ands	r3, r2
 8002202:	2b08      	cmp	r3, #8
 8002204:	d11d      	bne.n	8002242 <HAL_TIM_IRQHandler+0x112>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8002206:	687b      	ldr	r3, [r7, #4]
 8002208:	681b      	ldr	r3, [r3, #0]
 800220a:	2209      	movs	r2, #9
 800220c:	4252      	negs	r2, r2
 800220e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002210:	687b      	ldr	r3, [r7, #4]
 8002212:	2204      	movs	r2, #4
 8002214:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002216:	687b      	ldr	r3, [r7, #4]
 8002218:	681b      	ldr	r3, [r3, #0]
 800221a:	69db      	ldr	r3, [r3, #28]
 800221c:	2203      	movs	r2, #3
 800221e:	4013      	ands	r3, r2
 8002220:	d004      	beq.n	800222c <HAL_TIM_IRQHandler+0xfc>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002222:	687b      	ldr	r3, [r7, #4]
 8002224:	0018      	movs	r0, r3
 8002226:	f000 fa43 	bl	80026b0 <HAL_TIM_IC_CaptureCallback>
 800222a:	e007      	b.n	800223c <HAL_TIM_IRQHandler+0x10c>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800222c:	687b      	ldr	r3, [r7, #4]
 800222e:	0018      	movs	r0, r3
 8002230:	f000 fa36 	bl	80026a0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002234:	687b      	ldr	r3, [r7, #4]
 8002236:	0018      	movs	r0, r3
 8002238:	f000 fa42 	bl	80026c0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800223c:	687b      	ldr	r3, [r7, #4]
 800223e:	2200      	movs	r2, #0
 8002240:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8002242:	687b      	ldr	r3, [r7, #4]
 8002244:	681b      	ldr	r3, [r3, #0]
 8002246:	691b      	ldr	r3, [r3, #16]
 8002248:	2210      	movs	r2, #16
 800224a:	4013      	ands	r3, r2
 800224c:	2b10      	cmp	r3, #16
 800224e:	d125      	bne.n	800229c <HAL_TIM_IRQHandler+0x16c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8002250:	687b      	ldr	r3, [r7, #4]
 8002252:	681b      	ldr	r3, [r3, #0]
 8002254:	68db      	ldr	r3, [r3, #12]
 8002256:	2210      	movs	r2, #16
 8002258:	4013      	ands	r3, r2
 800225a:	2b10      	cmp	r3, #16
 800225c:	d11e      	bne.n	800229c <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800225e:	687b      	ldr	r3, [r7, #4]
 8002260:	681b      	ldr	r3, [r3, #0]
 8002262:	2211      	movs	r2, #17
 8002264:	4252      	negs	r2, r2
 8002266:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002268:	687b      	ldr	r3, [r7, #4]
 800226a:	2208      	movs	r2, #8
 800226c:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800226e:	687b      	ldr	r3, [r7, #4]
 8002270:	681b      	ldr	r3, [r3, #0]
 8002272:	69da      	ldr	r2, [r3, #28]
 8002274:	23c0      	movs	r3, #192	; 0xc0
 8002276:	009b      	lsls	r3, r3, #2
 8002278:	4013      	ands	r3, r2
 800227a:	d004      	beq.n	8002286 <HAL_TIM_IRQHandler+0x156>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800227c:	687b      	ldr	r3, [r7, #4]
 800227e:	0018      	movs	r0, r3
 8002280:	f000 fa16 	bl	80026b0 <HAL_TIM_IC_CaptureCallback>
 8002284:	e007      	b.n	8002296 <HAL_TIM_IRQHandler+0x166>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002286:	687b      	ldr	r3, [r7, #4]
 8002288:	0018      	movs	r0, r3
 800228a:	f000 fa09 	bl	80026a0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800228e:	687b      	ldr	r3, [r7, #4]
 8002290:	0018      	movs	r0, r3
 8002292:	f000 fa15 	bl	80026c0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002296:	687b      	ldr	r3, [r7, #4]
 8002298:	2200      	movs	r2, #0
 800229a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800229c:	687b      	ldr	r3, [r7, #4]
 800229e:	681b      	ldr	r3, [r3, #0]
 80022a0:	691b      	ldr	r3, [r3, #16]
 80022a2:	2201      	movs	r2, #1
 80022a4:	4013      	ands	r3, r2
 80022a6:	2b01      	cmp	r3, #1
 80022a8:	d10f      	bne.n	80022ca <HAL_TIM_IRQHandler+0x19a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80022aa:	687b      	ldr	r3, [r7, #4]
 80022ac:	681b      	ldr	r3, [r3, #0]
 80022ae:	68db      	ldr	r3, [r3, #12]
 80022b0:	2201      	movs	r2, #1
 80022b2:	4013      	ands	r3, r2
 80022b4:	2b01      	cmp	r3, #1
 80022b6:	d108      	bne.n	80022ca <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80022b8:	687b      	ldr	r3, [r7, #4]
 80022ba:	681b      	ldr	r3, [r3, #0]
 80022bc:	2202      	movs	r2, #2
 80022be:	4252      	negs	r2, r2
 80022c0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80022c2:	687b      	ldr	r3, [r7, #4]
 80022c4:	0018      	movs	r0, r3
 80022c6:	f000 f9e3 	bl	8002690 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80022ca:	687b      	ldr	r3, [r7, #4]
 80022cc:	681b      	ldr	r3, [r3, #0]
 80022ce:	691b      	ldr	r3, [r3, #16]
 80022d0:	2280      	movs	r2, #128	; 0x80
 80022d2:	4013      	ands	r3, r2
 80022d4:	2b80      	cmp	r3, #128	; 0x80
 80022d6:	d10f      	bne.n	80022f8 <HAL_TIM_IRQHandler+0x1c8>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80022d8:	687b      	ldr	r3, [r7, #4]
 80022da:	681b      	ldr	r3, [r3, #0]
 80022dc:	68db      	ldr	r3, [r3, #12]
 80022de:	2280      	movs	r2, #128	; 0x80
 80022e0:	4013      	ands	r3, r2
 80022e2:	2b80      	cmp	r3, #128	; 0x80
 80022e4:	d108      	bne.n	80022f8 <HAL_TIM_IRQHandler+0x1c8>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80022e6:	687b      	ldr	r3, [r7, #4]
 80022e8:	681b      	ldr	r3, [r3, #0]
 80022ea:	2281      	movs	r2, #129	; 0x81
 80022ec:	4252      	negs	r2, r2
 80022ee:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80022f0:	687b      	ldr	r3, [r7, #4]
 80022f2:	0018      	movs	r0, r3
 80022f4:	f000 fdf2 	bl	8002edc <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80022f8:	687b      	ldr	r3, [r7, #4]
 80022fa:	681b      	ldr	r3, [r3, #0]
 80022fc:	691b      	ldr	r3, [r3, #16]
 80022fe:	2240      	movs	r2, #64	; 0x40
 8002300:	4013      	ands	r3, r2
 8002302:	2b40      	cmp	r3, #64	; 0x40
 8002304:	d10f      	bne.n	8002326 <HAL_TIM_IRQHandler+0x1f6>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8002306:	687b      	ldr	r3, [r7, #4]
 8002308:	681b      	ldr	r3, [r3, #0]
 800230a:	68db      	ldr	r3, [r3, #12]
 800230c:	2240      	movs	r2, #64	; 0x40
 800230e:	4013      	ands	r3, r2
 8002310:	2b40      	cmp	r3, #64	; 0x40
 8002312:	d108      	bne.n	8002326 <HAL_TIM_IRQHandler+0x1f6>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8002314:	687b      	ldr	r3, [r7, #4]
 8002316:	681b      	ldr	r3, [r3, #0]
 8002318:	2241      	movs	r2, #65	; 0x41
 800231a:	4252      	negs	r2, r2
 800231c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800231e:	687b      	ldr	r3, [r7, #4]
 8002320:	0018      	movs	r0, r3
 8002322:	f000 f9d5 	bl	80026d0 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8002326:	687b      	ldr	r3, [r7, #4]
 8002328:	681b      	ldr	r3, [r3, #0]
 800232a:	691b      	ldr	r3, [r3, #16]
 800232c:	2220      	movs	r2, #32
 800232e:	4013      	ands	r3, r2
 8002330:	2b20      	cmp	r3, #32
 8002332:	d10f      	bne.n	8002354 <HAL_TIM_IRQHandler+0x224>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8002334:	687b      	ldr	r3, [r7, #4]
 8002336:	681b      	ldr	r3, [r3, #0]
 8002338:	68db      	ldr	r3, [r3, #12]
 800233a:	2220      	movs	r2, #32
 800233c:	4013      	ands	r3, r2
 800233e:	2b20      	cmp	r3, #32
 8002340:	d108      	bne.n	8002354 <HAL_TIM_IRQHandler+0x224>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8002342:	687b      	ldr	r3, [r7, #4]
 8002344:	681b      	ldr	r3, [r3, #0]
 8002346:	2221      	movs	r2, #33	; 0x21
 8002348:	4252      	negs	r2, r2
 800234a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800234c:	687b      	ldr	r3, [r7, #4]
 800234e:	0018      	movs	r0, r3
 8002350:	f000 fdbc 	bl	8002ecc <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8002354:	46c0      	nop			; (mov r8, r8)
 8002356:	46bd      	mov	sp, r7
 8002358:	b002      	add	sp, #8
 800235a:	bd80      	pop	{r7, pc}

0800235c <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800235c:	b580      	push	{r7, lr}
 800235e:	b086      	sub	sp, #24
 8002360:	af00      	add	r7, sp, #0
 8002362:	60f8      	str	r0, [r7, #12]
 8002364:	60b9      	str	r1, [r7, #8]
 8002366:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002368:	2317      	movs	r3, #23
 800236a:	18fb      	adds	r3, r7, r3
 800236c:	2200      	movs	r2, #0
 800236e:	701a      	strb	r2, [r3, #0]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8002370:	68fb      	ldr	r3, [r7, #12]
 8002372:	223c      	movs	r2, #60	; 0x3c
 8002374:	5c9b      	ldrb	r3, [r3, r2]
 8002376:	2b01      	cmp	r3, #1
 8002378:	d101      	bne.n	800237e <HAL_TIM_PWM_ConfigChannel+0x22>
 800237a:	2302      	movs	r3, #2
 800237c:	e0ad      	b.n	80024da <HAL_TIM_PWM_ConfigChannel+0x17e>
 800237e:	68fb      	ldr	r3, [r7, #12]
 8002380:	223c      	movs	r2, #60	; 0x3c
 8002382:	2101      	movs	r1, #1
 8002384:	5499      	strb	r1, [r3, r2]

  switch (Channel)
 8002386:	687b      	ldr	r3, [r7, #4]
 8002388:	2b0c      	cmp	r3, #12
 800238a:	d100      	bne.n	800238e <HAL_TIM_PWM_ConfigChannel+0x32>
 800238c:	e076      	b.n	800247c <HAL_TIM_PWM_ConfigChannel+0x120>
 800238e:	687b      	ldr	r3, [r7, #4]
 8002390:	2b0c      	cmp	r3, #12
 8002392:	d900      	bls.n	8002396 <HAL_TIM_PWM_ConfigChannel+0x3a>
 8002394:	e095      	b.n	80024c2 <HAL_TIM_PWM_ConfigChannel+0x166>
 8002396:	687b      	ldr	r3, [r7, #4]
 8002398:	2b08      	cmp	r3, #8
 800239a:	d04e      	beq.n	800243a <HAL_TIM_PWM_ConfigChannel+0xde>
 800239c:	687b      	ldr	r3, [r7, #4]
 800239e:	2b08      	cmp	r3, #8
 80023a0:	d900      	bls.n	80023a4 <HAL_TIM_PWM_ConfigChannel+0x48>
 80023a2:	e08e      	b.n	80024c2 <HAL_TIM_PWM_ConfigChannel+0x166>
 80023a4:	687b      	ldr	r3, [r7, #4]
 80023a6:	2b00      	cmp	r3, #0
 80023a8:	d003      	beq.n	80023b2 <HAL_TIM_PWM_ConfigChannel+0x56>
 80023aa:	687b      	ldr	r3, [r7, #4]
 80023ac:	2b04      	cmp	r3, #4
 80023ae:	d021      	beq.n	80023f4 <HAL_TIM_PWM_ConfigChannel+0x98>
 80023b0:	e087      	b.n	80024c2 <HAL_TIM_PWM_ConfigChannel+0x166>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80023b2:	68fb      	ldr	r3, [r7, #12]
 80023b4:	681b      	ldr	r3, [r3, #0]
 80023b6:	68ba      	ldr	r2, [r7, #8]
 80023b8:	0011      	movs	r1, r2
 80023ba:	0018      	movs	r0, r3
 80023bc:	f000 fa10 	bl	80027e0 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80023c0:	68fb      	ldr	r3, [r7, #12]
 80023c2:	681b      	ldr	r3, [r3, #0]
 80023c4:	699a      	ldr	r2, [r3, #24]
 80023c6:	68fb      	ldr	r3, [r7, #12]
 80023c8:	681b      	ldr	r3, [r3, #0]
 80023ca:	2108      	movs	r1, #8
 80023cc:	430a      	orrs	r2, r1
 80023ce:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80023d0:	68fb      	ldr	r3, [r7, #12]
 80023d2:	681b      	ldr	r3, [r3, #0]
 80023d4:	699a      	ldr	r2, [r3, #24]
 80023d6:	68fb      	ldr	r3, [r7, #12]
 80023d8:	681b      	ldr	r3, [r3, #0]
 80023da:	2104      	movs	r1, #4
 80023dc:	438a      	bics	r2, r1
 80023de:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80023e0:	68fb      	ldr	r3, [r7, #12]
 80023e2:	681b      	ldr	r3, [r3, #0]
 80023e4:	6999      	ldr	r1, [r3, #24]
 80023e6:	68bb      	ldr	r3, [r7, #8]
 80023e8:	691a      	ldr	r2, [r3, #16]
 80023ea:	68fb      	ldr	r3, [r7, #12]
 80023ec:	681b      	ldr	r3, [r3, #0]
 80023ee:	430a      	orrs	r2, r1
 80023f0:	619a      	str	r2, [r3, #24]
      break;
 80023f2:	e06b      	b.n	80024cc <HAL_TIM_PWM_ConfigChannel+0x170>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80023f4:	68fb      	ldr	r3, [r7, #12]
 80023f6:	681b      	ldr	r3, [r3, #0]
 80023f8:	68ba      	ldr	r2, [r7, #8]
 80023fa:	0011      	movs	r1, r2
 80023fc:	0018      	movs	r0, r3
 80023fe:	f000 fa77 	bl	80028f0 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8002402:	68fb      	ldr	r3, [r7, #12]
 8002404:	681b      	ldr	r3, [r3, #0]
 8002406:	699a      	ldr	r2, [r3, #24]
 8002408:	68fb      	ldr	r3, [r7, #12]
 800240a:	681b      	ldr	r3, [r3, #0]
 800240c:	2180      	movs	r1, #128	; 0x80
 800240e:	0109      	lsls	r1, r1, #4
 8002410:	430a      	orrs	r2, r1
 8002412:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8002414:	68fb      	ldr	r3, [r7, #12]
 8002416:	681b      	ldr	r3, [r3, #0]
 8002418:	699a      	ldr	r2, [r3, #24]
 800241a:	68fb      	ldr	r3, [r7, #12]
 800241c:	681b      	ldr	r3, [r3, #0]
 800241e:	4931      	ldr	r1, [pc, #196]	; (80024e4 <HAL_TIM_PWM_ConfigChannel+0x188>)
 8002420:	400a      	ands	r2, r1
 8002422:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8002424:	68fb      	ldr	r3, [r7, #12]
 8002426:	681b      	ldr	r3, [r3, #0]
 8002428:	6999      	ldr	r1, [r3, #24]
 800242a:	68bb      	ldr	r3, [r7, #8]
 800242c:	691b      	ldr	r3, [r3, #16]
 800242e:	021a      	lsls	r2, r3, #8
 8002430:	68fb      	ldr	r3, [r7, #12]
 8002432:	681b      	ldr	r3, [r3, #0]
 8002434:	430a      	orrs	r2, r1
 8002436:	619a      	str	r2, [r3, #24]
      break;
 8002438:	e048      	b.n	80024cc <HAL_TIM_PWM_ConfigChannel+0x170>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800243a:	68fb      	ldr	r3, [r7, #12]
 800243c:	681b      	ldr	r3, [r3, #0]
 800243e:	68ba      	ldr	r2, [r7, #8]
 8002440:	0011      	movs	r1, r2
 8002442:	0018      	movs	r0, r3
 8002444:	f000 fad8 	bl	80029f8 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8002448:	68fb      	ldr	r3, [r7, #12]
 800244a:	681b      	ldr	r3, [r3, #0]
 800244c:	69da      	ldr	r2, [r3, #28]
 800244e:	68fb      	ldr	r3, [r7, #12]
 8002450:	681b      	ldr	r3, [r3, #0]
 8002452:	2108      	movs	r1, #8
 8002454:	430a      	orrs	r2, r1
 8002456:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8002458:	68fb      	ldr	r3, [r7, #12]
 800245a:	681b      	ldr	r3, [r3, #0]
 800245c:	69da      	ldr	r2, [r3, #28]
 800245e:	68fb      	ldr	r3, [r7, #12]
 8002460:	681b      	ldr	r3, [r3, #0]
 8002462:	2104      	movs	r1, #4
 8002464:	438a      	bics	r2, r1
 8002466:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8002468:	68fb      	ldr	r3, [r7, #12]
 800246a:	681b      	ldr	r3, [r3, #0]
 800246c:	69d9      	ldr	r1, [r3, #28]
 800246e:	68bb      	ldr	r3, [r7, #8]
 8002470:	691a      	ldr	r2, [r3, #16]
 8002472:	68fb      	ldr	r3, [r7, #12]
 8002474:	681b      	ldr	r3, [r3, #0]
 8002476:	430a      	orrs	r2, r1
 8002478:	61da      	str	r2, [r3, #28]
      break;
 800247a:	e027      	b.n	80024cc <HAL_TIM_PWM_ConfigChannel+0x170>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800247c:	68fb      	ldr	r3, [r7, #12]
 800247e:	681b      	ldr	r3, [r3, #0]
 8002480:	68ba      	ldr	r2, [r7, #8]
 8002482:	0011      	movs	r1, r2
 8002484:	0018      	movs	r0, r3
 8002486:	f000 fb3d 	bl	8002b04 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800248a:	68fb      	ldr	r3, [r7, #12]
 800248c:	681b      	ldr	r3, [r3, #0]
 800248e:	69da      	ldr	r2, [r3, #28]
 8002490:	68fb      	ldr	r3, [r7, #12]
 8002492:	681b      	ldr	r3, [r3, #0]
 8002494:	2180      	movs	r1, #128	; 0x80
 8002496:	0109      	lsls	r1, r1, #4
 8002498:	430a      	orrs	r2, r1
 800249a:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800249c:	68fb      	ldr	r3, [r7, #12]
 800249e:	681b      	ldr	r3, [r3, #0]
 80024a0:	69da      	ldr	r2, [r3, #28]
 80024a2:	68fb      	ldr	r3, [r7, #12]
 80024a4:	681b      	ldr	r3, [r3, #0]
 80024a6:	490f      	ldr	r1, [pc, #60]	; (80024e4 <HAL_TIM_PWM_ConfigChannel+0x188>)
 80024a8:	400a      	ands	r2, r1
 80024aa:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80024ac:	68fb      	ldr	r3, [r7, #12]
 80024ae:	681b      	ldr	r3, [r3, #0]
 80024b0:	69d9      	ldr	r1, [r3, #28]
 80024b2:	68bb      	ldr	r3, [r7, #8]
 80024b4:	691b      	ldr	r3, [r3, #16]
 80024b6:	021a      	lsls	r2, r3, #8
 80024b8:	68fb      	ldr	r3, [r7, #12]
 80024ba:	681b      	ldr	r3, [r3, #0]
 80024bc:	430a      	orrs	r2, r1
 80024be:	61da      	str	r2, [r3, #28]
      break;
 80024c0:	e004      	b.n	80024cc <HAL_TIM_PWM_ConfigChannel+0x170>
    }

    default:
      status = HAL_ERROR;
 80024c2:	2317      	movs	r3, #23
 80024c4:	18fb      	adds	r3, r7, r3
 80024c6:	2201      	movs	r2, #1
 80024c8:	701a      	strb	r2, [r3, #0]
      break;
 80024ca:	46c0      	nop			; (mov r8, r8)
  }

  __HAL_UNLOCK(htim);
 80024cc:	68fb      	ldr	r3, [r7, #12]
 80024ce:	223c      	movs	r2, #60	; 0x3c
 80024d0:	2100      	movs	r1, #0
 80024d2:	5499      	strb	r1, [r3, r2]

  return status;
 80024d4:	2317      	movs	r3, #23
 80024d6:	18fb      	adds	r3, r7, r3
 80024d8:	781b      	ldrb	r3, [r3, #0]
}
 80024da:	0018      	movs	r0, r3
 80024dc:	46bd      	mov	sp, r7
 80024de:	b006      	add	sp, #24
 80024e0:	bd80      	pop	{r7, pc}
 80024e2:	46c0      	nop			; (mov r8, r8)
 80024e4:	fffffbff 	.word	0xfffffbff

080024e8 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80024e8:	b580      	push	{r7, lr}
 80024ea:	b084      	sub	sp, #16
 80024ec:	af00      	add	r7, sp, #0
 80024ee:	6078      	str	r0, [r7, #4]
 80024f0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80024f2:	230f      	movs	r3, #15
 80024f4:	18fb      	adds	r3, r7, r3
 80024f6:	2200      	movs	r2, #0
 80024f8:	701a      	strb	r2, [r3, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80024fa:	687b      	ldr	r3, [r7, #4]
 80024fc:	223c      	movs	r2, #60	; 0x3c
 80024fe:	5c9b      	ldrb	r3, [r3, r2]
 8002500:	2b01      	cmp	r3, #1
 8002502:	d101      	bne.n	8002508 <HAL_TIM_ConfigClockSource+0x20>
 8002504:	2302      	movs	r3, #2
 8002506:	e0bc      	b.n	8002682 <HAL_TIM_ConfigClockSource+0x19a>
 8002508:	687b      	ldr	r3, [r7, #4]
 800250a:	223c      	movs	r2, #60	; 0x3c
 800250c:	2101      	movs	r1, #1
 800250e:	5499      	strb	r1, [r3, r2]

  htim->State = HAL_TIM_STATE_BUSY;
 8002510:	687b      	ldr	r3, [r7, #4]
 8002512:	223d      	movs	r2, #61	; 0x3d
 8002514:	2102      	movs	r1, #2
 8002516:	5499      	strb	r1, [r3, r2]

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8002518:	687b      	ldr	r3, [r7, #4]
 800251a:	681b      	ldr	r3, [r3, #0]
 800251c:	689b      	ldr	r3, [r3, #8]
 800251e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8002520:	68bb      	ldr	r3, [r7, #8]
 8002522:	2277      	movs	r2, #119	; 0x77
 8002524:	4393      	bics	r3, r2
 8002526:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002528:	68bb      	ldr	r3, [r7, #8]
 800252a:	4a58      	ldr	r2, [pc, #352]	; (800268c <HAL_TIM_ConfigClockSource+0x1a4>)
 800252c:	4013      	ands	r3, r2
 800252e:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8002530:	687b      	ldr	r3, [r7, #4]
 8002532:	681b      	ldr	r3, [r3, #0]
 8002534:	68ba      	ldr	r2, [r7, #8]
 8002536:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8002538:	683b      	ldr	r3, [r7, #0]
 800253a:	681b      	ldr	r3, [r3, #0]
 800253c:	2280      	movs	r2, #128	; 0x80
 800253e:	0192      	lsls	r2, r2, #6
 8002540:	4293      	cmp	r3, r2
 8002542:	d040      	beq.n	80025c6 <HAL_TIM_ConfigClockSource+0xde>
 8002544:	2280      	movs	r2, #128	; 0x80
 8002546:	0192      	lsls	r2, r2, #6
 8002548:	4293      	cmp	r3, r2
 800254a:	d900      	bls.n	800254e <HAL_TIM_ConfigClockSource+0x66>
 800254c:	e088      	b.n	8002660 <HAL_TIM_ConfigClockSource+0x178>
 800254e:	2280      	movs	r2, #128	; 0x80
 8002550:	0152      	lsls	r2, r2, #5
 8002552:	4293      	cmp	r3, r2
 8002554:	d100      	bne.n	8002558 <HAL_TIM_ConfigClockSource+0x70>
 8002556:	e088      	b.n	800266a <HAL_TIM_ConfigClockSource+0x182>
 8002558:	2280      	movs	r2, #128	; 0x80
 800255a:	0152      	lsls	r2, r2, #5
 800255c:	4293      	cmp	r3, r2
 800255e:	d900      	bls.n	8002562 <HAL_TIM_ConfigClockSource+0x7a>
 8002560:	e07e      	b.n	8002660 <HAL_TIM_ConfigClockSource+0x178>
 8002562:	2b70      	cmp	r3, #112	; 0x70
 8002564:	d018      	beq.n	8002598 <HAL_TIM_ConfigClockSource+0xb0>
 8002566:	d900      	bls.n	800256a <HAL_TIM_ConfigClockSource+0x82>
 8002568:	e07a      	b.n	8002660 <HAL_TIM_ConfigClockSource+0x178>
 800256a:	2b60      	cmp	r3, #96	; 0x60
 800256c:	d04f      	beq.n	800260e <HAL_TIM_ConfigClockSource+0x126>
 800256e:	d900      	bls.n	8002572 <HAL_TIM_ConfigClockSource+0x8a>
 8002570:	e076      	b.n	8002660 <HAL_TIM_ConfigClockSource+0x178>
 8002572:	2b50      	cmp	r3, #80	; 0x50
 8002574:	d03b      	beq.n	80025ee <HAL_TIM_ConfigClockSource+0x106>
 8002576:	d900      	bls.n	800257a <HAL_TIM_ConfigClockSource+0x92>
 8002578:	e072      	b.n	8002660 <HAL_TIM_ConfigClockSource+0x178>
 800257a:	2b40      	cmp	r3, #64	; 0x40
 800257c:	d057      	beq.n	800262e <HAL_TIM_ConfigClockSource+0x146>
 800257e:	d900      	bls.n	8002582 <HAL_TIM_ConfigClockSource+0x9a>
 8002580:	e06e      	b.n	8002660 <HAL_TIM_ConfigClockSource+0x178>
 8002582:	2b30      	cmp	r3, #48	; 0x30
 8002584:	d063      	beq.n	800264e <HAL_TIM_ConfigClockSource+0x166>
 8002586:	d86b      	bhi.n	8002660 <HAL_TIM_ConfigClockSource+0x178>
 8002588:	2b20      	cmp	r3, #32
 800258a:	d060      	beq.n	800264e <HAL_TIM_ConfigClockSource+0x166>
 800258c:	d868      	bhi.n	8002660 <HAL_TIM_ConfigClockSource+0x178>
 800258e:	2b00      	cmp	r3, #0
 8002590:	d05d      	beq.n	800264e <HAL_TIM_ConfigClockSource+0x166>
 8002592:	2b10      	cmp	r3, #16
 8002594:	d05b      	beq.n	800264e <HAL_TIM_ConfigClockSource+0x166>
 8002596:	e063      	b.n	8002660 <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8002598:	687b      	ldr	r3, [r7, #4]
 800259a:	6818      	ldr	r0, [r3, #0]
 800259c:	683b      	ldr	r3, [r7, #0]
 800259e:	6899      	ldr	r1, [r3, #8]
 80025a0:	683b      	ldr	r3, [r7, #0]
 80025a2:	685a      	ldr	r2, [r3, #4]
 80025a4:	683b      	ldr	r3, [r7, #0]
 80025a6:	68db      	ldr	r3, [r3, #12]
 80025a8:	f000 fb90 	bl	8002ccc <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80025ac:	687b      	ldr	r3, [r7, #4]
 80025ae:	681b      	ldr	r3, [r3, #0]
 80025b0:	689b      	ldr	r3, [r3, #8]
 80025b2:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80025b4:	68bb      	ldr	r3, [r7, #8]
 80025b6:	2277      	movs	r2, #119	; 0x77
 80025b8:	4313      	orrs	r3, r2
 80025ba:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80025bc:	687b      	ldr	r3, [r7, #4]
 80025be:	681b      	ldr	r3, [r3, #0]
 80025c0:	68ba      	ldr	r2, [r7, #8]
 80025c2:	609a      	str	r2, [r3, #8]
      break;
 80025c4:	e052      	b.n	800266c <HAL_TIM_ConfigClockSource+0x184>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80025c6:	687b      	ldr	r3, [r7, #4]
 80025c8:	6818      	ldr	r0, [r3, #0]
 80025ca:	683b      	ldr	r3, [r7, #0]
 80025cc:	6899      	ldr	r1, [r3, #8]
 80025ce:	683b      	ldr	r3, [r7, #0]
 80025d0:	685a      	ldr	r2, [r3, #4]
 80025d2:	683b      	ldr	r3, [r7, #0]
 80025d4:	68db      	ldr	r3, [r3, #12]
 80025d6:	f000 fb79 	bl	8002ccc <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80025da:	687b      	ldr	r3, [r7, #4]
 80025dc:	681b      	ldr	r3, [r3, #0]
 80025de:	689a      	ldr	r2, [r3, #8]
 80025e0:	687b      	ldr	r3, [r7, #4]
 80025e2:	681b      	ldr	r3, [r3, #0]
 80025e4:	2180      	movs	r1, #128	; 0x80
 80025e6:	01c9      	lsls	r1, r1, #7
 80025e8:	430a      	orrs	r2, r1
 80025ea:	609a      	str	r2, [r3, #8]
      break;
 80025ec:	e03e      	b.n	800266c <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80025ee:	687b      	ldr	r3, [r7, #4]
 80025f0:	6818      	ldr	r0, [r3, #0]
 80025f2:	683b      	ldr	r3, [r7, #0]
 80025f4:	6859      	ldr	r1, [r3, #4]
 80025f6:	683b      	ldr	r3, [r7, #0]
 80025f8:	68db      	ldr	r3, [r3, #12]
 80025fa:	001a      	movs	r2, r3
 80025fc:	f000 faec 	bl	8002bd8 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8002600:	687b      	ldr	r3, [r7, #4]
 8002602:	681b      	ldr	r3, [r3, #0]
 8002604:	2150      	movs	r1, #80	; 0x50
 8002606:	0018      	movs	r0, r3
 8002608:	f000 fb46 	bl	8002c98 <TIM_ITRx_SetConfig>
      break;
 800260c:	e02e      	b.n	800266c <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800260e:	687b      	ldr	r3, [r7, #4]
 8002610:	6818      	ldr	r0, [r3, #0]
 8002612:	683b      	ldr	r3, [r7, #0]
 8002614:	6859      	ldr	r1, [r3, #4]
 8002616:	683b      	ldr	r3, [r7, #0]
 8002618:	68db      	ldr	r3, [r3, #12]
 800261a:	001a      	movs	r2, r3
 800261c:	f000 fb0a 	bl	8002c34 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8002620:	687b      	ldr	r3, [r7, #4]
 8002622:	681b      	ldr	r3, [r3, #0]
 8002624:	2160      	movs	r1, #96	; 0x60
 8002626:	0018      	movs	r0, r3
 8002628:	f000 fb36 	bl	8002c98 <TIM_ITRx_SetConfig>
      break;
 800262c:	e01e      	b.n	800266c <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800262e:	687b      	ldr	r3, [r7, #4]
 8002630:	6818      	ldr	r0, [r3, #0]
 8002632:	683b      	ldr	r3, [r7, #0]
 8002634:	6859      	ldr	r1, [r3, #4]
 8002636:	683b      	ldr	r3, [r7, #0]
 8002638:	68db      	ldr	r3, [r3, #12]
 800263a:	001a      	movs	r2, r3
 800263c:	f000 facc 	bl	8002bd8 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8002640:	687b      	ldr	r3, [r7, #4]
 8002642:	681b      	ldr	r3, [r3, #0]
 8002644:	2140      	movs	r1, #64	; 0x40
 8002646:	0018      	movs	r0, r3
 8002648:	f000 fb26 	bl	8002c98 <TIM_ITRx_SetConfig>
      break;
 800264c:	e00e      	b.n	800266c <HAL_TIM_ConfigClockSource+0x184>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800264e:	687b      	ldr	r3, [r7, #4]
 8002650:	681a      	ldr	r2, [r3, #0]
 8002652:	683b      	ldr	r3, [r7, #0]
 8002654:	681b      	ldr	r3, [r3, #0]
 8002656:	0019      	movs	r1, r3
 8002658:	0010      	movs	r0, r2
 800265a:	f000 fb1d 	bl	8002c98 <TIM_ITRx_SetConfig>
      break;
 800265e:	e005      	b.n	800266c <HAL_TIM_ConfigClockSource+0x184>
    }

    default:
      status = HAL_ERROR;
 8002660:	230f      	movs	r3, #15
 8002662:	18fb      	adds	r3, r7, r3
 8002664:	2201      	movs	r2, #1
 8002666:	701a      	strb	r2, [r3, #0]
      break;
 8002668:	e000      	b.n	800266c <HAL_TIM_ConfigClockSource+0x184>
      break;
 800266a:	46c0      	nop			; (mov r8, r8)
  }
  htim->State = HAL_TIM_STATE_READY;
 800266c:	687b      	ldr	r3, [r7, #4]
 800266e:	223d      	movs	r2, #61	; 0x3d
 8002670:	2101      	movs	r1, #1
 8002672:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 8002674:	687b      	ldr	r3, [r7, #4]
 8002676:	223c      	movs	r2, #60	; 0x3c
 8002678:	2100      	movs	r1, #0
 800267a:	5499      	strb	r1, [r3, r2]

  return status;
 800267c:	230f      	movs	r3, #15
 800267e:	18fb      	adds	r3, r7, r3
 8002680:	781b      	ldrb	r3, [r3, #0]
}
 8002682:	0018      	movs	r0, r3
 8002684:	46bd      	mov	sp, r7
 8002686:	b004      	add	sp, #16
 8002688:	bd80      	pop	{r7, pc}
 800268a:	46c0      	nop			; (mov r8, r8)
 800268c:	ffff00ff 	.word	0xffff00ff

08002690 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002690:	b580      	push	{r7, lr}
 8002692:	b082      	sub	sp, #8
 8002694:	af00      	add	r7, sp, #0
 8002696:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8002698:	46c0      	nop			; (mov r8, r8)
 800269a:	46bd      	mov	sp, r7
 800269c:	b002      	add	sp, #8
 800269e:	bd80      	pop	{r7, pc}

080026a0 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80026a0:	b580      	push	{r7, lr}
 80026a2:	b082      	sub	sp, #8
 80026a4:	af00      	add	r7, sp, #0
 80026a6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80026a8:	46c0      	nop			; (mov r8, r8)
 80026aa:	46bd      	mov	sp, r7
 80026ac:	b002      	add	sp, #8
 80026ae:	bd80      	pop	{r7, pc}

080026b0 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80026b0:	b580      	push	{r7, lr}
 80026b2:	b082      	sub	sp, #8
 80026b4:	af00      	add	r7, sp, #0
 80026b6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80026b8:	46c0      	nop			; (mov r8, r8)
 80026ba:	46bd      	mov	sp, r7
 80026bc:	b002      	add	sp, #8
 80026be:	bd80      	pop	{r7, pc}

080026c0 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80026c0:	b580      	push	{r7, lr}
 80026c2:	b082      	sub	sp, #8
 80026c4:	af00      	add	r7, sp, #0
 80026c6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80026c8:	46c0      	nop			; (mov r8, r8)
 80026ca:	46bd      	mov	sp, r7
 80026cc:	b002      	add	sp, #8
 80026ce:	bd80      	pop	{r7, pc}

080026d0 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80026d0:	b580      	push	{r7, lr}
 80026d2:	b082      	sub	sp, #8
 80026d4:	af00      	add	r7, sp, #0
 80026d6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80026d8:	46c0      	nop			; (mov r8, r8)
 80026da:	46bd      	mov	sp, r7
 80026dc:	b002      	add	sp, #8
 80026de:	bd80      	pop	{r7, pc}

080026e0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80026e0:	b580      	push	{r7, lr}
 80026e2:	b084      	sub	sp, #16
 80026e4:	af00      	add	r7, sp, #0
 80026e6:	6078      	str	r0, [r7, #4]
 80026e8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80026ea:	687b      	ldr	r3, [r7, #4]
 80026ec:	681b      	ldr	r3, [r3, #0]
 80026ee:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80026f0:	687b      	ldr	r3, [r7, #4]
 80026f2:	4a34      	ldr	r2, [pc, #208]	; (80027c4 <TIM_Base_SetConfig+0xe4>)
 80026f4:	4293      	cmp	r3, r2
 80026f6:	d008      	beq.n	800270a <TIM_Base_SetConfig+0x2a>
 80026f8:	687a      	ldr	r2, [r7, #4]
 80026fa:	2380      	movs	r3, #128	; 0x80
 80026fc:	05db      	lsls	r3, r3, #23
 80026fe:	429a      	cmp	r2, r3
 8002700:	d003      	beq.n	800270a <TIM_Base_SetConfig+0x2a>
 8002702:	687b      	ldr	r3, [r7, #4]
 8002704:	4a30      	ldr	r2, [pc, #192]	; (80027c8 <TIM_Base_SetConfig+0xe8>)
 8002706:	4293      	cmp	r3, r2
 8002708:	d108      	bne.n	800271c <TIM_Base_SetConfig+0x3c>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800270a:	68fb      	ldr	r3, [r7, #12]
 800270c:	2270      	movs	r2, #112	; 0x70
 800270e:	4393      	bics	r3, r2
 8002710:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002712:	683b      	ldr	r3, [r7, #0]
 8002714:	685b      	ldr	r3, [r3, #4]
 8002716:	68fa      	ldr	r2, [r7, #12]
 8002718:	4313      	orrs	r3, r2
 800271a:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800271c:	687b      	ldr	r3, [r7, #4]
 800271e:	4a29      	ldr	r2, [pc, #164]	; (80027c4 <TIM_Base_SetConfig+0xe4>)
 8002720:	4293      	cmp	r3, r2
 8002722:	d018      	beq.n	8002756 <TIM_Base_SetConfig+0x76>
 8002724:	687a      	ldr	r2, [r7, #4]
 8002726:	2380      	movs	r3, #128	; 0x80
 8002728:	05db      	lsls	r3, r3, #23
 800272a:	429a      	cmp	r2, r3
 800272c:	d013      	beq.n	8002756 <TIM_Base_SetConfig+0x76>
 800272e:	687b      	ldr	r3, [r7, #4]
 8002730:	4a25      	ldr	r2, [pc, #148]	; (80027c8 <TIM_Base_SetConfig+0xe8>)
 8002732:	4293      	cmp	r3, r2
 8002734:	d00f      	beq.n	8002756 <TIM_Base_SetConfig+0x76>
 8002736:	687b      	ldr	r3, [r7, #4]
 8002738:	4a24      	ldr	r2, [pc, #144]	; (80027cc <TIM_Base_SetConfig+0xec>)
 800273a:	4293      	cmp	r3, r2
 800273c:	d00b      	beq.n	8002756 <TIM_Base_SetConfig+0x76>
 800273e:	687b      	ldr	r3, [r7, #4]
 8002740:	4a23      	ldr	r2, [pc, #140]	; (80027d0 <TIM_Base_SetConfig+0xf0>)
 8002742:	4293      	cmp	r3, r2
 8002744:	d007      	beq.n	8002756 <TIM_Base_SetConfig+0x76>
 8002746:	687b      	ldr	r3, [r7, #4]
 8002748:	4a22      	ldr	r2, [pc, #136]	; (80027d4 <TIM_Base_SetConfig+0xf4>)
 800274a:	4293      	cmp	r3, r2
 800274c:	d003      	beq.n	8002756 <TIM_Base_SetConfig+0x76>
 800274e:	687b      	ldr	r3, [r7, #4]
 8002750:	4a21      	ldr	r2, [pc, #132]	; (80027d8 <TIM_Base_SetConfig+0xf8>)
 8002752:	4293      	cmp	r3, r2
 8002754:	d108      	bne.n	8002768 <TIM_Base_SetConfig+0x88>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002756:	68fb      	ldr	r3, [r7, #12]
 8002758:	4a20      	ldr	r2, [pc, #128]	; (80027dc <TIM_Base_SetConfig+0xfc>)
 800275a:	4013      	ands	r3, r2
 800275c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800275e:	683b      	ldr	r3, [r7, #0]
 8002760:	68db      	ldr	r3, [r3, #12]
 8002762:	68fa      	ldr	r2, [r7, #12]
 8002764:	4313      	orrs	r3, r2
 8002766:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002768:	68fb      	ldr	r3, [r7, #12]
 800276a:	2280      	movs	r2, #128	; 0x80
 800276c:	4393      	bics	r3, r2
 800276e:	001a      	movs	r2, r3
 8002770:	683b      	ldr	r3, [r7, #0]
 8002772:	695b      	ldr	r3, [r3, #20]
 8002774:	4313      	orrs	r3, r2
 8002776:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002778:	687b      	ldr	r3, [r7, #4]
 800277a:	68fa      	ldr	r2, [r7, #12]
 800277c:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800277e:	683b      	ldr	r3, [r7, #0]
 8002780:	689a      	ldr	r2, [r3, #8]
 8002782:	687b      	ldr	r3, [r7, #4]
 8002784:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002786:	683b      	ldr	r3, [r7, #0]
 8002788:	681a      	ldr	r2, [r3, #0]
 800278a:	687b      	ldr	r3, [r7, #4]
 800278c:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800278e:	687b      	ldr	r3, [r7, #4]
 8002790:	4a0c      	ldr	r2, [pc, #48]	; (80027c4 <TIM_Base_SetConfig+0xe4>)
 8002792:	4293      	cmp	r3, r2
 8002794:	d00b      	beq.n	80027ae <TIM_Base_SetConfig+0xce>
 8002796:	687b      	ldr	r3, [r7, #4]
 8002798:	4a0d      	ldr	r2, [pc, #52]	; (80027d0 <TIM_Base_SetConfig+0xf0>)
 800279a:	4293      	cmp	r3, r2
 800279c:	d007      	beq.n	80027ae <TIM_Base_SetConfig+0xce>
 800279e:	687b      	ldr	r3, [r7, #4]
 80027a0:	4a0c      	ldr	r2, [pc, #48]	; (80027d4 <TIM_Base_SetConfig+0xf4>)
 80027a2:	4293      	cmp	r3, r2
 80027a4:	d003      	beq.n	80027ae <TIM_Base_SetConfig+0xce>
 80027a6:	687b      	ldr	r3, [r7, #4]
 80027a8:	4a0b      	ldr	r2, [pc, #44]	; (80027d8 <TIM_Base_SetConfig+0xf8>)
 80027aa:	4293      	cmp	r3, r2
 80027ac:	d103      	bne.n	80027b6 <TIM_Base_SetConfig+0xd6>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80027ae:	683b      	ldr	r3, [r7, #0]
 80027b0:	691a      	ldr	r2, [r3, #16]
 80027b2:	687b      	ldr	r3, [r7, #4]
 80027b4:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80027b6:	687b      	ldr	r3, [r7, #4]
 80027b8:	2201      	movs	r2, #1
 80027ba:	615a      	str	r2, [r3, #20]
}
 80027bc:	46c0      	nop			; (mov r8, r8)
 80027be:	46bd      	mov	sp, r7
 80027c0:	b004      	add	sp, #16
 80027c2:	bd80      	pop	{r7, pc}
 80027c4:	40012c00 	.word	0x40012c00
 80027c8:	40000400 	.word	0x40000400
 80027cc:	40002000 	.word	0x40002000
 80027d0:	40014000 	.word	0x40014000
 80027d4:	40014400 	.word	0x40014400
 80027d8:	40014800 	.word	0x40014800
 80027dc:	fffffcff 	.word	0xfffffcff

080027e0 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80027e0:	b580      	push	{r7, lr}
 80027e2:	b086      	sub	sp, #24
 80027e4:	af00      	add	r7, sp, #0
 80027e6:	6078      	str	r0, [r7, #4]
 80027e8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80027ea:	687b      	ldr	r3, [r7, #4]
 80027ec:	6a1b      	ldr	r3, [r3, #32]
 80027ee:	2201      	movs	r2, #1
 80027f0:	4393      	bics	r3, r2
 80027f2:	001a      	movs	r2, r3
 80027f4:	687b      	ldr	r3, [r7, #4]
 80027f6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80027f8:	687b      	ldr	r3, [r7, #4]
 80027fa:	6a1b      	ldr	r3, [r3, #32]
 80027fc:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80027fe:	687b      	ldr	r3, [r7, #4]
 8002800:	685b      	ldr	r3, [r3, #4]
 8002802:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8002804:	687b      	ldr	r3, [r7, #4]
 8002806:	699b      	ldr	r3, [r3, #24]
 8002808:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800280a:	68fb      	ldr	r3, [r7, #12]
 800280c:	2270      	movs	r2, #112	; 0x70
 800280e:	4393      	bics	r3, r2
 8002810:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8002812:	68fb      	ldr	r3, [r7, #12]
 8002814:	2203      	movs	r2, #3
 8002816:	4393      	bics	r3, r2
 8002818:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800281a:	683b      	ldr	r3, [r7, #0]
 800281c:	681b      	ldr	r3, [r3, #0]
 800281e:	68fa      	ldr	r2, [r7, #12]
 8002820:	4313      	orrs	r3, r2
 8002822:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8002824:	697b      	ldr	r3, [r7, #20]
 8002826:	2202      	movs	r2, #2
 8002828:	4393      	bics	r3, r2
 800282a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800282c:	683b      	ldr	r3, [r7, #0]
 800282e:	689b      	ldr	r3, [r3, #8]
 8002830:	697a      	ldr	r2, [r7, #20]
 8002832:	4313      	orrs	r3, r2
 8002834:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8002836:	687b      	ldr	r3, [r7, #4]
 8002838:	4a27      	ldr	r2, [pc, #156]	; (80028d8 <TIM_OC1_SetConfig+0xf8>)
 800283a:	4293      	cmp	r3, r2
 800283c:	d00b      	beq.n	8002856 <TIM_OC1_SetConfig+0x76>
 800283e:	687b      	ldr	r3, [r7, #4]
 8002840:	4a26      	ldr	r2, [pc, #152]	; (80028dc <TIM_OC1_SetConfig+0xfc>)
 8002842:	4293      	cmp	r3, r2
 8002844:	d007      	beq.n	8002856 <TIM_OC1_SetConfig+0x76>
 8002846:	687b      	ldr	r3, [r7, #4]
 8002848:	4a25      	ldr	r2, [pc, #148]	; (80028e0 <TIM_OC1_SetConfig+0x100>)
 800284a:	4293      	cmp	r3, r2
 800284c:	d003      	beq.n	8002856 <TIM_OC1_SetConfig+0x76>
 800284e:	687b      	ldr	r3, [r7, #4]
 8002850:	4a24      	ldr	r2, [pc, #144]	; (80028e4 <TIM_OC1_SetConfig+0x104>)
 8002852:	4293      	cmp	r3, r2
 8002854:	d10c      	bne.n	8002870 <TIM_OC1_SetConfig+0x90>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8002856:	697b      	ldr	r3, [r7, #20]
 8002858:	2208      	movs	r2, #8
 800285a:	4393      	bics	r3, r2
 800285c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800285e:	683b      	ldr	r3, [r7, #0]
 8002860:	68db      	ldr	r3, [r3, #12]
 8002862:	697a      	ldr	r2, [r7, #20]
 8002864:	4313      	orrs	r3, r2
 8002866:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8002868:	697b      	ldr	r3, [r7, #20]
 800286a:	2204      	movs	r2, #4
 800286c:	4393      	bics	r3, r2
 800286e:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002870:	687b      	ldr	r3, [r7, #4]
 8002872:	4a19      	ldr	r2, [pc, #100]	; (80028d8 <TIM_OC1_SetConfig+0xf8>)
 8002874:	4293      	cmp	r3, r2
 8002876:	d00b      	beq.n	8002890 <TIM_OC1_SetConfig+0xb0>
 8002878:	687b      	ldr	r3, [r7, #4]
 800287a:	4a18      	ldr	r2, [pc, #96]	; (80028dc <TIM_OC1_SetConfig+0xfc>)
 800287c:	4293      	cmp	r3, r2
 800287e:	d007      	beq.n	8002890 <TIM_OC1_SetConfig+0xb0>
 8002880:	687b      	ldr	r3, [r7, #4]
 8002882:	4a17      	ldr	r2, [pc, #92]	; (80028e0 <TIM_OC1_SetConfig+0x100>)
 8002884:	4293      	cmp	r3, r2
 8002886:	d003      	beq.n	8002890 <TIM_OC1_SetConfig+0xb0>
 8002888:	687b      	ldr	r3, [r7, #4]
 800288a:	4a16      	ldr	r2, [pc, #88]	; (80028e4 <TIM_OC1_SetConfig+0x104>)
 800288c:	4293      	cmp	r3, r2
 800288e:	d111      	bne.n	80028b4 <TIM_OC1_SetConfig+0xd4>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8002890:	693b      	ldr	r3, [r7, #16]
 8002892:	4a15      	ldr	r2, [pc, #84]	; (80028e8 <TIM_OC1_SetConfig+0x108>)
 8002894:	4013      	ands	r3, r2
 8002896:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8002898:	693b      	ldr	r3, [r7, #16]
 800289a:	4a14      	ldr	r2, [pc, #80]	; (80028ec <TIM_OC1_SetConfig+0x10c>)
 800289c:	4013      	ands	r3, r2
 800289e:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80028a0:	683b      	ldr	r3, [r7, #0]
 80028a2:	695b      	ldr	r3, [r3, #20]
 80028a4:	693a      	ldr	r2, [r7, #16]
 80028a6:	4313      	orrs	r3, r2
 80028a8:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80028aa:	683b      	ldr	r3, [r7, #0]
 80028ac:	699b      	ldr	r3, [r3, #24]
 80028ae:	693a      	ldr	r2, [r7, #16]
 80028b0:	4313      	orrs	r3, r2
 80028b2:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80028b4:	687b      	ldr	r3, [r7, #4]
 80028b6:	693a      	ldr	r2, [r7, #16]
 80028b8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80028ba:	687b      	ldr	r3, [r7, #4]
 80028bc:	68fa      	ldr	r2, [r7, #12]
 80028be:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80028c0:	683b      	ldr	r3, [r7, #0]
 80028c2:	685a      	ldr	r2, [r3, #4]
 80028c4:	687b      	ldr	r3, [r7, #4]
 80028c6:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80028c8:	687b      	ldr	r3, [r7, #4]
 80028ca:	697a      	ldr	r2, [r7, #20]
 80028cc:	621a      	str	r2, [r3, #32]
}
 80028ce:	46c0      	nop			; (mov r8, r8)
 80028d0:	46bd      	mov	sp, r7
 80028d2:	b006      	add	sp, #24
 80028d4:	bd80      	pop	{r7, pc}
 80028d6:	46c0      	nop			; (mov r8, r8)
 80028d8:	40012c00 	.word	0x40012c00
 80028dc:	40014000 	.word	0x40014000
 80028e0:	40014400 	.word	0x40014400
 80028e4:	40014800 	.word	0x40014800
 80028e8:	fffffeff 	.word	0xfffffeff
 80028ec:	fffffdff 	.word	0xfffffdff

080028f0 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80028f0:	b580      	push	{r7, lr}
 80028f2:	b086      	sub	sp, #24
 80028f4:	af00      	add	r7, sp, #0
 80028f6:	6078      	str	r0, [r7, #4]
 80028f8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80028fa:	687b      	ldr	r3, [r7, #4]
 80028fc:	6a1b      	ldr	r3, [r3, #32]
 80028fe:	2210      	movs	r2, #16
 8002900:	4393      	bics	r3, r2
 8002902:	001a      	movs	r2, r3
 8002904:	687b      	ldr	r3, [r7, #4]
 8002906:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002908:	687b      	ldr	r3, [r7, #4]
 800290a:	6a1b      	ldr	r3, [r3, #32]
 800290c:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800290e:	687b      	ldr	r3, [r7, #4]
 8002910:	685b      	ldr	r3, [r3, #4]
 8002912:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8002914:	687b      	ldr	r3, [r7, #4]
 8002916:	699b      	ldr	r3, [r3, #24]
 8002918:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800291a:	68fb      	ldr	r3, [r7, #12]
 800291c:	4a2e      	ldr	r2, [pc, #184]	; (80029d8 <TIM_OC2_SetConfig+0xe8>)
 800291e:	4013      	ands	r3, r2
 8002920:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8002922:	68fb      	ldr	r3, [r7, #12]
 8002924:	4a2d      	ldr	r2, [pc, #180]	; (80029dc <TIM_OC2_SetConfig+0xec>)
 8002926:	4013      	ands	r3, r2
 8002928:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800292a:	683b      	ldr	r3, [r7, #0]
 800292c:	681b      	ldr	r3, [r3, #0]
 800292e:	021b      	lsls	r3, r3, #8
 8002930:	68fa      	ldr	r2, [r7, #12]
 8002932:	4313      	orrs	r3, r2
 8002934:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8002936:	697b      	ldr	r3, [r7, #20]
 8002938:	2220      	movs	r2, #32
 800293a:	4393      	bics	r3, r2
 800293c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800293e:	683b      	ldr	r3, [r7, #0]
 8002940:	689b      	ldr	r3, [r3, #8]
 8002942:	011b      	lsls	r3, r3, #4
 8002944:	697a      	ldr	r2, [r7, #20]
 8002946:	4313      	orrs	r3, r2
 8002948:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800294a:	687b      	ldr	r3, [r7, #4]
 800294c:	4a24      	ldr	r2, [pc, #144]	; (80029e0 <TIM_OC2_SetConfig+0xf0>)
 800294e:	4293      	cmp	r3, r2
 8002950:	d10d      	bne.n	800296e <TIM_OC2_SetConfig+0x7e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8002952:	697b      	ldr	r3, [r7, #20]
 8002954:	2280      	movs	r2, #128	; 0x80
 8002956:	4393      	bics	r3, r2
 8002958:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800295a:	683b      	ldr	r3, [r7, #0]
 800295c:	68db      	ldr	r3, [r3, #12]
 800295e:	011b      	lsls	r3, r3, #4
 8002960:	697a      	ldr	r2, [r7, #20]
 8002962:	4313      	orrs	r3, r2
 8002964:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8002966:	697b      	ldr	r3, [r7, #20]
 8002968:	2240      	movs	r2, #64	; 0x40
 800296a:	4393      	bics	r3, r2
 800296c:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800296e:	687b      	ldr	r3, [r7, #4]
 8002970:	4a1b      	ldr	r2, [pc, #108]	; (80029e0 <TIM_OC2_SetConfig+0xf0>)
 8002972:	4293      	cmp	r3, r2
 8002974:	d00b      	beq.n	800298e <TIM_OC2_SetConfig+0x9e>
 8002976:	687b      	ldr	r3, [r7, #4]
 8002978:	4a1a      	ldr	r2, [pc, #104]	; (80029e4 <TIM_OC2_SetConfig+0xf4>)
 800297a:	4293      	cmp	r3, r2
 800297c:	d007      	beq.n	800298e <TIM_OC2_SetConfig+0x9e>
 800297e:	687b      	ldr	r3, [r7, #4]
 8002980:	4a19      	ldr	r2, [pc, #100]	; (80029e8 <TIM_OC2_SetConfig+0xf8>)
 8002982:	4293      	cmp	r3, r2
 8002984:	d003      	beq.n	800298e <TIM_OC2_SetConfig+0x9e>
 8002986:	687b      	ldr	r3, [r7, #4]
 8002988:	4a18      	ldr	r2, [pc, #96]	; (80029ec <TIM_OC2_SetConfig+0xfc>)
 800298a:	4293      	cmp	r3, r2
 800298c:	d113      	bne.n	80029b6 <TIM_OC2_SetConfig+0xc6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800298e:	693b      	ldr	r3, [r7, #16]
 8002990:	4a17      	ldr	r2, [pc, #92]	; (80029f0 <TIM_OC2_SetConfig+0x100>)
 8002992:	4013      	ands	r3, r2
 8002994:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8002996:	693b      	ldr	r3, [r7, #16]
 8002998:	4a16      	ldr	r2, [pc, #88]	; (80029f4 <TIM_OC2_SetConfig+0x104>)
 800299a:	4013      	ands	r3, r2
 800299c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800299e:	683b      	ldr	r3, [r7, #0]
 80029a0:	695b      	ldr	r3, [r3, #20]
 80029a2:	009b      	lsls	r3, r3, #2
 80029a4:	693a      	ldr	r2, [r7, #16]
 80029a6:	4313      	orrs	r3, r2
 80029a8:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80029aa:	683b      	ldr	r3, [r7, #0]
 80029ac:	699b      	ldr	r3, [r3, #24]
 80029ae:	009b      	lsls	r3, r3, #2
 80029b0:	693a      	ldr	r2, [r7, #16]
 80029b2:	4313      	orrs	r3, r2
 80029b4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80029b6:	687b      	ldr	r3, [r7, #4]
 80029b8:	693a      	ldr	r2, [r7, #16]
 80029ba:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80029bc:	687b      	ldr	r3, [r7, #4]
 80029be:	68fa      	ldr	r2, [r7, #12]
 80029c0:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80029c2:	683b      	ldr	r3, [r7, #0]
 80029c4:	685a      	ldr	r2, [r3, #4]
 80029c6:	687b      	ldr	r3, [r7, #4]
 80029c8:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80029ca:	687b      	ldr	r3, [r7, #4]
 80029cc:	697a      	ldr	r2, [r7, #20]
 80029ce:	621a      	str	r2, [r3, #32]
}
 80029d0:	46c0      	nop			; (mov r8, r8)
 80029d2:	46bd      	mov	sp, r7
 80029d4:	b006      	add	sp, #24
 80029d6:	bd80      	pop	{r7, pc}
 80029d8:	ffff8fff 	.word	0xffff8fff
 80029dc:	fffffcff 	.word	0xfffffcff
 80029e0:	40012c00 	.word	0x40012c00
 80029e4:	40014000 	.word	0x40014000
 80029e8:	40014400 	.word	0x40014400
 80029ec:	40014800 	.word	0x40014800
 80029f0:	fffffbff 	.word	0xfffffbff
 80029f4:	fffff7ff 	.word	0xfffff7ff

080029f8 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80029f8:	b580      	push	{r7, lr}
 80029fa:	b086      	sub	sp, #24
 80029fc:	af00      	add	r7, sp, #0
 80029fe:	6078      	str	r0, [r7, #4]
 8002a00:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8002a02:	687b      	ldr	r3, [r7, #4]
 8002a04:	6a1b      	ldr	r3, [r3, #32]
 8002a06:	4a35      	ldr	r2, [pc, #212]	; (8002adc <TIM_OC3_SetConfig+0xe4>)
 8002a08:	401a      	ands	r2, r3
 8002a0a:	687b      	ldr	r3, [r7, #4]
 8002a0c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002a0e:	687b      	ldr	r3, [r7, #4]
 8002a10:	6a1b      	ldr	r3, [r3, #32]
 8002a12:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002a14:	687b      	ldr	r3, [r7, #4]
 8002a16:	685b      	ldr	r3, [r3, #4]
 8002a18:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8002a1a:	687b      	ldr	r3, [r7, #4]
 8002a1c:	69db      	ldr	r3, [r3, #28]
 8002a1e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8002a20:	68fb      	ldr	r3, [r7, #12]
 8002a22:	2270      	movs	r2, #112	; 0x70
 8002a24:	4393      	bics	r3, r2
 8002a26:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8002a28:	68fb      	ldr	r3, [r7, #12]
 8002a2a:	2203      	movs	r2, #3
 8002a2c:	4393      	bics	r3, r2
 8002a2e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8002a30:	683b      	ldr	r3, [r7, #0]
 8002a32:	681b      	ldr	r3, [r3, #0]
 8002a34:	68fa      	ldr	r2, [r7, #12]
 8002a36:	4313      	orrs	r3, r2
 8002a38:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8002a3a:	697b      	ldr	r3, [r7, #20]
 8002a3c:	4a28      	ldr	r2, [pc, #160]	; (8002ae0 <TIM_OC3_SetConfig+0xe8>)
 8002a3e:	4013      	ands	r3, r2
 8002a40:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8002a42:	683b      	ldr	r3, [r7, #0]
 8002a44:	689b      	ldr	r3, [r3, #8]
 8002a46:	021b      	lsls	r3, r3, #8
 8002a48:	697a      	ldr	r2, [r7, #20]
 8002a4a:	4313      	orrs	r3, r2
 8002a4c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8002a4e:	687b      	ldr	r3, [r7, #4]
 8002a50:	4a24      	ldr	r2, [pc, #144]	; (8002ae4 <TIM_OC3_SetConfig+0xec>)
 8002a52:	4293      	cmp	r3, r2
 8002a54:	d10d      	bne.n	8002a72 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8002a56:	697b      	ldr	r3, [r7, #20]
 8002a58:	4a23      	ldr	r2, [pc, #140]	; (8002ae8 <TIM_OC3_SetConfig+0xf0>)
 8002a5a:	4013      	ands	r3, r2
 8002a5c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8002a5e:	683b      	ldr	r3, [r7, #0]
 8002a60:	68db      	ldr	r3, [r3, #12]
 8002a62:	021b      	lsls	r3, r3, #8
 8002a64:	697a      	ldr	r2, [r7, #20]
 8002a66:	4313      	orrs	r3, r2
 8002a68:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8002a6a:	697b      	ldr	r3, [r7, #20]
 8002a6c:	4a1f      	ldr	r2, [pc, #124]	; (8002aec <TIM_OC3_SetConfig+0xf4>)
 8002a6e:	4013      	ands	r3, r2
 8002a70:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002a72:	687b      	ldr	r3, [r7, #4]
 8002a74:	4a1b      	ldr	r2, [pc, #108]	; (8002ae4 <TIM_OC3_SetConfig+0xec>)
 8002a76:	4293      	cmp	r3, r2
 8002a78:	d00b      	beq.n	8002a92 <TIM_OC3_SetConfig+0x9a>
 8002a7a:	687b      	ldr	r3, [r7, #4]
 8002a7c:	4a1c      	ldr	r2, [pc, #112]	; (8002af0 <TIM_OC3_SetConfig+0xf8>)
 8002a7e:	4293      	cmp	r3, r2
 8002a80:	d007      	beq.n	8002a92 <TIM_OC3_SetConfig+0x9a>
 8002a82:	687b      	ldr	r3, [r7, #4]
 8002a84:	4a1b      	ldr	r2, [pc, #108]	; (8002af4 <TIM_OC3_SetConfig+0xfc>)
 8002a86:	4293      	cmp	r3, r2
 8002a88:	d003      	beq.n	8002a92 <TIM_OC3_SetConfig+0x9a>
 8002a8a:	687b      	ldr	r3, [r7, #4]
 8002a8c:	4a1a      	ldr	r2, [pc, #104]	; (8002af8 <TIM_OC3_SetConfig+0x100>)
 8002a8e:	4293      	cmp	r3, r2
 8002a90:	d113      	bne.n	8002aba <TIM_OC3_SetConfig+0xc2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8002a92:	693b      	ldr	r3, [r7, #16]
 8002a94:	4a19      	ldr	r2, [pc, #100]	; (8002afc <TIM_OC3_SetConfig+0x104>)
 8002a96:	4013      	ands	r3, r2
 8002a98:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8002a9a:	693b      	ldr	r3, [r7, #16]
 8002a9c:	4a18      	ldr	r2, [pc, #96]	; (8002b00 <TIM_OC3_SetConfig+0x108>)
 8002a9e:	4013      	ands	r3, r2
 8002aa0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8002aa2:	683b      	ldr	r3, [r7, #0]
 8002aa4:	695b      	ldr	r3, [r3, #20]
 8002aa6:	011b      	lsls	r3, r3, #4
 8002aa8:	693a      	ldr	r2, [r7, #16]
 8002aaa:	4313      	orrs	r3, r2
 8002aac:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8002aae:	683b      	ldr	r3, [r7, #0]
 8002ab0:	699b      	ldr	r3, [r3, #24]
 8002ab2:	011b      	lsls	r3, r3, #4
 8002ab4:	693a      	ldr	r2, [r7, #16]
 8002ab6:	4313      	orrs	r3, r2
 8002ab8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002aba:	687b      	ldr	r3, [r7, #4]
 8002abc:	693a      	ldr	r2, [r7, #16]
 8002abe:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8002ac0:	687b      	ldr	r3, [r7, #4]
 8002ac2:	68fa      	ldr	r2, [r7, #12]
 8002ac4:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8002ac6:	683b      	ldr	r3, [r7, #0]
 8002ac8:	685a      	ldr	r2, [r3, #4]
 8002aca:	687b      	ldr	r3, [r7, #4]
 8002acc:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002ace:	687b      	ldr	r3, [r7, #4]
 8002ad0:	697a      	ldr	r2, [r7, #20]
 8002ad2:	621a      	str	r2, [r3, #32]
}
 8002ad4:	46c0      	nop			; (mov r8, r8)
 8002ad6:	46bd      	mov	sp, r7
 8002ad8:	b006      	add	sp, #24
 8002ada:	bd80      	pop	{r7, pc}
 8002adc:	fffffeff 	.word	0xfffffeff
 8002ae0:	fffffdff 	.word	0xfffffdff
 8002ae4:	40012c00 	.word	0x40012c00
 8002ae8:	fffff7ff 	.word	0xfffff7ff
 8002aec:	fffffbff 	.word	0xfffffbff
 8002af0:	40014000 	.word	0x40014000
 8002af4:	40014400 	.word	0x40014400
 8002af8:	40014800 	.word	0x40014800
 8002afc:	ffffefff 	.word	0xffffefff
 8002b00:	ffffdfff 	.word	0xffffdfff

08002b04 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8002b04:	b580      	push	{r7, lr}
 8002b06:	b086      	sub	sp, #24
 8002b08:	af00      	add	r7, sp, #0
 8002b0a:	6078      	str	r0, [r7, #4]
 8002b0c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8002b0e:	687b      	ldr	r3, [r7, #4]
 8002b10:	6a1b      	ldr	r3, [r3, #32]
 8002b12:	4a28      	ldr	r2, [pc, #160]	; (8002bb4 <TIM_OC4_SetConfig+0xb0>)
 8002b14:	401a      	ands	r2, r3
 8002b16:	687b      	ldr	r3, [r7, #4]
 8002b18:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002b1a:	687b      	ldr	r3, [r7, #4]
 8002b1c:	6a1b      	ldr	r3, [r3, #32]
 8002b1e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002b20:	687b      	ldr	r3, [r7, #4]
 8002b22:	685b      	ldr	r3, [r3, #4]
 8002b24:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8002b26:	687b      	ldr	r3, [r7, #4]
 8002b28:	69db      	ldr	r3, [r3, #28]
 8002b2a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8002b2c:	68fb      	ldr	r3, [r7, #12]
 8002b2e:	4a22      	ldr	r2, [pc, #136]	; (8002bb8 <TIM_OC4_SetConfig+0xb4>)
 8002b30:	4013      	ands	r3, r2
 8002b32:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8002b34:	68fb      	ldr	r3, [r7, #12]
 8002b36:	4a21      	ldr	r2, [pc, #132]	; (8002bbc <TIM_OC4_SetConfig+0xb8>)
 8002b38:	4013      	ands	r3, r2
 8002b3a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8002b3c:	683b      	ldr	r3, [r7, #0]
 8002b3e:	681b      	ldr	r3, [r3, #0]
 8002b40:	021b      	lsls	r3, r3, #8
 8002b42:	68fa      	ldr	r2, [r7, #12]
 8002b44:	4313      	orrs	r3, r2
 8002b46:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8002b48:	693b      	ldr	r3, [r7, #16]
 8002b4a:	4a1d      	ldr	r2, [pc, #116]	; (8002bc0 <TIM_OC4_SetConfig+0xbc>)
 8002b4c:	4013      	ands	r3, r2
 8002b4e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8002b50:	683b      	ldr	r3, [r7, #0]
 8002b52:	689b      	ldr	r3, [r3, #8]
 8002b54:	031b      	lsls	r3, r3, #12
 8002b56:	693a      	ldr	r2, [r7, #16]
 8002b58:	4313      	orrs	r3, r2
 8002b5a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002b5c:	687b      	ldr	r3, [r7, #4]
 8002b5e:	4a19      	ldr	r2, [pc, #100]	; (8002bc4 <TIM_OC4_SetConfig+0xc0>)
 8002b60:	4293      	cmp	r3, r2
 8002b62:	d00b      	beq.n	8002b7c <TIM_OC4_SetConfig+0x78>
 8002b64:	687b      	ldr	r3, [r7, #4]
 8002b66:	4a18      	ldr	r2, [pc, #96]	; (8002bc8 <TIM_OC4_SetConfig+0xc4>)
 8002b68:	4293      	cmp	r3, r2
 8002b6a:	d007      	beq.n	8002b7c <TIM_OC4_SetConfig+0x78>
 8002b6c:	687b      	ldr	r3, [r7, #4]
 8002b6e:	4a17      	ldr	r2, [pc, #92]	; (8002bcc <TIM_OC4_SetConfig+0xc8>)
 8002b70:	4293      	cmp	r3, r2
 8002b72:	d003      	beq.n	8002b7c <TIM_OC4_SetConfig+0x78>
 8002b74:	687b      	ldr	r3, [r7, #4]
 8002b76:	4a16      	ldr	r2, [pc, #88]	; (8002bd0 <TIM_OC4_SetConfig+0xcc>)
 8002b78:	4293      	cmp	r3, r2
 8002b7a:	d109      	bne.n	8002b90 <TIM_OC4_SetConfig+0x8c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8002b7c:	697b      	ldr	r3, [r7, #20]
 8002b7e:	4a15      	ldr	r2, [pc, #84]	; (8002bd4 <TIM_OC4_SetConfig+0xd0>)
 8002b80:	4013      	ands	r3, r2
 8002b82:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8002b84:	683b      	ldr	r3, [r7, #0]
 8002b86:	695b      	ldr	r3, [r3, #20]
 8002b88:	019b      	lsls	r3, r3, #6
 8002b8a:	697a      	ldr	r2, [r7, #20]
 8002b8c:	4313      	orrs	r3, r2
 8002b8e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002b90:	687b      	ldr	r3, [r7, #4]
 8002b92:	697a      	ldr	r2, [r7, #20]
 8002b94:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8002b96:	687b      	ldr	r3, [r7, #4]
 8002b98:	68fa      	ldr	r2, [r7, #12]
 8002b9a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8002b9c:	683b      	ldr	r3, [r7, #0]
 8002b9e:	685a      	ldr	r2, [r3, #4]
 8002ba0:	687b      	ldr	r3, [r7, #4]
 8002ba2:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002ba4:	687b      	ldr	r3, [r7, #4]
 8002ba6:	693a      	ldr	r2, [r7, #16]
 8002ba8:	621a      	str	r2, [r3, #32]
}
 8002baa:	46c0      	nop			; (mov r8, r8)
 8002bac:	46bd      	mov	sp, r7
 8002bae:	b006      	add	sp, #24
 8002bb0:	bd80      	pop	{r7, pc}
 8002bb2:	46c0      	nop			; (mov r8, r8)
 8002bb4:	ffffefff 	.word	0xffffefff
 8002bb8:	ffff8fff 	.word	0xffff8fff
 8002bbc:	fffffcff 	.word	0xfffffcff
 8002bc0:	ffffdfff 	.word	0xffffdfff
 8002bc4:	40012c00 	.word	0x40012c00
 8002bc8:	40014000 	.word	0x40014000
 8002bcc:	40014400 	.word	0x40014400
 8002bd0:	40014800 	.word	0x40014800
 8002bd4:	ffffbfff 	.word	0xffffbfff

08002bd8 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002bd8:	b580      	push	{r7, lr}
 8002bda:	b086      	sub	sp, #24
 8002bdc:	af00      	add	r7, sp, #0
 8002bde:	60f8      	str	r0, [r7, #12]
 8002be0:	60b9      	str	r1, [r7, #8]
 8002be2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8002be4:	68fb      	ldr	r3, [r7, #12]
 8002be6:	6a1b      	ldr	r3, [r3, #32]
 8002be8:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002bea:	68fb      	ldr	r3, [r7, #12]
 8002bec:	6a1b      	ldr	r3, [r3, #32]
 8002bee:	2201      	movs	r2, #1
 8002bf0:	4393      	bics	r3, r2
 8002bf2:	001a      	movs	r2, r3
 8002bf4:	68fb      	ldr	r3, [r7, #12]
 8002bf6:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002bf8:	68fb      	ldr	r3, [r7, #12]
 8002bfa:	699b      	ldr	r3, [r3, #24]
 8002bfc:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8002bfe:	693b      	ldr	r3, [r7, #16]
 8002c00:	22f0      	movs	r2, #240	; 0xf0
 8002c02:	4393      	bics	r3, r2
 8002c04:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8002c06:	687b      	ldr	r3, [r7, #4]
 8002c08:	011b      	lsls	r3, r3, #4
 8002c0a:	693a      	ldr	r2, [r7, #16]
 8002c0c:	4313      	orrs	r3, r2
 8002c0e:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8002c10:	697b      	ldr	r3, [r7, #20]
 8002c12:	220a      	movs	r2, #10
 8002c14:	4393      	bics	r3, r2
 8002c16:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8002c18:	697a      	ldr	r2, [r7, #20]
 8002c1a:	68bb      	ldr	r3, [r7, #8]
 8002c1c:	4313      	orrs	r3, r2
 8002c1e:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8002c20:	68fb      	ldr	r3, [r7, #12]
 8002c22:	693a      	ldr	r2, [r7, #16]
 8002c24:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002c26:	68fb      	ldr	r3, [r7, #12]
 8002c28:	697a      	ldr	r2, [r7, #20]
 8002c2a:	621a      	str	r2, [r3, #32]
}
 8002c2c:	46c0      	nop			; (mov r8, r8)
 8002c2e:	46bd      	mov	sp, r7
 8002c30:	b006      	add	sp, #24
 8002c32:	bd80      	pop	{r7, pc}

08002c34 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002c34:	b580      	push	{r7, lr}
 8002c36:	b086      	sub	sp, #24
 8002c38:	af00      	add	r7, sp, #0
 8002c3a:	60f8      	str	r0, [r7, #12]
 8002c3c:	60b9      	str	r1, [r7, #8]
 8002c3e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002c40:	68fb      	ldr	r3, [r7, #12]
 8002c42:	6a1b      	ldr	r3, [r3, #32]
 8002c44:	2210      	movs	r2, #16
 8002c46:	4393      	bics	r3, r2
 8002c48:	001a      	movs	r2, r3
 8002c4a:	68fb      	ldr	r3, [r7, #12]
 8002c4c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002c4e:	68fb      	ldr	r3, [r7, #12]
 8002c50:	699b      	ldr	r3, [r3, #24]
 8002c52:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8002c54:	68fb      	ldr	r3, [r7, #12]
 8002c56:	6a1b      	ldr	r3, [r3, #32]
 8002c58:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8002c5a:	697b      	ldr	r3, [r7, #20]
 8002c5c:	4a0d      	ldr	r2, [pc, #52]	; (8002c94 <TIM_TI2_ConfigInputStage+0x60>)
 8002c5e:	4013      	ands	r3, r2
 8002c60:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8002c62:	687b      	ldr	r3, [r7, #4]
 8002c64:	031b      	lsls	r3, r3, #12
 8002c66:	697a      	ldr	r2, [r7, #20]
 8002c68:	4313      	orrs	r3, r2
 8002c6a:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8002c6c:	693b      	ldr	r3, [r7, #16]
 8002c6e:	22a0      	movs	r2, #160	; 0xa0
 8002c70:	4393      	bics	r3, r2
 8002c72:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8002c74:	68bb      	ldr	r3, [r7, #8]
 8002c76:	011b      	lsls	r3, r3, #4
 8002c78:	693a      	ldr	r2, [r7, #16]
 8002c7a:	4313      	orrs	r3, r2
 8002c7c:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8002c7e:	68fb      	ldr	r3, [r7, #12]
 8002c80:	697a      	ldr	r2, [r7, #20]
 8002c82:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002c84:	68fb      	ldr	r3, [r7, #12]
 8002c86:	693a      	ldr	r2, [r7, #16]
 8002c88:	621a      	str	r2, [r3, #32]
}
 8002c8a:	46c0      	nop			; (mov r8, r8)
 8002c8c:	46bd      	mov	sp, r7
 8002c8e:	b006      	add	sp, #24
 8002c90:	bd80      	pop	{r7, pc}
 8002c92:	46c0      	nop			; (mov r8, r8)
 8002c94:	ffff0fff 	.word	0xffff0fff

08002c98 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8002c98:	b580      	push	{r7, lr}
 8002c9a:	b084      	sub	sp, #16
 8002c9c:	af00      	add	r7, sp, #0
 8002c9e:	6078      	str	r0, [r7, #4]
 8002ca0:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8002ca2:	687b      	ldr	r3, [r7, #4]
 8002ca4:	689b      	ldr	r3, [r3, #8]
 8002ca6:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8002ca8:	68fb      	ldr	r3, [r7, #12]
 8002caa:	2270      	movs	r2, #112	; 0x70
 8002cac:	4393      	bics	r3, r2
 8002cae:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8002cb0:	683a      	ldr	r2, [r7, #0]
 8002cb2:	68fb      	ldr	r3, [r7, #12]
 8002cb4:	4313      	orrs	r3, r2
 8002cb6:	2207      	movs	r2, #7
 8002cb8:	4313      	orrs	r3, r2
 8002cba:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002cbc:	687b      	ldr	r3, [r7, #4]
 8002cbe:	68fa      	ldr	r2, [r7, #12]
 8002cc0:	609a      	str	r2, [r3, #8]
}
 8002cc2:	46c0      	nop			; (mov r8, r8)
 8002cc4:	46bd      	mov	sp, r7
 8002cc6:	b004      	add	sp, #16
 8002cc8:	bd80      	pop	{r7, pc}
	...

08002ccc <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8002ccc:	b580      	push	{r7, lr}
 8002cce:	b086      	sub	sp, #24
 8002cd0:	af00      	add	r7, sp, #0
 8002cd2:	60f8      	str	r0, [r7, #12]
 8002cd4:	60b9      	str	r1, [r7, #8]
 8002cd6:	607a      	str	r2, [r7, #4]
 8002cd8:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8002cda:	68fb      	ldr	r3, [r7, #12]
 8002cdc:	689b      	ldr	r3, [r3, #8]
 8002cde:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002ce0:	697b      	ldr	r3, [r7, #20]
 8002ce2:	4a09      	ldr	r2, [pc, #36]	; (8002d08 <TIM_ETR_SetConfig+0x3c>)
 8002ce4:	4013      	ands	r3, r2
 8002ce6:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8002ce8:	683b      	ldr	r3, [r7, #0]
 8002cea:	021a      	lsls	r2, r3, #8
 8002cec:	687b      	ldr	r3, [r7, #4]
 8002cee:	431a      	orrs	r2, r3
 8002cf0:	68bb      	ldr	r3, [r7, #8]
 8002cf2:	4313      	orrs	r3, r2
 8002cf4:	697a      	ldr	r2, [r7, #20]
 8002cf6:	4313      	orrs	r3, r2
 8002cf8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002cfa:	68fb      	ldr	r3, [r7, #12]
 8002cfc:	697a      	ldr	r2, [r7, #20]
 8002cfe:	609a      	str	r2, [r3, #8]
}
 8002d00:	46c0      	nop			; (mov r8, r8)
 8002d02:	46bd      	mov	sp, r7
 8002d04:	b006      	add	sp, #24
 8002d06:	bd80      	pop	{r7, pc}
 8002d08:	ffff00ff 	.word	0xffff00ff

08002d0c <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8002d0c:	b580      	push	{r7, lr}
 8002d0e:	b086      	sub	sp, #24
 8002d10:	af00      	add	r7, sp, #0
 8002d12:	60f8      	str	r0, [r7, #12]
 8002d14:	60b9      	str	r1, [r7, #8]
 8002d16:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8002d18:	68bb      	ldr	r3, [r7, #8]
 8002d1a:	221f      	movs	r2, #31
 8002d1c:	4013      	ands	r3, r2
 8002d1e:	2201      	movs	r2, #1
 8002d20:	409a      	lsls	r2, r3
 8002d22:	0013      	movs	r3, r2
 8002d24:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8002d26:	68fb      	ldr	r3, [r7, #12]
 8002d28:	6a1b      	ldr	r3, [r3, #32]
 8002d2a:	697a      	ldr	r2, [r7, #20]
 8002d2c:	43d2      	mvns	r2, r2
 8002d2e:	401a      	ands	r2, r3
 8002d30:	68fb      	ldr	r3, [r7, #12]
 8002d32:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8002d34:	68fb      	ldr	r3, [r7, #12]
 8002d36:	6a1a      	ldr	r2, [r3, #32]
 8002d38:	68bb      	ldr	r3, [r7, #8]
 8002d3a:	211f      	movs	r1, #31
 8002d3c:	400b      	ands	r3, r1
 8002d3e:	6879      	ldr	r1, [r7, #4]
 8002d40:	4099      	lsls	r1, r3
 8002d42:	000b      	movs	r3, r1
 8002d44:	431a      	orrs	r2, r3
 8002d46:	68fb      	ldr	r3, [r7, #12]
 8002d48:	621a      	str	r2, [r3, #32]
}
 8002d4a:	46c0      	nop			; (mov r8, r8)
 8002d4c:	46bd      	mov	sp, r7
 8002d4e:	b006      	add	sp, #24
 8002d50:	bd80      	pop	{r7, pc}
	...

08002d54 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8002d54:	b580      	push	{r7, lr}
 8002d56:	b084      	sub	sp, #16
 8002d58:	af00      	add	r7, sp, #0
 8002d5a:	6078      	str	r0, [r7, #4]
 8002d5c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8002d5e:	687b      	ldr	r3, [r7, #4]
 8002d60:	223c      	movs	r2, #60	; 0x3c
 8002d62:	5c9b      	ldrb	r3, [r3, r2]
 8002d64:	2b01      	cmp	r3, #1
 8002d66:	d101      	bne.n	8002d6c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8002d68:	2302      	movs	r3, #2
 8002d6a:	e047      	b.n	8002dfc <HAL_TIMEx_MasterConfigSynchronization+0xa8>
 8002d6c:	687b      	ldr	r3, [r7, #4]
 8002d6e:	223c      	movs	r2, #60	; 0x3c
 8002d70:	2101      	movs	r1, #1
 8002d72:	5499      	strb	r1, [r3, r2]

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002d74:	687b      	ldr	r3, [r7, #4]
 8002d76:	223d      	movs	r2, #61	; 0x3d
 8002d78:	2102      	movs	r1, #2
 8002d7a:	5499      	strb	r1, [r3, r2]

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8002d7c:	687b      	ldr	r3, [r7, #4]
 8002d7e:	681b      	ldr	r3, [r3, #0]
 8002d80:	685b      	ldr	r3, [r3, #4]
 8002d82:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8002d84:	687b      	ldr	r3, [r7, #4]
 8002d86:	681b      	ldr	r3, [r3, #0]
 8002d88:	689b      	ldr	r3, [r3, #8]
 8002d8a:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8002d8c:	68fb      	ldr	r3, [r7, #12]
 8002d8e:	2270      	movs	r2, #112	; 0x70
 8002d90:	4393      	bics	r3, r2
 8002d92:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8002d94:	683b      	ldr	r3, [r7, #0]
 8002d96:	681b      	ldr	r3, [r3, #0]
 8002d98:	68fa      	ldr	r2, [r7, #12]
 8002d9a:	4313      	orrs	r3, r2
 8002d9c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8002d9e:	687b      	ldr	r3, [r7, #4]
 8002da0:	681b      	ldr	r3, [r3, #0]
 8002da2:	68fa      	ldr	r2, [r7, #12]
 8002da4:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002da6:	687b      	ldr	r3, [r7, #4]
 8002da8:	681b      	ldr	r3, [r3, #0]
 8002daa:	4a16      	ldr	r2, [pc, #88]	; (8002e04 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8002dac:	4293      	cmp	r3, r2
 8002dae:	d00f      	beq.n	8002dd0 <HAL_TIMEx_MasterConfigSynchronization+0x7c>
 8002db0:	687b      	ldr	r3, [r7, #4]
 8002db2:	681a      	ldr	r2, [r3, #0]
 8002db4:	2380      	movs	r3, #128	; 0x80
 8002db6:	05db      	lsls	r3, r3, #23
 8002db8:	429a      	cmp	r2, r3
 8002dba:	d009      	beq.n	8002dd0 <HAL_TIMEx_MasterConfigSynchronization+0x7c>
 8002dbc:	687b      	ldr	r3, [r7, #4]
 8002dbe:	681b      	ldr	r3, [r3, #0]
 8002dc0:	4a11      	ldr	r2, [pc, #68]	; (8002e08 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8002dc2:	4293      	cmp	r3, r2
 8002dc4:	d004      	beq.n	8002dd0 <HAL_TIMEx_MasterConfigSynchronization+0x7c>
 8002dc6:	687b      	ldr	r3, [r7, #4]
 8002dc8:	681b      	ldr	r3, [r3, #0]
 8002dca:	4a10      	ldr	r2, [pc, #64]	; (8002e0c <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 8002dcc:	4293      	cmp	r3, r2
 8002dce:	d10c      	bne.n	8002dea <HAL_TIMEx_MasterConfigSynchronization+0x96>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8002dd0:	68bb      	ldr	r3, [r7, #8]
 8002dd2:	2280      	movs	r2, #128	; 0x80
 8002dd4:	4393      	bics	r3, r2
 8002dd6:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8002dd8:	683b      	ldr	r3, [r7, #0]
 8002dda:	685b      	ldr	r3, [r3, #4]
 8002ddc:	68ba      	ldr	r2, [r7, #8]
 8002dde:	4313      	orrs	r3, r2
 8002de0:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8002de2:	687b      	ldr	r3, [r7, #4]
 8002de4:	681b      	ldr	r3, [r3, #0]
 8002de6:	68ba      	ldr	r2, [r7, #8]
 8002de8:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8002dea:	687b      	ldr	r3, [r7, #4]
 8002dec:	223d      	movs	r2, #61	; 0x3d
 8002dee:	2101      	movs	r1, #1
 8002df0:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 8002df2:	687b      	ldr	r3, [r7, #4]
 8002df4:	223c      	movs	r2, #60	; 0x3c
 8002df6:	2100      	movs	r1, #0
 8002df8:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8002dfa:	2300      	movs	r3, #0
}
 8002dfc:	0018      	movs	r0, r3
 8002dfe:	46bd      	mov	sp, r7
 8002e00:	b004      	add	sp, #16
 8002e02:	bd80      	pop	{r7, pc}
 8002e04:	40012c00 	.word	0x40012c00
 8002e08:	40000400 	.word	0x40000400
 8002e0c:	40014000 	.word	0x40014000

08002e10 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8002e10:	b580      	push	{r7, lr}
 8002e12:	b084      	sub	sp, #16
 8002e14:	af00      	add	r7, sp, #0
 8002e16:	6078      	str	r0, [r7, #4]
 8002e18:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8002e1a:	2300      	movs	r3, #0
 8002e1c:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8002e1e:	687b      	ldr	r3, [r7, #4]
 8002e20:	223c      	movs	r2, #60	; 0x3c
 8002e22:	5c9b      	ldrb	r3, [r3, r2]
 8002e24:	2b01      	cmp	r3, #1
 8002e26:	d101      	bne.n	8002e2c <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8002e28:	2302      	movs	r3, #2
 8002e2a:	e03e      	b.n	8002eaa <HAL_TIMEx_ConfigBreakDeadTime+0x9a>
 8002e2c:	687b      	ldr	r3, [r7, #4]
 8002e2e:	223c      	movs	r2, #60	; 0x3c
 8002e30:	2101      	movs	r1, #1
 8002e32:	5499      	strb	r1, [r3, r2]

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8002e34:	68fb      	ldr	r3, [r7, #12]
 8002e36:	22ff      	movs	r2, #255	; 0xff
 8002e38:	4393      	bics	r3, r2
 8002e3a:	001a      	movs	r2, r3
 8002e3c:	683b      	ldr	r3, [r7, #0]
 8002e3e:	68db      	ldr	r3, [r3, #12]
 8002e40:	4313      	orrs	r3, r2
 8002e42:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8002e44:	68fb      	ldr	r3, [r7, #12]
 8002e46:	4a1b      	ldr	r2, [pc, #108]	; (8002eb4 <HAL_TIMEx_ConfigBreakDeadTime+0xa4>)
 8002e48:	401a      	ands	r2, r3
 8002e4a:	683b      	ldr	r3, [r7, #0]
 8002e4c:	689b      	ldr	r3, [r3, #8]
 8002e4e:	4313      	orrs	r3, r2
 8002e50:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8002e52:	68fb      	ldr	r3, [r7, #12]
 8002e54:	4a18      	ldr	r2, [pc, #96]	; (8002eb8 <HAL_TIMEx_ConfigBreakDeadTime+0xa8>)
 8002e56:	401a      	ands	r2, r3
 8002e58:	683b      	ldr	r3, [r7, #0]
 8002e5a:	685b      	ldr	r3, [r3, #4]
 8002e5c:	4313      	orrs	r3, r2
 8002e5e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8002e60:	68fb      	ldr	r3, [r7, #12]
 8002e62:	4a16      	ldr	r2, [pc, #88]	; (8002ebc <HAL_TIMEx_ConfigBreakDeadTime+0xac>)
 8002e64:	401a      	ands	r2, r3
 8002e66:	683b      	ldr	r3, [r7, #0]
 8002e68:	681b      	ldr	r3, [r3, #0]
 8002e6a:	4313      	orrs	r3, r2
 8002e6c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8002e6e:	68fb      	ldr	r3, [r7, #12]
 8002e70:	4a13      	ldr	r2, [pc, #76]	; (8002ec0 <HAL_TIMEx_ConfigBreakDeadTime+0xb0>)
 8002e72:	401a      	ands	r2, r3
 8002e74:	683b      	ldr	r3, [r7, #0]
 8002e76:	691b      	ldr	r3, [r3, #16]
 8002e78:	4313      	orrs	r3, r2
 8002e7a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8002e7c:	68fb      	ldr	r3, [r7, #12]
 8002e7e:	4a11      	ldr	r2, [pc, #68]	; (8002ec4 <HAL_TIMEx_ConfigBreakDeadTime+0xb4>)
 8002e80:	401a      	ands	r2, r3
 8002e82:	683b      	ldr	r3, [r7, #0]
 8002e84:	695b      	ldr	r3, [r3, #20]
 8002e86:	4313      	orrs	r3, r2
 8002e88:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8002e8a:	68fb      	ldr	r3, [r7, #12]
 8002e8c:	4a0e      	ldr	r2, [pc, #56]	; (8002ec8 <HAL_TIMEx_ConfigBreakDeadTime+0xb8>)
 8002e8e:	401a      	ands	r2, r3
 8002e90:	683b      	ldr	r3, [r7, #0]
 8002e92:	69db      	ldr	r3, [r3, #28]
 8002e94:	4313      	orrs	r3, r2
 8002e96:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8002e98:	687b      	ldr	r3, [r7, #4]
 8002e9a:	681b      	ldr	r3, [r3, #0]
 8002e9c:	68fa      	ldr	r2, [r7, #12]
 8002e9e:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8002ea0:	687b      	ldr	r3, [r7, #4]
 8002ea2:	223c      	movs	r2, #60	; 0x3c
 8002ea4:	2100      	movs	r1, #0
 8002ea6:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8002ea8:	2300      	movs	r3, #0
}
 8002eaa:	0018      	movs	r0, r3
 8002eac:	46bd      	mov	sp, r7
 8002eae:	b004      	add	sp, #16
 8002eb0:	bd80      	pop	{r7, pc}
 8002eb2:	46c0      	nop			; (mov r8, r8)
 8002eb4:	fffffcff 	.word	0xfffffcff
 8002eb8:	fffffbff 	.word	0xfffffbff
 8002ebc:	fffff7ff 	.word	0xfffff7ff
 8002ec0:	ffffefff 	.word	0xffffefff
 8002ec4:	ffffdfff 	.word	0xffffdfff
 8002ec8:	ffffbfff 	.word	0xffffbfff

08002ecc <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8002ecc:	b580      	push	{r7, lr}
 8002ece:	b082      	sub	sp, #8
 8002ed0:	af00      	add	r7, sp, #0
 8002ed2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8002ed4:	46c0      	nop			; (mov r8, r8)
 8002ed6:	46bd      	mov	sp, r7
 8002ed8:	b002      	add	sp, #8
 8002eda:	bd80      	pop	{r7, pc}

08002edc <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8002edc:	b580      	push	{r7, lr}
 8002ede:	b082      	sub	sp, #8
 8002ee0:	af00      	add	r7, sp, #0
 8002ee2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8002ee4:	46c0      	nop			; (mov r8, r8)
 8002ee6:	46bd      	mov	sp, r7
 8002ee8:	b002      	add	sp, #8
 8002eea:	bd80      	pop	{r7, pc}

08002eec <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002eec:	b580      	push	{r7, lr}
 8002eee:	b082      	sub	sp, #8
 8002ef0:	af00      	add	r7, sp, #0
 8002ef2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002ef4:	687b      	ldr	r3, [r7, #4]
 8002ef6:	2b00      	cmp	r3, #0
 8002ef8:	d101      	bne.n	8002efe <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002efa:	2301      	movs	r3, #1
 8002efc:	e044      	b.n	8002f88 <HAL_UART_Init+0x9c>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8002efe:	687b      	ldr	r3, [r7, #4]
 8002f00:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002f02:	2b00      	cmp	r3, #0
 8002f04:	d107      	bne.n	8002f16 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002f06:	687b      	ldr	r3, [r7, #4]
 8002f08:	2278      	movs	r2, #120	; 0x78
 8002f0a:	2100      	movs	r1, #0
 8002f0c:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002f0e:	687b      	ldr	r3, [r7, #4]
 8002f10:	0018      	movs	r0, r3
 8002f12:	f7fd fca7 	bl	8000864 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002f16:	687b      	ldr	r3, [r7, #4]
 8002f18:	2224      	movs	r2, #36	; 0x24
 8002f1a:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 8002f1c:	687b      	ldr	r3, [r7, #4]
 8002f1e:	681b      	ldr	r3, [r3, #0]
 8002f20:	681a      	ldr	r2, [r3, #0]
 8002f22:	687b      	ldr	r3, [r7, #4]
 8002f24:	681b      	ldr	r3, [r3, #0]
 8002f26:	2101      	movs	r1, #1
 8002f28:	438a      	bics	r2, r1
 8002f2a:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8002f2c:	687b      	ldr	r3, [r7, #4]
 8002f2e:	0018      	movs	r0, r3
 8002f30:	f000 fbf4 	bl	800371c <UART_SetConfig>
 8002f34:	0003      	movs	r3, r0
 8002f36:	2b01      	cmp	r3, #1
 8002f38:	d101      	bne.n	8002f3e <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 8002f3a:	2301      	movs	r3, #1
 8002f3c:	e024      	b.n	8002f88 <HAL_UART_Init+0x9c>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8002f3e:	687b      	ldr	r3, [r7, #4]
 8002f40:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f42:	2b00      	cmp	r3, #0
 8002f44:	d003      	beq.n	8002f4e <HAL_UART_Init+0x62>
  {
    UART_AdvFeatureConfig(huart);
 8002f46:	687b      	ldr	r3, [r7, #4]
 8002f48:	0018      	movs	r0, r3
 8002f4a:	f000 fd6f 	bl	8003a2c <UART_AdvFeatureConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN (if LIN is supported) and CLKEN bits in the USART_CR2 register,
  - SCEN (if Smartcard is supported), HDSEL and IREN (if IrDA is supported)  bits in the USART_CR3 register.*/
#if defined (USART_CR2_LINEN)
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002f4e:	687b      	ldr	r3, [r7, #4]
 8002f50:	681b      	ldr	r3, [r3, #0]
 8002f52:	685a      	ldr	r2, [r3, #4]
 8002f54:	687b      	ldr	r3, [r7, #4]
 8002f56:	681b      	ldr	r3, [r3, #0]
 8002f58:	490d      	ldr	r1, [pc, #52]	; (8002f90 <HAL_UART_Init+0xa4>)
 8002f5a:	400a      	ands	r2, r1
 8002f5c:	605a      	str	r2, [r3, #4]
#else
  CLEAR_BIT(huart->Instance->CR2, USART_CR2_CLKEN);
#endif /* USART_CR2_LINEN */
#if defined (USART_CR3_SCEN)
#if defined (USART_CR3_IREN)
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002f5e:	687b      	ldr	r3, [r7, #4]
 8002f60:	681b      	ldr	r3, [r3, #0]
 8002f62:	689a      	ldr	r2, [r3, #8]
 8002f64:	687b      	ldr	r3, [r7, #4]
 8002f66:	681b      	ldr	r3, [r3, #0]
 8002f68:	212a      	movs	r1, #42	; 0x2a
 8002f6a:	438a      	bics	r2, r1
 8002f6c:	609a      	str	r2, [r3, #8]
#else
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_HDSEL);
#endif /* USART_CR3_IREN*/
#endif /* USART_CR3_SCEN */

  __HAL_UART_ENABLE(huart);
 8002f6e:	687b      	ldr	r3, [r7, #4]
 8002f70:	681b      	ldr	r3, [r3, #0]
 8002f72:	681a      	ldr	r2, [r3, #0]
 8002f74:	687b      	ldr	r3, [r7, #4]
 8002f76:	681b      	ldr	r3, [r3, #0]
 8002f78:	2101      	movs	r1, #1
 8002f7a:	430a      	orrs	r2, r1
 8002f7c:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8002f7e:	687b      	ldr	r3, [r7, #4]
 8002f80:	0018      	movs	r0, r3
 8002f82:	f000 fe07 	bl	8003b94 <UART_CheckIdleState>
 8002f86:	0003      	movs	r3, r0
}
 8002f88:	0018      	movs	r0, r3
 8002f8a:	46bd      	mov	sp, r7
 8002f8c:	b002      	add	sp, #8
 8002f8e:	bd80      	pop	{r7, pc}
 8002f90:	ffffb7ff 	.word	0xffffb7ff

08002f94 <HAL_UART_Transmit_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 8002f94:	b580      	push	{r7, lr}
 8002f96:	b088      	sub	sp, #32
 8002f98:	af00      	add	r7, sp, #0
 8002f9a:	60f8      	str	r0, [r7, #12]
 8002f9c:	60b9      	str	r1, [r7, #8]
 8002f9e:	1dbb      	adds	r3, r7, #6
 8002fa0:	801a      	strh	r2, [r3, #0]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8002fa2:	68fb      	ldr	r3, [r7, #12]
 8002fa4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002fa6:	2b20      	cmp	r3, #32
 8002fa8:	d15b      	bne.n	8003062 <HAL_UART_Transmit_IT+0xce>
  {
    if ((pData == NULL) || (Size == 0U))
 8002faa:	68bb      	ldr	r3, [r7, #8]
 8002fac:	2b00      	cmp	r3, #0
 8002fae:	d003      	beq.n	8002fb8 <HAL_UART_Transmit_IT+0x24>
 8002fb0:	1dbb      	adds	r3, r7, #6
 8002fb2:	881b      	ldrh	r3, [r3, #0]
 8002fb4:	2b00      	cmp	r3, #0
 8002fb6:	d101      	bne.n	8002fbc <HAL_UART_Transmit_IT+0x28>
    {
      return HAL_ERROR;
 8002fb8:	2301      	movs	r3, #1
 8002fba:	e053      	b.n	8003064 <HAL_UART_Transmit_IT+0xd0>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be filled into TDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002fbc:	68fb      	ldr	r3, [r7, #12]
 8002fbe:	689a      	ldr	r2, [r3, #8]
 8002fc0:	2380      	movs	r3, #128	; 0x80
 8002fc2:	015b      	lsls	r3, r3, #5
 8002fc4:	429a      	cmp	r2, r3
 8002fc6:	d109      	bne.n	8002fdc <HAL_UART_Transmit_IT+0x48>
 8002fc8:	68fb      	ldr	r3, [r7, #12]
 8002fca:	691b      	ldr	r3, [r3, #16]
 8002fcc:	2b00      	cmp	r3, #0
 8002fce:	d105      	bne.n	8002fdc <HAL_UART_Transmit_IT+0x48>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 8002fd0:	68bb      	ldr	r3, [r7, #8]
 8002fd2:	2201      	movs	r2, #1
 8002fd4:	4013      	ands	r3, r2
 8002fd6:	d001      	beq.n	8002fdc <HAL_UART_Transmit_IT+0x48>
      {
        return  HAL_ERROR;
 8002fd8:	2301      	movs	r3, #1
 8002fda:	e043      	b.n	8003064 <HAL_UART_Transmit_IT+0xd0>
      }
    }

    huart->pTxBuffPtr  = pData;
 8002fdc:	68fb      	ldr	r3, [r7, #12]
 8002fde:	68ba      	ldr	r2, [r7, #8]
 8002fe0:	64da      	str	r2, [r3, #76]	; 0x4c
    huart->TxXferSize  = Size;
 8002fe2:	68fb      	ldr	r3, [r7, #12]
 8002fe4:	1dba      	adds	r2, r7, #6
 8002fe6:	2150      	movs	r1, #80	; 0x50
 8002fe8:	8812      	ldrh	r2, [r2, #0]
 8002fea:	525a      	strh	r2, [r3, r1]
    huart->TxXferCount = Size;
 8002fec:	68fb      	ldr	r3, [r7, #12]
 8002fee:	1dba      	adds	r2, r7, #6
 8002ff0:	2152      	movs	r1, #82	; 0x52
 8002ff2:	8812      	ldrh	r2, [r2, #0]
 8002ff4:	525a      	strh	r2, [r3, r1]
    huart->TxISR       = NULL;
 8002ff6:	68fb      	ldr	r3, [r7, #12]
 8002ff8:	2200      	movs	r2, #0
 8002ffa:	66da      	str	r2, [r3, #108]	; 0x6c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002ffc:	68fb      	ldr	r3, [r7, #12]
 8002ffe:	2284      	movs	r2, #132	; 0x84
 8003000:	2100      	movs	r1, #0
 8003002:	5099      	str	r1, [r3, r2]
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003004:	68fb      	ldr	r3, [r7, #12]
 8003006:	2221      	movs	r2, #33	; 0x21
 8003008:	67da      	str	r2, [r3, #124]	; 0x7c

    /* Set the Tx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800300a:	68fb      	ldr	r3, [r7, #12]
 800300c:	689a      	ldr	r2, [r3, #8]
 800300e:	2380      	movs	r3, #128	; 0x80
 8003010:	015b      	lsls	r3, r3, #5
 8003012:	429a      	cmp	r2, r3
 8003014:	d107      	bne.n	8003026 <HAL_UART_Transmit_IT+0x92>
 8003016:	68fb      	ldr	r3, [r7, #12]
 8003018:	691b      	ldr	r3, [r3, #16]
 800301a:	2b00      	cmp	r3, #0
 800301c:	d103      	bne.n	8003026 <HAL_UART_Transmit_IT+0x92>
    {
      huart->TxISR = UART_TxISR_16BIT;
 800301e:	68fb      	ldr	r3, [r7, #12]
 8003020:	4a12      	ldr	r2, [pc, #72]	; (800306c <HAL_UART_Transmit_IT+0xd8>)
 8003022:	66da      	str	r2, [r3, #108]	; 0x6c
 8003024:	e002      	b.n	800302c <HAL_UART_Transmit_IT+0x98>
    }
    else
    {
      huart->TxISR = UART_TxISR_8BIT;
 8003026:	68fb      	ldr	r3, [r7, #12]
 8003028:	4a11      	ldr	r2, [pc, #68]	; (8003070 <HAL_UART_Transmit_IT+0xdc>)
 800302a:	66da      	str	r2, [r3, #108]	; 0x6c
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800302c:	f3ef 8310 	mrs	r3, PRIMASK
 8003030:	613b      	str	r3, [r7, #16]
  return(result);
 8003032:	693b      	ldr	r3, [r7, #16]
    }

    /* Enable the Transmit Data Register Empty interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 8003034:	61fb      	str	r3, [r7, #28]
 8003036:	2301      	movs	r3, #1
 8003038:	617b      	str	r3, [r7, #20]
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800303a:	697b      	ldr	r3, [r7, #20]
 800303c:	f383 8810 	msr	PRIMASK, r3
}
 8003040:	46c0      	nop			; (mov r8, r8)
 8003042:	68fb      	ldr	r3, [r7, #12]
 8003044:	681b      	ldr	r3, [r3, #0]
 8003046:	681a      	ldr	r2, [r3, #0]
 8003048:	68fb      	ldr	r3, [r7, #12]
 800304a:	681b      	ldr	r3, [r3, #0]
 800304c:	2180      	movs	r1, #128	; 0x80
 800304e:	430a      	orrs	r2, r1
 8003050:	601a      	str	r2, [r3, #0]
 8003052:	69fb      	ldr	r3, [r7, #28]
 8003054:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003056:	69bb      	ldr	r3, [r7, #24]
 8003058:	f383 8810 	msr	PRIMASK, r3
}
 800305c:	46c0      	nop			; (mov r8, r8)

    return HAL_OK;
 800305e:	2300      	movs	r3, #0
 8003060:	e000      	b.n	8003064 <HAL_UART_Transmit_IT+0xd0>
  }
  else
  {
    return HAL_BUSY;
 8003062:	2302      	movs	r3, #2
  }
}
 8003064:	0018      	movs	r0, r3
 8003066:	46bd      	mov	sp, r7
 8003068:	b008      	add	sp, #32
 800306a:	bd80      	pop	{r7, pc}
 800306c:	080040f7 	.word	0x080040f7
 8003070:	08004043 	.word	0x08004043

08003074 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8003074:	b580      	push	{r7, lr}
 8003076:	b088      	sub	sp, #32
 8003078:	af00      	add	r7, sp, #0
 800307a:	60f8      	str	r0, [r7, #12]
 800307c:	60b9      	str	r1, [r7, #8]
 800307e:	1dbb      	adds	r3, r7, #6
 8003080:	801a      	strh	r2, [r3, #0]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8003082:	68fb      	ldr	r3, [r7, #12]
 8003084:	2280      	movs	r2, #128	; 0x80
 8003086:	589b      	ldr	r3, [r3, r2]
 8003088:	2b20      	cmp	r3, #32
 800308a:	d145      	bne.n	8003118 <HAL_UART_Receive_IT+0xa4>
  {
    if ((pData == NULL) || (Size == 0U))
 800308c:	68bb      	ldr	r3, [r7, #8]
 800308e:	2b00      	cmp	r3, #0
 8003090:	d003      	beq.n	800309a <HAL_UART_Receive_IT+0x26>
 8003092:	1dbb      	adds	r3, r7, #6
 8003094:	881b      	ldrh	r3, [r3, #0]
 8003096:	2b00      	cmp	r3, #0
 8003098:	d101      	bne.n	800309e <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 800309a:	2301      	movs	r3, #1
 800309c:	e03d      	b.n	800311a <HAL_UART_Receive_IT+0xa6>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be received from RDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800309e:	68fb      	ldr	r3, [r7, #12]
 80030a0:	689a      	ldr	r2, [r3, #8]
 80030a2:	2380      	movs	r3, #128	; 0x80
 80030a4:	015b      	lsls	r3, r3, #5
 80030a6:	429a      	cmp	r2, r3
 80030a8:	d109      	bne.n	80030be <HAL_UART_Receive_IT+0x4a>
 80030aa:	68fb      	ldr	r3, [r7, #12]
 80030ac:	691b      	ldr	r3, [r3, #16]
 80030ae:	2b00      	cmp	r3, #0
 80030b0:	d105      	bne.n	80030be <HAL_UART_Receive_IT+0x4a>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 80030b2:	68bb      	ldr	r3, [r7, #8]
 80030b4:	2201      	movs	r2, #1
 80030b6:	4013      	ands	r3, r2
 80030b8:	d001      	beq.n	80030be <HAL_UART_Receive_IT+0x4a>
      {
        return  HAL_ERROR;
 80030ba:	2301      	movs	r3, #1
 80030bc:	e02d      	b.n	800311a <HAL_UART_Receive_IT+0xa6>
      }
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80030be:	68fb      	ldr	r3, [r7, #12]
 80030c0:	2200      	movs	r2, #0
 80030c2:	661a      	str	r2, [r3, #96]	; 0x60

    /* Check that USART RTOEN bit is set */
    if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 80030c4:	68fb      	ldr	r3, [r7, #12]
 80030c6:	681b      	ldr	r3, [r3, #0]
 80030c8:	685a      	ldr	r2, [r3, #4]
 80030ca:	2380      	movs	r3, #128	; 0x80
 80030cc:	041b      	lsls	r3, r3, #16
 80030ce:	4013      	ands	r3, r2
 80030d0:	d019      	beq.n	8003106 <HAL_UART_Receive_IT+0x92>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80030d2:	f3ef 8310 	mrs	r3, PRIMASK
 80030d6:	613b      	str	r3, [r7, #16]
  return(result);
 80030d8:	693b      	ldr	r3, [r7, #16]
    {
      /* Enable the UART Receiver Timeout Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 80030da:	61fb      	str	r3, [r7, #28]
 80030dc:	2301      	movs	r3, #1
 80030de:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80030e0:	697b      	ldr	r3, [r7, #20]
 80030e2:	f383 8810 	msr	PRIMASK, r3
}
 80030e6:	46c0      	nop			; (mov r8, r8)
 80030e8:	68fb      	ldr	r3, [r7, #12]
 80030ea:	681b      	ldr	r3, [r3, #0]
 80030ec:	681a      	ldr	r2, [r3, #0]
 80030ee:	68fb      	ldr	r3, [r7, #12]
 80030f0:	681b      	ldr	r3, [r3, #0]
 80030f2:	2180      	movs	r1, #128	; 0x80
 80030f4:	04c9      	lsls	r1, r1, #19
 80030f6:	430a      	orrs	r2, r1
 80030f8:	601a      	str	r2, [r3, #0]
 80030fa:	69fb      	ldr	r3, [r7, #28]
 80030fc:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80030fe:	69bb      	ldr	r3, [r7, #24]
 8003100:	f383 8810 	msr	PRIMASK, r3
}
 8003104:	46c0      	nop			; (mov r8, r8)
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 8003106:	1dbb      	adds	r3, r7, #6
 8003108:	881a      	ldrh	r2, [r3, #0]
 800310a:	68b9      	ldr	r1, [r7, #8]
 800310c:	68fb      	ldr	r3, [r7, #12]
 800310e:	0018      	movs	r0, r3
 8003110:	f000 fe52 	bl	8003db8 <UART_Start_Receive_IT>
 8003114:	0003      	movs	r3, r0
 8003116:	e000      	b.n	800311a <HAL_UART_Receive_IT+0xa6>
  }
  else
  {
    return HAL_BUSY;
 8003118:	2302      	movs	r3, #2
  }
}
 800311a:	0018      	movs	r0, r3
 800311c:	46bd      	mov	sp, r7
 800311e:	b008      	add	sp, #32
 8003120:	bd80      	pop	{r7, pc}
	...

08003124 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8003124:	b590      	push	{r4, r7, lr}
 8003126:	b0ab      	sub	sp, #172	; 0xac
 8003128:	af00      	add	r7, sp, #0
 800312a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 800312c:	687b      	ldr	r3, [r7, #4]
 800312e:	681b      	ldr	r3, [r3, #0]
 8003130:	69db      	ldr	r3, [r3, #28]
 8003132:	22a4      	movs	r2, #164	; 0xa4
 8003134:	18b9      	adds	r1, r7, r2
 8003136:	600b      	str	r3, [r1, #0]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8003138:	687b      	ldr	r3, [r7, #4]
 800313a:	681b      	ldr	r3, [r3, #0]
 800313c:	681b      	ldr	r3, [r3, #0]
 800313e:	20a0      	movs	r0, #160	; 0xa0
 8003140:	1839      	adds	r1, r7, r0
 8003142:	600b      	str	r3, [r1, #0]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8003144:	687b      	ldr	r3, [r7, #4]
 8003146:	681b      	ldr	r3, [r3, #0]
 8003148:	689b      	ldr	r3, [r3, #8]
 800314a:	219c      	movs	r1, #156	; 0x9c
 800314c:	1879      	adds	r1, r7, r1
 800314e:	600b      	str	r3, [r1, #0]

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8003150:	0011      	movs	r1, r2
 8003152:	18bb      	adds	r3, r7, r2
 8003154:	681b      	ldr	r3, [r3, #0]
 8003156:	4a99      	ldr	r2, [pc, #612]	; (80033bc <HAL_UART_IRQHandler+0x298>)
 8003158:	4013      	ands	r3, r2
 800315a:	2298      	movs	r2, #152	; 0x98
 800315c:	18bc      	adds	r4, r7, r2
 800315e:	6023      	str	r3, [r4, #0]
  if (errorflags == 0U)
 8003160:	18bb      	adds	r3, r7, r2
 8003162:	681b      	ldr	r3, [r3, #0]
 8003164:	2b00      	cmp	r3, #0
 8003166:	d114      	bne.n	8003192 <HAL_UART_IRQHandler+0x6e>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8003168:	187b      	adds	r3, r7, r1
 800316a:	681b      	ldr	r3, [r3, #0]
 800316c:	2220      	movs	r2, #32
 800316e:	4013      	ands	r3, r2
 8003170:	d00f      	beq.n	8003192 <HAL_UART_IRQHandler+0x6e>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8003172:	183b      	adds	r3, r7, r0
 8003174:	681b      	ldr	r3, [r3, #0]
 8003176:	2220      	movs	r2, #32
 8003178:	4013      	ands	r3, r2
 800317a:	d00a      	beq.n	8003192 <HAL_UART_IRQHandler+0x6e>
    {
      if (huart->RxISR != NULL)
 800317c:	687b      	ldr	r3, [r7, #4]
 800317e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003180:	2b00      	cmp	r3, #0
 8003182:	d100      	bne.n	8003186 <HAL_UART_IRQHandler+0x62>
 8003184:	e29e      	b.n	80036c4 <HAL_UART_IRQHandler+0x5a0>
      {
        huart->RxISR(huart);
 8003186:	687b      	ldr	r3, [r7, #4]
 8003188:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800318a:	687a      	ldr	r2, [r7, #4]
 800318c:	0010      	movs	r0, r2
 800318e:	4798      	blx	r3
      }
      return;
 8003190:	e298      	b.n	80036c4 <HAL_UART_IRQHandler+0x5a0>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8003192:	2398      	movs	r3, #152	; 0x98
 8003194:	18fb      	adds	r3, r7, r3
 8003196:	681b      	ldr	r3, [r3, #0]
 8003198:	2b00      	cmp	r3, #0
 800319a:	d100      	bne.n	800319e <HAL_UART_IRQHandler+0x7a>
 800319c:	e114      	b.n	80033c8 <HAL_UART_IRQHandler+0x2a4>
      && (((cr3its & USART_CR3_EIE) != 0U)
 800319e:	239c      	movs	r3, #156	; 0x9c
 80031a0:	18fb      	adds	r3, r7, r3
 80031a2:	681b      	ldr	r3, [r3, #0]
 80031a4:	2201      	movs	r2, #1
 80031a6:	4013      	ands	r3, r2
 80031a8:	d106      	bne.n	80031b8 <HAL_UART_IRQHandler+0x94>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 80031aa:	23a0      	movs	r3, #160	; 0xa0
 80031ac:	18fb      	adds	r3, r7, r3
 80031ae:	681b      	ldr	r3, [r3, #0]
 80031b0:	4a83      	ldr	r2, [pc, #524]	; (80033c0 <HAL_UART_IRQHandler+0x29c>)
 80031b2:	4013      	ands	r3, r2
 80031b4:	d100      	bne.n	80031b8 <HAL_UART_IRQHandler+0x94>
 80031b6:	e107      	b.n	80033c8 <HAL_UART_IRQHandler+0x2a4>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 80031b8:	23a4      	movs	r3, #164	; 0xa4
 80031ba:	18fb      	adds	r3, r7, r3
 80031bc:	681b      	ldr	r3, [r3, #0]
 80031be:	2201      	movs	r2, #1
 80031c0:	4013      	ands	r3, r2
 80031c2:	d012      	beq.n	80031ea <HAL_UART_IRQHandler+0xc6>
 80031c4:	23a0      	movs	r3, #160	; 0xa0
 80031c6:	18fb      	adds	r3, r7, r3
 80031c8:	681a      	ldr	r2, [r3, #0]
 80031ca:	2380      	movs	r3, #128	; 0x80
 80031cc:	005b      	lsls	r3, r3, #1
 80031ce:	4013      	ands	r3, r2
 80031d0:	d00b      	beq.n	80031ea <HAL_UART_IRQHandler+0xc6>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 80031d2:	687b      	ldr	r3, [r7, #4]
 80031d4:	681b      	ldr	r3, [r3, #0]
 80031d6:	2201      	movs	r2, #1
 80031d8:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80031da:	687b      	ldr	r3, [r7, #4]
 80031dc:	2284      	movs	r2, #132	; 0x84
 80031de:	589b      	ldr	r3, [r3, r2]
 80031e0:	2201      	movs	r2, #1
 80031e2:	431a      	orrs	r2, r3
 80031e4:	687b      	ldr	r3, [r7, #4]
 80031e6:	2184      	movs	r1, #132	; 0x84
 80031e8:	505a      	str	r2, [r3, r1]
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80031ea:	23a4      	movs	r3, #164	; 0xa4
 80031ec:	18fb      	adds	r3, r7, r3
 80031ee:	681b      	ldr	r3, [r3, #0]
 80031f0:	2202      	movs	r2, #2
 80031f2:	4013      	ands	r3, r2
 80031f4:	d011      	beq.n	800321a <HAL_UART_IRQHandler+0xf6>
 80031f6:	239c      	movs	r3, #156	; 0x9c
 80031f8:	18fb      	adds	r3, r7, r3
 80031fa:	681b      	ldr	r3, [r3, #0]
 80031fc:	2201      	movs	r2, #1
 80031fe:	4013      	ands	r3, r2
 8003200:	d00b      	beq.n	800321a <HAL_UART_IRQHandler+0xf6>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8003202:	687b      	ldr	r3, [r7, #4]
 8003204:	681b      	ldr	r3, [r3, #0]
 8003206:	2202      	movs	r2, #2
 8003208:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800320a:	687b      	ldr	r3, [r7, #4]
 800320c:	2284      	movs	r2, #132	; 0x84
 800320e:	589b      	ldr	r3, [r3, r2]
 8003210:	2204      	movs	r2, #4
 8003212:	431a      	orrs	r2, r3
 8003214:	687b      	ldr	r3, [r7, #4]
 8003216:	2184      	movs	r1, #132	; 0x84
 8003218:	505a      	str	r2, [r3, r1]
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800321a:	23a4      	movs	r3, #164	; 0xa4
 800321c:	18fb      	adds	r3, r7, r3
 800321e:	681b      	ldr	r3, [r3, #0]
 8003220:	2204      	movs	r2, #4
 8003222:	4013      	ands	r3, r2
 8003224:	d011      	beq.n	800324a <HAL_UART_IRQHandler+0x126>
 8003226:	239c      	movs	r3, #156	; 0x9c
 8003228:	18fb      	adds	r3, r7, r3
 800322a:	681b      	ldr	r3, [r3, #0]
 800322c:	2201      	movs	r2, #1
 800322e:	4013      	ands	r3, r2
 8003230:	d00b      	beq.n	800324a <HAL_UART_IRQHandler+0x126>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8003232:	687b      	ldr	r3, [r7, #4]
 8003234:	681b      	ldr	r3, [r3, #0]
 8003236:	2204      	movs	r2, #4
 8003238:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800323a:	687b      	ldr	r3, [r7, #4]
 800323c:	2284      	movs	r2, #132	; 0x84
 800323e:	589b      	ldr	r3, [r3, r2]
 8003240:	2202      	movs	r2, #2
 8003242:	431a      	orrs	r2, r3
 8003244:	687b      	ldr	r3, [r7, #4]
 8003246:	2184      	movs	r1, #132	; 0x84
 8003248:	505a      	str	r2, [r3, r1]
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 800324a:	23a4      	movs	r3, #164	; 0xa4
 800324c:	18fb      	adds	r3, r7, r3
 800324e:	681b      	ldr	r3, [r3, #0]
 8003250:	2208      	movs	r2, #8
 8003252:	4013      	ands	r3, r2
 8003254:	d017      	beq.n	8003286 <HAL_UART_IRQHandler+0x162>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8003256:	23a0      	movs	r3, #160	; 0xa0
 8003258:	18fb      	adds	r3, r7, r3
 800325a:	681b      	ldr	r3, [r3, #0]
 800325c:	2220      	movs	r2, #32
 800325e:	4013      	ands	r3, r2
 8003260:	d105      	bne.n	800326e <HAL_UART_IRQHandler+0x14a>
            ((cr3its & USART_CR3_EIE) != 0U)))
 8003262:	239c      	movs	r3, #156	; 0x9c
 8003264:	18fb      	adds	r3, r7, r3
 8003266:	681b      	ldr	r3, [r3, #0]
 8003268:	2201      	movs	r2, #1
 800326a:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 800326c:	d00b      	beq.n	8003286 <HAL_UART_IRQHandler+0x162>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800326e:	687b      	ldr	r3, [r7, #4]
 8003270:	681b      	ldr	r3, [r3, #0]
 8003272:	2208      	movs	r2, #8
 8003274:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8003276:	687b      	ldr	r3, [r7, #4]
 8003278:	2284      	movs	r2, #132	; 0x84
 800327a:	589b      	ldr	r3, [r3, r2]
 800327c:	2208      	movs	r2, #8
 800327e:	431a      	orrs	r2, r3
 8003280:	687b      	ldr	r3, [r7, #4]
 8003282:	2184      	movs	r1, #132	; 0x84
 8003284:	505a      	str	r2, [r3, r1]
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8003286:	23a4      	movs	r3, #164	; 0xa4
 8003288:	18fb      	adds	r3, r7, r3
 800328a:	681a      	ldr	r2, [r3, #0]
 800328c:	2380      	movs	r3, #128	; 0x80
 800328e:	011b      	lsls	r3, r3, #4
 8003290:	4013      	ands	r3, r2
 8003292:	d013      	beq.n	80032bc <HAL_UART_IRQHandler+0x198>
 8003294:	23a0      	movs	r3, #160	; 0xa0
 8003296:	18fb      	adds	r3, r7, r3
 8003298:	681a      	ldr	r2, [r3, #0]
 800329a:	2380      	movs	r3, #128	; 0x80
 800329c:	04db      	lsls	r3, r3, #19
 800329e:	4013      	ands	r3, r2
 80032a0:	d00c      	beq.n	80032bc <HAL_UART_IRQHandler+0x198>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80032a2:	687b      	ldr	r3, [r7, #4]
 80032a4:	681b      	ldr	r3, [r3, #0]
 80032a6:	2280      	movs	r2, #128	; 0x80
 80032a8:	0112      	lsls	r2, r2, #4
 80032aa:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 80032ac:	687b      	ldr	r3, [r7, #4]
 80032ae:	2284      	movs	r2, #132	; 0x84
 80032b0:	589b      	ldr	r3, [r3, r2]
 80032b2:	2220      	movs	r2, #32
 80032b4:	431a      	orrs	r2, r3
 80032b6:	687b      	ldr	r3, [r7, #4]
 80032b8:	2184      	movs	r1, #132	; 0x84
 80032ba:	505a      	str	r2, [r3, r1]
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80032bc:	687b      	ldr	r3, [r7, #4]
 80032be:	2284      	movs	r2, #132	; 0x84
 80032c0:	589b      	ldr	r3, [r3, r2]
 80032c2:	2b00      	cmp	r3, #0
 80032c4:	d100      	bne.n	80032c8 <HAL_UART_IRQHandler+0x1a4>
 80032c6:	e1ff      	b.n	80036c8 <HAL_UART_IRQHandler+0x5a4>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 80032c8:	23a4      	movs	r3, #164	; 0xa4
 80032ca:	18fb      	adds	r3, r7, r3
 80032cc:	681b      	ldr	r3, [r3, #0]
 80032ce:	2220      	movs	r2, #32
 80032d0:	4013      	ands	r3, r2
 80032d2:	d00e      	beq.n	80032f2 <HAL_UART_IRQHandler+0x1ce>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 80032d4:	23a0      	movs	r3, #160	; 0xa0
 80032d6:	18fb      	adds	r3, r7, r3
 80032d8:	681b      	ldr	r3, [r3, #0]
 80032da:	2220      	movs	r2, #32
 80032dc:	4013      	ands	r3, r2
 80032de:	d008      	beq.n	80032f2 <HAL_UART_IRQHandler+0x1ce>
      {
        if (huart->RxISR != NULL)
 80032e0:	687b      	ldr	r3, [r7, #4]
 80032e2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80032e4:	2b00      	cmp	r3, #0
 80032e6:	d004      	beq.n	80032f2 <HAL_UART_IRQHandler+0x1ce>
        {
          huart->RxISR(huart);
 80032e8:	687b      	ldr	r3, [r7, #4]
 80032ea:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80032ec:	687a      	ldr	r2, [r7, #4]
 80032ee:	0010      	movs	r0, r2
 80032f0:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 80032f2:	687b      	ldr	r3, [r7, #4]
 80032f4:	2284      	movs	r2, #132	; 0x84
 80032f6:	589b      	ldr	r3, [r3, r2]
 80032f8:	2194      	movs	r1, #148	; 0x94
 80032fa:	187a      	adds	r2, r7, r1
 80032fc:	6013      	str	r3, [r2, #0]
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80032fe:	687b      	ldr	r3, [r7, #4]
 8003300:	681b      	ldr	r3, [r3, #0]
 8003302:	689b      	ldr	r3, [r3, #8]
 8003304:	2240      	movs	r2, #64	; 0x40
 8003306:	4013      	ands	r3, r2
 8003308:	2b40      	cmp	r3, #64	; 0x40
 800330a:	d004      	beq.n	8003316 <HAL_UART_IRQHandler+0x1f2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 800330c:	187b      	adds	r3, r7, r1
 800330e:	681b      	ldr	r3, [r3, #0]
 8003310:	2228      	movs	r2, #40	; 0x28
 8003312:	4013      	ands	r3, r2
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8003314:	d047      	beq.n	80033a6 <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8003316:	687b      	ldr	r3, [r7, #4]
 8003318:	0018      	movs	r0, r3
 800331a:	f000 fe17 	bl	8003f4c <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800331e:	687b      	ldr	r3, [r7, #4]
 8003320:	681b      	ldr	r3, [r3, #0]
 8003322:	689b      	ldr	r3, [r3, #8]
 8003324:	2240      	movs	r2, #64	; 0x40
 8003326:	4013      	ands	r3, r2
 8003328:	2b40      	cmp	r3, #64	; 0x40
 800332a:	d137      	bne.n	800339c <HAL_UART_IRQHandler+0x278>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800332c:	f3ef 8310 	mrs	r3, PRIMASK
 8003330:	663b      	str	r3, [r7, #96]	; 0x60
  return(result);
 8003332:	6e3b      	ldr	r3, [r7, #96]	; 0x60
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003334:	2090      	movs	r0, #144	; 0x90
 8003336:	183a      	adds	r2, r7, r0
 8003338:	6013      	str	r3, [r2, #0]
 800333a:	2301      	movs	r3, #1
 800333c:	667b      	str	r3, [r7, #100]	; 0x64
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800333e:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8003340:	f383 8810 	msr	PRIMASK, r3
}
 8003344:	46c0      	nop			; (mov r8, r8)
 8003346:	687b      	ldr	r3, [r7, #4]
 8003348:	681b      	ldr	r3, [r3, #0]
 800334a:	689a      	ldr	r2, [r3, #8]
 800334c:	687b      	ldr	r3, [r7, #4]
 800334e:	681b      	ldr	r3, [r3, #0]
 8003350:	2140      	movs	r1, #64	; 0x40
 8003352:	438a      	bics	r2, r1
 8003354:	609a      	str	r2, [r3, #8]
 8003356:	183b      	adds	r3, r7, r0
 8003358:	681b      	ldr	r3, [r3, #0]
 800335a:	66bb      	str	r3, [r7, #104]	; 0x68
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800335c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800335e:	f383 8810 	msr	PRIMASK, r3
}
 8003362:	46c0      	nop			; (mov r8, r8)

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8003364:	687b      	ldr	r3, [r7, #4]
 8003366:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003368:	2b00      	cmp	r3, #0
 800336a:	d012      	beq.n	8003392 <HAL_UART_IRQHandler+0x26e>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800336c:	687b      	ldr	r3, [r7, #4]
 800336e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003370:	4a14      	ldr	r2, [pc, #80]	; (80033c4 <HAL_UART_IRQHandler+0x2a0>)
 8003372:	635a      	str	r2, [r3, #52]	; 0x34

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8003374:	687b      	ldr	r3, [r7, #4]
 8003376:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003378:	0018      	movs	r0, r3
 800337a:	f7fd fca1 	bl	8000cc0 <HAL_DMA_Abort_IT>
 800337e:	1e03      	subs	r3, r0, #0
 8003380:	d01a      	beq.n	80033b8 <HAL_UART_IRQHandler+0x294>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8003382:	687b      	ldr	r3, [r7, #4]
 8003384:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003386:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003388:	687b      	ldr	r3, [r7, #4]
 800338a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800338c:	0018      	movs	r0, r3
 800338e:	4790      	blx	r2
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003390:	e012      	b.n	80033b8 <HAL_UART_IRQHandler+0x294>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8003392:	687b      	ldr	r3, [r7, #4]
 8003394:	0018      	movs	r0, r3
 8003396:	f000 f9ad 	bl	80036f4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800339a:	e00d      	b.n	80033b8 <HAL_UART_IRQHandler+0x294>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800339c:	687b      	ldr	r3, [r7, #4]
 800339e:	0018      	movs	r0, r3
 80033a0:	f000 f9a8 	bl	80036f4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80033a4:	e008      	b.n	80033b8 <HAL_UART_IRQHandler+0x294>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80033a6:	687b      	ldr	r3, [r7, #4]
 80033a8:	0018      	movs	r0, r3
 80033aa:	f000 f9a3 	bl	80036f4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80033ae:	687b      	ldr	r3, [r7, #4]
 80033b0:	2284      	movs	r2, #132	; 0x84
 80033b2:	2100      	movs	r1, #0
 80033b4:	5099      	str	r1, [r3, r2]
      }
    }
    return;
 80033b6:	e187      	b.n	80036c8 <HAL_UART_IRQHandler+0x5a4>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80033b8:	46c0      	nop			; (mov r8, r8)
    return;
 80033ba:	e185      	b.n	80036c8 <HAL_UART_IRQHandler+0x5a4>
 80033bc:	0000080f 	.word	0x0000080f
 80033c0:	04000120 	.word	0x04000120
 80033c4:	08004015 	.word	0x08004015

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80033c8:	687b      	ldr	r3, [r7, #4]
 80033ca:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80033cc:	2b01      	cmp	r3, #1
 80033ce:	d000      	beq.n	80033d2 <HAL_UART_IRQHandler+0x2ae>
 80033d0:	e139      	b.n	8003646 <HAL_UART_IRQHandler+0x522>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 80033d2:	23a4      	movs	r3, #164	; 0xa4
 80033d4:	18fb      	adds	r3, r7, r3
 80033d6:	681b      	ldr	r3, [r3, #0]
 80033d8:	2210      	movs	r2, #16
 80033da:	4013      	ands	r3, r2
 80033dc:	d100      	bne.n	80033e0 <HAL_UART_IRQHandler+0x2bc>
 80033de:	e132      	b.n	8003646 <HAL_UART_IRQHandler+0x522>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 80033e0:	23a0      	movs	r3, #160	; 0xa0
 80033e2:	18fb      	adds	r3, r7, r3
 80033e4:	681b      	ldr	r3, [r3, #0]
 80033e6:	2210      	movs	r2, #16
 80033e8:	4013      	ands	r3, r2
 80033ea:	d100      	bne.n	80033ee <HAL_UART_IRQHandler+0x2ca>
 80033ec:	e12b      	b.n	8003646 <HAL_UART_IRQHandler+0x522>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80033ee:	687b      	ldr	r3, [r7, #4]
 80033f0:	681b      	ldr	r3, [r3, #0]
 80033f2:	2210      	movs	r2, #16
 80033f4:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80033f6:	687b      	ldr	r3, [r7, #4]
 80033f8:	681b      	ldr	r3, [r3, #0]
 80033fa:	689b      	ldr	r3, [r3, #8]
 80033fc:	2240      	movs	r2, #64	; 0x40
 80033fe:	4013      	ands	r3, r2
 8003400:	2b40      	cmp	r3, #64	; 0x40
 8003402:	d000      	beq.n	8003406 <HAL_UART_IRQHandler+0x2e2>
 8003404:	e09f      	b.n	8003546 <HAL_UART_IRQHandler+0x422>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8003406:	687b      	ldr	r3, [r7, #4]
 8003408:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800340a:	681b      	ldr	r3, [r3, #0]
 800340c:	685a      	ldr	r2, [r3, #4]
 800340e:	217e      	movs	r1, #126	; 0x7e
 8003410:	187b      	adds	r3, r7, r1
 8003412:	801a      	strh	r2, [r3, #0]
      if ((nb_remaining_rx_data > 0U)
 8003414:	187b      	adds	r3, r7, r1
 8003416:	881b      	ldrh	r3, [r3, #0]
 8003418:	2b00      	cmp	r3, #0
 800341a:	d100      	bne.n	800341e <HAL_UART_IRQHandler+0x2fa>
 800341c:	e156      	b.n	80036cc <HAL_UART_IRQHandler+0x5a8>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800341e:	687b      	ldr	r3, [r7, #4]
 8003420:	2258      	movs	r2, #88	; 0x58
 8003422:	5a9b      	ldrh	r3, [r3, r2]
 8003424:	187a      	adds	r2, r7, r1
 8003426:	8812      	ldrh	r2, [r2, #0]
 8003428:	429a      	cmp	r2, r3
 800342a:	d300      	bcc.n	800342e <HAL_UART_IRQHandler+0x30a>
 800342c:	e14e      	b.n	80036cc <HAL_UART_IRQHandler+0x5a8>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800342e:	687b      	ldr	r3, [r7, #4]
 8003430:	187a      	adds	r2, r7, r1
 8003432:	215a      	movs	r1, #90	; 0x5a
 8003434:	8812      	ldrh	r2, [r2, #0]
 8003436:	525a      	strh	r2, [r3, r1]

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8003438:	687b      	ldr	r3, [r7, #4]
 800343a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800343c:	699b      	ldr	r3, [r3, #24]
 800343e:	2b20      	cmp	r3, #32
 8003440:	d06f      	beq.n	8003522 <HAL_UART_IRQHandler+0x3fe>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003442:	f3ef 8310 	mrs	r3, PRIMASK
 8003446:	633b      	str	r3, [r7, #48]	; 0x30
  return(result);
 8003448:	6b3b      	ldr	r3, [r7, #48]	; 0x30
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800344a:	67bb      	str	r3, [r7, #120]	; 0x78
 800344c:	2301      	movs	r3, #1
 800344e:	637b      	str	r3, [r7, #52]	; 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003450:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003452:	f383 8810 	msr	PRIMASK, r3
}
 8003456:	46c0      	nop			; (mov r8, r8)
 8003458:	687b      	ldr	r3, [r7, #4]
 800345a:	681b      	ldr	r3, [r3, #0]
 800345c:	681a      	ldr	r2, [r3, #0]
 800345e:	687b      	ldr	r3, [r7, #4]
 8003460:	681b      	ldr	r3, [r3, #0]
 8003462:	499e      	ldr	r1, [pc, #632]	; (80036dc <HAL_UART_IRQHandler+0x5b8>)
 8003464:	400a      	ands	r2, r1
 8003466:	601a      	str	r2, [r3, #0]
 8003468:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800346a:	63bb      	str	r3, [r7, #56]	; 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800346c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800346e:	f383 8810 	msr	PRIMASK, r3
}
 8003472:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003474:	f3ef 8310 	mrs	r3, PRIMASK
 8003478:	63fb      	str	r3, [r7, #60]	; 0x3c
  return(result);
 800347a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800347c:	677b      	str	r3, [r7, #116]	; 0x74
 800347e:	2301      	movs	r3, #1
 8003480:	643b      	str	r3, [r7, #64]	; 0x40
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003482:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003484:	f383 8810 	msr	PRIMASK, r3
}
 8003488:	46c0      	nop			; (mov r8, r8)
 800348a:	687b      	ldr	r3, [r7, #4]
 800348c:	681b      	ldr	r3, [r3, #0]
 800348e:	689a      	ldr	r2, [r3, #8]
 8003490:	687b      	ldr	r3, [r7, #4]
 8003492:	681b      	ldr	r3, [r3, #0]
 8003494:	2101      	movs	r1, #1
 8003496:	438a      	bics	r2, r1
 8003498:	609a      	str	r2, [r3, #8]
 800349a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800349c:	647b      	str	r3, [r7, #68]	; 0x44
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800349e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80034a0:	f383 8810 	msr	PRIMASK, r3
}
 80034a4:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80034a6:	f3ef 8310 	mrs	r3, PRIMASK
 80034aa:	64bb      	str	r3, [r7, #72]	; 0x48
  return(result);
 80034ac:	6cbb      	ldr	r3, [r7, #72]	; 0x48

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80034ae:	673b      	str	r3, [r7, #112]	; 0x70
 80034b0:	2301      	movs	r3, #1
 80034b2:	64fb      	str	r3, [r7, #76]	; 0x4c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80034b4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80034b6:	f383 8810 	msr	PRIMASK, r3
}
 80034ba:	46c0      	nop			; (mov r8, r8)
 80034bc:	687b      	ldr	r3, [r7, #4]
 80034be:	681b      	ldr	r3, [r3, #0]
 80034c0:	689a      	ldr	r2, [r3, #8]
 80034c2:	687b      	ldr	r3, [r7, #4]
 80034c4:	681b      	ldr	r3, [r3, #0]
 80034c6:	2140      	movs	r1, #64	; 0x40
 80034c8:	438a      	bics	r2, r1
 80034ca:	609a      	str	r2, [r3, #8]
 80034cc:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80034ce:	653b      	str	r3, [r7, #80]	; 0x50
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80034d0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80034d2:	f383 8810 	msr	PRIMASK, r3
}
 80034d6:	46c0      	nop			; (mov r8, r8)

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80034d8:	687b      	ldr	r3, [r7, #4]
 80034da:	2280      	movs	r2, #128	; 0x80
 80034dc:	2120      	movs	r1, #32
 80034de:	5099      	str	r1, [r3, r2]
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80034e0:	687b      	ldr	r3, [r7, #4]
 80034e2:	2200      	movs	r2, #0
 80034e4:	661a      	str	r2, [r3, #96]	; 0x60
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80034e6:	f3ef 8310 	mrs	r3, PRIMASK
 80034ea:	657b      	str	r3, [r7, #84]	; 0x54
  return(result);
 80034ec:	6d7b      	ldr	r3, [r7, #84]	; 0x54

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80034ee:	66fb      	str	r3, [r7, #108]	; 0x6c
 80034f0:	2301      	movs	r3, #1
 80034f2:	65bb      	str	r3, [r7, #88]	; 0x58
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80034f4:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80034f6:	f383 8810 	msr	PRIMASK, r3
}
 80034fa:	46c0      	nop			; (mov r8, r8)
 80034fc:	687b      	ldr	r3, [r7, #4]
 80034fe:	681b      	ldr	r3, [r3, #0]
 8003500:	681a      	ldr	r2, [r3, #0]
 8003502:	687b      	ldr	r3, [r7, #4]
 8003504:	681b      	ldr	r3, [r3, #0]
 8003506:	2110      	movs	r1, #16
 8003508:	438a      	bics	r2, r1
 800350a:	601a      	str	r2, [r3, #0]
 800350c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800350e:	65fb      	str	r3, [r7, #92]	; 0x5c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003510:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003512:	f383 8810 	msr	PRIMASK, r3
}
 8003516:	46c0      	nop			; (mov r8, r8)

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8003518:	687b      	ldr	r3, [r7, #4]
 800351a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800351c:	0018      	movs	r0, r3
 800351e:	f7fd fb97 	bl	8000c50 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8003522:	687b      	ldr	r3, [r7, #4]
 8003524:	2202      	movs	r2, #2
 8003526:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8003528:	687b      	ldr	r3, [r7, #4]
 800352a:	2258      	movs	r2, #88	; 0x58
 800352c:	5a9a      	ldrh	r2, [r3, r2]
 800352e:	687b      	ldr	r3, [r7, #4]
 8003530:	215a      	movs	r1, #90	; 0x5a
 8003532:	5a5b      	ldrh	r3, [r3, r1]
 8003534:	b29b      	uxth	r3, r3
 8003536:	1ad3      	subs	r3, r2, r3
 8003538:	b29a      	uxth	r2, r3
 800353a:	687b      	ldr	r3, [r7, #4]
 800353c:	0011      	movs	r1, r2
 800353e:	0018      	movs	r0, r3
 8003540:	f000 f8e0 	bl	8003704 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8003544:	e0c2      	b.n	80036cc <HAL_UART_IRQHandler+0x5a8>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8003546:	687b      	ldr	r3, [r7, #4]
 8003548:	2258      	movs	r2, #88	; 0x58
 800354a:	5a99      	ldrh	r1, [r3, r2]
 800354c:	687b      	ldr	r3, [r7, #4]
 800354e:	225a      	movs	r2, #90	; 0x5a
 8003550:	5a9b      	ldrh	r3, [r3, r2]
 8003552:	b29a      	uxth	r2, r3
 8003554:	208e      	movs	r0, #142	; 0x8e
 8003556:	183b      	adds	r3, r7, r0
 8003558:	1a8a      	subs	r2, r1, r2
 800355a:	801a      	strh	r2, [r3, #0]
      if ((huart->RxXferCount > 0U)
 800355c:	687b      	ldr	r3, [r7, #4]
 800355e:	225a      	movs	r2, #90	; 0x5a
 8003560:	5a9b      	ldrh	r3, [r3, r2]
 8003562:	b29b      	uxth	r3, r3
 8003564:	2b00      	cmp	r3, #0
 8003566:	d100      	bne.n	800356a <HAL_UART_IRQHandler+0x446>
 8003568:	e0b2      	b.n	80036d0 <HAL_UART_IRQHandler+0x5ac>
          && (nb_rx_data > 0U))
 800356a:	183b      	adds	r3, r7, r0
 800356c:	881b      	ldrh	r3, [r3, #0]
 800356e:	2b00      	cmp	r3, #0
 8003570:	d100      	bne.n	8003574 <HAL_UART_IRQHandler+0x450>
 8003572:	e0ad      	b.n	80036d0 <HAL_UART_IRQHandler+0x5ac>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003574:	f3ef 8310 	mrs	r3, PRIMASK
 8003578:	60fb      	str	r3, [r7, #12]
  return(result);
 800357a:	68fb      	ldr	r3, [r7, #12]
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800357c:	2488      	movs	r4, #136	; 0x88
 800357e:	193a      	adds	r2, r7, r4
 8003580:	6013      	str	r3, [r2, #0]
 8003582:	2301      	movs	r3, #1
 8003584:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003586:	693b      	ldr	r3, [r7, #16]
 8003588:	f383 8810 	msr	PRIMASK, r3
}
 800358c:	46c0      	nop			; (mov r8, r8)
 800358e:	687b      	ldr	r3, [r7, #4]
 8003590:	681b      	ldr	r3, [r3, #0]
 8003592:	681a      	ldr	r2, [r3, #0]
 8003594:	687b      	ldr	r3, [r7, #4]
 8003596:	681b      	ldr	r3, [r3, #0]
 8003598:	4951      	ldr	r1, [pc, #324]	; (80036e0 <HAL_UART_IRQHandler+0x5bc>)
 800359a:	400a      	ands	r2, r1
 800359c:	601a      	str	r2, [r3, #0]
 800359e:	193b      	adds	r3, r7, r4
 80035a0:	681b      	ldr	r3, [r3, #0]
 80035a2:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80035a4:	697b      	ldr	r3, [r7, #20]
 80035a6:	f383 8810 	msr	PRIMASK, r3
}
 80035aa:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80035ac:	f3ef 8310 	mrs	r3, PRIMASK
 80035b0:	61bb      	str	r3, [r7, #24]
  return(result);
 80035b2:	69bb      	ldr	r3, [r7, #24]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80035b4:	2484      	movs	r4, #132	; 0x84
 80035b6:	193a      	adds	r2, r7, r4
 80035b8:	6013      	str	r3, [r2, #0]
 80035ba:	2301      	movs	r3, #1
 80035bc:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80035be:	69fb      	ldr	r3, [r7, #28]
 80035c0:	f383 8810 	msr	PRIMASK, r3
}
 80035c4:	46c0      	nop			; (mov r8, r8)
 80035c6:	687b      	ldr	r3, [r7, #4]
 80035c8:	681b      	ldr	r3, [r3, #0]
 80035ca:	689a      	ldr	r2, [r3, #8]
 80035cc:	687b      	ldr	r3, [r7, #4]
 80035ce:	681b      	ldr	r3, [r3, #0]
 80035d0:	2101      	movs	r1, #1
 80035d2:	438a      	bics	r2, r1
 80035d4:	609a      	str	r2, [r3, #8]
 80035d6:	193b      	adds	r3, r7, r4
 80035d8:	681b      	ldr	r3, [r3, #0]
 80035da:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80035dc:	6a3b      	ldr	r3, [r7, #32]
 80035de:	f383 8810 	msr	PRIMASK, r3
}
 80035e2:	46c0      	nop			; (mov r8, r8)

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80035e4:	687b      	ldr	r3, [r7, #4]
 80035e6:	2280      	movs	r2, #128	; 0x80
 80035e8:	2120      	movs	r1, #32
 80035ea:	5099      	str	r1, [r3, r2]
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80035ec:	687b      	ldr	r3, [r7, #4]
 80035ee:	2200      	movs	r2, #0
 80035f0:	661a      	str	r2, [r3, #96]	; 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 80035f2:	687b      	ldr	r3, [r7, #4]
 80035f4:	2200      	movs	r2, #0
 80035f6:	669a      	str	r2, [r3, #104]	; 0x68
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80035f8:	f3ef 8310 	mrs	r3, PRIMASK
 80035fc:	627b      	str	r3, [r7, #36]	; 0x24
  return(result);
 80035fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003600:	2480      	movs	r4, #128	; 0x80
 8003602:	193a      	adds	r2, r7, r4
 8003604:	6013      	str	r3, [r2, #0]
 8003606:	2301      	movs	r3, #1
 8003608:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800360a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800360c:	f383 8810 	msr	PRIMASK, r3
}
 8003610:	46c0      	nop			; (mov r8, r8)
 8003612:	687b      	ldr	r3, [r7, #4]
 8003614:	681b      	ldr	r3, [r3, #0]
 8003616:	681a      	ldr	r2, [r3, #0]
 8003618:	687b      	ldr	r3, [r7, #4]
 800361a:	681b      	ldr	r3, [r3, #0]
 800361c:	2110      	movs	r1, #16
 800361e:	438a      	bics	r2, r1
 8003620:	601a      	str	r2, [r3, #0]
 8003622:	193b      	adds	r3, r7, r4
 8003624:	681b      	ldr	r3, [r3, #0]
 8003626:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003628:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800362a:	f383 8810 	msr	PRIMASK, r3
}
 800362e:	46c0      	nop			; (mov r8, r8)

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8003630:	687b      	ldr	r3, [r7, #4]
 8003632:	2202      	movs	r2, #2
 8003634:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8003636:	183b      	adds	r3, r7, r0
 8003638:	881a      	ldrh	r2, [r3, #0]
 800363a:	687b      	ldr	r3, [r7, #4]
 800363c:	0011      	movs	r1, r2
 800363e:	0018      	movs	r0, r3
 8003640:	f000 f860 	bl	8003704 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8003644:	e044      	b.n	80036d0 <HAL_UART_IRQHandler+0x5ac>
  }
#if defined(USART_CR1_UESM)
#if defined(USART_CR3_WUFIE)

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8003646:	23a4      	movs	r3, #164	; 0xa4
 8003648:	18fb      	adds	r3, r7, r3
 800364a:	681a      	ldr	r2, [r3, #0]
 800364c:	2380      	movs	r3, #128	; 0x80
 800364e:	035b      	lsls	r3, r3, #13
 8003650:	4013      	ands	r3, r2
 8003652:	d010      	beq.n	8003676 <HAL_UART_IRQHandler+0x552>
 8003654:	239c      	movs	r3, #156	; 0x9c
 8003656:	18fb      	adds	r3, r7, r3
 8003658:	681a      	ldr	r2, [r3, #0]
 800365a:	2380      	movs	r3, #128	; 0x80
 800365c:	03db      	lsls	r3, r3, #15
 800365e:	4013      	ands	r3, r2
 8003660:	d009      	beq.n	8003676 <HAL_UART_IRQHandler+0x552>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8003662:	687b      	ldr	r3, [r7, #4]
 8003664:	681b      	ldr	r3, [r3, #0]
 8003666:	2280      	movs	r2, #128	; 0x80
 8003668:	0352      	lsls	r2, r2, #13
 800366a:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 800366c:	687b      	ldr	r3, [r7, #4]
 800366e:	0018      	movs	r0, r3
 8003670:	f000 ff82 	bl	8004578 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8003674:	e02f      	b.n	80036d6 <HAL_UART_IRQHandler+0x5b2>
  }
#endif /* USART_CR3_WUFIE */
#endif /* USART_CR1_UESM */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 8003676:	23a4      	movs	r3, #164	; 0xa4
 8003678:	18fb      	adds	r3, r7, r3
 800367a:	681b      	ldr	r3, [r3, #0]
 800367c:	2280      	movs	r2, #128	; 0x80
 800367e:	4013      	ands	r3, r2
 8003680:	d00f      	beq.n	80036a2 <HAL_UART_IRQHandler+0x57e>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 8003682:	23a0      	movs	r3, #160	; 0xa0
 8003684:	18fb      	adds	r3, r7, r3
 8003686:	681b      	ldr	r3, [r3, #0]
 8003688:	2280      	movs	r2, #128	; 0x80
 800368a:	4013      	ands	r3, r2
 800368c:	d009      	beq.n	80036a2 <HAL_UART_IRQHandler+0x57e>
  {
    if (huart->TxISR != NULL)
 800368e:	687b      	ldr	r3, [r7, #4]
 8003690:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003692:	2b00      	cmp	r3, #0
 8003694:	d01e      	beq.n	80036d4 <HAL_UART_IRQHandler+0x5b0>
    {
      huart->TxISR(huart);
 8003696:	687b      	ldr	r3, [r7, #4]
 8003698:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800369a:	687a      	ldr	r2, [r7, #4]
 800369c:	0010      	movs	r0, r2
 800369e:	4798      	blx	r3
    }
    return;
 80036a0:	e018      	b.n	80036d4 <HAL_UART_IRQHandler+0x5b0>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 80036a2:	23a4      	movs	r3, #164	; 0xa4
 80036a4:	18fb      	adds	r3, r7, r3
 80036a6:	681b      	ldr	r3, [r3, #0]
 80036a8:	2240      	movs	r2, #64	; 0x40
 80036aa:	4013      	ands	r3, r2
 80036ac:	d013      	beq.n	80036d6 <HAL_UART_IRQHandler+0x5b2>
 80036ae:	23a0      	movs	r3, #160	; 0xa0
 80036b0:	18fb      	adds	r3, r7, r3
 80036b2:	681b      	ldr	r3, [r3, #0]
 80036b4:	2240      	movs	r2, #64	; 0x40
 80036b6:	4013      	ands	r3, r2
 80036b8:	d00d      	beq.n	80036d6 <HAL_UART_IRQHandler+0x5b2>
  {
    UART_EndTransmit_IT(huart);
 80036ba:	687b      	ldr	r3, [r7, #4]
 80036bc:	0018      	movs	r0, r3
 80036be:	f000 fd78 	bl	80041b2 <UART_EndTransmit_IT>
    return;
 80036c2:	e008      	b.n	80036d6 <HAL_UART_IRQHandler+0x5b2>
      return;
 80036c4:	46c0      	nop			; (mov r8, r8)
 80036c6:	e006      	b.n	80036d6 <HAL_UART_IRQHandler+0x5b2>
    return;
 80036c8:	46c0      	nop			; (mov r8, r8)
 80036ca:	e004      	b.n	80036d6 <HAL_UART_IRQHandler+0x5b2>
      return;
 80036cc:	46c0      	nop			; (mov r8, r8)
 80036ce:	e002      	b.n	80036d6 <HAL_UART_IRQHandler+0x5b2>
      return;
 80036d0:	46c0      	nop			; (mov r8, r8)
 80036d2:	e000      	b.n	80036d6 <HAL_UART_IRQHandler+0x5b2>
    return;
 80036d4:	46c0      	nop			; (mov r8, r8)
  }

}
 80036d6:	46bd      	mov	sp, r7
 80036d8:	b02b      	add	sp, #172	; 0xac
 80036da:	bd90      	pop	{r4, r7, pc}
 80036dc:	fffffeff 	.word	0xfffffeff
 80036e0:	fffffedf 	.word	0xfffffedf

080036e4 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80036e4:	b580      	push	{r7, lr}
 80036e6:	b082      	sub	sp, #8
 80036e8:	af00      	add	r7, sp, #0
 80036ea:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 80036ec:	46c0      	nop			; (mov r8, r8)
 80036ee:	46bd      	mov	sp, r7
 80036f0:	b002      	add	sp, #8
 80036f2:	bd80      	pop	{r7, pc}

080036f4 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80036f4:	b580      	push	{r7, lr}
 80036f6:	b082      	sub	sp, #8
 80036f8:	af00      	add	r7, sp, #0
 80036fa:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 80036fc:	46c0      	nop			; (mov r8, r8)
 80036fe:	46bd      	mov	sp, r7
 8003700:	b002      	add	sp, #8
 8003702:	bd80      	pop	{r7, pc}

08003704 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8003704:	b580      	push	{r7, lr}
 8003706:	b082      	sub	sp, #8
 8003708:	af00      	add	r7, sp, #0
 800370a:	6078      	str	r0, [r7, #4]
 800370c:	000a      	movs	r2, r1
 800370e:	1cbb      	adds	r3, r7, #2
 8003710:	801a      	strh	r2, [r3, #0]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8003712:	46c0      	nop			; (mov r8, r8)
 8003714:	46bd      	mov	sp, r7
 8003716:	b002      	add	sp, #8
 8003718:	bd80      	pop	{r7, pc}
	...

0800371c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800371c:	b580      	push	{r7, lr}
 800371e:	b088      	sub	sp, #32
 8003720:	af00      	add	r7, sp, #0
 8003722:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8003724:	231e      	movs	r3, #30
 8003726:	18fb      	adds	r3, r7, r3
 8003728:	2200      	movs	r2, #0
 800372a:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800372c:	687b      	ldr	r3, [r7, #4]
 800372e:	689a      	ldr	r2, [r3, #8]
 8003730:	687b      	ldr	r3, [r7, #4]
 8003732:	691b      	ldr	r3, [r3, #16]
 8003734:	431a      	orrs	r2, r3
 8003736:	687b      	ldr	r3, [r7, #4]
 8003738:	695b      	ldr	r3, [r3, #20]
 800373a:	431a      	orrs	r2, r3
 800373c:	687b      	ldr	r3, [r7, #4]
 800373e:	69db      	ldr	r3, [r3, #28]
 8003740:	4313      	orrs	r3, r2
 8003742:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8003744:	687b      	ldr	r3, [r7, #4]
 8003746:	681b      	ldr	r3, [r3, #0]
 8003748:	681b      	ldr	r3, [r3, #0]
 800374a:	4aaf      	ldr	r2, [pc, #700]	; (8003a08 <UART_SetConfig+0x2ec>)
 800374c:	4013      	ands	r3, r2
 800374e:	0019      	movs	r1, r3
 8003750:	687b      	ldr	r3, [r7, #4]
 8003752:	681b      	ldr	r3, [r3, #0]
 8003754:	697a      	ldr	r2, [r7, #20]
 8003756:	430a      	orrs	r2, r1
 8003758:	601a      	str	r2, [r3, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800375a:	687b      	ldr	r3, [r7, #4]
 800375c:	681b      	ldr	r3, [r3, #0]
 800375e:	685b      	ldr	r3, [r3, #4]
 8003760:	4aaa      	ldr	r2, [pc, #680]	; (8003a0c <UART_SetConfig+0x2f0>)
 8003762:	4013      	ands	r3, r2
 8003764:	0019      	movs	r1, r3
 8003766:	687b      	ldr	r3, [r7, #4]
 8003768:	68da      	ldr	r2, [r3, #12]
 800376a:	687b      	ldr	r3, [r7, #4]
 800376c:	681b      	ldr	r3, [r3, #0]
 800376e:	430a      	orrs	r2, r1
 8003770:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8003772:	687b      	ldr	r3, [r7, #4]
 8003774:	699b      	ldr	r3, [r3, #24]
 8003776:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8003778:	687b      	ldr	r3, [r7, #4]
 800377a:	6a1b      	ldr	r3, [r3, #32]
 800377c:	697a      	ldr	r2, [r7, #20]
 800377e:	4313      	orrs	r3, r2
 8003780:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8003782:	687b      	ldr	r3, [r7, #4]
 8003784:	681b      	ldr	r3, [r3, #0]
 8003786:	689b      	ldr	r3, [r3, #8]
 8003788:	4aa1      	ldr	r2, [pc, #644]	; (8003a10 <UART_SetConfig+0x2f4>)
 800378a:	4013      	ands	r3, r2
 800378c:	0019      	movs	r1, r3
 800378e:	687b      	ldr	r3, [r7, #4]
 8003790:	681b      	ldr	r3, [r3, #0]
 8003792:	697a      	ldr	r2, [r7, #20]
 8003794:	430a      	orrs	r2, r1
 8003796:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8003798:	687b      	ldr	r3, [r7, #4]
 800379a:	681b      	ldr	r3, [r3, #0]
 800379c:	4a9d      	ldr	r2, [pc, #628]	; (8003a14 <UART_SetConfig+0x2f8>)
 800379e:	4293      	cmp	r3, r2
 80037a0:	d127      	bne.n	80037f2 <UART_SetConfig+0xd6>
 80037a2:	4b9d      	ldr	r3, [pc, #628]	; (8003a18 <UART_SetConfig+0x2fc>)
 80037a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80037a6:	2203      	movs	r2, #3
 80037a8:	4013      	ands	r3, r2
 80037aa:	2b03      	cmp	r3, #3
 80037ac:	d00d      	beq.n	80037ca <UART_SetConfig+0xae>
 80037ae:	d81b      	bhi.n	80037e8 <UART_SetConfig+0xcc>
 80037b0:	2b02      	cmp	r3, #2
 80037b2:	d014      	beq.n	80037de <UART_SetConfig+0xc2>
 80037b4:	d818      	bhi.n	80037e8 <UART_SetConfig+0xcc>
 80037b6:	2b00      	cmp	r3, #0
 80037b8:	d002      	beq.n	80037c0 <UART_SetConfig+0xa4>
 80037ba:	2b01      	cmp	r3, #1
 80037bc:	d00a      	beq.n	80037d4 <UART_SetConfig+0xb8>
 80037be:	e013      	b.n	80037e8 <UART_SetConfig+0xcc>
 80037c0:	231f      	movs	r3, #31
 80037c2:	18fb      	adds	r3, r7, r3
 80037c4:	2200      	movs	r2, #0
 80037c6:	701a      	strb	r2, [r3, #0]
 80037c8:	e065      	b.n	8003896 <UART_SetConfig+0x17a>
 80037ca:	231f      	movs	r3, #31
 80037cc:	18fb      	adds	r3, r7, r3
 80037ce:	2202      	movs	r2, #2
 80037d0:	701a      	strb	r2, [r3, #0]
 80037d2:	e060      	b.n	8003896 <UART_SetConfig+0x17a>
 80037d4:	231f      	movs	r3, #31
 80037d6:	18fb      	adds	r3, r7, r3
 80037d8:	2204      	movs	r2, #4
 80037da:	701a      	strb	r2, [r3, #0]
 80037dc:	e05b      	b.n	8003896 <UART_SetConfig+0x17a>
 80037de:	231f      	movs	r3, #31
 80037e0:	18fb      	adds	r3, r7, r3
 80037e2:	2208      	movs	r2, #8
 80037e4:	701a      	strb	r2, [r3, #0]
 80037e6:	e056      	b.n	8003896 <UART_SetConfig+0x17a>
 80037e8:	231f      	movs	r3, #31
 80037ea:	18fb      	adds	r3, r7, r3
 80037ec:	2210      	movs	r2, #16
 80037ee:	701a      	strb	r2, [r3, #0]
 80037f0:	e051      	b.n	8003896 <UART_SetConfig+0x17a>
 80037f2:	687b      	ldr	r3, [r7, #4]
 80037f4:	681b      	ldr	r3, [r3, #0]
 80037f6:	4a89      	ldr	r2, [pc, #548]	; (8003a1c <UART_SetConfig+0x300>)
 80037f8:	4293      	cmp	r3, r2
 80037fa:	d134      	bne.n	8003866 <UART_SetConfig+0x14a>
 80037fc:	4b86      	ldr	r3, [pc, #536]	; (8003a18 <UART_SetConfig+0x2fc>)
 80037fe:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003800:	23c0      	movs	r3, #192	; 0xc0
 8003802:	029b      	lsls	r3, r3, #10
 8003804:	4013      	ands	r3, r2
 8003806:	22c0      	movs	r2, #192	; 0xc0
 8003808:	0292      	lsls	r2, r2, #10
 800380a:	4293      	cmp	r3, r2
 800380c:	d017      	beq.n	800383e <UART_SetConfig+0x122>
 800380e:	22c0      	movs	r2, #192	; 0xc0
 8003810:	0292      	lsls	r2, r2, #10
 8003812:	4293      	cmp	r3, r2
 8003814:	d822      	bhi.n	800385c <UART_SetConfig+0x140>
 8003816:	2280      	movs	r2, #128	; 0x80
 8003818:	0292      	lsls	r2, r2, #10
 800381a:	4293      	cmp	r3, r2
 800381c:	d019      	beq.n	8003852 <UART_SetConfig+0x136>
 800381e:	2280      	movs	r2, #128	; 0x80
 8003820:	0292      	lsls	r2, r2, #10
 8003822:	4293      	cmp	r3, r2
 8003824:	d81a      	bhi.n	800385c <UART_SetConfig+0x140>
 8003826:	2b00      	cmp	r3, #0
 8003828:	d004      	beq.n	8003834 <UART_SetConfig+0x118>
 800382a:	2280      	movs	r2, #128	; 0x80
 800382c:	0252      	lsls	r2, r2, #9
 800382e:	4293      	cmp	r3, r2
 8003830:	d00a      	beq.n	8003848 <UART_SetConfig+0x12c>
 8003832:	e013      	b.n	800385c <UART_SetConfig+0x140>
 8003834:	231f      	movs	r3, #31
 8003836:	18fb      	adds	r3, r7, r3
 8003838:	2200      	movs	r2, #0
 800383a:	701a      	strb	r2, [r3, #0]
 800383c:	e02b      	b.n	8003896 <UART_SetConfig+0x17a>
 800383e:	231f      	movs	r3, #31
 8003840:	18fb      	adds	r3, r7, r3
 8003842:	2202      	movs	r2, #2
 8003844:	701a      	strb	r2, [r3, #0]
 8003846:	e026      	b.n	8003896 <UART_SetConfig+0x17a>
 8003848:	231f      	movs	r3, #31
 800384a:	18fb      	adds	r3, r7, r3
 800384c:	2204      	movs	r2, #4
 800384e:	701a      	strb	r2, [r3, #0]
 8003850:	e021      	b.n	8003896 <UART_SetConfig+0x17a>
 8003852:	231f      	movs	r3, #31
 8003854:	18fb      	adds	r3, r7, r3
 8003856:	2208      	movs	r2, #8
 8003858:	701a      	strb	r2, [r3, #0]
 800385a:	e01c      	b.n	8003896 <UART_SetConfig+0x17a>
 800385c:	231f      	movs	r3, #31
 800385e:	18fb      	adds	r3, r7, r3
 8003860:	2210      	movs	r2, #16
 8003862:	701a      	strb	r2, [r3, #0]
 8003864:	e017      	b.n	8003896 <UART_SetConfig+0x17a>
 8003866:	687b      	ldr	r3, [r7, #4]
 8003868:	681b      	ldr	r3, [r3, #0]
 800386a:	4a6d      	ldr	r2, [pc, #436]	; (8003a20 <UART_SetConfig+0x304>)
 800386c:	4293      	cmp	r3, r2
 800386e:	d104      	bne.n	800387a <UART_SetConfig+0x15e>
 8003870:	231f      	movs	r3, #31
 8003872:	18fb      	adds	r3, r7, r3
 8003874:	2200      	movs	r2, #0
 8003876:	701a      	strb	r2, [r3, #0]
 8003878:	e00d      	b.n	8003896 <UART_SetConfig+0x17a>
 800387a:	687b      	ldr	r3, [r7, #4]
 800387c:	681b      	ldr	r3, [r3, #0]
 800387e:	4a69      	ldr	r2, [pc, #420]	; (8003a24 <UART_SetConfig+0x308>)
 8003880:	4293      	cmp	r3, r2
 8003882:	d104      	bne.n	800388e <UART_SetConfig+0x172>
 8003884:	231f      	movs	r3, #31
 8003886:	18fb      	adds	r3, r7, r3
 8003888:	2200      	movs	r2, #0
 800388a:	701a      	strb	r2, [r3, #0]
 800388c:	e003      	b.n	8003896 <UART_SetConfig+0x17a>
 800388e:	231f      	movs	r3, #31
 8003890:	18fb      	adds	r3, r7, r3
 8003892:	2210      	movs	r2, #16
 8003894:	701a      	strb	r2, [r3, #0]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003896:	687b      	ldr	r3, [r7, #4]
 8003898:	69da      	ldr	r2, [r3, #28]
 800389a:	2380      	movs	r3, #128	; 0x80
 800389c:	021b      	lsls	r3, r3, #8
 800389e:	429a      	cmp	r2, r3
 80038a0:	d15c      	bne.n	800395c <UART_SetConfig+0x240>
  {
    switch (clocksource)
 80038a2:	231f      	movs	r3, #31
 80038a4:	18fb      	adds	r3, r7, r3
 80038a6:	781b      	ldrb	r3, [r3, #0]
 80038a8:	2b08      	cmp	r3, #8
 80038aa:	d015      	beq.n	80038d8 <UART_SetConfig+0x1bc>
 80038ac:	dc18      	bgt.n	80038e0 <UART_SetConfig+0x1c4>
 80038ae:	2b04      	cmp	r3, #4
 80038b0:	d00d      	beq.n	80038ce <UART_SetConfig+0x1b2>
 80038b2:	dc15      	bgt.n	80038e0 <UART_SetConfig+0x1c4>
 80038b4:	2b00      	cmp	r3, #0
 80038b6:	d002      	beq.n	80038be <UART_SetConfig+0x1a2>
 80038b8:	2b02      	cmp	r3, #2
 80038ba:	d005      	beq.n	80038c8 <UART_SetConfig+0x1ac>
 80038bc:	e010      	b.n	80038e0 <UART_SetConfig+0x1c4>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80038be:	f7fe f8b7 	bl	8001a30 <HAL_RCC_GetPCLK1Freq>
 80038c2:	0003      	movs	r3, r0
 80038c4:	61bb      	str	r3, [r7, #24]
        break;
 80038c6:	e012      	b.n	80038ee <UART_SetConfig+0x1d2>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80038c8:	4b57      	ldr	r3, [pc, #348]	; (8003a28 <UART_SetConfig+0x30c>)
 80038ca:	61bb      	str	r3, [r7, #24]
        break;
 80038cc:	e00f      	b.n	80038ee <UART_SetConfig+0x1d2>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80038ce:	f7fe f833 	bl	8001938 <HAL_RCC_GetSysClockFreq>
 80038d2:	0003      	movs	r3, r0
 80038d4:	61bb      	str	r3, [r7, #24]
        break;
 80038d6:	e00a      	b.n	80038ee <UART_SetConfig+0x1d2>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80038d8:	2380      	movs	r3, #128	; 0x80
 80038da:	021b      	lsls	r3, r3, #8
 80038dc:	61bb      	str	r3, [r7, #24]
        break;
 80038de:	e006      	b.n	80038ee <UART_SetConfig+0x1d2>
      default:
        pclk = 0U;
 80038e0:	2300      	movs	r3, #0
 80038e2:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 80038e4:	231e      	movs	r3, #30
 80038e6:	18fb      	adds	r3, r7, r3
 80038e8:	2201      	movs	r2, #1
 80038ea:	701a      	strb	r2, [r3, #0]
        break;
 80038ec:	46c0      	nop			; (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80038ee:	69bb      	ldr	r3, [r7, #24]
 80038f0:	2b00      	cmp	r3, #0
 80038f2:	d100      	bne.n	80038f6 <UART_SetConfig+0x1da>
 80038f4:	e07a      	b.n	80039ec <UART_SetConfig+0x2d0>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 80038f6:	69bb      	ldr	r3, [r7, #24]
 80038f8:	005a      	lsls	r2, r3, #1
 80038fa:	687b      	ldr	r3, [r7, #4]
 80038fc:	685b      	ldr	r3, [r3, #4]
 80038fe:	085b      	lsrs	r3, r3, #1
 8003900:	18d2      	adds	r2, r2, r3
 8003902:	687b      	ldr	r3, [r7, #4]
 8003904:	685b      	ldr	r3, [r3, #4]
 8003906:	0019      	movs	r1, r3
 8003908:	0010      	movs	r0, r2
 800390a:	f7fc fc05 	bl	8000118 <__udivsi3>
 800390e:	0003      	movs	r3, r0
 8003910:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003912:	693b      	ldr	r3, [r7, #16]
 8003914:	2b0f      	cmp	r3, #15
 8003916:	d91c      	bls.n	8003952 <UART_SetConfig+0x236>
 8003918:	693a      	ldr	r2, [r7, #16]
 800391a:	2380      	movs	r3, #128	; 0x80
 800391c:	025b      	lsls	r3, r3, #9
 800391e:	429a      	cmp	r2, r3
 8003920:	d217      	bcs.n	8003952 <UART_SetConfig+0x236>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8003922:	693b      	ldr	r3, [r7, #16]
 8003924:	b29a      	uxth	r2, r3
 8003926:	200e      	movs	r0, #14
 8003928:	183b      	adds	r3, r7, r0
 800392a:	210f      	movs	r1, #15
 800392c:	438a      	bics	r2, r1
 800392e:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8003930:	693b      	ldr	r3, [r7, #16]
 8003932:	085b      	lsrs	r3, r3, #1
 8003934:	b29b      	uxth	r3, r3
 8003936:	2207      	movs	r2, #7
 8003938:	4013      	ands	r3, r2
 800393a:	b299      	uxth	r1, r3
 800393c:	183b      	adds	r3, r7, r0
 800393e:	183a      	adds	r2, r7, r0
 8003940:	8812      	ldrh	r2, [r2, #0]
 8003942:	430a      	orrs	r2, r1
 8003944:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
 8003946:	687b      	ldr	r3, [r7, #4]
 8003948:	681b      	ldr	r3, [r3, #0]
 800394a:	183a      	adds	r2, r7, r0
 800394c:	8812      	ldrh	r2, [r2, #0]
 800394e:	60da      	str	r2, [r3, #12]
 8003950:	e04c      	b.n	80039ec <UART_SetConfig+0x2d0>
      }
      else
      {
        ret = HAL_ERROR;
 8003952:	231e      	movs	r3, #30
 8003954:	18fb      	adds	r3, r7, r3
 8003956:	2201      	movs	r2, #1
 8003958:	701a      	strb	r2, [r3, #0]
 800395a:	e047      	b.n	80039ec <UART_SetConfig+0x2d0>
      }
    }
  }
  else
  {
    switch (clocksource)
 800395c:	231f      	movs	r3, #31
 800395e:	18fb      	adds	r3, r7, r3
 8003960:	781b      	ldrb	r3, [r3, #0]
 8003962:	2b08      	cmp	r3, #8
 8003964:	d015      	beq.n	8003992 <UART_SetConfig+0x276>
 8003966:	dc18      	bgt.n	800399a <UART_SetConfig+0x27e>
 8003968:	2b04      	cmp	r3, #4
 800396a:	d00d      	beq.n	8003988 <UART_SetConfig+0x26c>
 800396c:	dc15      	bgt.n	800399a <UART_SetConfig+0x27e>
 800396e:	2b00      	cmp	r3, #0
 8003970:	d002      	beq.n	8003978 <UART_SetConfig+0x25c>
 8003972:	2b02      	cmp	r3, #2
 8003974:	d005      	beq.n	8003982 <UART_SetConfig+0x266>
 8003976:	e010      	b.n	800399a <UART_SetConfig+0x27e>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003978:	f7fe f85a 	bl	8001a30 <HAL_RCC_GetPCLK1Freq>
 800397c:	0003      	movs	r3, r0
 800397e:	61bb      	str	r3, [r7, #24]
        break;
 8003980:	e012      	b.n	80039a8 <UART_SetConfig+0x28c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003982:	4b29      	ldr	r3, [pc, #164]	; (8003a28 <UART_SetConfig+0x30c>)
 8003984:	61bb      	str	r3, [r7, #24]
        break;
 8003986:	e00f      	b.n	80039a8 <UART_SetConfig+0x28c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003988:	f7fd ffd6 	bl	8001938 <HAL_RCC_GetSysClockFreq>
 800398c:	0003      	movs	r3, r0
 800398e:	61bb      	str	r3, [r7, #24]
        break;
 8003990:	e00a      	b.n	80039a8 <UART_SetConfig+0x28c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003992:	2380      	movs	r3, #128	; 0x80
 8003994:	021b      	lsls	r3, r3, #8
 8003996:	61bb      	str	r3, [r7, #24]
        break;
 8003998:	e006      	b.n	80039a8 <UART_SetConfig+0x28c>
      default:
        pclk = 0U;
 800399a:	2300      	movs	r3, #0
 800399c:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 800399e:	231e      	movs	r3, #30
 80039a0:	18fb      	adds	r3, r7, r3
 80039a2:	2201      	movs	r2, #1
 80039a4:	701a      	strb	r2, [r3, #0]
        break;
 80039a6:	46c0      	nop			; (mov r8, r8)
    }

    if (pclk != 0U)
 80039a8:	69bb      	ldr	r3, [r7, #24]
 80039aa:	2b00      	cmp	r3, #0
 80039ac:	d01e      	beq.n	80039ec <UART_SetConfig+0x2d0>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 80039ae:	687b      	ldr	r3, [r7, #4]
 80039b0:	685b      	ldr	r3, [r3, #4]
 80039b2:	085a      	lsrs	r2, r3, #1
 80039b4:	69bb      	ldr	r3, [r7, #24]
 80039b6:	18d2      	adds	r2, r2, r3
 80039b8:	687b      	ldr	r3, [r7, #4]
 80039ba:	685b      	ldr	r3, [r3, #4]
 80039bc:	0019      	movs	r1, r3
 80039be:	0010      	movs	r0, r2
 80039c0:	f7fc fbaa 	bl	8000118 <__udivsi3>
 80039c4:	0003      	movs	r3, r0
 80039c6:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80039c8:	693b      	ldr	r3, [r7, #16]
 80039ca:	2b0f      	cmp	r3, #15
 80039cc:	d90a      	bls.n	80039e4 <UART_SetConfig+0x2c8>
 80039ce:	693a      	ldr	r2, [r7, #16]
 80039d0:	2380      	movs	r3, #128	; 0x80
 80039d2:	025b      	lsls	r3, r3, #9
 80039d4:	429a      	cmp	r2, r3
 80039d6:	d205      	bcs.n	80039e4 <UART_SetConfig+0x2c8>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80039d8:	693b      	ldr	r3, [r7, #16]
 80039da:	b29a      	uxth	r2, r3
 80039dc:	687b      	ldr	r3, [r7, #4]
 80039de:	681b      	ldr	r3, [r3, #0]
 80039e0:	60da      	str	r2, [r3, #12]
 80039e2:	e003      	b.n	80039ec <UART_SetConfig+0x2d0>
      }
      else
      {
        ret = HAL_ERROR;
 80039e4:	231e      	movs	r3, #30
 80039e6:	18fb      	adds	r3, r7, r3
 80039e8:	2201      	movs	r2, #1
 80039ea:	701a      	strb	r2, [r3, #0]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80039ec:	687b      	ldr	r3, [r7, #4]
 80039ee:	2200      	movs	r2, #0
 80039f0:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 80039f2:	687b      	ldr	r3, [r7, #4]
 80039f4:	2200      	movs	r2, #0
 80039f6:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 80039f8:	231e      	movs	r3, #30
 80039fa:	18fb      	adds	r3, r7, r3
 80039fc:	781b      	ldrb	r3, [r3, #0]
}
 80039fe:	0018      	movs	r0, r3
 8003a00:	46bd      	mov	sp, r7
 8003a02:	b008      	add	sp, #32
 8003a04:	bd80      	pop	{r7, pc}
 8003a06:	46c0      	nop			; (mov r8, r8)
 8003a08:	efff69f3 	.word	0xefff69f3
 8003a0c:	ffffcfff 	.word	0xffffcfff
 8003a10:	fffff4ff 	.word	0xfffff4ff
 8003a14:	40013800 	.word	0x40013800
 8003a18:	40021000 	.word	0x40021000
 8003a1c:	40004400 	.word	0x40004400
 8003a20:	40004800 	.word	0x40004800
 8003a24:	40004c00 	.word	0x40004c00
 8003a28:	007a1200 	.word	0x007a1200

08003a2c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8003a2c:	b580      	push	{r7, lr}
 8003a2e:	b082      	sub	sp, #8
 8003a30:	af00      	add	r7, sp, #0
 8003a32:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8003a34:	687b      	ldr	r3, [r7, #4]
 8003a36:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a38:	2201      	movs	r2, #1
 8003a3a:	4013      	ands	r3, r2
 8003a3c:	d00b      	beq.n	8003a56 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8003a3e:	687b      	ldr	r3, [r7, #4]
 8003a40:	681b      	ldr	r3, [r3, #0]
 8003a42:	685b      	ldr	r3, [r3, #4]
 8003a44:	4a4a      	ldr	r2, [pc, #296]	; (8003b70 <UART_AdvFeatureConfig+0x144>)
 8003a46:	4013      	ands	r3, r2
 8003a48:	0019      	movs	r1, r3
 8003a4a:	687b      	ldr	r3, [r7, #4]
 8003a4c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003a4e:	687b      	ldr	r3, [r7, #4]
 8003a50:	681b      	ldr	r3, [r3, #0]
 8003a52:	430a      	orrs	r2, r1
 8003a54:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8003a56:	687b      	ldr	r3, [r7, #4]
 8003a58:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a5a:	2202      	movs	r2, #2
 8003a5c:	4013      	ands	r3, r2
 8003a5e:	d00b      	beq.n	8003a78 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8003a60:	687b      	ldr	r3, [r7, #4]
 8003a62:	681b      	ldr	r3, [r3, #0]
 8003a64:	685b      	ldr	r3, [r3, #4]
 8003a66:	4a43      	ldr	r2, [pc, #268]	; (8003b74 <UART_AdvFeatureConfig+0x148>)
 8003a68:	4013      	ands	r3, r2
 8003a6a:	0019      	movs	r1, r3
 8003a6c:	687b      	ldr	r3, [r7, #4]
 8003a6e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003a70:	687b      	ldr	r3, [r7, #4]
 8003a72:	681b      	ldr	r3, [r3, #0]
 8003a74:	430a      	orrs	r2, r1
 8003a76:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8003a78:	687b      	ldr	r3, [r7, #4]
 8003a7a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a7c:	2204      	movs	r2, #4
 8003a7e:	4013      	ands	r3, r2
 8003a80:	d00b      	beq.n	8003a9a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8003a82:	687b      	ldr	r3, [r7, #4]
 8003a84:	681b      	ldr	r3, [r3, #0]
 8003a86:	685b      	ldr	r3, [r3, #4]
 8003a88:	4a3b      	ldr	r2, [pc, #236]	; (8003b78 <UART_AdvFeatureConfig+0x14c>)
 8003a8a:	4013      	ands	r3, r2
 8003a8c:	0019      	movs	r1, r3
 8003a8e:	687b      	ldr	r3, [r7, #4]
 8003a90:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003a92:	687b      	ldr	r3, [r7, #4]
 8003a94:	681b      	ldr	r3, [r3, #0]
 8003a96:	430a      	orrs	r2, r1
 8003a98:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8003a9a:	687b      	ldr	r3, [r7, #4]
 8003a9c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a9e:	2208      	movs	r2, #8
 8003aa0:	4013      	ands	r3, r2
 8003aa2:	d00b      	beq.n	8003abc <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8003aa4:	687b      	ldr	r3, [r7, #4]
 8003aa6:	681b      	ldr	r3, [r3, #0]
 8003aa8:	685b      	ldr	r3, [r3, #4]
 8003aaa:	4a34      	ldr	r2, [pc, #208]	; (8003b7c <UART_AdvFeatureConfig+0x150>)
 8003aac:	4013      	ands	r3, r2
 8003aae:	0019      	movs	r1, r3
 8003ab0:	687b      	ldr	r3, [r7, #4]
 8003ab2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003ab4:	687b      	ldr	r3, [r7, #4]
 8003ab6:	681b      	ldr	r3, [r3, #0]
 8003ab8:	430a      	orrs	r2, r1
 8003aba:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8003abc:	687b      	ldr	r3, [r7, #4]
 8003abe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ac0:	2210      	movs	r2, #16
 8003ac2:	4013      	ands	r3, r2
 8003ac4:	d00b      	beq.n	8003ade <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8003ac6:	687b      	ldr	r3, [r7, #4]
 8003ac8:	681b      	ldr	r3, [r3, #0]
 8003aca:	689b      	ldr	r3, [r3, #8]
 8003acc:	4a2c      	ldr	r2, [pc, #176]	; (8003b80 <UART_AdvFeatureConfig+0x154>)
 8003ace:	4013      	ands	r3, r2
 8003ad0:	0019      	movs	r1, r3
 8003ad2:	687b      	ldr	r3, [r7, #4]
 8003ad4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003ad6:	687b      	ldr	r3, [r7, #4]
 8003ad8:	681b      	ldr	r3, [r3, #0]
 8003ada:	430a      	orrs	r2, r1
 8003adc:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8003ade:	687b      	ldr	r3, [r7, #4]
 8003ae0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ae2:	2220      	movs	r2, #32
 8003ae4:	4013      	ands	r3, r2
 8003ae6:	d00b      	beq.n	8003b00 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8003ae8:	687b      	ldr	r3, [r7, #4]
 8003aea:	681b      	ldr	r3, [r3, #0]
 8003aec:	689b      	ldr	r3, [r3, #8]
 8003aee:	4a25      	ldr	r2, [pc, #148]	; (8003b84 <UART_AdvFeatureConfig+0x158>)
 8003af0:	4013      	ands	r3, r2
 8003af2:	0019      	movs	r1, r3
 8003af4:	687b      	ldr	r3, [r7, #4]
 8003af6:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003af8:	687b      	ldr	r3, [r7, #4]
 8003afa:	681b      	ldr	r3, [r3, #0]
 8003afc:	430a      	orrs	r2, r1
 8003afe:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8003b00:	687b      	ldr	r3, [r7, #4]
 8003b02:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b04:	2240      	movs	r2, #64	; 0x40
 8003b06:	4013      	ands	r3, r2
 8003b08:	d01d      	beq.n	8003b46 <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8003b0a:	687b      	ldr	r3, [r7, #4]
 8003b0c:	681b      	ldr	r3, [r3, #0]
 8003b0e:	685b      	ldr	r3, [r3, #4]
 8003b10:	4a1d      	ldr	r2, [pc, #116]	; (8003b88 <UART_AdvFeatureConfig+0x15c>)
 8003b12:	4013      	ands	r3, r2
 8003b14:	0019      	movs	r1, r3
 8003b16:	687b      	ldr	r3, [r7, #4]
 8003b18:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003b1a:	687b      	ldr	r3, [r7, #4]
 8003b1c:	681b      	ldr	r3, [r3, #0]
 8003b1e:	430a      	orrs	r2, r1
 8003b20:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8003b22:	687b      	ldr	r3, [r7, #4]
 8003b24:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003b26:	2380      	movs	r3, #128	; 0x80
 8003b28:	035b      	lsls	r3, r3, #13
 8003b2a:	429a      	cmp	r2, r3
 8003b2c:	d10b      	bne.n	8003b46 <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8003b2e:	687b      	ldr	r3, [r7, #4]
 8003b30:	681b      	ldr	r3, [r3, #0]
 8003b32:	685b      	ldr	r3, [r3, #4]
 8003b34:	4a15      	ldr	r2, [pc, #84]	; (8003b8c <UART_AdvFeatureConfig+0x160>)
 8003b36:	4013      	ands	r3, r2
 8003b38:	0019      	movs	r1, r3
 8003b3a:	687b      	ldr	r3, [r7, #4]
 8003b3c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003b3e:	687b      	ldr	r3, [r7, #4]
 8003b40:	681b      	ldr	r3, [r3, #0]
 8003b42:	430a      	orrs	r2, r1
 8003b44:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8003b46:	687b      	ldr	r3, [r7, #4]
 8003b48:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b4a:	2280      	movs	r2, #128	; 0x80
 8003b4c:	4013      	ands	r3, r2
 8003b4e:	d00b      	beq.n	8003b68 <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8003b50:	687b      	ldr	r3, [r7, #4]
 8003b52:	681b      	ldr	r3, [r3, #0]
 8003b54:	685b      	ldr	r3, [r3, #4]
 8003b56:	4a0e      	ldr	r2, [pc, #56]	; (8003b90 <UART_AdvFeatureConfig+0x164>)
 8003b58:	4013      	ands	r3, r2
 8003b5a:	0019      	movs	r1, r3
 8003b5c:	687b      	ldr	r3, [r7, #4]
 8003b5e:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8003b60:	687b      	ldr	r3, [r7, #4]
 8003b62:	681b      	ldr	r3, [r3, #0]
 8003b64:	430a      	orrs	r2, r1
 8003b66:	605a      	str	r2, [r3, #4]
  }
}
 8003b68:	46c0      	nop			; (mov r8, r8)
 8003b6a:	46bd      	mov	sp, r7
 8003b6c:	b002      	add	sp, #8
 8003b6e:	bd80      	pop	{r7, pc}
 8003b70:	fffdffff 	.word	0xfffdffff
 8003b74:	fffeffff 	.word	0xfffeffff
 8003b78:	fffbffff 	.word	0xfffbffff
 8003b7c:	ffff7fff 	.word	0xffff7fff
 8003b80:	ffffefff 	.word	0xffffefff
 8003b84:	ffffdfff 	.word	0xffffdfff
 8003b88:	ffefffff 	.word	0xffefffff
 8003b8c:	ff9fffff 	.word	0xff9fffff
 8003b90:	fff7ffff 	.word	0xfff7ffff

08003b94 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8003b94:	b580      	push	{r7, lr}
 8003b96:	b092      	sub	sp, #72	; 0x48
 8003b98:	af02      	add	r7, sp, #8
 8003b9a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003b9c:	687b      	ldr	r3, [r7, #4]
 8003b9e:	2284      	movs	r2, #132	; 0x84
 8003ba0:	2100      	movs	r1, #0
 8003ba2:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8003ba4:	f7fc ff6c 	bl	8000a80 <HAL_GetTick>
 8003ba8:	0003      	movs	r3, r0
 8003baa:	63fb      	str	r3, [r7, #60]	; 0x3c

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8003bac:	687b      	ldr	r3, [r7, #4]
 8003bae:	681b      	ldr	r3, [r3, #0]
 8003bb0:	681b      	ldr	r3, [r3, #0]
 8003bb2:	2208      	movs	r2, #8
 8003bb4:	4013      	ands	r3, r2
 8003bb6:	2b08      	cmp	r3, #8
 8003bb8:	d12c      	bne.n	8003c14 <UART_CheckIdleState+0x80>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003bba:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003bbc:	2280      	movs	r2, #128	; 0x80
 8003bbe:	0391      	lsls	r1, r2, #14
 8003bc0:	6878      	ldr	r0, [r7, #4]
 8003bc2:	4a46      	ldr	r2, [pc, #280]	; (8003cdc <UART_CheckIdleState+0x148>)
 8003bc4:	9200      	str	r2, [sp, #0]
 8003bc6:	2200      	movs	r2, #0
 8003bc8:	f000 f88c 	bl	8003ce4 <UART_WaitOnFlagUntilTimeout>
 8003bcc:	1e03      	subs	r3, r0, #0
 8003bce:	d021      	beq.n	8003c14 <UART_CheckIdleState+0x80>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003bd0:	f3ef 8310 	mrs	r3, PRIMASK
 8003bd4:	627b      	str	r3, [r7, #36]	; 0x24
  return(result);
 8003bd6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 8003bd8:	63bb      	str	r3, [r7, #56]	; 0x38
 8003bda:	2301      	movs	r3, #1
 8003bdc:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003bde:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003be0:	f383 8810 	msr	PRIMASK, r3
}
 8003be4:	46c0      	nop			; (mov r8, r8)
 8003be6:	687b      	ldr	r3, [r7, #4]
 8003be8:	681b      	ldr	r3, [r3, #0]
 8003bea:	681a      	ldr	r2, [r3, #0]
 8003bec:	687b      	ldr	r3, [r7, #4]
 8003bee:	681b      	ldr	r3, [r3, #0]
 8003bf0:	2180      	movs	r1, #128	; 0x80
 8003bf2:	438a      	bics	r2, r1
 8003bf4:	601a      	str	r2, [r3, #0]
 8003bf6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003bf8:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003bfa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003bfc:	f383 8810 	msr	PRIMASK, r3
}
 8003c00:	46c0      	nop			; (mov r8, r8)

      huart->gState = HAL_UART_STATE_READY;
 8003c02:	687b      	ldr	r3, [r7, #4]
 8003c04:	2220      	movs	r2, #32
 8003c06:	67da      	str	r2, [r3, #124]	; 0x7c

      __HAL_UNLOCK(huart);
 8003c08:	687b      	ldr	r3, [r7, #4]
 8003c0a:	2278      	movs	r2, #120	; 0x78
 8003c0c:	2100      	movs	r1, #0
 8003c0e:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003c10:	2303      	movs	r3, #3
 8003c12:	e05f      	b.n	8003cd4 <UART_CheckIdleState+0x140>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8003c14:	687b      	ldr	r3, [r7, #4]
 8003c16:	681b      	ldr	r3, [r3, #0]
 8003c18:	681b      	ldr	r3, [r3, #0]
 8003c1a:	2204      	movs	r2, #4
 8003c1c:	4013      	ands	r3, r2
 8003c1e:	2b04      	cmp	r3, #4
 8003c20:	d146      	bne.n	8003cb0 <UART_CheckIdleState+0x11c>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003c22:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003c24:	2280      	movs	r2, #128	; 0x80
 8003c26:	03d1      	lsls	r1, r2, #15
 8003c28:	6878      	ldr	r0, [r7, #4]
 8003c2a:	4a2c      	ldr	r2, [pc, #176]	; (8003cdc <UART_CheckIdleState+0x148>)
 8003c2c:	9200      	str	r2, [sp, #0]
 8003c2e:	2200      	movs	r2, #0
 8003c30:	f000 f858 	bl	8003ce4 <UART_WaitOnFlagUntilTimeout>
 8003c34:	1e03      	subs	r3, r0, #0
 8003c36:	d03b      	beq.n	8003cb0 <UART_CheckIdleState+0x11c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003c38:	f3ef 8310 	mrs	r3, PRIMASK
 8003c3c:	60fb      	str	r3, [r7, #12]
  return(result);
 8003c3e:	68fb      	ldr	r3, [r7, #12]
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003c40:	637b      	str	r3, [r7, #52]	; 0x34
 8003c42:	2301      	movs	r3, #1
 8003c44:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003c46:	693b      	ldr	r3, [r7, #16]
 8003c48:	f383 8810 	msr	PRIMASK, r3
}
 8003c4c:	46c0      	nop			; (mov r8, r8)
 8003c4e:	687b      	ldr	r3, [r7, #4]
 8003c50:	681b      	ldr	r3, [r3, #0]
 8003c52:	681a      	ldr	r2, [r3, #0]
 8003c54:	687b      	ldr	r3, [r7, #4]
 8003c56:	681b      	ldr	r3, [r3, #0]
 8003c58:	4921      	ldr	r1, [pc, #132]	; (8003ce0 <UART_CheckIdleState+0x14c>)
 8003c5a:	400a      	ands	r2, r1
 8003c5c:	601a      	str	r2, [r3, #0]
 8003c5e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003c60:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003c62:	697b      	ldr	r3, [r7, #20]
 8003c64:	f383 8810 	msr	PRIMASK, r3
}
 8003c68:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003c6a:	f3ef 8310 	mrs	r3, PRIMASK
 8003c6e:	61bb      	str	r3, [r7, #24]
  return(result);
 8003c70:	69bb      	ldr	r3, [r7, #24]
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003c72:	633b      	str	r3, [r7, #48]	; 0x30
 8003c74:	2301      	movs	r3, #1
 8003c76:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003c78:	69fb      	ldr	r3, [r7, #28]
 8003c7a:	f383 8810 	msr	PRIMASK, r3
}
 8003c7e:	46c0      	nop			; (mov r8, r8)
 8003c80:	687b      	ldr	r3, [r7, #4]
 8003c82:	681b      	ldr	r3, [r3, #0]
 8003c84:	689a      	ldr	r2, [r3, #8]
 8003c86:	687b      	ldr	r3, [r7, #4]
 8003c88:	681b      	ldr	r3, [r3, #0]
 8003c8a:	2101      	movs	r1, #1
 8003c8c:	438a      	bics	r2, r1
 8003c8e:	609a      	str	r2, [r3, #8]
 8003c90:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003c92:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003c94:	6a3b      	ldr	r3, [r7, #32]
 8003c96:	f383 8810 	msr	PRIMASK, r3
}
 8003c9a:	46c0      	nop			; (mov r8, r8)

      huart->RxState = HAL_UART_STATE_READY;
 8003c9c:	687b      	ldr	r3, [r7, #4]
 8003c9e:	2280      	movs	r2, #128	; 0x80
 8003ca0:	2120      	movs	r1, #32
 8003ca2:	5099      	str	r1, [r3, r2]

      __HAL_UNLOCK(huart);
 8003ca4:	687b      	ldr	r3, [r7, #4]
 8003ca6:	2278      	movs	r2, #120	; 0x78
 8003ca8:	2100      	movs	r1, #0
 8003caa:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003cac:	2303      	movs	r3, #3
 8003cae:	e011      	b.n	8003cd4 <UART_CheckIdleState+0x140>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8003cb0:	687b      	ldr	r3, [r7, #4]
 8003cb2:	2220      	movs	r2, #32
 8003cb4:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8003cb6:	687b      	ldr	r3, [r7, #4]
 8003cb8:	2280      	movs	r2, #128	; 0x80
 8003cba:	2120      	movs	r1, #32
 8003cbc:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003cbe:	687b      	ldr	r3, [r7, #4]
 8003cc0:	2200      	movs	r2, #0
 8003cc2:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003cc4:	687b      	ldr	r3, [r7, #4]
 8003cc6:	2200      	movs	r2, #0
 8003cc8:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 8003cca:	687b      	ldr	r3, [r7, #4]
 8003ccc:	2278      	movs	r2, #120	; 0x78
 8003cce:	2100      	movs	r1, #0
 8003cd0:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8003cd2:	2300      	movs	r3, #0
}
 8003cd4:	0018      	movs	r0, r3
 8003cd6:	46bd      	mov	sp, r7
 8003cd8:	b010      	add	sp, #64	; 0x40
 8003cda:	bd80      	pop	{r7, pc}
 8003cdc:	01ffffff 	.word	0x01ffffff
 8003ce0:	fffffedf 	.word	0xfffffedf

08003ce4 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8003ce4:	b580      	push	{r7, lr}
 8003ce6:	b084      	sub	sp, #16
 8003ce8:	af00      	add	r7, sp, #0
 8003cea:	60f8      	str	r0, [r7, #12]
 8003cec:	60b9      	str	r1, [r7, #8]
 8003cee:	603b      	str	r3, [r7, #0]
 8003cf0:	1dfb      	adds	r3, r7, #7
 8003cf2:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003cf4:	e04b      	b.n	8003d8e <UART_WaitOnFlagUntilTimeout+0xaa>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003cf6:	69bb      	ldr	r3, [r7, #24]
 8003cf8:	3301      	adds	r3, #1
 8003cfa:	d048      	beq.n	8003d8e <UART_WaitOnFlagUntilTimeout+0xaa>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003cfc:	f7fc fec0 	bl	8000a80 <HAL_GetTick>
 8003d00:	0002      	movs	r2, r0
 8003d02:	683b      	ldr	r3, [r7, #0]
 8003d04:	1ad3      	subs	r3, r2, r3
 8003d06:	69ba      	ldr	r2, [r7, #24]
 8003d08:	429a      	cmp	r2, r3
 8003d0a:	d302      	bcc.n	8003d12 <UART_WaitOnFlagUntilTimeout+0x2e>
 8003d0c:	69bb      	ldr	r3, [r7, #24]
 8003d0e:	2b00      	cmp	r3, #0
 8003d10:	d101      	bne.n	8003d16 <UART_WaitOnFlagUntilTimeout+0x32>
      {

        return HAL_TIMEOUT;
 8003d12:	2303      	movs	r3, #3
 8003d14:	e04b      	b.n	8003dae <UART_WaitOnFlagUntilTimeout+0xca>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8003d16:	68fb      	ldr	r3, [r7, #12]
 8003d18:	681b      	ldr	r3, [r3, #0]
 8003d1a:	681b      	ldr	r3, [r3, #0]
 8003d1c:	2204      	movs	r2, #4
 8003d1e:	4013      	ands	r3, r2
 8003d20:	d035      	beq.n	8003d8e <UART_WaitOnFlagUntilTimeout+0xaa>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8003d22:	68fb      	ldr	r3, [r7, #12]
 8003d24:	681b      	ldr	r3, [r3, #0]
 8003d26:	69db      	ldr	r3, [r3, #28]
 8003d28:	2208      	movs	r2, #8
 8003d2a:	4013      	ands	r3, r2
 8003d2c:	2b08      	cmp	r3, #8
 8003d2e:	d111      	bne.n	8003d54 <UART_WaitOnFlagUntilTimeout+0x70>
        {
           /* Clear Overrun Error flag*/
           __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8003d30:	68fb      	ldr	r3, [r7, #12]
 8003d32:	681b      	ldr	r3, [r3, #0]
 8003d34:	2208      	movs	r2, #8
 8003d36:	621a      	str	r2, [r3, #32]

           /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts if ongoing */
           UART_EndRxTransfer(huart);
 8003d38:	68fb      	ldr	r3, [r7, #12]
 8003d3a:	0018      	movs	r0, r3
 8003d3c:	f000 f906 	bl	8003f4c <UART_EndRxTransfer>

           huart->ErrorCode = HAL_UART_ERROR_ORE;
 8003d40:	68fb      	ldr	r3, [r7, #12]
 8003d42:	2284      	movs	r2, #132	; 0x84
 8003d44:	2108      	movs	r1, #8
 8003d46:	5099      	str	r1, [r3, r2]

           /* Process Unlocked */
           __HAL_UNLOCK(huart);
 8003d48:	68fb      	ldr	r3, [r7, #12]
 8003d4a:	2278      	movs	r2, #120	; 0x78
 8003d4c:	2100      	movs	r1, #0
 8003d4e:	5499      	strb	r1, [r3, r2]

           return HAL_ERROR;
 8003d50:	2301      	movs	r3, #1
 8003d52:	e02c      	b.n	8003dae <UART_WaitOnFlagUntilTimeout+0xca>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8003d54:	68fb      	ldr	r3, [r7, #12]
 8003d56:	681b      	ldr	r3, [r3, #0]
 8003d58:	69da      	ldr	r2, [r3, #28]
 8003d5a:	2380      	movs	r3, #128	; 0x80
 8003d5c:	011b      	lsls	r3, r3, #4
 8003d5e:	401a      	ands	r2, r3
 8003d60:	2380      	movs	r3, #128	; 0x80
 8003d62:	011b      	lsls	r3, r3, #4
 8003d64:	429a      	cmp	r2, r3
 8003d66:	d112      	bne.n	8003d8e <UART_WaitOnFlagUntilTimeout+0xaa>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8003d68:	68fb      	ldr	r3, [r7, #12]
 8003d6a:	681b      	ldr	r3, [r3, #0]
 8003d6c:	2280      	movs	r2, #128	; 0x80
 8003d6e:	0112      	lsls	r2, r2, #4
 8003d70:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8003d72:	68fb      	ldr	r3, [r7, #12]
 8003d74:	0018      	movs	r0, r3
 8003d76:	f000 f8e9 	bl	8003f4c <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8003d7a:	68fb      	ldr	r3, [r7, #12]
 8003d7c:	2284      	movs	r2, #132	; 0x84
 8003d7e:	2120      	movs	r1, #32
 8003d80:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8003d82:	68fb      	ldr	r3, [r7, #12]
 8003d84:	2278      	movs	r2, #120	; 0x78
 8003d86:	2100      	movs	r1, #0
 8003d88:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 8003d8a:	2303      	movs	r3, #3
 8003d8c:	e00f      	b.n	8003dae <UART_WaitOnFlagUntilTimeout+0xca>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003d8e:	68fb      	ldr	r3, [r7, #12]
 8003d90:	681b      	ldr	r3, [r3, #0]
 8003d92:	69db      	ldr	r3, [r3, #28]
 8003d94:	68ba      	ldr	r2, [r7, #8]
 8003d96:	4013      	ands	r3, r2
 8003d98:	68ba      	ldr	r2, [r7, #8]
 8003d9a:	1ad3      	subs	r3, r2, r3
 8003d9c:	425a      	negs	r2, r3
 8003d9e:	4153      	adcs	r3, r2
 8003da0:	b2db      	uxtb	r3, r3
 8003da2:	001a      	movs	r2, r3
 8003da4:	1dfb      	adds	r3, r7, #7
 8003da6:	781b      	ldrb	r3, [r3, #0]
 8003da8:	429a      	cmp	r2, r3
 8003daa:	d0a4      	beq.n	8003cf6 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003dac:	2300      	movs	r3, #0
}
 8003dae:	0018      	movs	r0, r3
 8003db0:	46bd      	mov	sp, r7
 8003db2:	b004      	add	sp, #16
 8003db4:	bd80      	pop	{r7, pc}
	...

08003db8 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8003db8:	b580      	push	{r7, lr}
 8003dba:	b090      	sub	sp, #64	; 0x40
 8003dbc:	af00      	add	r7, sp, #0
 8003dbe:	60f8      	str	r0, [r7, #12]
 8003dc0:	60b9      	str	r1, [r7, #8]
 8003dc2:	1dbb      	adds	r3, r7, #6
 8003dc4:	801a      	strh	r2, [r3, #0]
  huart->pRxBuffPtr  = pData;
 8003dc6:	68fb      	ldr	r3, [r7, #12]
 8003dc8:	68ba      	ldr	r2, [r7, #8]
 8003dca:	655a      	str	r2, [r3, #84]	; 0x54
  huart->RxXferSize  = Size;
 8003dcc:	68fb      	ldr	r3, [r7, #12]
 8003dce:	1dba      	adds	r2, r7, #6
 8003dd0:	2158      	movs	r1, #88	; 0x58
 8003dd2:	8812      	ldrh	r2, [r2, #0]
 8003dd4:	525a      	strh	r2, [r3, r1]
  huart->RxXferCount = Size;
 8003dd6:	68fb      	ldr	r3, [r7, #12]
 8003dd8:	1dba      	adds	r2, r7, #6
 8003dda:	215a      	movs	r1, #90	; 0x5a
 8003ddc:	8812      	ldrh	r2, [r2, #0]
 8003dde:	525a      	strh	r2, [r3, r1]
  huart->RxISR       = NULL;
 8003de0:	68fb      	ldr	r3, [r7, #12]
 8003de2:	2200      	movs	r2, #0
 8003de4:	669a      	str	r2, [r3, #104]	; 0x68

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 8003de6:	68fb      	ldr	r3, [r7, #12]
 8003de8:	689a      	ldr	r2, [r3, #8]
 8003dea:	2380      	movs	r3, #128	; 0x80
 8003dec:	015b      	lsls	r3, r3, #5
 8003dee:	429a      	cmp	r2, r3
 8003df0:	d10d      	bne.n	8003e0e <UART_Start_Receive_IT+0x56>
 8003df2:	68fb      	ldr	r3, [r7, #12]
 8003df4:	691b      	ldr	r3, [r3, #16]
 8003df6:	2b00      	cmp	r3, #0
 8003df8:	d104      	bne.n	8003e04 <UART_Start_Receive_IT+0x4c>
 8003dfa:	68fb      	ldr	r3, [r7, #12]
 8003dfc:	225c      	movs	r2, #92	; 0x5c
 8003dfe:	4950      	ldr	r1, [pc, #320]	; (8003f40 <UART_Start_Receive_IT+0x188>)
 8003e00:	5299      	strh	r1, [r3, r2]
 8003e02:	e02e      	b.n	8003e62 <UART_Start_Receive_IT+0xaa>
 8003e04:	68fb      	ldr	r3, [r7, #12]
 8003e06:	225c      	movs	r2, #92	; 0x5c
 8003e08:	21ff      	movs	r1, #255	; 0xff
 8003e0a:	5299      	strh	r1, [r3, r2]
 8003e0c:	e029      	b.n	8003e62 <UART_Start_Receive_IT+0xaa>
 8003e0e:	68fb      	ldr	r3, [r7, #12]
 8003e10:	689b      	ldr	r3, [r3, #8]
 8003e12:	2b00      	cmp	r3, #0
 8003e14:	d10d      	bne.n	8003e32 <UART_Start_Receive_IT+0x7a>
 8003e16:	68fb      	ldr	r3, [r7, #12]
 8003e18:	691b      	ldr	r3, [r3, #16]
 8003e1a:	2b00      	cmp	r3, #0
 8003e1c:	d104      	bne.n	8003e28 <UART_Start_Receive_IT+0x70>
 8003e1e:	68fb      	ldr	r3, [r7, #12]
 8003e20:	225c      	movs	r2, #92	; 0x5c
 8003e22:	21ff      	movs	r1, #255	; 0xff
 8003e24:	5299      	strh	r1, [r3, r2]
 8003e26:	e01c      	b.n	8003e62 <UART_Start_Receive_IT+0xaa>
 8003e28:	68fb      	ldr	r3, [r7, #12]
 8003e2a:	225c      	movs	r2, #92	; 0x5c
 8003e2c:	217f      	movs	r1, #127	; 0x7f
 8003e2e:	5299      	strh	r1, [r3, r2]
 8003e30:	e017      	b.n	8003e62 <UART_Start_Receive_IT+0xaa>
 8003e32:	68fb      	ldr	r3, [r7, #12]
 8003e34:	689a      	ldr	r2, [r3, #8]
 8003e36:	2380      	movs	r3, #128	; 0x80
 8003e38:	055b      	lsls	r3, r3, #21
 8003e3a:	429a      	cmp	r2, r3
 8003e3c:	d10d      	bne.n	8003e5a <UART_Start_Receive_IT+0xa2>
 8003e3e:	68fb      	ldr	r3, [r7, #12]
 8003e40:	691b      	ldr	r3, [r3, #16]
 8003e42:	2b00      	cmp	r3, #0
 8003e44:	d104      	bne.n	8003e50 <UART_Start_Receive_IT+0x98>
 8003e46:	68fb      	ldr	r3, [r7, #12]
 8003e48:	225c      	movs	r2, #92	; 0x5c
 8003e4a:	217f      	movs	r1, #127	; 0x7f
 8003e4c:	5299      	strh	r1, [r3, r2]
 8003e4e:	e008      	b.n	8003e62 <UART_Start_Receive_IT+0xaa>
 8003e50:	68fb      	ldr	r3, [r7, #12]
 8003e52:	225c      	movs	r2, #92	; 0x5c
 8003e54:	213f      	movs	r1, #63	; 0x3f
 8003e56:	5299      	strh	r1, [r3, r2]
 8003e58:	e003      	b.n	8003e62 <UART_Start_Receive_IT+0xaa>
 8003e5a:	68fb      	ldr	r3, [r7, #12]
 8003e5c:	225c      	movs	r2, #92	; 0x5c
 8003e5e:	2100      	movs	r1, #0
 8003e60:	5299      	strh	r1, [r3, r2]

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003e62:	68fb      	ldr	r3, [r7, #12]
 8003e64:	2284      	movs	r2, #132	; 0x84
 8003e66:	2100      	movs	r1, #0
 8003e68:	5099      	str	r1, [r3, r2]
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8003e6a:	68fb      	ldr	r3, [r7, #12]
 8003e6c:	2280      	movs	r2, #128	; 0x80
 8003e6e:	2122      	movs	r1, #34	; 0x22
 8003e70:	5099      	str	r1, [r3, r2]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003e72:	f3ef 8310 	mrs	r3, PRIMASK
 8003e76:	62bb      	str	r3, [r7, #40]	; 0x28
  return(result);
 8003e78:	6abb      	ldr	r3, [r7, #40]	; 0x28

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003e7a:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003e7c:	2301      	movs	r3, #1
 8003e7e:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003e80:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003e82:	f383 8810 	msr	PRIMASK, r3
}
 8003e86:	46c0      	nop			; (mov r8, r8)
 8003e88:	68fb      	ldr	r3, [r7, #12]
 8003e8a:	681b      	ldr	r3, [r3, #0]
 8003e8c:	689a      	ldr	r2, [r3, #8]
 8003e8e:	68fb      	ldr	r3, [r7, #12]
 8003e90:	681b      	ldr	r3, [r3, #0]
 8003e92:	2101      	movs	r1, #1
 8003e94:	430a      	orrs	r2, r1
 8003e96:	609a      	str	r2, [r3, #8]
 8003e98:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003e9a:	633b      	str	r3, [r7, #48]	; 0x30
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003e9c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003e9e:	f383 8810 	msr	PRIMASK, r3
}
 8003ea2:	46c0      	nop			; (mov r8, r8)

  /* Set the Rx ISR function pointer according to the data word length */
  if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003ea4:	68fb      	ldr	r3, [r7, #12]
 8003ea6:	689a      	ldr	r2, [r3, #8]
 8003ea8:	2380      	movs	r3, #128	; 0x80
 8003eaa:	015b      	lsls	r3, r3, #5
 8003eac:	429a      	cmp	r2, r3
 8003eae:	d107      	bne.n	8003ec0 <UART_Start_Receive_IT+0x108>
 8003eb0:	68fb      	ldr	r3, [r7, #12]
 8003eb2:	691b      	ldr	r3, [r3, #16]
 8003eb4:	2b00      	cmp	r3, #0
 8003eb6:	d103      	bne.n	8003ec0 <UART_Start_Receive_IT+0x108>
  {
    huart->RxISR = UART_RxISR_16BIT;
 8003eb8:	68fb      	ldr	r3, [r7, #12]
 8003eba:	4a22      	ldr	r2, [pc, #136]	; (8003f44 <UART_Start_Receive_IT+0x18c>)
 8003ebc:	669a      	str	r2, [r3, #104]	; 0x68
 8003ebe:	e002      	b.n	8003ec6 <UART_Start_Receive_IT+0x10e>
  }
  else
  {
    huart->RxISR = UART_RxISR_8BIT;
 8003ec0:	68fb      	ldr	r3, [r7, #12]
 8003ec2:	4a21      	ldr	r2, [pc, #132]	; (8003f48 <UART_Start_Receive_IT+0x190>)
 8003ec4:	669a      	str	r2, [r3, #104]	; 0x68
  }

  /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 8003ec6:	68fb      	ldr	r3, [r7, #12]
 8003ec8:	691b      	ldr	r3, [r3, #16]
 8003eca:	2b00      	cmp	r3, #0
 8003ecc:	d019      	beq.n	8003f02 <UART_Start_Receive_IT+0x14a>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003ece:	f3ef 8310 	mrs	r3, PRIMASK
 8003ed2:	61fb      	str	r3, [r7, #28]
  return(result);
 8003ed4:	69fb      	ldr	r3, [r7, #28]
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE);
 8003ed6:	637b      	str	r3, [r7, #52]	; 0x34
 8003ed8:	2301      	movs	r3, #1
 8003eda:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003edc:	6a3b      	ldr	r3, [r7, #32]
 8003ede:	f383 8810 	msr	PRIMASK, r3
}
 8003ee2:	46c0      	nop			; (mov r8, r8)
 8003ee4:	68fb      	ldr	r3, [r7, #12]
 8003ee6:	681b      	ldr	r3, [r3, #0]
 8003ee8:	681a      	ldr	r2, [r3, #0]
 8003eea:	68fb      	ldr	r3, [r7, #12]
 8003eec:	681b      	ldr	r3, [r3, #0]
 8003eee:	2190      	movs	r1, #144	; 0x90
 8003ef0:	0049      	lsls	r1, r1, #1
 8003ef2:	430a      	orrs	r2, r1
 8003ef4:	601a      	str	r2, [r3, #0]
 8003ef6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003ef8:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003efa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003efc:	f383 8810 	msr	PRIMASK, r3
}
 8003f00:	e018      	b.n	8003f34 <UART_Start_Receive_IT+0x17c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003f02:	f3ef 8310 	mrs	r3, PRIMASK
 8003f06:	613b      	str	r3, [r7, #16]
  return(result);
 8003f08:	693b      	ldr	r3, [r7, #16]
  }
  else
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE);
 8003f0a:	63bb      	str	r3, [r7, #56]	; 0x38
 8003f0c:	2301      	movs	r3, #1
 8003f0e:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003f10:	697b      	ldr	r3, [r7, #20]
 8003f12:	f383 8810 	msr	PRIMASK, r3
}
 8003f16:	46c0      	nop			; (mov r8, r8)
 8003f18:	68fb      	ldr	r3, [r7, #12]
 8003f1a:	681b      	ldr	r3, [r3, #0]
 8003f1c:	681a      	ldr	r2, [r3, #0]
 8003f1e:	68fb      	ldr	r3, [r7, #12]
 8003f20:	681b      	ldr	r3, [r3, #0]
 8003f22:	2120      	movs	r1, #32
 8003f24:	430a      	orrs	r2, r1
 8003f26:	601a      	str	r2, [r3, #0]
 8003f28:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003f2a:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003f2c:	69bb      	ldr	r3, [r7, #24]
 8003f2e:	f383 8810 	msr	PRIMASK, r3
}
 8003f32:	46c0      	nop			; (mov r8, r8)
  }
  return HAL_OK;
 8003f34:	2300      	movs	r3, #0
}
 8003f36:	0018      	movs	r0, r3
 8003f38:	46bd      	mov	sp, r7
 8003f3a:	b010      	add	sp, #64	; 0x40
 8003f3c:	bd80      	pop	{r7, pc}
 8003f3e:	46c0      	nop			; (mov r8, r8)
 8003f40:	000001ff 	.word	0x000001ff
 8003f44:	080043c1 	.word	0x080043c1
 8003f48:	08004209 	.word	0x08004209

08003f4c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8003f4c:	b580      	push	{r7, lr}
 8003f4e:	b08e      	sub	sp, #56	; 0x38
 8003f50:	af00      	add	r7, sp, #0
 8003f52:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003f54:	f3ef 8310 	mrs	r3, PRIMASK
 8003f58:	617b      	str	r3, [r7, #20]
  return(result);
 8003f5a:	697b      	ldr	r3, [r7, #20]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003f5c:	637b      	str	r3, [r7, #52]	; 0x34
 8003f5e:	2301      	movs	r3, #1
 8003f60:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003f62:	69bb      	ldr	r3, [r7, #24]
 8003f64:	f383 8810 	msr	PRIMASK, r3
}
 8003f68:	46c0      	nop			; (mov r8, r8)
 8003f6a:	687b      	ldr	r3, [r7, #4]
 8003f6c:	681b      	ldr	r3, [r3, #0]
 8003f6e:	681a      	ldr	r2, [r3, #0]
 8003f70:	687b      	ldr	r3, [r7, #4]
 8003f72:	681b      	ldr	r3, [r3, #0]
 8003f74:	4926      	ldr	r1, [pc, #152]	; (8004010 <UART_EndRxTransfer+0xc4>)
 8003f76:	400a      	ands	r2, r1
 8003f78:	601a      	str	r2, [r3, #0]
 8003f7a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003f7c:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003f7e:	69fb      	ldr	r3, [r7, #28]
 8003f80:	f383 8810 	msr	PRIMASK, r3
}
 8003f84:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003f86:	f3ef 8310 	mrs	r3, PRIMASK
 8003f8a:	623b      	str	r3, [r7, #32]
  return(result);
 8003f8c:	6a3b      	ldr	r3, [r7, #32]
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003f8e:	633b      	str	r3, [r7, #48]	; 0x30
 8003f90:	2301      	movs	r3, #1
 8003f92:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003f94:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f96:	f383 8810 	msr	PRIMASK, r3
}
 8003f9a:	46c0      	nop			; (mov r8, r8)
 8003f9c:	687b      	ldr	r3, [r7, #4]
 8003f9e:	681b      	ldr	r3, [r3, #0]
 8003fa0:	689a      	ldr	r2, [r3, #8]
 8003fa2:	687b      	ldr	r3, [r7, #4]
 8003fa4:	681b      	ldr	r3, [r3, #0]
 8003fa6:	2101      	movs	r1, #1
 8003fa8:	438a      	bics	r2, r1
 8003faa:	609a      	str	r2, [r3, #8]
 8003fac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003fae:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003fb0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003fb2:	f383 8810 	msr	PRIMASK, r3
}
 8003fb6:	46c0      	nop			; (mov r8, r8)

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003fb8:	687b      	ldr	r3, [r7, #4]
 8003fba:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003fbc:	2b01      	cmp	r3, #1
 8003fbe:	d118      	bne.n	8003ff2 <UART_EndRxTransfer+0xa6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003fc0:	f3ef 8310 	mrs	r3, PRIMASK
 8003fc4:	60bb      	str	r3, [r7, #8]
  return(result);
 8003fc6:	68bb      	ldr	r3, [r7, #8]
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003fc8:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003fca:	2301      	movs	r3, #1
 8003fcc:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003fce:	68fb      	ldr	r3, [r7, #12]
 8003fd0:	f383 8810 	msr	PRIMASK, r3
}
 8003fd4:	46c0      	nop			; (mov r8, r8)
 8003fd6:	687b      	ldr	r3, [r7, #4]
 8003fd8:	681b      	ldr	r3, [r3, #0]
 8003fda:	681a      	ldr	r2, [r3, #0]
 8003fdc:	687b      	ldr	r3, [r7, #4]
 8003fde:	681b      	ldr	r3, [r3, #0]
 8003fe0:	2110      	movs	r1, #16
 8003fe2:	438a      	bics	r2, r1
 8003fe4:	601a      	str	r2, [r3, #0]
 8003fe6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003fe8:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003fea:	693b      	ldr	r3, [r7, #16]
 8003fec:	f383 8810 	msr	PRIMASK, r3
}
 8003ff0:	46c0      	nop			; (mov r8, r8)
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8003ff2:	687b      	ldr	r3, [r7, #4]
 8003ff4:	2280      	movs	r2, #128	; 0x80
 8003ff6:	2120      	movs	r1, #32
 8003ff8:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003ffa:	687b      	ldr	r3, [r7, #4]
 8003ffc:	2200      	movs	r2, #0
 8003ffe:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8004000:	687b      	ldr	r3, [r7, #4]
 8004002:	2200      	movs	r2, #0
 8004004:	669a      	str	r2, [r3, #104]	; 0x68
}
 8004006:	46c0      	nop			; (mov r8, r8)
 8004008:	46bd      	mov	sp, r7
 800400a:	b00e      	add	sp, #56	; 0x38
 800400c:	bd80      	pop	{r7, pc}
 800400e:	46c0      	nop			; (mov r8, r8)
 8004010:	fffffedf 	.word	0xfffffedf

08004014 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8004014:	b580      	push	{r7, lr}
 8004016:	b084      	sub	sp, #16
 8004018:	af00      	add	r7, sp, #0
 800401a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800401c:	687b      	ldr	r3, [r7, #4]
 800401e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004020:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8004022:	68fb      	ldr	r3, [r7, #12]
 8004024:	225a      	movs	r2, #90	; 0x5a
 8004026:	2100      	movs	r1, #0
 8004028:	5299      	strh	r1, [r3, r2]
  huart->TxXferCount = 0U;
 800402a:	68fb      	ldr	r3, [r7, #12]
 800402c:	2252      	movs	r2, #82	; 0x52
 800402e:	2100      	movs	r1, #0
 8004030:	5299      	strh	r1, [r3, r2]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8004032:	68fb      	ldr	r3, [r7, #12]
 8004034:	0018      	movs	r0, r3
 8004036:	f7ff fb5d 	bl	80036f4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800403a:	46c0      	nop			; (mov r8, r8)
 800403c:	46bd      	mov	sp, r7
 800403e:	b004      	add	sp, #16
 8004040:	bd80      	pop	{r7, pc}

08004042 <UART_TxISR_8BIT>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_8BIT(UART_HandleTypeDef *huart)
{
 8004042:	b580      	push	{r7, lr}
 8004044:	b08a      	sub	sp, #40	; 0x28
 8004046:	af00      	add	r7, sp, #0
 8004048:	6078      	str	r0, [r7, #4]
  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800404a:	687b      	ldr	r3, [r7, #4]
 800404c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800404e:	2b21      	cmp	r3, #33	; 0x21
 8004050:	d14d      	bne.n	80040ee <UART_TxISR_8BIT+0xac>
  {
    if (huart->TxXferCount == 0U)
 8004052:	687b      	ldr	r3, [r7, #4]
 8004054:	2252      	movs	r2, #82	; 0x52
 8004056:	5a9b      	ldrh	r3, [r3, r2]
 8004058:	b29b      	uxth	r3, r3
 800405a:	2b00      	cmp	r3, #0
 800405c:	d132      	bne.n	80040c4 <UART_TxISR_8BIT+0x82>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800405e:	f3ef 8310 	mrs	r3, PRIMASK
 8004062:	60bb      	str	r3, [r7, #8]
  return(result);
 8004064:	68bb      	ldr	r3, [r7, #8]
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 8004066:	627b      	str	r3, [r7, #36]	; 0x24
 8004068:	2301      	movs	r3, #1
 800406a:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800406c:	68fb      	ldr	r3, [r7, #12]
 800406e:	f383 8810 	msr	PRIMASK, r3
}
 8004072:	46c0      	nop			; (mov r8, r8)
 8004074:	687b      	ldr	r3, [r7, #4]
 8004076:	681b      	ldr	r3, [r3, #0]
 8004078:	681a      	ldr	r2, [r3, #0]
 800407a:	687b      	ldr	r3, [r7, #4]
 800407c:	681b      	ldr	r3, [r3, #0]
 800407e:	2180      	movs	r1, #128	; 0x80
 8004080:	438a      	bics	r2, r1
 8004082:	601a      	str	r2, [r3, #0]
 8004084:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004086:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004088:	693b      	ldr	r3, [r7, #16]
 800408a:	f383 8810 	msr	PRIMASK, r3
}
 800408e:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004090:	f3ef 8310 	mrs	r3, PRIMASK
 8004094:	617b      	str	r3, [r7, #20]
  return(result);
 8004096:	697b      	ldr	r3, [r7, #20]

      /* Enable the UART Transmit Complete Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8004098:	623b      	str	r3, [r7, #32]
 800409a:	2301      	movs	r3, #1
 800409c:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800409e:	69bb      	ldr	r3, [r7, #24]
 80040a0:	f383 8810 	msr	PRIMASK, r3
}
 80040a4:	46c0      	nop			; (mov r8, r8)
 80040a6:	687b      	ldr	r3, [r7, #4]
 80040a8:	681b      	ldr	r3, [r3, #0]
 80040aa:	681a      	ldr	r2, [r3, #0]
 80040ac:	687b      	ldr	r3, [r7, #4]
 80040ae:	681b      	ldr	r3, [r3, #0]
 80040b0:	2140      	movs	r1, #64	; 0x40
 80040b2:	430a      	orrs	r2, r1
 80040b4:	601a      	str	r2, [r3, #0]
 80040b6:	6a3b      	ldr	r3, [r7, #32]
 80040b8:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80040ba:	69fb      	ldr	r3, [r7, #28]
 80040bc:	f383 8810 	msr	PRIMASK, r3
}
 80040c0:	46c0      	nop			; (mov r8, r8)
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
      huart->pTxBuffPtr++;
      huart->TxXferCount--;
    }
  }
}
 80040c2:	e014      	b.n	80040ee <UART_TxISR_8BIT+0xac>
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
 80040c4:	687b      	ldr	r3, [r7, #4]
 80040c6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80040c8:	781a      	ldrb	r2, [r3, #0]
 80040ca:	687b      	ldr	r3, [r7, #4]
 80040cc:	681b      	ldr	r3, [r3, #0]
 80040ce:	b292      	uxth	r2, r2
 80040d0:	851a      	strh	r2, [r3, #40]	; 0x28
      huart->pTxBuffPtr++;
 80040d2:	687b      	ldr	r3, [r7, #4]
 80040d4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80040d6:	1c5a      	adds	r2, r3, #1
 80040d8:	687b      	ldr	r3, [r7, #4]
 80040da:	64da      	str	r2, [r3, #76]	; 0x4c
      huart->TxXferCount--;
 80040dc:	687b      	ldr	r3, [r7, #4]
 80040de:	2252      	movs	r2, #82	; 0x52
 80040e0:	5a9b      	ldrh	r3, [r3, r2]
 80040e2:	b29b      	uxth	r3, r3
 80040e4:	3b01      	subs	r3, #1
 80040e6:	b299      	uxth	r1, r3
 80040e8:	687b      	ldr	r3, [r7, #4]
 80040ea:	2252      	movs	r2, #82	; 0x52
 80040ec:	5299      	strh	r1, [r3, r2]
}
 80040ee:	46c0      	nop			; (mov r8, r8)
 80040f0:	46bd      	mov	sp, r7
 80040f2:	b00a      	add	sp, #40	; 0x28
 80040f4:	bd80      	pop	{r7, pc}

080040f6 <UART_TxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_16BIT(UART_HandleTypeDef *huart)
{
 80040f6:	b580      	push	{r7, lr}
 80040f8:	b08c      	sub	sp, #48	; 0x30
 80040fa:	af00      	add	r7, sp, #0
 80040fc:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80040fe:	687b      	ldr	r3, [r7, #4]
 8004100:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004102:	2b21      	cmp	r3, #33	; 0x21
 8004104:	d151      	bne.n	80041aa <UART_TxISR_16BIT+0xb4>
  {
    if (huart->TxXferCount == 0U)
 8004106:	687b      	ldr	r3, [r7, #4]
 8004108:	2252      	movs	r2, #82	; 0x52
 800410a:	5a9b      	ldrh	r3, [r3, r2]
 800410c:	b29b      	uxth	r3, r3
 800410e:	2b00      	cmp	r3, #0
 8004110:	d132      	bne.n	8004178 <UART_TxISR_16BIT+0x82>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004112:	f3ef 8310 	mrs	r3, PRIMASK
 8004116:	60fb      	str	r3, [r7, #12]
  return(result);
 8004118:	68fb      	ldr	r3, [r7, #12]
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 800411a:	62bb      	str	r3, [r7, #40]	; 0x28
 800411c:	2301      	movs	r3, #1
 800411e:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004120:	693b      	ldr	r3, [r7, #16]
 8004122:	f383 8810 	msr	PRIMASK, r3
}
 8004126:	46c0      	nop			; (mov r8, r8)
 8004128:	687b      	ldr	r3, [r7, #4]
 800412a:	681b      	ldr	r3, [r3, #0]
 800412c:	681a      	ldr	r2, [r3, #0]
 800412e:	687b      	ldr	r3, [r7, #4]
 8004130:	681b      	ldr	r3, [r3, #0]
 8004132:	2180      	movs	r1, #128	; 0x80
 8004134:	438a      	bics	r2, r1
 8004136:	601a      	str	r2, [r3, #0]
 8004138:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800413a:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800413c:	697b      	ldr	r3, [r7, #20]
 800413e:	f383 8810 	msr	PRIMASK, r3
}
 8004142:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004144:	f3ef 8310 	mrs	r3, PRIMASK
 8004148:	61bb      	str	r3, [r7, #24]
  return(result);
 800414a:	69bb      	ldr	r3, [r7, #24]

      /* Enable the UART Transmit Complete Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800414c:	627b      	str	r3, [r7, #36]	; 0x24
 800414e:	2301      	movs	r3, #1
 8004150:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004152:	69fb      	ldr	r3, [r7, #28]
 8004154:	f383 8810 	msr	PRIMASK, r3
}
 8004158:	46c0      	nop			; (mov r8, r8)
 800415a:	687b      	ldr	r3, [r7, #4]
 800415c:	681b      	ldr	r3, [r3, #0]
 800415e:	681a      	ldr	r2, [r3, #0]
 8004160:	687b      	ldr	r3, [r7, #4]
 8004162:	681b      	ldr	r3, [r3, #0]
 8004164:	2140      	movs	r1, #64	; 0x40
 8004166:	430a      	orrs	r2, r1
 8004168:	601a      	str	r2, [r3, #0]
 800416a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800416c:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800416e:	6a3b      	ldr	r3, [r7, #32]
 8004170:	f383 8810 	msr	PRIMASK, r3
}
 8004174:	46c0      	nop			; (mov r8, r8)
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
      huart->pTxBuffPtr += 2U;
      huart->TxXferCount--;
    }
  }
}
 8004176:	e018      	b.n	80041aa <UART_TxISR_16BIT+0xb4>
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8004178:	687b      	ldr	r3, [r7, #4]
 800417a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800417c:	62fb      	str	r3, [r7, #44]	; 0x2c
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
 800417e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004180:	881a      	ldrh	r2, [r3, #0]
 8004182:	687b      	ldr	r3, [r7, #4]
 8004184:	681b      	ldr	r3, [r3, #0]
 8004186:	05d2      	lsls	r2, r2, #23
 8004188:	0dd2      	lsrs	r2, r2, #23
 800418a:	b292      	uxth	r2, r2
 800418c:	851a      	strh	r2, [r3, #40]	; 0x28
      huart->pTxBuffPtr += 2U;
 800418e:	687b      	ldr	r3, [r7, #4]
 8004190:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004192:	1c9a      	adds	r2, r3, #2
 8004194:	687b      	ldr	r3, [r7, #4]
 8004196:	64da      	str	r2, [r3, #76]	; 0x4c
      huart->TxXferCount--;
 8004198:	687b      	ldr	r3, [r7, #4]
 800419a:	2252      	movs	r2, #82	; 0x52
 800419c:	5a9b      	ldrh	r3, [r3, r2]
 800419e:	b29b      	uxth	r3, r3
 80041a0:	3b01      	subs	r3, #1
 80041a2:	b299      	uxth	r1, r3
 80041a4:	687b      	ldr	r3, [r7, #4]
 80041a6:	2252      	movs	r2, #82	; 0x52
 80041a8:	5299      	strh	r1, [r3, r2]
}
 80041aa:	46c0      	nop			; (mov r8, r8)
 80041ac:	46bd      	mov	sp, r7
 80041ae:	b00c      	add	sp, #48	; 0x30
 80041b0:	bd80      	pop	{r7, pc}

080041b2 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80041b2:	b580      	push	{r7, lr}
 80041b4:	b086      	sub	sp, #24
 80041b6:	af00      	add	r7, sp, #0
 80041b8:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80041ba:	f3ef 8310 	mrs	r3, PRIMASK
 80041be:	60bb      	str	r3, [r7, #8]
  return(result);
 80041c0:	68bb      	ldr	r3, [r7, #8]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80041c2:	617b      	str	r3, [r7, #20]
 80041c4:	2301      	movs	r3, #1
 80041c6:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80041c8:	68fb      	ldr	r3, [r7, #12]
 80041ca:	f383 8810 	msr	PRIMASK, r3
}
 80041ce:	46c0      	nop			; (mov r8, r8)
 80041d0:	687b      	ldr	r3, [r7, #4]
 80041d2:	681b      	ldr	r3, [r3, #0]
 80041d4:	681a      	ldr	r2, [r3, #0]
 80041d6:	687b      	ldr	r3, [r7, #4]
 80041d8:	681b      	ldr	r3, [r3, #0]
 80041da:	2140      	movs	r1, #64	; 0x40
 80041dc:	438a      	bics	r2, r1
 80041de:	601a      	str	r2, [r3, #0]
 80041e0:	697b      	ldr	r3, [r7, #20]
 80041e2:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80041e4:	693b      	ldr	r3, [r7, #16]
 80041e6:	f383 8810 	msr	PRIMASK, r3
}
 80041ea:	46c0      	nop			; (mov r8, r8)

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80041ec:	687b      	ldr	r3, [r7, #4]
 80041ee:	2220      	movs	r2, #32
 80041f0:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 80041f2:	687b      	ldr	r3, [r7, #4]
 80041f4:	2200      	movs	r2, #0
 80041f6:	66da      	str	r2, [r3, #108]	; 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80041f8:	687b      	ldr	r3, [r7, #4]
 80041fa:	0018      	movs	r0, r3
 80041fc:	f7ff fa72 	bl	80036e4 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004200:	46c0      	nop			; (mov r8, r8)
 8004202:	46bd      	mov	sp, r7
 8004204:	b006      	add	sp, #24
 8004206:	bd80      	pop	{r7, pc}

08004208 <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 8004208:	b580      	push	{r7, lr}
 800420a:	b094      	sub	sp, #80	; 0x50
 800420c:	af00      	add	r7, sp, #0
 800420e:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 8004210:	204e      	movs	r0, #78	; 0x4e
 8004212:	183b      	adds	r3, r7, r0
 8004214:	687a      	ldr	r2, [r7, #4]
 8004216:	215c      	movs	r1, #92	; 0x5c
 8004218:	5a52      	ldrh	r2, [r2, r1]
 800421a:	801a      	strh	r2, [r3, #0]
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800421c:	687b      	ldr	r3, [r7, #4]
 800421e:	2280      	movs	r2, #128	; 0x80
 8004220:	589b      	ldr	r3, [r3, r2]
 8004222:	2b22      	cmp	r3, #34	; 0x22
 8004224:	d000      	beq.n	8004228 <UART_RxISR_8BIT+0x20>
 8004226:	e0ba      	b.n	800439e <UART_RxISR_8BIT+0x196>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8004228:	687b      	ldr	r3, [r7, #4]
 800422a:	681a      	ldr	r2, [r3, #0]
 800422c:	214c      	movs	r1, #76	; 0x4c
 800422e:	187b      	adds	r3, r7, r1
 8004230:	8c92      	ldrh	r2, [r2, #36]	; 0x24
 8004232:	801a      	strh	r2, [r3, #0]
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8004234:	187b      	adds	r3, r7, r1
 8004236:	881b      	ldrh	r3, [r3, #0]
 8004238:	b2da      	uxtb	r2, r3
 800423a:	183b      	adds	r3, r7, r0
 800423c:	881b      	ldrh	r3, [r3, #0]
 800423e:	b2d9      	uxtb	r1, r3
 8004240:	687b      	ldr	r3, [r7, #4]
 8004242:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004244:	400a      	ands	r2, r1
 8004246:	b2d2      	uxtb	r2, r2
 8004248:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 800424a:	687b      	ldr	r3, [r7, #4]
 800424c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800424e:	1c5a      	adds	r2, r3, #1
 8004250:	687b      	ldr	r3, [r7, #4]
 8004252:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 8004254:	687b      	ldr	r3, [r7, #4]
 8004256:	225a      	movs	r2, #90	; 0x5a
 8004258:	5a9b      	ldrh	r3, [r3, r2]
 800425a:	b29b      	uxth	r3, r3
 800425c:	3b01      	subs	r3, #1
 800425e:	b299      	uxth	r1, r3
 8004260:	687b      	ldr	r3, [r7, #4]
 8004262:	225a      	movs	r2, #90	; 0x5a
 8004264:	5299      	strh	r1, [r3, r2]

    if (huart->RxXferCount == 0U)
 8004266:	687b      	ldr	r3, [r7, #4]
 8004268:	225a      	movs	r2, #90	; 0x5a
 800426a:	5a9b      	ldrh	r3, [r3, r2]
 800426c:	b29b      	uxth	r3, r3
 800426e:	2b00      	cmp	r3, #0
 8004270:	d000      	beq.n	8004274 <UART_RxISR_8BIT+0x6c>
 8004272:	e09c      	b.n	80043ae <UART_RxISR_8BIT+0x1a6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004274:	f3ef 8310 	mrs	r3, PRIMASK
 8004278:	627b      	str	r3, [r7, #36]	; 0x24
  return(result);
 800427a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800427c:	64bb      	str	r3, [r7, #72]	; 0x48
 800427e:	2301      	movs	r3, #1
 8004280:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004282:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004284:	f383 8810 	msr	PRIMASK, r3
}
 8004288:	46c0      	nop			; (mov r8, r8)
 800428a:	687b      	ldr	r3, [r7, #4]
 800428c:	681b      	ldr	r3, [r3, #0]
 800428e:	681a      	ldr	r2, [r3, #0]
 8004290:	687b      	ldr	r3, [r7, #4]
 8004292:	681b      	ldr	r3, [r3, #0]
 8004294:	4948      	ldr	r1, [pc, #288]	; (80043b8 <UART_RxISR_8BIT+0x1b0>)
 8004296:	400a      	ands	r2, r1
 8004298:	601a      	str	r2, [r3, #0]
 800429a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800429c:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800429e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80042a0:	f383 8810 	msr	PRIMASK, r3
}
 80042a4:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80042a6:	f3ef 8310 	mrs	r3, PRIMASK
 80042aa:	633b      	str	r3, [r7, #48]	; 0x30
  return(result);
 80042ac:	6b3b      	ldr	r3, [r7, #48]	; 0x30

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80042ae:	647b      	str	r3, [r7, #68]	; 0x44
 80042b0:	2301      	movs	r3, #1
 80042b2:	637b      	str	r3, [r7, #52]	; 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80042b4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80042b6:	f383 8810 	msr	PRIMASK, r3
}
 80042ba:	46c0      	nop			; (mov r8, r8)
 80042bc:	687b      	ldr	r3, [r7, #4]
 80042be:	681b      	ldr	r3, [r3, #0]
 80042c0:	689a      	ldr	r2, [r3, #8]
 80042c2:	687b      	ldr	r3, [r7, #4]
 80042c4:	681b      	ldr	r3, [r3, #0]
 80042c6:	2101      	movs	r1, #1
 80042c8:	438a      	bics	r2, r1
 80042ca:	609a      	str	r2, [r3, #8]
 80042cc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80042ce:	63bb      	str	r3, [r7, #56]	; 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80042d0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80042d2:	f383 8810 	msr	PRIMASK, r3
}
 80042d6:	46c0      	nop			; (mov r8, r8)

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80042d8:	687b      	ldr	r3, [r7, #4]
 80042da:	2280      	movs	r2, #128	; 0x80
 80042dc:	2120      	movs	r1, #32
 80042de:	5099      	str	r1, [r3, r2]

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 80042e0:	687b      	ldr	r3, [r7, #4]
 80042e2:	2200      	movs	r2, #0
 80042e4:	669a      	str	r2, [r3, #104]	; 0x68

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 80042e6:	687b      	ldr	r3, [r7, #4]
 80042e8:	2200      	movs	r2, #0
 80042ea:	665a      	str	r2, [r3, #100]	; 0x64

      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 80042ec:	687b      	ldr	r3, [r7, #4]
 80042ee:	681b      	ldr	r3, [r3, #0]
 80042f0:	685a      	ldr	r2, [r3, #4]
 80042f2:	2380      	movs	r3, #128	; 0x80
 80042f4:	041b      	lsls	r3, r3, #16
 80042f6:	4013      	ands	r3, r2
 80042f8:	d018      	beq.n	800432c <UART_RxISR_8BIT+0x124>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80042fa:	f3ef 8310 	mrs	r3, PRIMASK
 80042fe:	61bb      	str	r3, [r7, #24]
  return(result);
 8004300:	69bb      	ldr	r3, [r7, #24]
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8004302:	643b      	str	r3, [r7, #64]	; 0x40
 8004304:	2301      	movs	r3, #1
 8004306:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004308:	69fb      	ldr	r3, [r7, #28]
 800430a:	f383 8810 	msr	PRIMASK, r3
}
 800430e:	46c0      	nop			; (mov r8, r8)
 8004310:	687b      	ldr	r3, [r7, #4]
 8004312:	681b      	ldr	r3, [r3, #0]
 8004314:	681a      	ldr	r2, [r3, #0]
 8004316:	687b      	ldr	r3, [r7, #4]
 8004318:	681b      	ldr	r3, [r3, #0]
 800431a:	4928      	ldr	r1, [pc, #160]	; (80043bc <UART_RxISR_8BIT+0x1b4>)
 800431c:	400a      	ands	r2, r1
 800431e:	601a      	str	r2, [r3, #0]
 8004320:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004322:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004324:	6a3b      	ldr	r3, [r7, #32]
 8004326:	f383 8810 	msr	PRIMASK, r3
}
 800432a:	46c0      	nop			; (mov r8, r8)
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800432c:	687b      	ldr	r3, [r7, #4]
 800432e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004330:	2b01      	cmp	r3, #1
 8004332:	d12f      	bne.n	8004394 <UART_RxISR_8BIT+0x18c>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004334:	687b      	ldr	r3, [r7, #4]
 8004336:	2200      	movs	r2, #0
 8004338:	661a      	str	r2, [r3, #96]	; 0x60
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800433a:	f3ef 8310 	mrs	r3, PRIMASK
 800433e:	60fb      	str	r3, [r7, #12]
  return(result);
 8004340:	68fb      	ldr	r3, [r7, #12]

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004342:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004344:	2301      	movs	r3, #1
 8004346:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004348:	693b      	ldr	r3, [r7, #16]
 800434a:	f383 8810 	msr	PRIMASK, r3
}
 800434e:	46c0      	nop			; (mov r8, r8)
 8004350:	687b      	ldr	r3, [r7, #4]
 8004352:	681b      	ldr	r3, [r3, #0]
 8004354:	681a      	ldr	r2, [r3, #0]
 8004356:	687b      	ldr	r3, [r7, #4]
 8004358:	681b      	ldr	r3, [r3, #0]
 800435a:	2110      	movs	r1, #16
 800435c:	438a      	bics	r2, r1
 800435e:	601a      	str	r2, [r3, #0]
 8004360:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004362:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004364:	697b      	ldr	r3, [r7, #20]
 8004366:	f383 8810 	msr	PRIMASK, r3
}
 800436a:	46c0      	nop			; (mov r8, r8)

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800436c:	687b      	ldr	r3, [r7, #4]
 800436e:	681b      	ldr	r3, [r3, #0]
 8004370:	69db      	ldr	r3, [r3, #28]
 8004372:	2210      	movs	r2, #16
 8004374:	4013      	ands	r3, r2
 8004376:	2b10      	cmp	r3, #16
 8004378:	d103      	bne.n	8004382 <UART_RxISR_8BIT+0x17a>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800437a:	687b      	ldr	r3, [r7, #4]
 800437c:	681b      	ldr	r3, [r3, #0]
 800437e:	2210      	movs	r2, #16
 8004380:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8004382:	687b      	ldr	r3, [r7, #4]
 8004384:	2258      	movs	r2, #88	; 0x58
 8004386:	5a9a      	ldrh	r2, [r3, r2]
 8004388:	687b      	ldr	r3, [r7, #4]
 800438a:	0011      	movs	r1, r2
 800438c:	0018      	movs	r0, r3
 800438e:	f7ff f9b9 	bl	8003704 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8004392:	e00c      	b.n	80043ae <UART_RxISR_8BIT+0x1a6>
        HAL_UART_RxCpltCallback(huart);
 8004394:	687b      	ldr	r3, [r7, #4]
 8004396:	0018      	movs	r0, r3
 8004398:	f7fb ff9c 	bl	80002d4 <HAL_UART_RxCpltCallback>
}
 800439c:	e007      	b.n	80043ae <UART_RxISR_8BIT+0x1a6>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800439e:	687b      	ldr	r3, [r7, #4]
 80043a0:	681b      	ldr	r3, [r3, #0]
 80043a2:	699a      	ldr	r2, [r3, #24]
 80043a4:	687b      	ldr	r3, [r7, #4]
 80043a6:	681b      	ldr	r3, [r3, #0]
 80043a8:	2108      	movs	r1, #8
 80043aa:	430a      	orrs	r2, r1
 80043ac:	619a      	str	r2, [r3, #24]
}
 80043ae:	46c0      	nop			; (mov r8, r8)
 80043b0:	46bd      	mov	sp, r7
 80043b2:	b014      	add	sp, #80	; 0x50
 80043b4:	bd80      	pop	{r7, pc}
 80043b6:	46c0      	nop			; (mov r8, r8)
 80043b8:	fffffedf 	.word	0xfffffedf
 80043bc:	fbffffff 	.word	0xfbffffff

080043c0 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 80043c0:	b580      	push	{r7, lr}
 80043c2:	b094      	sub	sp, #80	; 0x50
 80043c4:	af00      	add	r7, sp, #0
 80043c6:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 80043c8:	204e      	movs	r0, #78	; 0x4e
 80043ca:	183b      	adds	r3, r7, r0
 80043cc:	687a      	ldr	r2, [r7, #4]
 80043ce:	215c      	movs	r1, #92	; 0x5c
 80043d0:	5a52      	ldrh	r2, [r2, r1]
 80043d2:	801a      	strh	r2, [r3, #0]
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80043d4:	687b      	ldr	r3, [r7, #4]
 80043d6:	2280      	movs	r2, #128	; 0x80
 80043d8:	589b      	ldr	r3, [r3, r2]
 80043da:	2b22      	cmp	r3, #34	; 0x22
 80043dc:	d000      	beq.n	80043e0 <UART_RxISR_16BIT+0x20>
 80043de:	e0ba      	b.n	8004556 <UART_RxISR_16BIT+0x196>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 80043e0:	687b      	ldr	r3, [r7, #4]
 80043e2:	681a      	ldr	r2, [r3, #0]
 80043e4:	214c      	movs	r1, #76	; 0x4c
 80043e6:	187b      	adds	r3, r7, r1
 80043e8:	8c92      	ldrh	r2, [r2, #36]	; 0x24
 80043ea:	801a      	strh	r2, [r3, #0]
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 80043ec:	687b      	ldr	r3, [r7, #4]
 80043ee:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80043f0:	64bb      	str	r3, [r7, #72]	; 0x48
    *tmp = (uint16_t)(uhdata & uhMask);
 80043f2:	187b      	adds	r3, r7, r1
 80043f4:	183a      	adds	r2, r7, r0
 80043f6:	881b      	ldrh	r3, [r3, #0]
 80043f8:	8812      	ldrh	r2, [r2, #0]
 80043fa:	4013      	ands	r3, r2
 80043fc:	b29a      	uxth	r2, r3
 80043fe:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004400:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 8004402:	687b      	ldr	r3, [r7, #4]
 8004404:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004406:	1c9a      	adds	r2, r3, #2
 8004408:	687b      	ldr	r3, [r7, #4]
 800440a:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 800440c:	687b      	ldr	r3, [r7, #4]
 800440e:	225a      	movs	r2, #90	; 0x5a
 8004410:	5a9b      	ldrh	r3, [r3, r2]
 8004412:	b29b      	uxth	r3, r3
 8004414:	3b01      	subs	r3, #1
 8004416:	b299      	uxth	r1, r3
 8004418:	687b      	ldr	r3, [r7, #4]
 800441a:	225a      	movs	r2, #90	; 0x5a
 800441c:	5299      	strh	r1, [r3, r2]

    if (huart->RxXferCount == 0U)
 800441e:	687b      	ldr	r3, [r7, #4]
 8004420:	225a      	movs	r2, #90	; 0x5a
 8004422:	5a9b      	ldrh	r3, [r3, r2]
 8004424:	b29b      	uxth	r3, r3
 8004426:	2b00      	cmp	r3, #0
 8004428:	d000      	beq.n	800442c <UART_RxISR_16BIT+0x6c>
 800442a:	e09c      	b.n	8004566 <UART_RxISR_16BIT+0x1a6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800442c:	f3ef 8310 	mrs	r3, PRIMASK
 8004430:	623b      	str	r3, [r7, #32]
  return(result);
 8004432:	6a3b      	ldr	r3, [r7, #32]
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004434:	647b      	str	r3, [r7, #68]	; 0x44
 8004436:	2301      	movs	r3, #1
 8004438:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800443a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800443c:	f383 8810 	msr	PRIMASK, r3
}
 8004440:	46c0      	nop			; (mov r8, r8)
 8004442:	687b      	ldr	r3, [r7, #4]
 8004444:	681b      	ldr	r3, [r3, #0]
 8004446:	681a      	ldr	r2, [r3, #0]
 8004448:	687b      	ldr	r3, [r7, #4]
 800444a:	681b      	ldr	r3, [r3, #0]
 800444c:	4948      	ldr	r1, [pc, #288]	; (8004570 <UART_RxISR_16BIT+0x1b0>)
 800444e:	400a      	ands	r2, r1
 8004450:	601a      	str	r2, [r3, #0]
 8004452:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004454:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004456:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004458:	f383 8810 	msr	PRIMASK, r3
}
 800445c:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800445e:	f3ef 8310 	mrs	r3, PRIMASK
 8004462:	62fb      	str	r3, [r7, #44]	; 0x2c
  return(result);
 8004464:	6afb      	ldr	r3, [r7, #44]	; 0x2c

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004466:	643b      	str	r3, [r7, #64]	; 0x40
 8004468:	2301      	movs	r3, #1
 800446a:	633b      	str	r3, [r7, #48]	; 0x30
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800446c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800446e:	f383 8810 	msr	PRIMASK, r3
}
 8004472:	46c0      	nop			; (mov r8, r8)
 8004474:	687b      	ldr	r3, [r7, #4]
 8004476:	681b      	ldr	r3, [r3, #0]
 8004478:	689a      	ldr	r2, [r3, #8]
 800447a:	687b      	ldr	r3, [r7, #4]
 800447c:	681b      	ldr	r3, [r3, #0]
 800447e:	2101      	movs	r1, #1
 8004480:	438a      	bics	r2, r1
 8004482:	609a      	str	r2, [r3, #8]
 8004484:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004486:	637b      	str	r3, [r7, #52]	; 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004488:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800448a:	f383 8810 	msr	PRIMASK, r3
}
 800448e:	46c0      	nop			; (mov r8, r8)

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8004490:	687b      	ldr	r3, [r7, #4]
 8004492:	2280      	movs	r2, #128	; 0x80
 8004494:	2120      	movs	r1, #32
 8004496:	5099      	str	r1, [r3, r2]

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8004498:	687b      	ldr	r3, [r7, #4]
 800449a:	2200      	movs	r2, #0
 800449c:	669a      	str	r2, [r3, #104]	; 0x68

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 800449e:	687b      	ldr	r3, [r7, #4]
 80044a0:	2200      	movs	r2, #0
 80044a2:	665a      	str	r2, [r3, #100]	; 0x64

      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 80044a4:	687b      	ldr	r3, [r7, #4]
 80044a6:	681b      	ldr	r3, [r3, #0]
 80044a8:	685a      	ldr	r2, [r3, #4]
 80044aa:	2380      	movs	r3, #128	; 0x80
 80044ac:	041b      	lsls	r3, r3, #16
 80044ae:	4013      	ands	r3, r2
 80044b0:	d018      	beq.n	80044e4 <UART_RxISR_16BIT+0x124>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80044b2:	f3ef 8310 	mrs	r3, PRIMASK
 80044b6:	617b      	str	r3, [r7, #20]
  return(result);
 80044b8:	697b      	ldr	r3, [r7, #20]
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 80044ba:	63fb      	str	r3, [r7, #60]	; 0x3c
 80044bc:	2301      	movs	r3, #1
 80044be:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80044c0:	69bb      	ldr	r3, [r7, #24]
 80044c2:	f383 8810 	msr	PRIMASK, r3
}
 80044c6:	46c0      	nop			; (mov r8, r8)
 80044c8:	687b      	ldr	r3, [r7, #4]
 80044ca:	681b      	ldr	r3, [r3, #0]
 80044cc:	681a      	ldr	r2, [r3, #0]
 80044ce:	687b      	ldr	r3, [r7, #4]
 80044d0:	681b      	ldr	r3, [r3, #0]
 80044d2:	4928      	ldr	r1, [pc, #160]	; (8004574 <UART_RxISR_16BIT+0x1b4>)
 80044d4:	400a      	ands	r2, r1
 80044d6:	601a      	str	r2, [r3, #0]
 80044d8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80044da:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80044dc:	69fb      	ldr	r3, [r7, #28]
 80044de:	f383 8810 	msr	PRIMASK, r3
}
 80044e2:	46c0      	nop			; (mov r8, r8)
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80044e4:	687b      	ldr	r3, [r7, #4]
 80044e6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80044e8:	2b01      	cmp	r3, #1
 80044ea:	d12f      	bne.n	800454c <UART_RxISR_16BIT+0x18c>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80044ec:	687b      	ldr	r3, [r7, #4]
 80044ee:	2200      	movs	r2, #0
 80044f0:	661a      	str	r2, [r3, #96]	; 0x60
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80044f2:	f3ef 8310 	mrs	r3, PRIMASK
 80044f6:	60bb      	str	r3, [r7, #8]
  return(result);
 80044f8:	68bb      	ldr	r3, [r7, #8]

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80044fa:	63bb      	str	r3, [r7, #56]	; 0x38
 80044fc:	2301      	movs	r3, #1
 80044fe:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004500:	68fb      	ldr	r3, [r7, #12]
 8004502:	f383 8810 	msr	PRIMASK, r3
}
 8004506:	46c0      	nop			; (mov r8, r8)
 8004508:	687b      	ldr	r3, [r7, #4]
 800450a:	681b      	ldr	r3, [r3, #0]
 800450c:	681a      	ldr	r2, [r3, #0]
 800450e:	687b      	ldr	r3, [r7, #4]
 8004510:	681b      	ldr	r3, [r3, #0]
 8004512:	2110      	movs	r1, #16
 8004514:	438a      	bics	r2, r1
 8004516:	601a      	str	r2, [r3, #0]
 8004518:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800451a:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800451c:	693b      	ldr	r3, [r7, #16]
 800451e:	f383 8810 	msr	PRIMASK, r3
}
 8004522:	46c0      	nop			; (mov r8, r8)

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8004524:	687b      	ldr	r3, [r7, #4]
 8004526:	681b      	ldr	r3, [r3, #0]
 8004528:	69db      	ldr	r3, [r3, #28]
 800452a:	2210      	movs	r2, #16
 800452c:	4013      	ands	r3, r2
 800452e:	2b10      	cmp	r3, #16
 8004530:	d103      	bne.n	800453a <UART_RxISR_16BIT+0x17a>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8004532:	687b      	ldr	r3, [r7, #4]
 8004534:	681b      	ldr	r3, [r3, #0]
 8004536:	2210      	movs	r2, #16
 8004538:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800453a:	687b      	ldr	r3, [r7, #4]
 800453c:	2258      	movs	r2, #88	; 0x58
 800453e:	5a9a      	ldrh	r2, [r3, r2]
 8004540:	687b      	ldr	r3, [r7, #4]
 8004542:	0011      	movs	r1, r2
 8004544:	0018      	movs	r0, r3
 8004546:	f7ff f8dd 	bl	8003704 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800454a:	e00c      	b.n	8004566 <UART_RxISR_16BIT+0x1a6>
        HAL_UART_RxCpltCallback(huart);
 800454c:	687b      	ldr	r3, [r7, #4]
 800454e:	0018      	movs	r0, r3
 8004550:	f7fb fec0 	bl	80002d4 <HAL_UART_RxCpltCallback>
}
 8004554:	e007      	b.n	8004566 <UART_RxISR_16BIT+0x1a6>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8004556:	687b      	ldr	r3, [r7, #4]
 8004558:	681b      	ldr	r3, [r3, #0]
 800455a:	699a      	ldr	r2, [r3, #24]
 800455c:	687b      	ldr	r3, [r7, #4]
 800455e:	681b      	ldr	r3, [r3, #0]
 8004560:	2108      	movs	r1, #8
 8004562:	430a      	orrs	r2, r1
 8004564:	619a      	str	r2, [r3, #24]
}
 8004566:	46c0      	nop			; (mov r8, r8)
 8004568:	46bd      	mov	sp, r7
 800456a:	b014      	add	sp, #80	; 0x50
 800456c:	bd80      	pop	{r7, pc}
 800456e:	46c0      	nop			; (mov r8, r8)
 8004570:	fffffedf 	.word	0xfffffedf
 8004574:	fbffffff 	.word	0xfbffffff

08004578 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8004578:	b580      	push	{r7, lr}
 800457a:	b082      	sub	sp, #8
 800457c:	af00      	add	r7, sp, #0
 800457e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8004580:	46c0      	nop			; (mov r8, r8)
 8004582:	46bd      	mov	sp, r7
 8004584:	b002      	add	sp, #8
 8004586:	bd80      	pop	{r7, pc}

08004588 <__libc_init_array>:
 8004588:	b570      	push	{r4, r5, r6, lr}
 800458a:	2600      	movs	r6, #0
 800458c:	4d0c      	ldr	r5, [pc, #48]	; (80045c0 <__libc_init_array+0x38>)
 800458e:	4c0d      	ldr	r4, [pc, #52]	; (80045c4 <__libc_init_array+0x3c>)
 8004590:	1b64      	subs	r4, r4, r5
 8004592:	10a4      	asrs	r4, r4, #2
 8004594:	42a6      	cmp	r6, r4
 8004596:	d109      	bne.n	80045ac <__libc_init_array+0x24>
 8004598:	2600      	movs	r6, #0
 800459a:	f000 f821 	bl	80045e0 <_init>
 800459e:	4d0a      	ldr	r5, [pc, #40]	; (80045c8 <__libc_init_array+0x40>)
 80045a0:	4c0a      	ldr	r4, [pc, #40]	; (80045cc <__libc_init_array+0x44>)
 80045a2:	1b64      	subs	r4, r4, r5
 80045a4:	10a4      	asrs	r4, r4, #2
 80045a6:	42a6      	cmp	r6, r4
 80045a8:	d105      	bne.n	80045b6 <__libc_init_array+0x2e>
 80045aa:	bd70      	pop	{r4, r5, r6, pc}
 80045ac:	00b3      	lsls	r3, r6, #2
 80045ae:	58eb      	ldr	r3, [r5, r3]
 80045b0:	4798      	blx	r3
 80045b2:	3601      	adds	r6, #1
 80045b4:	e7ee      	b.n	8004594 <__libc_init_array+0xc>
 80045b6:	00b3      	lsls	r3, r6, #2
 80045b8:	58eb      	ldr	r3, [r5, r3]
 80045ba:	4798      	blx	r3
 80045bc:	3601      	adds	r6, #1
 80045be:	e7f2      	b.n	80045a6 <__libc_init_array+0x1e>
 80045c0:	08004630 	.word	0x08004630
 80045c4:	08004630 	.word	0x08004630
 80045c8:	08004630 	.word	0x08004630
 80045cc:	08004634 	.word	0x08004634

080045d0 <memset>:
 80045d0:	0003      	movs	r3, r0
 80045d2:	1882      	adds	r2, r0, r2
 80045d4:	4293      	cmp	r3, r2
 80045d6:	d100      	bne.n	80045da <memset+0xa>
 80045d8:	4770      	bx	lr
 80045da:	7019      	strb	r1, [r3, #0]
 80045dc:	3301      	adds	r3, #1
 80045de:	e7f9      	b.n	80045d4 <memset+0x4>

080045e0 <_init>:
 80045e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80045e2:	46c0      	nop			; (mov r8, r8)
 80045e4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80045e6:	bc08      	pop	{r3}
 80045e8:	469e      	mov	lr, r3
 80045ea:	4770      	bx	lr

080045ec <_fini>:
 80045ec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80045ee:	46c0      	nop			; (mov r8, r8)
 80045f0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80045f2:	bc08      	pop	{r3}
 80045f4:	469e      	mov	lr, r3
 80045f6:	4770      	bx	lr


7_Segment_Display.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000045d8  080000c0  080000c0  000100c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000038  08004698  08004698  00014698  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080046d0  080046d0  000200cc  2**0
                  CONTENTS
  4 .ARM          00000000  080046d0  080046d0  000200cc  2**0
                  CONTENTS
  5 .preinit_array 00000000  080046d0  080046d0  000200cc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080046d0  080046d0  000146d0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080046d4  080046d4  000146d4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000000cc  20000000  080046d8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000110  200000cc  080047a4  000200cc  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200001dc  080047a4  000201dc  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  000200cc  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000ee02  00000000  00000000  000200f4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001fef  00000000  00000000  0002eef6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000ca0  00000000  00000000  00030ee8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000bd8  00000000  00000000  00031b88  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00019c31  00000000  00000000  00032760  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000f4ca  00000000  00000000  0004c391  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00097d90  00000000  00000000  0005b85b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000f35eb  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002d10  00000000  00000000  000f363c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	; (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	; (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	; (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	200000cc 	.word	0x200000cc
 80000e0:	00000000 	.word	0x00000000
 80000e4:	08004680 	.word	0x08004680

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	; (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	; (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	; (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			; (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	200000d0 	.word	0x200000d0
 8000104:	08004680 	.word	0x08004680

08000108 <strlen>:
 8000108:	2300      	movs	r3, #0
 800010a:	5cc2      	ldrb	r2, [r0, r3]
 800010c:	3301      	adds	r3, #1
 800010e:	2a00      	cmp	r2, #0
 8000110:	d1fb      	bne.n	800010a <strlen+0x2>
 8000112:	1e58      	subs	r0, r3, #1
 8000114:	4770      	bx	lr
	...

08000118 <__udivsi3>:
 8000118:	2200      	movs	r2, #0
 800011a:	0843      	lsrs	r3, r0, #1
 800011c:	428b      	cmp	r3, r1
 800011e:	d374      	bcc.n	800020a <__udivsi3+0xf2>
 8000120:	0903      	lsrs	r3, r0, #4
 8000122:	428b      	cmp	r3, r1
 8000124:	d35f      	bcc.n	80001e6 <__udivsi3+0xce>
 8000126:	0a03      	lsrs	r3, r0, #8
 8000128:	428b      	cmp	r3, r1
 800012a:	d344      	bcc.n	80001b6 <__udivsi3+0x9e>
 800012c:	0b03      	lsrs	r3, r0, #12
 800012e:	428b      	cmp	r3, r1
 8000130:	d328      	bcc.n	8000184 <__udivsi3+0x6c>
 8000132:	0c03      	lsrs	r3, r0, #16
 8000134:	428b      	cmp	r3, r1
 8000136:	d30d      	bcc.n	8000154 <__udivsi3+0x3c>
 8000138:	22ff      	movs	r2, #255	; 0xff
 800013a:	0209      	lsls	r1, r1, #8
 800013c:	ba12      	rev	r2, r2
 800013e:	0c03      	lsrs	r3, r0, #16
 8000140:	428b      	cmp	r3, r1
 8000142:	d302      	bcc.n	800014a <__udivsi3+0x32>
 8000144:	1212      	asrs	r2, r2, #8
 8000146:	0209      	lsls	r1, r1, #8
 8000148:	d065      	beq.n	8000216 <__udivsi3+0xfe>
 800014a:	0b03      	lsrs	r3, r0, #12
 800014c:	428b      	cmp	r3, r1
 800014e:	d319      	bcc.n	8000184 <__udivsi3+0x6c>
 8000150:	e000      	b.n	8000154 <__udivsi3+0x3c>
 8000152:	0a09      	lsrs	r1, r1, #8
 8000154:	0bc3      	lsrs	r3, r0, #15
 8000156:	428b      	cmp	r3, r1
 8000158:	d301      	bcc.n	800015e <__udivsi3+0x46>
 800015a:	03cb      	lsls	r3, r1, #15
 800015c:	1ac0      	subs	r0, r0, r3
 800015e:	4152      	adcs	r2, r2
 8000160:	0b83      	lsrs	r3, r0, #14
 8000162:	428b      	cmp	r3, r1
 8000164:	d301      	bcc.n	800016a <__udivsi3+0x52>
 8000166:	038b      	lsls	r3, r1, #14
 8000168:	1ac0      	subs	r0, r0, r3
 800016a:	4152      	adcs	r2, r2
 800016c:	0b43      	lsrs	r3, r0, #13
 800016e:	428b      	cmp	r3, r1
 8000170:	d301      	bcc.n	8000176 <__udivsi3+0x5e>
 8000172:	034b      	lsls	r3, r1, #13
 8000174:	1ac0      	subs	r0, r0, r3
 8000176:	4152      	adcs	r2, r2
 8000178:	0b03      	lsrs	r3, r0, #12
 800017a:	428b      	cmp	r3, r1
 800017c:	d301      	bcc.n	8000182 <__udivsi3+0x6a>
 800017e:	030b      	lsls	r3, r1, #12
 8000180:	1ac0      	subs	r0, r0, r3
 8000182:	4152      	adcs	r2, r2
 8000184:	0ac3      	lsrs	r3, r0, #11
 8000186:	428b      	cmp	r3, r1
 8000188:	d301      	bcc.n	800018e <__udivsi3+0x76>
 800018a:	02cb      	lsls	r3, r1, #11
 800018c:	1ac0      	subs	r0, r0, r3
 800018e:	4152      	adcs	r2, r2
 8000190:	0a83      	lsrs	r3, r0, #10
 8000192:	428b      	cmp	r3, r1
 8000194:	d301      	bcc.n	800019a <__udivsi3+0x82>
 8000196:	028b      	lsls	r3, r1, #10
 8000198:	1ac0      	subs	r0, r0, r3
 800019a:	4152      	adcs	r2, r2
 800019c:	0a43      	lsrs	r3, r0, #9
 800019e:	428b      	cmp	r3, r1
 80001a0:	d301      	bcc.n	80001a6 <__udivsi3+0x8e>
 80001a2:	024b      	lsls	r3, r1, #9
 80001a4:	1ac0      	subs	r0, r0, r3
 80001a6:	4152      	adcs	r2, r2
 80001a8:	0a03      	lsrs	r3, r0, #8
 80001aa:	428b      	cmp	r3, r1
 80001ac:	d301      	bcc.n	80001b2 <__udivsi3+0x9a>
 80001ae:	020b      	lsls	r3, r1, #8
 80001b0:	1ac0      	subs	r0, r0, r3
 80001b2:	4152      	adcs	r2, r2
 80001b4:	d2cd      	bcs.n	8000152 <__udivsi3+0x3a>
 80001b6:	09c3      	lsrs	r3, r0, #7
 80001b8:	428b      	cmp	r3, r1
 80001ba:	d301      	bcc.n	80001c0 <__udivsi3+0xa8>
 80001bc:	01cb      	lsls	r3, r1, #7
 80001be:	1ac0      	subs	r0, r0, r3
 80001c0:	4152      	adcs	r2, r2
 80001c2:	0983      	lsrs	r3, r0, #6
 80001c4:	428b      	cmp	r3, r1
 80001c6:	d301      	bcc.n	80001cc <__udivsi3+0xb4>
 80001c8:	018b      	lsls	r3, r1, #6
 80001ca:	1ac0      	subs	r0, r0, r3
 80001cc:	4152      	adcs	r2, r2
 80001ce:	0943      	lsrs	r3, r0, #5
 80001d0:	428b      	cmp	r3, r1
 80001d2:	d301      	bcc.n	80001d8 <__udivsi3+0xc0>
 80001d4:	014b      	lsls	r3, r1, #5
 80001d6:	1ac0      	subs	r0, r0, r3
 80001d8:	4152      	adcs	r2, r2
 80001da:	0903      	lsrs	r3, r0, #4
 80001dc:	428b      	cmp	r3, r1
 80001de:	d301      	bcc.n	80001e4 <__udivsi3+0xcc>
 80001e0:	010b      	lsls	r3, r1, #4
 80001e2:	1ac0      	subs	r0, r0, r3
 80001e4:	4152      	adcs	r2, r2
 80001e6:	08c3      	lsrs	r3, r0, #3
 80001e8:	428b      	cmp	r3, r1
 80001ea:	d301      	bcc.n	80001f0 <__udivsi3+0xd8>
 80001ec:	00cb      	lsls	r3, r1, #3
 80001ee:	1ac0      	subs	r0, r0, r3
 80001f0:	4152      	adcs	r2, r2
 80001f2:	0883      	lsrs	r3, r0, #2
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d301      	bcc.n	80001fc <__udivsi3+0xe4>
 80001f8:	008b      	lsls	r3, r1, #2
 80001fa:	1ac0      	subs	r0, r0, r3
 80001fc:	4152      	adcs	r2, r2
 80001fe:	0843      	lsrs	r3, r0, #1
 8000200:	428b      	cmp	r3, r1
 8000202:	d301      	bcc.n	8000208 <__udivsi3+0xf0>
 8000204:	004b      	lsls	r3, r1, #1
 8000206:	1ac0      	subs	r0, r0, r3
 8000208:	4152      	adcs	r2, r2
 800020a:	1a41      	subs	r1, r0, r1
 800020c:	d200      	bcs.n	8000210 <__udivsi3+0xf8>
 800020e:	4601      	mov	r1, r0
 8000210:	4152      	adcs	r2, r2
 8000212:	4610      	mov	r0, r2
 8000214:	4770      	bx	lr
 8000216:	e7ff      	b.n	8000218 <__udivsi3+0x100>
 8000218:	b501      	push	{r0, lr}
 800021a:	2000      	movs	r0, #0
 800021c:	f000 f806 	bl	800022c <__aeabi_idiv0>
 8000220:	bd02      	pop	{r1, pc}
 8000222:	46c0      	nop			; (mov r8, r8)

08000224 <__aeabi_uidivmod>:
 8000224:	2900      	cmp	r1, #0
 8000226:	d0f7      	beq.n	8000218 <__udivsi3+0x100>
 8000228:	e776      	b.n	8000118 <__udivsi3>
 800022a:	4770      	bx	lr

0800022c <__aeabi_idiv0>:
 800022c:	4770      	bx	lr
 800022e:	46c0      	nop			; (mov r8, r8)

08000230 <disp_setNumber>:
if (j == size){
	j = 0 ;
			}
}

void disp_setNumber(uint8_t value){
 8000230:	b580      	push	{r7, lr}
 8000232:	b084      	sub	sp, #16
 8000234:	af00      	add	r7, sp, #0
 8000236:	0002      	movs	r2, r0
 8000238:	1dfb      	adds	r3, r7, #7
 800023a:	701a      	strb	r2, [r3, #0]

	static volatile int i = 0;
	static volatile uint8_t digit ;
	uint32_t valurToShift;
	if(value!=0){
 800023c:	1dfb      	adds	r3, r7, #7
 800023e:	781b      	ldrb	r3, [r3, #0]
 8000240:	2b00      	cmp	r3, #0
 8000242:	d00e      	beq.n	8000262 <disp_setNumber+0x32>
		digit =(value)-'0';
 8000244:	1dfb      	adds	r3, r7, #7
 8000246:	781b      	ldrb	r3, [r3, #0]
 8000248:	3b30      	subs	r3, #48	; 0x30
 800024a:	b2da      	uxtb	r2, r3
 800024c:	4b25      	ldr	r3, [pc, #148]	; (80002e4 <disp_setNumber+0xb4>)
 800024e:	701a      	strb	r2, [r3, #0]
		valurToShift=var[digit];
 8000250:	4b24      	ldr	r3, [pc, #144]	; (80002e4 <disp_setNumber+0xb4>)
 8000252:	781b      	ldrb	r3, [r3, #0]
 8000254:	b2db      	uxtb	r3, r3
 8000256:	001a      	movs	r2, r3
 8000258:	4b23      	ldr	r3, [pc, #140]	; (80002e8 <disp_setNumber+0xb8>)
 800025a:	0092      	lsls	r2, r2, #2
 800025c:	58d3      	ldr	r3, [r2, r3]
 800025e:	60fb      	str	r3, [r7, #12]
 8000260:	e001      	b.n	8000266 <disp_setNumber+0x36>
	}
	else{
		valurToShift=0;
 8000262:	2300      	movs	r3, #0
 8000264:	60fb      	str	r3, [r7, #12]
	}
    HAL_GPIO_WritePin(LE_GPIO_port, LE_pin, 0);
 8000266:	2380      	movs	r3, #128	; 0x80
 8000268:	00db      	lsls	r3, r3, #3
 800026a:	4820      	ldr	r0, [pc, #128]	; (80002ec <disp_setNumber+0xbc>)
 800026c:	2200      	movs	r2, #0
 800026e:	0019      	movs	r1, r3
 8000270:	f000 ff34 	bl	80010dc <HAL_GPIO_WritePin>
	  if (valurToShift & (uint32_t)1<<i){
 8000274:	4b1e      	ldr	r3, [pc, #120]	; (80002f0 <disp_setNumber+0xc0>)
 8000276:	681b      	ldr	r3, [r3, #0]
 8000278:	68fa      	ldr	r2, [r7, #12]
 800027a:	40da      	lsrs	r2, r3
 800027c:	0013      	movs	r3, r2
 800027e:	2201      	movs	r2, #1
 8000280:	4013      	ands	r3, r2
 8000282:	d006      	beq.n	8000292 <disp_setNumber+0x62>
	  	HAL_GPIO_WritePin(SDA_GPIO_Port, SDA_Pin, 1);
 8000284:	4b19      	ldr	r3, [pc, #100]	; (80002ec <disp_setNumber+0xbc>)
 8000286:	2201      	movs	r2, #1
 8000288:	2102      	movs	r1, #2
 800028a:	0018      	movs	r0, r3
 800028c:	f000 ff26 	bl	80010dc <HAL_GPIO_WritePin>
 8000290:	e005      	b.n	800029e <disp_setNumber+0x6e>
	  }
	  else
	  	HAL_GPIO_WritePin(SDA_GPIO_Port, SDA_Pin, 0);
 8000292:	4b16      	ldr	r3, [pc, #88]	; (80002ec <disp_setNumber+0xbc>)
 8000294:	2200      	movs	r2, #0
 8000296:	2102      	movs	r1, #2
 8000298:	0018      	movs	r0, r3
 800029a:	f000 ff1f 	bl	80010dc <HAL_GPIO_WritePin>
	  i++;
 800029e:	4b14      	ldr	r3, [pc, #80]	; (80002f0 <disp_setNumber+0xc0>)
 80002a0:	681b      	ldr	r3, [r3, #0]
 80002a2:	1c5a      	adds	r2, r3, #1
 80002a4:	4b12      	ldr	r3, [pc, #72]	; (80002f0 <disp_setNumber+0xc0>)
 80002a6:	601a      	str	r2, [r3, #0]
	  if (i==33){
 80002a8:	4b11      	ldr	r3, [pc, #68]	; (80002f0 <disp_setNumber+0xc0>)
 80002aa:	681b      	ldr	r3, [r3, #0]
 80002ac:	2b21      	cmp	r3, #33	; 0x21
 80002ae:	d115      	bne.n	80002dc <disp_setNumber+0xac>
	  	i = 0;
 80002b0:	4b0f      	ldr	r3, [pc, #60]	; (80002f0 <disp_setNumber+0xc0>)
 80002b2:	2200      	movs	r2, #0
 80002b4:	601a      	str	r2, [r3, #0]
	  	HAL_GPIO_WritePin(LE_GPIO_port, LE_pin, 1);
 80002b6:	2380      	movs	r3, #128	; 0x80
 80002b8:	00db      	lsls	r3, r3, #3
 80002ba:	480c      	ldr	r0, [pc, #48]	; (80002ec <disp_setNumber+0xbc>)
 80002bc:	2201      	movs	r2, #1
 80002be:	0019      	movs	r1, r3
 80002c0:	f000 ff0c 	bl	80010dc <HAL_GPIO_WritePin>
	  	HAL_GPIO_WritePin(OE_GPIO_port, OE_pin, 0);
 80002c4:	2380      	movs	r3, #128	; 0x80
 80002c6:	021b      	lsls	r3, r3, #8
 80002c8:	4808      	ldr	r0, [pc, #32]	; (80002ec <disp_setNumber+0xbc>)
 80002ca:	2200      	movs	r2, #0
 80002cc:	0019      	movs	r1, r3
 80002ce:	f000 ff05 	bl	80010dc <HAL_GPIO_WritePin>
	  	HAL_TIM_PWM_Stop_IT(&htim1, TIM_CHANNEL_1);
 80002d2:	4b08      	ldr	r3, [pc, #32]	; (80002f4 <disp_setNumber+0xc4>)
 80002d4:	2100      	movs	r1, #0
 80002d6:	0018      	movs	r0, r3
 80002d8:	f001 feb6 	bl	8002048 <HAL_TIM_PWM_Stop_IT>
	  	  	  	  }
		}
 80002dc:	46c0      	nop			; (mov r8, r8)
 80002de:	46bd      	mov	sp, r7
 80002e0:	b004      	add	sp, #16
 80002e2:	bd80      	pop	{r7, pc}
 80002e4:	200000e8 	.word	0x200000e8
 80002e8:	20000000 	.word	0x20000000
 80002ec:	48000400 	.word	0x48000400
 80002f0:	200000ec 	.word	0x200000ec
 80002f4:	200000f0 	.word	0x200000f0

080002f8 <clear_screen>:
void clear_screen(void){
 80002f8:	b580      	push	{r7, lr}
 80002fa:	af00      	add	r7, sp, #0
  	HAL_GPIO_WritePin(LE_GPIO_port, LE_pin, 0);
 80002fc:	2380      	movs	r3, #128	; 0x80
 80002fe:	00db      	lsls	r3, r3, #3
 8000300:	480a      	ldr	r0, [pc, #40]	; (800032c <clear_screen+0x34>)
 8000302:	2200      	movs	r2, #0
 8000304:	0019      	movs	r1, r3
 8000306:	f000 fee9 	bl	80010dc <HAL_GPIO_WritePin>
  	HAL_GPIO_WritePin(OE_GPIO_port, OE_pin, 0);
 800030a:	2380      	movs	r3, #128	; 0x80
 800030c:	021b      	lsls	r3, r3, #8
 800030e:	4807      	ldr	r0, [pc, #28]	; (800032c <clear_screen+0x34>)
 8000310:	2200      	movs	r2, #0
 8000312:	0019      	movs	r1, r3
 8000314:	f000 fee2 	bl	80010dc <HAL_GPIO_WritePin>
  	HAL_GPIO_WritePin(SDA_GPIO_Port, SDA_Pin, 0);
 8000318:	4b04      	ldr	r3, [pc, #16]	; (800032c <clear_screen+0x34>)
 800031a:	2200      	movs	r2, #0
 800031c:	2102      	movs	r1, #2
 800031e:	0018      	movs	r0, r3
 8000320:	f000 fedc 	bl	80010dc <HAL_GPIO_WritePin>

}
 8000324:	46c0      	nop			; (mov r8, r8)
 8000326:	46bd      	mov	sp, r7
 8000328:	bd80      	pop	{r7, pc}
 800032a:	46c0      	nop			; (mov r8, r8)
 800032c:	48000400 	.word	0x48000400

08000330 <HAL_UART_RxCpltCallback>:
size_t length = 0;
size_t g_receivedFlag=0;
uint8_t g_num ;


void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart){
 8000330:	b580      	push	{r7, lr}
 8000332:	b082      	sub	sp, #8
 8000334:	af00      	add	r7, sp, #0
 8000336:	6078      	str	r0, [r7, #4]
	if(length<10 && (rbuf[length]!='\r' && rbuf[length]!='\n') ){
 8000338:	4b1c      	ldr	r3, [pc, #112]	; (80003ac <HAL_UART_RxCpltCallback+0x7c>)
 800033a:	681b      	ldr	r3, [r3, #0]
 800033c:	2b09      	cmp	r3, #9
 800033e:	d81a      	bhi.n	8000376 <HAL_UART_RxCpltCallback+0x46>
 8000340:	4b1a      	ldr	r3, [pc, #104]	; (80003ac <HAL_UART_RxCpltCallback+0x7c>)
 8000342:	681b      	ldr	r3, [r3, #0]
 8000344:	4a1a      	ldr	r2, [pc, #104]	; (80003b0 <HAL_UART_RxCpltCallback+0x80>)
 8000346:	5cd3      	ldrb	r3, [r2, r3]
 8000348:	2b0d      	cmp	r3, #13
 800034a:	d014      	beq.n	8000376 <HAL_UART_RxCpltCallback+0x46>
 800034c:	4b17      	ldr	r3, [pc, #92]	; (80003ac <HAL_UART_RxCpltCallback+0x7c>)
 800034e:	681b      	ldr	r3, [r3, #0]
 8000350:	4a17      	ldr	r2, [pc, #92]	; (80003b0 <HAL_UART_RxCpltCallback+0x80>)
 8000352:	5cd3      	ldrb	r3, [r2, r3]
 8000354:	2b0a      	cmp	r3, #10
 8000356:	d00e      	beq.n	8000376 <HAL_UART_RxCpltCallback+0x46>
		length++;
 8000358:	4b14      	ldr	r3, [pc, #80]	; (80003ac <HAL_UART_RxCpltCallback+0x7c>)
 800035a:	681b      	ldr	r3, [r3, #0]
 800035c:	1c5a      	adds	r2, r3, #1
 800035e:	4b13      	ldr	r3, [pc, #76]	; (80003ac <HAL_UART_RxCpltCallback+0x7c>)
 8000360:	601a      	str	r2, [r3, #0]
		HAL_UART_Receive_IT(&huart2,rbuf+length,1);
 8000362:	4b12      	ldr	r3, [pc, #72]	; (80003ac <HAL_UART_RxCpltCallback+0x7c>)
 8000364:	681a      	ldr	r2, [r3, #0]
 8000366:	4b12      	ldr	r3, [pc, #72]	; (80003b0 <HAL_UART_RxCpltCallback+0x80>)
 8000368:	18d1      	adds	r1, r2, r3
 800036a:	4b12      	ldr	r3, [pc, #72]	; (80003b4 <HAL_UART_RxCpltCallback+0x84>)
 800036c:	2201      	movs	r2, #1
 800036e:	0018      	movs	r0, r3
 8000370:	f002 fed0 	bl	8003114 <HAL_UART_Receive_IT>
	else if(rbuf[length]=='\r' || rbuf[length]=='\n'){
		 g_num = rbuf[length-1];
		 g_receivedFlag=1;

	}
}
 8000374:	e015      	b.n	80003a2 <HAL_UART_RxCpltCallback+0x72>
	else if(rbuf[length]=='\r' || rbuf[length]=='\n'){
 8000376:	4b0d      	ldr	r3, [pc, #52]	; (80003ac <HAL_UART_RxCpltCallback+0x7c>)
 8000378:	681b      	ldr	r3, [r3, #0]
 800037a:	4a0d      	ldr	r2, [pc, #52]	; (80003b0 <HAL_UART_RxCpltCallback+0x80>)
 800037c:	5cd3      	ldrb	r3, [r2, r3]
 800037e:	2b0d      	cmp	r3, #13
 8000380:	d005      	beq.n	800038e <HAL_UART_RxCpltCallback+0x5e>
 8000382:	4b0a      	ldr	r3, [pc, #40]	; (80003ac <HAL_UART_RxCpltCallback+0x7c>)
 8000384:	681b      	ldr	r3, [r3, #0]
 8000386:	4a0a      	ldr	r2, [pc, #40]	; (80003b0 <HAL_UART_RxCpltCallback+0x80>)
 8000388:	5cd3      	ldrb	r3, [r2, r3]
 800038a:	2b0a      	cmp	r3, #10
 800038c:	d109      	bne.n	80003a2 <HAL_UART_RxCpltCallback+0x72>
		 g_num = rbuf[length-1];
 800038e:	4b07      	ldr	r3, [pc, #28]	; (80003ac <HAL_UART_RxCpltCallback+0x7c>)
 8000390:	681b      	ldr	r3, [r3, #0]
 8000392:	3b01      	subs	r3, #1
 8000394:	4a06      	ldr	r2, [pc, #24]	; (80003b0 <HAL_UART_RxCpltCallback+0x80>)
 8000396:	5cd2      	ldrb	r2, [r2, r3]
 8000398:	4b07      	ldr	r3, [pc, #28]	; (80003b8 <HAL_UART_RxCpltCallback+0x88>)
 800039a:	701a      	strb	r2, [r3, #0]
		 g_receivedFlag=1;
 800039c:	4b07      	ldr	r3, [pc, #28]	; (80003bc <HAL_UART_RxCpltCallback+0x8c>)
 800039e:	2201      	movs	r2, #1
 80003a0:	601a      	str	r2, [r3, #0]
}
 80003a2:	46c0      	nop			; (mov r8, r8)
 80003a4:	46bd      	mov	sp, r7
 80003a6:	b002      	add	sp, #8
 80003a8:	bd80      	pop	{r7, pc}
 80003aa:	46c0      	nop			; (mov r8, r8)
 80003ac:	200001cc 	.word	0x200001cc
 80003b0:	200001c0 	.word	0x200001c0
 80003b4:	20000138 	.word	0x20000138
 80003b8:	200001d4 	.word	0x200001d4
 80003bc:	200001d0 	.word	0x200001d0

080003c0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80003c0:	b580      	push	{r7, lr}
 80003c2:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80003c4:	f000 fb52 	bl	8000a6c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80003c8:	f000 f868 	bl	800049c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80003cc:	f000 f9a0 	bl	8000710 <MX_GPIO_Init>
  MX_TIM1_Init();
 80003d0:	f000 f8b8 	bl	8000544 <MX_TIM1_Init>
  MX_USART2_UART_Init();
 80003d4:	f000 f96c 	bl	80006b0 <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */
  clear_screen();
 80003d8:	f7ff ff8e 	bl	80002f8 <clear_screen>
  g_num=0;
 80003dc:	4b27      	ldr	r3, [pc, #156]	; (800047c <main+0xbc>)
 80003de:	2200      	movs	r2, #0
 80003e0:	701a      	strb	r2, [r3, #0]
  TIM1->CCR1 = 50 ;
 80003e2:	4b27      	ldr	r3, [pc, #156]	; (8000480 <main+0xc0>)
 80003e4:	2232      	movs	r2, #50	; 0x32
 80003e6:	635a      	str	r2, [r3, #52]	; 0x34
  HAL_TIM_PWM_Start_IT(&htim1, TIM_CHANNEL_1);
 80003e8:	4b26      	ldr	r3, [pc, #152]	; (8000484 <main+0xc4>)
 80003ea:	2100      	movs	r1, #0
 80003ec:	0018      	movs	r0, r3
 80003ee:	f001 fd2b 	bl	8001e48 <HAL_TIM_PWM_Start_IT>
  HAL_UART_Transmit_IT(&huart2, tbuf, strlen((char*)tbuf));
 80003f2:	4b25      	ldr	r3, [pc, #148]	; (8000488 <main+0xc8>)
 80003f4:	0018      	movs	r0, r3
 80003f6:	f7ff fe87 	bl	8000108 <strlen>
 80003fa:	0003      	movs	r3, r0
 80003fc:	b29a      	uxth	r2, r3
 80003fe:	4922      	ldr	r1, [pc, #136]	; (8000488 <main+0xc8>)
 8000400:	4b22      	ldr	r3, [pc, #136]	; (800048c <main+0xcc>)
 8000402:	0018      	movs	r0, r3
 8000404:	f002 fe16 	bl	8003034 <HAL_UART_Transmit_IT>
  HAL_UART_Receive_IT(&huart2,rbuf, 1);
 8000408:	4921      	ldr	r1, [pc, #132]	; (8000490 <main+0xd0>)
 800040a:	4b20      	ldr	r3, [pc, #128]	; (800048c <main+0xcc>)
 800040c:	2201      	movs	r2, #1
 800040e:	0018      	movs	r0, r3
 8000410:	f002 fe80 	bl	8003114 <HAL_UART_Receive_IT>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {

	  if(g_receivedFlag){
 8000414:	4b1f      	ldr	r3, [pc, #124]	; (8000494 <main+0xd4>)
 8000416:	681b      	ldr	r3, [r3, #0]
 8000418:	2b00      	cmp	r3, #0
 800041a:	d0fb      	beq.n	8000414 <main+0x54>
			  HAL_UART_Transmit_IT(&huart2, rbuf, length);
 800041c:	4b1e      	ldr	r3, [pc, #120]	; (8000498 <main+0xd8>)
 800041e:	681b      	ldr	r3, [r3, #0]
 8000420:	b29a      	uxth	r2, r3
 8000422:	491b      	ldr	r1, [pc, #108]	; (8000490 <main+0xd0>)
 8000424:	4b19      	ldr	r3, [pc, #100]	; (800048c <main+0xcc>)
 8000426:	0018      	movs	r0, r3
 8000428:	f002 fe04 	bl	8003034 <HAL_UART_Transmit_IT>
			  if (g_num >= '0' && g_num <= '9'){
 800042c:	4b13      	ldr	r3, [pc, #76]	; (800047c <main+0xbc>)
 800042e:	781b      	ldrb	r3, [r3, #0]
 8000430:	2b2f      	cmp	r3, #47	; 0x2f
 8000432:	d90b      	bls.n	800044c <main+0x8c>
 8000434:	4b11      	ldr	r3, [pc, #68]	; (800047c <main+0xbc>)
 8000436:	781b      	ldrb	r3, [r3, #0]
 8000438:	2b39      	cmp	r3, #57	; 0x39
 800043a:	d807      	bhi.n	800044c <main+0x8c>
				  TIM1->CCR1 = 50 ;
 800043c:	4b10      	ldr	r3, [pc, #64]	; (8000480 <main+0xc0>)
 800043e:	2232      	movs	r2, #50	; 0x32
 8000440:	635a      	str	r2, [r3, #52]	; 0x34
				  HAL_TIM_PWM_Start_IT(&htim1, TIM_CHANNEL_1);
 8000442:	4b10      	ldr	r3, [pc, #64]	; (8000484 <main+0xc4>)
 8000444:	2100      	movs	r1, #0
 8000446:	0018      	movs	r0, r3
 8000448:	f001 fcfe 	bl	8001e48 <HAL_TIM_PWM_Start_IT>
			  		}
			  g_receivedFlag=0;
 800044c:	4b11      	ldr	r3, [pc, #68]	; (8000494 <main+0xd4>)
 800044e:	2200      	movs	r2, #0
 8000450:	601a      	str	r2, [r3, #0]
			  length=0;
 8000452:	4b11      	ldr	r3, [pc, #68]	; (8000498 <main+0xd8>)
 8000454:	2200      	movs	r2, #0
 8000456:	601a      	str	r2, [r3, #0]
			  HAL_UART_Transmit_IT(&huart2, tbuf, strlen((char*)tbuf));
 8000458:	4b0b      	ldr	r3, [pc, #44]	; (8000488 <main+0xc8>)
 800045a:	0018      	movs	r0, r3
 800045c:	f7ff fe54 	bl	8000108 <strlen>
 8000460:	0003      	movs	r3, r0
 8000462:	b29a      	uxth	r2, r3
 8000464:	4908      	ldr	r1, [pc, #32]	; (8000488 <main+0xc8>)
 8000466:	4b09      	ldr	r3, [pc, #36]	; (800048c <main+0xcc>)
 8000468:	0018      	movs	r0, r3
 800046a:	f002 fde3 	bl	8003034 <HAL_UART_Transmit_IT>
			  HAL_UART_Receive_IT(&huart2,rbuf, 1);
 800046e:	4908      	ldr	r1, [pc, #32]	; (8000490 <main+0xd0>)
 8000470:	4b06      	ldr	r3, [pc, #24]	; (800048c <main+0xcc>)
 8000472:	2201      	movs	r2, #1
 8000474:	0018      	movs	r0, r3
 8000476:	f002 fe4d 	bl	8003114 <HAL_UART_Receive_IT>
	  if(g_receivedFlag){
 800047a:	e7cb      	b.n	8000414 <main+0x54>
 800047c:	200001d4 	.word	0x200001d4
 8000480:	40012c00 	.word	0x40012c00
 8000484:	200000f0 	.word	0x200000f0
 8000488:	20000028 	.word	0x20000028
 800048c:	20000138 	.word	0x20000138
 8000490:	200001c0 	.word	0x200001c0
 8000494:	200001d0 	.word	0x200001d0
 8000498:	200001cc 	.word	0x200001cc

0800049c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800049c:	b590      	push	{r4, r7, lr}
 800049e:	b099      	sub	sp, #100	; 0x64
 80004a0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80004a2:	242c      	movs	r4, #44	; 0x2c
 80004a4:	193b      	adds	r3, r7, r4
 80004a6:	0018      	movs	r0, r3
 80004a8:	2334      	movs	r3, #52	; 0x34
 80004aa:	001a      	movs	r2, r3
 80004ac:	2100      	movs	r1, #0
 80004ae:	f004 f8df 	bl	8004670 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80004b2:	231c      	movs	r3, #28
 80004b4:	18fb      	adds	r3, r7, r3
 80004b6:	0018      	movs	r0, r3
 80004b8:	2310      	movs	r3, #16
 80004ba:	001a      	movs	r2, r3
 80004bc:	2100      	movs	r1, #0
 80004be:	f004 f8d7 	bl	8004670 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80004c2:	003b      	movs	r3, r7
 80004c4:	0018      	movs	r0, r3
 80004c6:	231c      	movs	r3, #28
 80004c8:	001a      	movs	r2, r3
 80004ca:	2100      	movs	r1, #0
 80004cc:	f004 f8d0 	bl	8004670 <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI48;
 80004d0:	193b      	adds	r3, r7, r4
 80004d2:	2220      	movs	r2, #32
 80004d4:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
 80004d6:	193b      	adds	r3, r7, r4
 80004d8:	2201      	movs	r2, #1
 80004da:	621a      	str	r2, [r3, #32]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80004dc:	193b      	adds	r3, r7, r4
 80004de:	2200      	movs	r2, #0
 80004e0:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80004e2:	193b      	adds	r3, r7, r4
 80004e4:	0018      	movs	r0, r3
 80004e6:	f000 fe17 	bl	8001118 <HAL_RCC_OscConfig>
 80004ea:	1e03      	subs	r3, r0, #0
 80004ec:	d001      	beq.n	80004f2 <SystemClock_Config+0x56>
  {
    Error_Handler();
 80004ee:	f000 f971 	bl	80007d4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80004f2:	211c      	movs	r1, #28
 80004f4:	187b      	adds	r3, r7, r1
 80004f6:	2207      	movs	r2, #7
 80004f8:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI48;
 80004fa:	187b      	adds	r3, r7, r1
 80004fc:	2203      	movs	r2, #3
 80004fe:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000500:	187b      	adds	r3, r7, r1
 8000502:	2200      	movs	r2, #0
 8000504:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000506:	187b      	adds	r3, r7, r1
 8000508:	2200      	movs	r2, #0
 800050a:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 800050c:	187b      	adds	r3, r7, r1
 800050e:	2101      	movs	r1, #1
 8000510:	0018      	movs	r0, r3
 8000512:	f001 f987 	bl	8001824 <HAL_RCC_ClockConfig>
 8000516:	1e03      	subs	r3, r0, #0
 8000518:	d001      	beq.n	800051e <SystemClock_Config+0x82>
  {
    Error_Handler();
 800051a:	f000 f95b 	bl	80007d4 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 800051e:	003b      	movs	r3, r7
 8000520:	2202      	movs	r2, #2
 8000522:	601a      	str	r2, [r3, #0]
  PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8000524:	003b      	movs	r3, r7
 8000526:	2200      	movs	r2, #0
 8000528:	60da      	str	r2, [r3, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800052a:	003b      	movs	r3, r7
 800052c:	0018      	movs	r0, r3
 800052e:	f001 fae5 	bl	8001afc <HAL_RCCEx_PeriphCLKConfig>
 8000532:	1e03      	subs	r3, r0, #0
 8000534:	d001      	beq.n	800053a <SystemClock_Config+0x9e>
  {
    Error_Handler();
 8000536:	f000 f94d 	bl	80007d4 <Error_Handler>
  }
}
 800053a:	46c0      	nop			; (mov r8, r8)
 800053c:	46bd      	mov	sp, r7
 800053e:	b019      	add	sp, #100	; 0x64
 8000540:	bd90      	pop	{r4, r7, pc}
	...

08000544 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8000544:	b580      	push	{r7, lr}
 8000546:	b096      	sub	sp, #88	; 0x58
 8000548:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800054a:	2348      	movs	r3, #72	; 0x48
 800054c:	18fb      	adds	r3, r7, r3
 800054e:	0018      	movs	r0, r3
 8000550:	2310      	movs	r3, #16
 8000552:	001a      	movs	r2, r3
 8000554:	2100      	movs	r1, #0
 8000556:	f004 f88b 	bl	8004670 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800055a:	2340      	movs	r3, #64	; 0x40
 800055c:	18fb      	adds	r3, r7, r3
 800055e:	0018      	movs	r0, r3
 8000560:	2308      	movs	r3, #8
 8000562:	001a      	movs	r2, r3
 8000564:	2100      	movs	r1, #0
 8000566:	f004 f883 	bl	8004670 <memset>
  TIM_OC_InitTypeDef sConfigOC = {0};
 800056a:	2324      	movs	r3, #36	; 0x24
 800056c:	18fb      	adds	r3, r7, r3
 800056e:	0018      	movs	r0, r3
 8000570:	231c      	movs	r3, #28
 8000572:	001a      	movs	r2, r3
 8000574:	2100      	movs	r1, #0
 8000576:	f004 f87b 	bl	8004670 <memset>
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 800057a:	1d3b      	adds	r3, r7, #4
 800057c:	0018      	movs	r0, r3
 800057e:	2320      	movs	r3, #32
 8000580:	001a      	movs	r2, r3
 8000582:	2100      	movs	r1, #0
 8000584:	f004 f874 	bl	8004670 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8000588:	4b46      	ldr	r3, [pc, #280]	; (80006a4 <MX_TIM1_Init+0x160>)
 800058a:	4a47      	ldr	r2, [pc, #284]	; (80006a8 <MX_TIM1_Init+0x164>)
 800058c:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 10000;
 800058e:	4b45      	ldr	r3, [pc, #276]	; (80006a4 <MX_TIM1_Init+0x160>)
 8000590:	4a46      	ldr	r2, [pc, #280]	; (80006ac <MX_TIM1_Init+0x168>)
 8000592:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000594:	4b43      	ldr	r3, [pc, #268]	; (80006a4 <MX_TIM1_Init+0x160>)
 8000596:	2200      	movs	r2, #0
 8000598:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 150;
 800059a:	4b42      	ldr	r3, [pc, #264]	; (80006a4 <MX_TIM1_Init+0x160>)
 800059c:	2296      	movs	r2, #150	; 0x96
 800059e:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80005a0:	4b40      	ldr	r3, [pc, #256]	; (80006a4 <MX_TIM1_Init+0x160>)
 80005a2:	2200      	movs	r2, #0
 80005a4:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80005a6:	4b3f      	ldr	r3, [pc, #252]	; (80006a4 <MX_TIM1_Init+0x160>)
 80005a8:	2200      	movs	r2, #0
 80005aa:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80005ac:	4b3d      	ldr	r3, [pc, #244]	; (80006a4 <MX_TIM1_Init+0x160>)
 80005ae:	2280      	movs	r2, #128	; 0x80
 80005b0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 80005b2:	4b3c      	ldr	r3, [pc, #240]	; (80006a4 <MX_TIM1_Init+0x160>)
 80005b4:	0018      	movs	r0, r3
 80005b6:	f001 fb9f 	bl	8001cf8 <HAL_TIM_Base_Init>
 80005ba:	1e03      	subs	r3, r0, #0
 80005bc:	d001      	beq.n	80005c2 <MX_TIM1_Init+0x7e>
  {
    Error_Handler();
 80005be:	f000 f909 	bl	80007d4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80005c2:	2148      	movs	r1, #72	; 0x48
 80005c4:	187b      	adds	r3, r7, r1
 80005c6:	2280      	movs	r2, #128	; 0x80
 80005c8:	0152      	lsls	r2, r2, #5
 80005ca:	601a      	str	r2, [r3, #0]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 80005cc:	187a      	adds	r2, r7, r1
 80005ce:	4b35      	ldr	r3, [pc, #212]	; (80006a4 <MX_TIM1_Init+0x160>)
 80005d0:	0011      	movs	r1, r2
 80005d2:	0018      	movs	r0, r3
 80005d4:	f001 ffd8 	bl	8002588 <HAL_TIM_ConfigClockSource>
 80005d8:	1e03      	subs	r3, r0, #0
 80005da:	d001      	beq.n	80005e0 <MX_TIM1_Init+0x9c>
  {
    Error_Handler();
 80005dc:	f000 f8fa 	bl	80007d4 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 80005e0:	4b30      	ldr	r3, [pc, #192]	; (80006a4 <MX_TIM1_Init+0x160>)
 80005e2:	0018      	movs	r0, r3
 80005e4:	f001 fbd8 	bl	8001d98 <HAL_TIM_PWM_Init>
 80005e8:	1e03      	subs	r3, r0, #0
 80005ea:	d001      	beq.n	80005f0 <MX_TIM1_Init+0xac>
  {
    Error_Handler();
 80005ec:	f000 f8f2 	bl	80007d4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80005f0:	2140      	movs	r1, #64	; 0x40
 80005f2:	187b      	adds	r3, r7, r1
 80005f4:	2200      	movs	r2, #0
 80005f6:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80005f8:	187b      	adds	r3, r7, r1
 80005fa:	2200      	movs	r2, #0
 80005fc:	605a      	str	r2, [r3, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80005fe:	187a      	adds	r2, r7, r1
 8000600:	4b28      	ldr	r3, [pc, #160]	; (80006a4 <MX_TIM1_Init+0x160>)
 8000602:	0011      	movs	r1, r2
 8000604:	0018      	movs	r0, r3
 8000606:	f002 fbf5 	bl	8002df4 <HAL_TIMEx_MasterConfigSynchronization>
 800060a:	1e03      	subs	r3, r0, #0
 800060c:	d001      	beq.n	8000612 <MX_TIM1_Init+0xce>
  {
    Error_Handler();
 800060e:	f000 f8e1 	bl	80007d4 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000612:	2124      	movs	r1, #36	; 0x24
 8000614:	187b      	adds	r3, r7, r1
 8000616:	2260      	movs	r2, #96	; 0x60
 8000618:	601a      	str	r2, [r3, #0]
  sConfigOC.Pulse = 50;
 800061a:	187b      	adds	r3, r7, r1
 800061c:	2232      	movs	r2, #50	; 0x32
 800061e:	605a      	str	r2, [r3, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000620:	187b      	adds	r3, r7, r1
 8000622:	2200      	movs	r2, #0
 8000624:	609a      	str	r2, [r3, #8]
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8000626:	187b      	adds	r3, r7, r1
 8000628:	2200      	movs	r2, #0
 800062a:	60da      	str	r2, [r3, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800062c:	187b      	adds	r3, r7, r1
 800062e:	2200      	movs	r2, #0
 8000630:	611a      	str	r2, [r3, #16]
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8000632:	187b      	adds	r3, r7, r1
 8000634:	2200      	movs	r2, #0
 8000636:	615a      	str	r2, [r3, #20]
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8000638:	187b      	adds	r3, r7, r1
 800063a:	2200      	movs	r2, #0
 800063c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800063e:	1879      	adds	r1, r7, r1
 8000640:	4b18      	ldr	r3, [pc, #96]	; (80006a4 <MX_TIM1_Init+0x160>)
 8000642:	2200      	movs	r2, #0
 8000644:	0018      	movs	r0, r3
 8000646:	f001 fed9 	bl	80023fc <HAL_TIM_PWM_ConfigChannel>
 800064a:	1e03      	subs	r3, r0, #0
 800064c:	d001      	beq.n	8000652 <MX_TIM1_Init+0x10e>
  {
    Error_Handler();
 800064e:	f000 f8c1 	bl	80007d4 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8000652:	1d3b      	adds	r3, r7, #4
 8000654:	2200      	movs	r2, #0
 8000656:	601a      	str	r2, [r3, #0]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8000658:	1d3b      	adds	r3, r7, #4
 800065a:	2200      	movs	r2, #0
 800065c:	605a      	str	r2, [r3, #4]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 800065e:	1d3b      	adds	r3, r7, #4
 8000660:	2200      	movs	r2, #0
 8000662:	609a      	str	r2, [r3, #8]
  sBreakDeadTimeConfig.DeadTime = 0;
 8000664:	1d3b      	adds	r3, r7, #4
 8000666:	2200      	movs	r2, #0
 8000668:	60da      	str	r2, [r3, #12]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 800066a:	1d3b      	adds	r3, r7, #4
 800066c:	2200      	movs	r2, #0
 800066e:	611a      	str	r2, [r3, #16]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8000670:	1d3b      	adds	r3, r7, #4
 8000672:	2280      	movs	r2, #128	; 0x80
 8000674:	0192      	lsls	r2, r2, #6
 8000676:	615a      	str	r2, [r3, #20]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8000678:	1d3b      	adds	r3, r7, #4
 800067a:	2200      	movs	r2, #0
 800067c:	61da      	str	r2, [r3, #28]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 800067e:	1d3a      	adds	r2, r7, #4
 8000680:	4b08      	ldr	r3, [pc, #32]	; (80006a4 <MX_TIM1_Init+0x160>)
 8000682:	0011      	movs	r1, r2
 8000684:	0018      	movs	r0, r3
 8000686:	f002 fc13 	bl	8002eb0 <HAL_TIMEx_ConfigBreakDeadTime>
 800068a:	1e03      	subs	r3, r0, #0
 800068c:	d001      	beq.n	8000692 <MX_TIM1_Init+0x14e>
  {
    Error_Handler();
 800068e:	f000 f8a1 	bl	80007d4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8000692:	4b04      	ldr	r3, [pc, #16]	; (80006a4 <MX_TIM1_Init+0x160>)
 8000694:	0018      	movs	r0, r3
 8000696:	f000 f8ef 	bl	8000878 <HAL_TIM_MspPostInit>

}
 800069a:	46c0      	nop			; (mov r8, r8)
 800069c:	46bd      	mov	sp, r7
 800069e:	b016      	add	sp, #88	; 0x58
 80006a0:	bd80      	pop	{r7, pc}
 80006a2:	46c0      	nop			; (mov r8, r8)
 80006a4:	200000f0 	.word	0x200000f0
 80006a8:	40012c00 	.word	0x40012c00
 80006ac:	00002710 	.word	0x00002710

080006b0 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80006b0:	b580      	push	{r7, lr}
 80006b2:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80006b4:	4b14      	ldr	r3, [pc, #80]	; (8000708 <MX_USART2_UART_Init+0x58>)
 80006b6:	4a15      	ldr	r2, [pc, #84]	; (800070c <MX_USART2_UART_Init+0x5c>)
 80006b8:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80006ba:	4b13      	ldr	r3, [pc, #76]	; (8000708 <MX_USART2_UART_Init+0x58>)
 80006bc:	22e1      	movs	r2, #225	; 0xe1
 80006be:	0252      	lsls	r2, r2, #9
 80006c0:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80006c2:	4b11      	ldr	r3, [pc, #68]	; (8000708 <MX_USART2_UART_Init+0x58>)
 80006c4:	2200      	movs	r2, #0
 80006c6:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80006c8:	4b0f      	ldr	r3, [pc, #60]	; (8000708 <MX_USART2_UART_Init+0x58>)
 80006ca:	2200      	movs	r2, #0
 80006cc:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80006ce:	4b0e      	ldr	r3, [pc, #56]	; (8000708 <MX_USART2_UART_Init+0x58>)
 80006d0:	2200      	movs	r2, #0
 80006d2:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80006d4:	4b0c      	ldr	r3, [pc, #48]	; (8000708 <MX_USART2_UART_Init+0x58>)
 80006d6:	220c      	movs	r2, #12
 80006d8:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80006da:	4b0b      	ldr	r3, [pc, #44]	; (8000708 <MX_USART2_UART_Init+0x58>)
 80006dc:	2200      	movs	r2, #0
 80006de:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80006e0:	4b09      	ldr	r3, [pc, #36]	; (8000708 <MX_USART2_UART_Init+0x58>)
 80006e2:	2200      	movs	r2, #0
 80006e4:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80006e6:	4b08      	ldr	r3, [pc, #32]	; (8000708 <MX_USART2_UART_Init+0x58>)
 80006e8:	2200      	movs	r2, #0
 80006ea:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80006ec:	4b06      	ldr	r3, [pc, #24]	; (8000708 <MX_USART2_UART_Init+0x58>)
 80006ee:	2200      	movs	r2, #0
 80006f0:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80006f2:	4b05      	ldr	r3, [pc, #20]	; (8000708 <MX_USART2_UART_Init+0x58>)
 80006f4:	0018      	movs	r0, r3
 80006f6:	f002 fc49 	bl	8002f8c <HAL_UART_Init>
 80006fa:	1e03      	subs	r3, r0, #0
 80006fc:	d001      	beq.n	8000702 <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 80006fe:	f000 f869 	bl	80007d4 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000702:	46c0      	nop			; (mov r8, r8)
 8000704:	46bd      	mov	sp, r7
 8000706:	bd80      	pop	{r7, pc}
 8000708:	20000138 	.word	0x20000138
 800070c:	40004400 	.word	0x40004400

08000710 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000710:	b590      	push	{r4, r7, lr}
 8000712:	b089      	sub	sp, #36	; 0x24
 8000714:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000716:	240c      	movs	r4, #12
 8000718:	193b      	adds	r3, r7, r4
 800071a:	0018      	movs	r0, r3
 800071c:	2314      	movs	r3, #20
 800071e:	001a      	movs	r2, r3
 8000720:	2100      	movs	r1, #0
 8000722:	f003 ffa5 	bl	8004670 <memset>
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000726:	4b29      	ldr	r3, [pc, #164]	; (80007cc <MX_GPIO_Init+0xbc>)
 8000728:	695a      	ldr	r2, [r3, #20]
 800072a:	4b28      	ldr	r3, [pc, #160]	; (80007cc <MX_GPIO_Init+0xbc>)
 800072c:	2180      	movs	r1, #128	; 0x80
 800072e:	0289      	lsls	r1, r1, #10
 8000730:	430a      	orrs	r2, r1
 8000732:	615a      	str	r2, [r3, #20]
 8000734:	4b25      	ldr	r3, [pc, #148]	; (80007cc <MX_GPIO_Init+0xbc>)
 8000736:	695a      	ldr	r2, [r3, #20]
 8000738:	2380      	movs	r3, #128	; 0x80
 800073a:	029b      	lsls	r3, r3, #10
 800073c:	4013      	ands	r3, r2
 800073e:	60bb      	str	r3, [r7, #8]
 8000740:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000742:	4b22      	ldr	r3, [pc, #136]	; (80007cc <MX_GPIO_Init+0xbc>)
 8000744:	695a      	ldr	r2, [r3, #20]
 8000746:	4b21      	ldr	r3, [pc, #132]	; (80007cc <MX_GPIO_Init+0xbc>)
 8000748:	2180      	movs	r1, #128	; 0x80
 800074a:	02c9      	lsls	r1, r1, #11
 800074c:	430a      	orrs	r2, r1
 800074e:	615a      	str	r2, [r3, #20]
 8000750:	4b1e      	ldr	r3, [pc, #120]	; (80007cc <MX_GPIO_Init+0xbc>)
 8000752:	695a      	ldr	r2, [r3, #20]
 8000754:	2380      	movs	r3, #128	; 0x80
 8000756:	02db      	lsls	r3, r3, #11
 8000758:	4013      	ands	r3, r2
 800075a:	607b      	str	r3, [r7, #4]
 800075c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_1, GPIO_PIN_SET);
 800075e:	4b1c      	ldr	r3, [pc, #112]	; (80007d0 <MX_GPIO_Init+0xc0>)
 8000760:	2201      	movs	r2, #1
 8000762:	2102      	movs	r1, #2
 8000764:	0018      	movs	r0, r3
 8000766:	f000 fcb9 	bl	80010dc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_10|GPIO_PIN_15, GPIO_PIN_RESET);
 800076a:	2384      	movs	r3, #132	; 0x84
 800076c:	021b      	lsls	r3, r3, #8
 800076e:	4818      	ldr	r0, [pc, #96]	; (80007d0 <MX_GPIO_Init+0xc0>)
 8000770:	2200      	movs	r2, #0
 8000772:	0019      	movs	r1, r3
 8000774:	f000 fcb2 	bl	80010dc <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PB1 */
  GPIO_InitStruct.Pin = GPIO_PIN_1;
 8000778:	193b      	adds	r3, r7, r4
 800077a:	2202      	movs	r2, #2
 800077c:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800077e:	193b      	adds	r3, r7, r4
 8000780:	2201      	movs	r2, #1
 8000782:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000784:	193b      	adds	r3, r7, r4
 8000786:	2200      	movs	r2, #0
 8000788:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800078a:	193b      	adds	r3, r7, r4
 800078c:	2203      	movs	r2, #3
 800078e:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000790:	193b      	adds	r3, r7, r4
 8000792:	4a0f      	ldr	r2, [pc, #60]	; (80007d0 <MX_GPIO_Init+0xc0>)
 8000794:	0019      	movs	r1, r3
 8000796:	0010      	movs	r0, r2
 8000798:	f000 fb28 	bl	8000dec <HAL_GPIO_Init>

  /*Configure GPIO pins : PB10 PB15 */
  GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_15;
 800079c:	0021      	movs	r1, r4
 800079e:	187b      	adds	r3, r7, r1
 80007a0:	2284      	movs	r2, #132	; 0x84
 80007a2:	0212      	lsls	r2, r2, #8
 80007a4:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80007a6:	187b      	adds	r3, r7, r1
 80007a8:	2201      	movs	r2, #1
 80007aa:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007ac:	187b      	adds	r3, r7, r1
 80007ae:	2200      	movs	r2, #0
 80007b0:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80007b2:	187b      	adds	r3, r7, r1
 80007b4:	2200      	movs	r2, #0
 80007b6:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80007b8:	187b      	adds	r3, r7, r1
 80007ba:	4a05      	ldr	r2, [pc, #20]	; (80007d0 <MX_GPIO_Init+0xc0>)
 80007bc:	0019      	movs	r1, r3
 80007be:	0010      	movs	r0, r2
 80007c0:	f000 fb14 	bl	8000dec <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80007c4:	46c0      	nop			; (mov r8, r8)
 80007c6:	46bd      	mov	sp, r7
 80007c8:	b009      	add	sp, #36	; 0x24
 80007ca:	bd90      	pop	{r4, r7, pc}
 80007cc:	40021000 	.word	0x40021000
 80007d0:	48000400 	.word	0x48000400

080007d4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80007d4:	b580      	push	{r7, lr}
 80007d6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80007d8:	b672      	cpsid	i
}
 80007da:	46c0      	nop			; (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80007dc:	e7fe      	b.n	80007dc <Error_Handler+0x8>
	...

080007e0 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80007e0:	b580      	push	{r7, lr}
 80007e2:	b082      	sub	sp, #8
 80007e4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80007e6:	4b0f      	ldr	r3, [pc, #60]	; (8000824 <HAL_MspInit+0x44>)
 80007e8:	699a      	ldr	r2, [r3, #24]
 80007ea:	4b0e      	ldr	r3, [pc, #56]	; (8000824 <HAL_MspInit+0x44>)
 80007ec:	2101      	movs	r1, #1
 80007ee:	430a      	orrs	r2, r1
 80007f0:	619a      	str	r2, [r3, #24]
 80007f2:	4b0c      	ldr	r3, [pc, #48]	; (8000824 <HAL_MspInit+0x44>)
 80007f4:	699b      	ldr	r3, [r3, #24]
 80007f6:	2201      	movs	r2, #1
 80007f8:	4013      	ands	r3, r2
 80007fa:	607b      	str	r3, [r7, #4]
 80007fc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80007fe:	4b09      	ldr	r3, [pc, #36]	; (8000824 <HAL_MspInit+0x44>)
 8000800:	69da      	ldr	r2, [r3, #28]
 8000802:	4b08      	ldr	r3, [pc, #32]	; (8000824 <HAL_MspInit+0x44>)
 8000804:	2180      	movs	r1, #128	; 0x80
 8000806:	0549      	lsls	r1, r1, #21
 8000808:	430a      	orrs	r2, r1
 800080a:	61da      	str	r2, [r3, #28]
 800080c:	4b05      	ldr	r3, [pc, #20]	; (8000824 <HAL_MspInit+0x44>)
 800080e:	69da      	ldr	r2, [r3, #28]
 8000810:	2380      	movs	r3, #128	; 0x80
 8000812:	055b      	lsls	r3, r3, #21
 8000814:	4013      	ands	r3, r2
 8000816:	603b      	str	r3, [r7, #0]
 8000818:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800081a:	46c0      	nop			; (mov r8, r8)
 800081c:	46bd      	mov	sp, r7
 800081e:	b002      	add	sp, #8
 8000820:	bd80      	pop	{r7, pc}
 8000822:	46c0      	nop			; (mov r8, r8)
 8000824:	40021000 	.word	0x40021000

08000828 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000828:	b580      	push	{r7, lr}
 800082a:	b084      	sub	sp, #16
 800082c:	af00      	add	r7, sp, #0
 800082e:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8000830:	687b      	ldr	r3, [r7, #4]
 8000832:	681b      	ldr	r3, [r3, #0]
 8000834:	4a0e      	ldr	r2, [pc, #56]	; (8000870 <HAL_TIM_Base_MspInit+0x48>)
 8000836:	4293      	cmp	r3, r2
 8000838:	d115      	bne.n	8000866 <HAL_TIM_Base_MspInit+0x3e>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 800083a:	4b0e      	ldr	r3, [pc, #56]	; (8000874 <HAL_TIM_Base_MspInit+0x4c>)
 800083c:	699a      	ldr	r2, [r3, #24]
 800083e:	4b0d      	ldr	r3, [pc, #52]	; (8000874 <HAL_TIM_Base_MspInit+0x4c>)
 8000840:	2180      	movs	r1, #128	; 0x80
 8000842:	0109      	lsls	r1, r1, #4
 8000844:	430a      	orrs	r2, r1
 8000846:	619a      	str	r2, [r3, #24]
 8000848:	4b0a      	ldr	r3, [pc, #40]	; (8000874 <HAL_TIM_Base_MspInit+0x4c>)
 800084a:	699a      	ldr	r2, [r3, #24]
 800084c:	2380      	movs	r3, #128	; 0x80
 800084e:	011b      	lsls	r3, r3, #4
 8000850:	4013      	ands	r3, r2
 8000852:	60fb      	str	r3, [r7, #12]
 8000854:	68fb      	ldr	r3, [r7, #12]
    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_CC_IRQn, 0, 0);
 8000856:	2200      	movs	r2, #0
 8000858:	2100      	movs	r1, #0
 800085a:	200e      	movs	r0, #14
 800085c:	f000 fa16 	bl	8000c8c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_CC_IRQn);
 8000860:	200e      	movs	r0, #14
 8000862:	f000 fa28 	bl	8000cb6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 8000866:	46c0      	nop			; (mov r8, r8)
 8000868:	46bd      	mov	sp, r7
 800086a:	b004      	add	sp, #16
 800086c:	bd80      	pop	{r7, pc}
 800086e:	46c0      	nop			; (mov r8, r8)
 8000870:	40012c00 	.word	0x40012c00
 8000874:	40021000 	.word	0x40021000

08000878 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8000878:	b590      	push	{r4, r7, lr}
 800087a:	b089      	sub	sp, #36	; 0x24
 800087c:	af00      	add	r7, sp, #0
 800087e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000880:	240c      	movs	r4, #12
 8000882:	193b      	adds	r3, r7, r4
 8000884:	0018      	movs	r0, r3
 8000886:	2314      	movs	r3, #20
 8000888:	001a      	movs	r2, r3
 800088a:	2100      	movs	r1, #0
 800088c:	f003 fef0 	bl	8004670 <memset>
  if(htim->Instance==TIM1)
 8000890:	687b      	ldr	r3, [r7, #4]
 8000892:	681b      	ldr	r3, [r3, #0]
 8000894:	4a16      	ldr	r2, [pc, #88]	; (80008f0 <HAL_TIM_MspPostInit+0x78>)
 8000896:	4293      	cmp	r3, r2
 8000898:	d125      	bne.n	80008e6 <HAL_TIM_MspPostInit+0x6e>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800089a:	4b16      	ldr	r3, [pc, #88]	; (80008f4 <HAL_TIM_MspPostInit+0x7c>)
 800089c:	695a      	ldr	r2, [r3, #20]
 800089e:	4b15      	ldr	r3, [pc, #84]	; (80008f4 <HAL_TIM_MspPostInit+0x7c>)
 80008a0:	2180      	movs	r1, #128	; 0x80
 80008a2:	0289      	lsls	r1, r1, #10
 80008a4:	430a      	orrs	r2, r1
 80008a6:	615a      	str	r2, [r3, #20]
 80008a8:	4b12      	ldr	r3, [pc, #72]	; (80008f4 <HAL_TIM_MspPostInit+0x7c>)
 80008aa:	695a      	ldr	r2, [r3, #20]
 80008ac:	2380      	movs	r3, #128	; 0x80
 80008ae:	029b      	lsls	r3, r3, #10
 80008b0:	4013      	ands	r3, r2
 80008b2:	60bb      	str	r3, [r7, #8]
 80008b4:	68bb      	ldr	r3, [r7, #8]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 80008b6:	193b      	adds	r3, r7, r4
 80008b8:	2280      	movs	r2, #128	; 0x80
 80008ba:	0052      	lsls	r2, r2, #1
 80008bc:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80008be:	0021      	movs	r1, r4
 80008c0:	187b      	adds	r3, r7, r1
 80008c2:	2202      	movs	r2, #2
 80008c4:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008c6:	187b      	adds	r3, r7, r1
 80008c8:	2200      	movs	r2, #0
 80008ca:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008cc:	187b      	adds	r3, r7, r1
 80008ce:	2200      	movs	r2, #0
 80008d0:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM1;
 80008d2:	187b      	adds	r3, r7, r1
 80008d4:	2202      	movs	r2, #2
 80008d6:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80008d8:	187a      	adds	r2, r7, r1
 80008da:	2390      	movs	r3, #144	; 0x90
 80008dc:	05db      	lsls	r3, r3, #23
 80008de:	0011      	movs	r1, r2
 80008e0:	0018      	movs	r0, r3
 80008e2:	f000 fa83 	bl	8000dec <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 80008e6:	46c0      	nop			; (mov r8, r8)
 80008e8:	46bd      	mov	sp, r7
 80008ea:	b009      	add	sp, #36	; 0x24
 80008ec:	bd90      	pop	{r4, r7, pc}
 80008ee:	46c0      	nop			; (mov r8, r8)
 80008f0:	40012c00 	.word	0x40012c00
 80008f4:	40021000 	.word	0x40021000

080008f8 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80008f8:	b590      	push	{r4, r7, lr}
 80008fa:	b08b      	sub	sp, #44	; 0x2c
 80008fc:	af00      	add	r7, sp, #0
 80008fe:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000900:	2414      	movs	r4, #20
 8000902:	193b      	adds	r3, r7, r4
 8000904:	0018      	movs	r0, r3
 8000906:	2314      	movs	r3, #20
 8000908:	001a      	movs	r2, r3
 800090a:	2100      	movs	r1, #0
 800090c:	f003 feb0 	bl	8004670 <memset>
  if(huart->Instance==USART2)
 8000910:	687b      	ldr	r3, [r7, #4]
 8000912:	681b      	ldr	r3, [r3, #0]
 8000914:	4a20      	ldr	r2, [pc, #128]	; (8000998 <HAL_UART_MspInit+0xa0>)
 8000916:	4293      	cmp	r3, r2
 8000918:	d13a      	bne.n	8000990 <HAL_UART_MspInit+0x98>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 800091a:	4b20      	ldr	r3, [pc, #128]	; (800099c <HAL_UART_MspInit+0xa4>)
 800091c:	69da      	ldr	r2, [r3, #28]
 800091e:	4b1f      	ldr	r3, [pc, #124]	; (800099c <HAL_UART_MspInit+0xa4>)
 8000920:	2180      	movs	r1, #128	; 0x80
 8000922:	0289      	lsls	r1, r1, #10
 8000924:	430a      	orrs	r2, r1
 8000926:	61da      	str	r2, [r3, #28]
 8000928:	4b1c      	ldr	r3, [pc, #112]	; (800099c <HAL_UART_MspInit+0xa4>)
 800092a:	69da      	ldr	r2, [r3, #28]
 800092c:	2380      	movs	r3, #128	; 0x80
 800092e:	029b      	lsls	r3, r3, #10
 8000930:	4013      	ands	r3, r2
 8000932:	613b      	str	r3, [r7, #16]
 8000934:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000936:	4b19      	ldr	r3, [pc, #100]	; (800099c <HAL_UART_MspInit+0xa4>)
 8000938:	695a      	ldr	r2, [r3, #20]
 800093a:	4b18      	ldr	r3, [pc, #96]	; (800099c <HAL_UART_MspInit+0xa4>)
 800093c:	2180      	movs	r1, #128	; 0x80
 800093e:	0289      	lsls	r1, r1, #10
 8000940:	430a      	orrs	r2, r1
 8000942:	615a      	str	r2, [r3, #20]
 8000944:	4b15      	ldr	r3, [pc, #84]	; (800099c <HAL_UART_MspInit+0xa4>)
 8000946:	695a      	ldr	r2, [r3, #20]
 8000948:	2380      	movs	r3, #128	; 0x80
 800094a:	029b      	lsls	r3, r3, #10
 800094c:	4013      	ands	r3, r2
 800094e:	60fb      	str	r3, [r7, #12]
 8000950:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8000952:	0021      	movs	r1, r4
 8000954:	187b      	adds	r3, r7, r1
 8000956:	220c      	movs	r2, #12
 8000958:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800095a:	187b      	adds	r3, r7, r1
 800095c:	2202      	movs	r2, #2
 800095e:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000960:	187b      	adds	r3, r7, r1
 8000962:	2200      	movs	r2, #0
 8000964:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000966:	187b      	adds	r3, r7, r1
 8000968:	2203      	movs	r2, #3
 800096a:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_USART2;
 800096c:	187b      	adds	r3, r7, r1
 800096e:	2201      	movs	r2, #1
 8000970:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000972:	187a      	adds	r2, r7, r1
 8000974:	2390      	movs	r3, #144	; 0x90
 8000976:	05db      	lsls	r3, r3, #23
 8000978:	0011      	movs	r1, r2
 800097a:	0018      	movs	r0, r3
 800097c:	f000 fa36 	bl	8000dec <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8000980:	2200      	movs	r2, #0
 8000982:	2100      	movs	r1, #0
 8000984:	201c      	movs	r0, #28
 8000986:	f000 f981 	bl	8000c8c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 800098a:	201c      	movs	r0, #28
 800098c:	f000 f993 	bl	8000cb6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000990:	46c0      	nop			; (mov r8, r8)
 8000992:	46bd      	mov	sp, r7
 8000994:	b00b      	add	sp, #44	; 0x2c
 8000996:	bd90      	pop	{r4, r7, pc}
 8000998:	40004400 	.word	0x40004400
 800099c:	40021000 	.word	0x40021000

080009a0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80009a0:	b580      	push	{r7, lr}
 80009a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80009a4:	e7fe      	b.n	80009a4 <NMI_Handler+0x4>

080009a6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80009a6:	b580      	push	{r7, lr}
 80009a8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80009aa:	e7fe      	b.n	80009aa <HardFault_Handler+0x4>

080009ac <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80009ac:	b580      	push	{r7, lr}
 80009ae:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 80009b0:	46c0      	nop			; (mov r8, r8)
 80009b2:	46bd      	mov	sp, r7
 80009b4:	bd80      	pop	{r7, pc}

080009b6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80009b6:	b580      	push	{r7, lr}
 80009b8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80009ba:	46c0      	nop			; (mov r8, r8)
 80009bc:	46bd      	mov	sp, r7
 80009be:	bd80      	pop	{r7, pc}

080009c0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80009c0:	b580      	push	{r7, lr}
 80009c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80009c4:	f000 f89a 	bl	8000afc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80009c8:	46c0      	nop			; (mov r8, r8)
 80009ca:	46bd      	mov	sp, r7
 80009cc:	bd80      	pop	{r7, pc}
	...

080009d0 <TIM1_CC_IRQHandler>:
/**
  * @brief This function handles TIM1 capture compare interrupt.
  */

void TIM1_CC_IRQHandler(void)
{
 80009d0:	b580      	push	{r7, lr}
 80009d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_CC_IRQn 0 */

	disp_setNumber(g_num);
 80009d4:	4b05      	ldr	r3, [pc, #20]	; (80009ec <TIM1_CC_IRQHandler+0x1c>)
 80009d6:	781b      	ldrb	r3, [r3, #0]
 80009d8:	0018      	movs	r0, r3
 80009da:	f7ff fc29 	bl	8000230 <disp_setNumber>

  /* USER CODE END TIM1_CC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 80009de:	4b04      	ldr	r3, [pc, #16]	; (80009f0 <TIM1_CC_IRQHandler+0x20>)
 80009e0:	0018      	movs	r0, r3
 80009e2:	f001 fbf5 	bl	80021d0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_CC_IRQn 1 */

  /* USER CODE END TIM1_CC_IRQn 1 */
}
 80009e6:	46c0      	nop			; (mov r8, r8)
 80009e8:	46bd      	mov	sp, r7
 80009ea:	bd80      	pop	{r7, pc}
 80009ec:	200001d4 	.word	0x200001d4
 80009f0:	200000f0 	.word	0x200000f0

080009f4 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt / USART2 wake-up interrupt through EXTI line 26.
  */
void USART2_IRQHandler(void)
{
 80009f4:	b580      	push	{r7, lr}
 80009f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 80009f8:	4b03      	ldr	r3, [pc, #12]	; (8000a08 <USART2_IRQHandler+0x14>)
 80009fa:	0018      	movs	r0, r3
 80009fc:	f002 fbe2 	bl	80031c4 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8000a00:	46c0      	nop			; (mov r8, r8)
 8000a02:	46bd      	mov	sp, r7
 8000a04:	bd80      	pop	{r7, pc}
 8000a06:	46c0      	nop			; (mov r8, r8)
 8000a08:	20000138 	.word	0x20000138

08000a0c <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000a0c:	b580      	push	{r7, lr}
 8000a0e:	af00      	add	r7, sp, #0
                         before branch to main program. This call is made inside
                         the "startup_stm32f0xx.s" file.
                         User can setups the default system clock (System clock source, PLL Multiplier
                         and Divider factors, AHB/APBx prescalers and Flash settings).
   */
}
 8000a10:	46c0      	nop			; (mov r8, r8)
 8000a12:	46bd      	mov	sp, r7
 8000a14:	bd80      	pop	{r7, pc}
	...

08000a18 <Reset_Handler>:
 8000a18:	480d      	ldr	r0, [pc, #52]	; (8000a50 <LoopForever+0x2>)
 8000a1a:	4685      	mov	sp, r0
 8000a1c:	f7ff fff6 	bl	8000a0c <SystemInit>
 8000a20:	480c      	ldr	r0, [pc, #48]	; (8000a54 <LoopForever+0x6>)
 8000a22:	490d      	ldr	r1, [pc, #52]	; (8000a58 <LoopForever+0xa>)
 8000a24:	4a0d      	ldr	r2, [pc, #52]	; (8000a5c <LoopForever+0xe>)
 8000a26:	2300      	movs	r3, #0
 8000a28:	e002      	b.n	8000a30 <LoopCopyDataInit>

08000a2a <CopyDataInit>:
 8000a2a:	58d4      	ldr	r4, [r2, r3]
 8000a2c:	50c4      	str	r4, [r0, r3]
 8000a2e:	3304      	adds	r3, #4

08000a30 <LoopCopyDataInit>:
 8000a30:	18c4      	adds	r4, r0, r3
 8000a32:	428c      	cmp	r4, r1
 8000a34:	d3f9      	bcc.n	8000a2a <CopyDataInit>
 8000a36:	4a0a      	ldr	r2, [pc, #40]	; (8000a60 <LoopForever+0x12>)
 8000a38:	4c0a      	ldr	r4, [pc, #40]	; (8000a64 <LoopForever+0x16>)
 8000a3a:	2300      	movs	r3, #0
 8000a3c:	e001      	b.n	8000a42 <LoopFillZerobss>

08000a3e <FillZerobss>:
 8000a3e:	6013      	str	r3, [r2, #0]
 8000a40:	3204      	adds	r2, #4

08000a42 <LoopFillZerobss>:
 8000a42:	42a2      	cmp	r2, r4
 8000a44:	d3fb      	bcc.n	8000a3e <FillZerobss>
 8000a46:	f003 fdef 	bl	8004628 <__libc_init_array>
 8000a4a:	f7ff fcb9 	bl	80003c0 <main>

08000a4e <LoopForever>:
 8000a4e:	e7fe      	b.n	8000a4e <LoopForever>
 8000a50:	20004000 	.word	0x20004000
 8000a54:	20000000 	.word	0x20000000
 8000a58:	200000cc 	.word	0x200000cc
 8000a5c:	080046d8 	.word	0x080046d8
 8000a60:	200000cc 	.word	0x200000cc
 8000a64:	200001dc 	.word	0x200001dc

08000a68 <ADC1_COMP_IRQHandler>:
 8000a68:	e7fe      	b.n	8000a68 <ADC1_COMP_IRQHandler>
	...

08000a6c <HAL_Init>:
  *       In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000a6c:	b580      	push	{r7, lr}
 8000a6e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */ 
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000a70:	4b07      	ldr	r3, [pc, #28]	; (8000a90 <HAL_Init+0x24>)
 8000a72:	681a      	ldr	r2, [r3, #0]
 8000a74:	4b06      	ldr	r3, [pc, #24]	; (8000a90 <HAL_Init+0x24>)
 8000a76:	2110      	movs	r1, #16
 8000a78:	430a      	orrs	r2, r1
 8000a7a:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */

  HAL_InitTick(TICK_INT_PRIORITY);
 8000a7c:	2003      	movs	r0, #3
 8000a7e:	f000 f809 	bl	8000a94 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000a82:	f7ff fead 	bl	80007e0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000a86:	2300      	movs	r3, #0
}
 8000a88:	0018      	movs	r0, r3
 8000a8a:	46bd      	mov	sp, r7
 8000a8c:	bd80      	pop	{r7, pc}
 8000a8e:	46c0      	nop			; (mov r8, r8)
 8000a90:	40022000 	.word	0x40022000

08000a94 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000a94:	b590      	push	{r4, r7, lr}
 8000a96:	b083      	sub	sp, #12
 8000a98:	af00      	add	r7, sp, #0
 8000a9a:	6078      	str	r0, [r7, #4]
  /*Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000a9c:	4b14      	ldr	r3, [pc, #80]	; (8000af0 <HAL_InitTick+0x5c>)
 8000a9e:	681c      	ldr	r4, [r3, #0]
 8000aa0:	4b14      	ldr	r3, [pc, #80]	; (8000af4 <HAL_InitTick+0x60>)
 8000aa2:	781b      	ldrb	r3, [r3, #0]
 8000aa4:	0019      	movs	r1, r3
 8000aa6:	23fa      	movs	r3, #250	; 0xfa
 8000aa8:	0098      	lsls	r0, r3, #2
 8000aaa:	f7ff fb35 	bl	8000118 <__udivsi3>
 8000aae:	0003      	movs	r3, r0
 8000ab0:	0019      	movs	r1, r3
 8000ab2:	0020      	movs	r0, r4
 8000ab4:	f7ff fb30 	bl	8000118 <__udivsi3>
 8000ab8:	0003      	movs	r3, r0
 8000aba:	0018      	movs	r0, r3
 8000abc:	f000 f90b 	bl	8000cd6 <HAL_SYSTICK_Config>
 8000ac0:	1e03      	subs	r3, r0, #0
 8000ac2:	d001      	beq.n	8000ac8 <HAL_InitTick+0x34>
  {
    return HAL_ERROR;
 8000ac4:	2301      	movs	r3, #1
 8000ac6:	e00f      	b.n	8000ae8 <HAL_InitTick+0x54>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000ac8:	687b      	ldr	r3, [r7, #4]
 8000aca:	2b03      	cmp	r3, #3
 8000acc:	d80b      	bhi.n	8000ae6 <HAL_InitTick+0x52>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000ace:	6879      	ldr	r1, [r7, #4]
 8000ad0:	2301      	movs	r3, #1
 8000ad2:	425b      	negs	r3, r3
 8000ad4:	2200      	movs	r2, #0
 8000ad6:	0018      	movs	r0, r3
 8000ad8:	f000 f8d8 	bl	8000c8c <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000adc:	4b06      	ldr	r3, [pc, #24]	; (8000af8 <HAL_InitTick+0x64>)
 8000ade:	687a      	ldr	r2, [r7, #4]
 8000ae0:	601a      	str	r2, [r3, #0]
  {
    return HAL_ERROR;
  }

   /* Return function status */
  return HAL_OK;
 8000ae2:	2300      	movs	r3, #0
 8000ae4:	e000      	b.n	8000ae8 <HAL_InitTick+0x54>
    return HAL_ERROR;
 8000ae6:	2301      	movs	r3, #1
}
 8000ae8:	0018      	movs	r0, r3
 8000aea:	46bd      	mov	sp, r7
 8000aec:	b003      	add	sp, #12
 8000aee:	bd90      	pop	{r4, r7, pc}
 8000af0:	200000c0 	.word	0x200000c0
 8000af4:	200000c8 	.word	0x200000c8
 8000af8:	200000c4 	.word	0x200000c4

08000afc <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000afc:	b580      	push	{r7, lr}
 8000afe:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000b00:	4b05      	ldr	r3, [pc, #20]	; (8000b18 <HAL_IncTick+0x1c>)
 8000b02:	781b      	ldrb	r3, [r3, #0]
 8000b04:	001a      	movs	r2, r3
 8000b06:	4b05      	ldr	r3, [pc, #20]	; (8000b1c <HAL_IncTick+0x20>)
 8000b08:	681b      	ldr	r3, [r3, #0]
 8000b0a:	18d2      	adds	r2, r2, r3
 8000b0c:	4b03      	ldr	r3, [pc, #12]	; (8000b1c <HAL_IncTick+0x20>)
 8000b0e:	601a      	str	r2, [r3, #0]
}
 8000b10:	46c0      	nop			; (mov r8, r8)
 8000b12:	46bd      	mov	sp, r7
 8000b14:	bd80      	pop	{r7, pc}
 8000b16:	46c0      	nop			; (mov r8, r8)
 8000b18:	200000c8 	.word	0x200000c8
 8000b1c:	200001d8 	.word	0x200001d8

08000b20 <HAL_GetTick>:
  * @note   This function is declared as __weak  to be overwritten  in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000b20:	b580      	push	{r7, lr}
 8000b22:	af00      	add	r7, sp, #0
  return uwTick;
 8000b24:	4b02      	ldr	r3, [pc, #8]	; (8000b30 <HAL_GetTick+0x10>)
 8000b26:	681b      	ldr	r3, [r3, #0]
}
 8000b28:	0018      	movs	r0, r3
 8000b2a:	46bd      	mov	sp, r7
 8000b2c:	bd80      	pop	{r7, pc}
 8000b2e:	46c0      	nop			; (mov r8, r8)
 8000b30:	200001d8 	.word	0x200001d8

08000b34 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000b34:	b580      	push	{r7, lr}
 8000b36:	b082      	sub	sp, #8
 8000b38:	af00      	add	r7, sp, #0
 8000b3a:	0002      	movs	r2, r0
 8000b3c:	1dfb      	adds	r3, r7, #7
 8000b3e:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8000b40:	1dfb      	adds	r3, r7, #7
 8000b42:	781b      	ldrb	r3, [r3, #0]
 8000b44:	2b7f      	cmp	r3, #127	; 0x7f
 8000b46:	d809      	bhi.n	8000b5c <__NVIC_EnableIRQ+0x28>
  {
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000b48:	1dfb      	adds	r3, r7, #7
 8000b4a:	781b      	ldrb	r3, [r3, #0]
 8000b4c:	001a      	movs	r2, r3
 8000b4e:	231f      	movs	r3, #31
 8000b50:	401a      	ands	r2, r3
 8000b52:	4b04      	ldr	r3, [pc, #16]	; (8000b64 <__NVIC_EnableIRQ+0x30>)
 8000b54:	2101      	movs	r1, #1
 8000b56:	4091      	lsls	r1, r2
 8000b58:	000a      	movs	r2, r1
 8000b5a:	601a      	str	r2, [r3, #0]
  }
}
 8000b5c:	46c0      	nop			; (mov r8, r8)
 8000b5e:	46bd      	mov	sp, r7
 8000b60:	b002      	add	sp, #8
 8000b62:	bd80      	pop	{r7, pc}
 8000b64:	e000e100 	.word	0xe000e100

08000b68 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000b68:	b590      	push	{r4, r7, lr}
 8000b6a:	b083      	sub	sp, #12
 8000b6c:	af00      	add	r7, sp, #0
 8000b6e:	0002      	movs	r2, r0
 8000b70:	6039      	str	r1, [r7, #0]
 8000b72:	1dfb      	adds	r3, r7, #7
 8000b74:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8000b76:	1dfb      	adds	r3, r7, #7
 8000b78:	781b      	ldrb	r3, [r3, #0]
 8000b7a:	2b7f      	cmp	r3, #127	; 0x7f
 8000b7c:	d828      	bhi.n	8000bd0 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000b7e:	4a2f      	ldr	r2, [pc, #188]	; (8000c3c <__NVIC_SetPriority+0xd4>)
 8000b80:	1dfb      	adds	r3, r7, #7
 8000b82:	781b      	ldrb	r3, [r3, #0]
 8000b84:	b25b      	sxtb	r3, r3
 8000b86:	089b      	lsrs	r3, r3, #2
 8000b88:	33c0      	adds	r3, #192	; 0xc0
 8000b8a:	009b      	lsls	r3, r3, #2
 8000b8c:	589b      	ldr	r3, [r3, r2]
 8000b8e:	1dfa      	adds	r2, r7, #7
 8000b90:	7812      	ldrb	r2, [r2, #0]
 8000b92:	0011      	movs	r1, r2
 8000b94:	2203      	movs	r2, #3
 8000b96:	400a      	ands	r2, r1
 8000b98:	00d2      	lsls	r2, r2, #3
 8000b9a:	21ff      	movs	r1, #255	; 0xff
 8000b9c:	4091      	lsls	r1, r2
 8000b9e:	000a      	movs	r2, r1
 8000ba0:	43d2      	mvns	r2, r2
 8000ba2:	401a      	ands	r2, r3
 8000ba4:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8000ba6:	683b      	ldr	r3, [r7, #0]
 8000ba8:	019b      	lsls	r3, r3, #6
 8000baa:	22ff      	movs	r2, #255	; 0xff
 8000bac:	401a      	ands	r2, r3
 8000bae:	1dfb      	adds	r3, r7, #7
 8000bb0:	781b      	ldrb	r3, [r3, #0]
 8000bb2:	0018      	movs	r0, r3
 8000bb4:	2303      	movs	r3, #3
 8000bb6:	4003      	ands	r3, r0
 8000bb8:	00db      	lsls	r3, r3, #3
 8000bba:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000bbc:	481f      	ldr	r0, [pc, #124]	; (8000c3c <__NVIC_SetPriority+0xd4>)
 8000bbe:	1dfb      	adds	r3, r7, #7
 8000bc0:	781b      	ldrb	r3, [r3, #0]
 8000bc2:	b25b      	sxtb	r3, r3
 8000bc4:	089b      	lsrs	r3, r3, #2
 8000bc6:	430a      	orrs	r2, r1
 8000bc8:	33c0      	adds	r3, #192	; 0xc0
 8000bca:	009b      	lsls	r3, r3, #2
 8000bcc:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 8000bce:	e031      	b.n	8000c34 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000bd0:	4a1b      	ldr	r2, [pc, #108]	; (8000c40 <__NVIC_SetPriority+0xd8>)
 8000bd2:	1dfb      	adds	r3, r7, #7
 8000bd4:	781b      	ldrb	r3, [r3, #0]
 8000bd6:	0019      	movs	r1, r3
 8000bd8:	230f      	movs	r3, #15
 8000bda:	400b      	ands	r3, r1
 8000bdc:	3b08      	subs	r3, #8
 8000bde:	089b      	lsrs	r3, r3, #2
 8000be0:	3306      	adds	r3, #6
 8000be2:	009b      	lsls	r3, r3, #2
 8000be4:	18d3      	adds	r3, r2, r3
 8000be6:	3304      	adds	r3, #4
 8000be8:	681b      	ldr	r3, [r3, #0]
 8000bea:	1dfa      	adds	r2, r7, #7
 8000bec:	7812      	ldrb	r2, [r2, #0]
 8000bee:	0011      	movs	r1, r2
 8000bf0:	2203      	movs	r2, #3
 8000bf2:	400a      	ands	r2, r1
 8000bf4:	00d2      	lsls	r2, r2, #3
 8000bf6:	21ff      	movs	r1, #255	; 0xff
 8000bf8:	4091      	lsls	r1, r2
 8000bfa:	000a      	movs	r2, r1
 8000bfc:	43d2      	mvns	r2, r2
 8000bfe:	401a      	ands	r2, r3
 8000c00:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8000c02:	683b      	ldr	r3, [r7, #0]
 8000c04:	019b      	lsls	r3, r3, #6
 8000c06:	22ff      	movs	r2, #255	; 0xff
 8000c08:	401a      	ands	r2, r3
 8000c0a:	1dfb      	adds	r3, r7, #7
 8000c0c:	781b      	ldrb	r3, [r3, #0]
 8000c0e:	0018      	movs	r0, r3
 8000c10:	2303      	movs	r3, #3
 8000c12:	4003      	ands	r3, r0
 8000c14:	00db      	lsls	r3, r3, #3
 8000c16:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000c18:	4809      	ldr	r0, [pc, #36]	; (8000c40 <__NVIC_SetPriority+0xd8>)
 8000c1a:	1dfb      	adds	r3, r7, #7
 8000c1c:	781b      	ldrb	r3, [r3, #0]
 8000c1e:	001c      	movs	r4, r3
 8000c20:	230f      	movs	r3, #15
 8000c22:	4023      	ands	r3, r4
 8000c24:	3b08      	subs	r3, #8
 8000c26:	089b      	lsrs	r3, r3, #2
 8000c28:	430a      	orrs	r2, r1
 8000c2a:	3306      	adds	r3, #6
 8000c2c:	009b      	lsls	r3, r3, #2
 8000c2e:	18c3      	adds	r3, r0, r3
 8000c30:	3304      	adds	r3, #4
 8000c32:	601a      	str	r2, [r3, #0]
}
 8000c34:	46c0      	nop			; (mov r8, r8)
 8000c36:	46bd      	mov	sp, r7
 8000c38:	b003      	add	sp, #12
 8000c3a:	bd90      	pop	{r4, r7, pc}
 8000c3c:	e000e100 	.word	0xe000e100
 8000c40:	e000ed00 	.word	0xe000ed00

08000c44 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000c44:	b580      	push	{r7, lr}
 8000c46:	b082      	sub	sp, #8
 8000c48:	af00      	add	r7, sp, #0
 8000c4a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000c4c:	687b      	ldr	r3, [r7, #4]
 8000c4e:	1e5a      	subs	r2, r3, #1
 8000c50:	2380      	movs	r3, #128	; 0x80
 8000c52:	045b      	lsls	r3, r3, #17
 8000c54:	429a      	cmp	r2, r3
 8000c56:	d301      	bcc.n	8000c5c <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000c58:	2301      	movs	r3, #1
 8000c5a:	e010      	b.n	8000c7e <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000c5c:	4b0a      	ldr	r3, [pc, #40]	; (8000c88 <SysTick_Config+0x44>)
 8000c5e:	687a      	ldr	r2, [r7, #4]
 8000c60:	3a01      	subs	r2, #1
 8000c62:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000c64:	2301      	movs	r3, #1
 8000c66:	425b      	negs	r3, r3
 8000c68:	2103      	movs	r1, #3
 8000c6a:	0018      	movs	r0, r3
 8000c6c:	f7ff ff7c 	bl	8000b68 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000c70:	4b05      	ldr	r3, [pc, #20]	; (8000c88 <SysTick_Config+0x44>)
 8000c72:	2200      	movs	r2, #0
 8000c74:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000c76:	4b04      	ldr	r3, [pc, #16]	; (8000c88 <SysTick_Config+0x44>)
 8000c78:	2207      	movs	r2, #7
 8000c7a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000c7c:	2300      	movs	r3, #0
}
 8000c7e:	0018      	movs	r0, r3
 8000c80:	46bd      	mov	sp, r7
 8000c82:	b002      	add	sp, #8
 8000c84:	bd80      	pop	{r7, pc}
 8000c86:	46c0      	nop			; (mov r8, r8)
 8000c88:	e000e010 	.word	0xe000e010

08000c8c <HAL_NVIC_SetPriority>:
  *         with stm32f0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0 based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000c8c:	b580      	push	{r7, lr}
 8000c8e:	b084      	sub	sp, #16
 8000c90:	af00      	add	r7, sp, #0
 8000c92:	60b9      	str	r1, [r7, #8]
 8000c94:	607a      	str	r2, [r7, #4]
 8000c96:	210f      	movs	r1, #15
 8000c98:	187b      	adds	r3, r7, r1
 8000c9a:	1c02      	adds	r2, r0, #0
 8000c9c:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 8000c9e:	68ba      	ldr	r2, [r7, #8]
 8000ca0:	187b      	adds	r3, r7, r1
 8000ca2:	781b      	ldrb	r3, [r3, #0]
 8000ca4:	b25b      	sxtb	r3, r3
 8000ca6:	0011      	movs	r1, r2
 8000ca8:	0018      	movs	r0, r3
 8000caa:	f7ff ff5d 	bl	8000b68 <__NVIC_SetPriority>
}
 8000cae:	46c0      	nop			; (mov r8, r8)
 8000cb0:	46bd      	mov	sp, r7
 8000cb2:	b004      	add	sp, #16
 8000cb4:	bd80      	pop	{r7, pc}

08000cb6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f0xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000cb6:	b580      	push	{r7, lr}
 8000cb8:	b082      	sub	sp, #8
 8000cba:	af00      	add	r7, sp, #0
 8000cbc:	0002      	movs	r2, r0
 8000cbe:	1dfb      	adds	r3, r7, #7
 8000cc0:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000cc2:	1dfb      	adds	r3, r7, #7
 8000cc4:	781b      	ldrb	r3, [r3, #0]
 8000cc6:	b25b      	sxtb	r3, r3
 8000cc8:	0018      	movs	r0, r3
 8000cca:	f7ff ff33 	bl	8000b34 <__NVIC_EnableIRQ>
}
 8000cce:	46c0      	nop			; (mov r8, r8)
 8000cd0:	46bd      	mov	sp, r7
 8000cd2:	b002      	add	sp, #8
 8000cd4:	bd80      	pop	{r7, pc}

08000cd6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000cd6:	b580      	push	{r7, lr}
 8000cd8:	b082      	sub	sp, #8
 8000cda:	af00      	add	r7, sp, #0
 8000cdc:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000cde:	687b      	ldr	r3, [r7, #4]
 8000ce0:	0018      	movs	r0, r3
 8000ce2:	f7ff ffaf 	bl	8000c44 <SysTick_Config>
 8000ce6:	0003      	movs	r3, r0
}
 8000ce8:	0018      	movs	r0, r3
 8000cea:	46bd      	mov	sp, r7
 8000cec:	b002      	add	sp, #8
 8000cee:	bd80      	pop	{r7, pc}

08000cf0 <HAL_DMA_Abort>:
  * @param  hdma  pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8000cf0:	b580      	push	{r7, lr}
 8000cf2:	b082      	sub	sp, #8
 8000cf4:	af00      	add	r7, sp, #0
 8000cf6:	6078      	str	r0, [r7, #4]
  if (hdma->State != HAL_DMA_STATE_BUSY)
 8000cf8:	687b      	ldr	r3, [r7, #4]
 8000cfa:	2221      	movs	r2, #33	; 0x21
 8000cfc:	5c9b      	ldrb	r3, [r3, r2]
 8000cfe:	b2db      	uxtb	r3, r3
 8000d00:	2b02      	cmp	r3, #2
 8000d02:	d008      	beq.n	8000d16 <HAL_DMA_Abort+0x26>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000d04:	687b      	ldr	r3, [r7, #4]
 8000d06:	2204      	movs	r2, #4
 8000d08:	639a      	str	r2, [r3, #56]	; 0x38

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000d0a:	687b      	ldr	r3, [r7, #4]
 8000d0c:	2220      	movs	r2, #32
 8000d0e:	2100      	movs	r1, #0
 8000d10:	5499      	strb	r1, [r3, r2]

    return HAL_ERROR;
 8000d12:	2301      	movs	r3, #1
 8000d14:	e020      	b.n	8000d58 <HAL_DMA_Abort+0x68>
  }
  else
  {
    /* Disable DMA IT */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8000d16:	687b      	ldr	r3, [r7, #4]
 8000d18:	681b      	ldr	r3, [r3, #0]
 8000d1a:	681a      	ldr	r2, [r3, #0]
 8000d1c:	687b      	ldr	r3, [r7, #4]
 8000d1e:	681b      	ldr	r3, [r3, #0]
 8000d20:	210e      	movs	r1, #14
 8000d22:	438a      	bics	r2, r1
 8000d24:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 8000d26:	687b      	ldr	r3, [r7, #4]
 8000d28:	681b      	ldr	r3, [r3, #0]
 8000d2a:	681a      	ldr	r2, [r3, #0]
 8000d2c:	687b      	ldr	r3, [r7, #4]
 8000d2e:	681b      	ldr	r3, [r3, #0]
 8000d30:	2101      	movs	r1, #1
 8000d32:	438a      	bics	r2, r1
 8000d34:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_FLAG_GL1 << hdma->ChannelIndex);
 8000d36:	687b      	ldr	r3, [r7, #4]
 8000d38:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000d3a:	687b      	ldr	r3, [r7, #4]
 8000d3c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000d3e:	2101      	movs	r1, #1
 8000d40:	4091      	lsls	r1, r2
 8000d42:	000a      	movs	r2, r1
 8000d44:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8000d46:	687b      	ldr	r3, [r7, #4]
 8000d48:	2221      	movs	r2, #33	; 0x21
 8000d4a:	2101      	movs	r1, #1
 8000d4c:	5499      	strb	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);
 8000d4e:	687b      	ldr	r3, [r7, #4]
 8000d50:	2220      	movs	r2, #32
 8000d52:	2100      	movs	r1, #0
 8000d54:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8000d56:	2300      	movs	r3, #0
}
 8000d58:	0018      	movs	r0, r3
 8000d5a:	46bd      	mov	sp, r7
 8000d5c:	b002      	add	sp, #8
 8000d5e:	bd80      	pop	{r7, pc}

08000d60 <HAL_DMA_Abort_IT>:
  * @param  hdma  pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8000d60:	b580      	push	{r7, lr}
 8000d62:	b084      	sub	sp, #16
 8000d64:	af00      	add	r7, sp, #0
 8000d66:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8000d68:	210f      	movs	r1, #15
 8000d6a:	187b      	adds	r3, r7, r1
 8000d6c:	2200      	movs	r2, #0
 8000d6e:	701a      	strb	r2, [r3, #0]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 8000d70:	687b      	ldr	r3, [r7, #4]
 8000d72:	2221      	movs	r2, #33	; 0x21
 8000d74:	5c9b      	ldrb	r3, [r3, r2]
 8000d76:	b2db      	uxtb	r3, r3
 8000d78:	2b02      	cmp	r3, #2
 8000d7a:	d006      	beq.n	8000d8a <HAL_DMA_Abort_IT+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000d7c:	687b      	ldr	r3, [r7, #4]
 8000d7e:	2204      	movs	r2, #4
 8000d80:	639a      	str	r2, [r3, #56]	; 0x38

    status = HAL_ERROR;
 8000d82:	187b      	adds	r3, r7, r1
 8000d84:	2201      	movs	r2, #1
 8000d86:	701a      	strb	r2, [r3, #0]
 8000d88:	e028      	b.n	8000ddc <HAL_DMA_Abort_IT+0x7c>
  }
  else
  {

    /* Disable DMA IT */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8000d8a:	687b      	ldr	r3, [r7, #4]
 8000d8c:	681b      	ldr	r3, [r3, #0]
 8000d8e:	681a      	ldr	r2, [r3, #0]
 8000d90:	687b      	ldr	r3, [r7, #4]
 8000d92:	681b      	ldr	r3, [r3, #0]
 8000d94:	210e      	movs	r1, #14
 8000d96:	438a      	bics	r2, r1
 8000d98:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 8000d9a:	687b      	ldr	r3, [r7, #4]
 8000d9c:	681b      	ldr	r3, [r3, #0]
 8000d9e:	681a      	ldr	r2, [r3, #0]
 8000da0:	687b      	ldr	r3, [r7, #4]
 8000da2:	681b      	ldr	r3, [r3, #0]
 8000da4:	2101      	movs	r1, #1
 8000da6:	438a      	bics	r2, r1
 8000da8:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 8000daa:	687b      	ldr	r3, [r7, #4]
 8000dac:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000dae:	687b      	ldr	r3, [r7, #4]
 8000db0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000db2:	2101      	movs	r1, #1
 8000db4:	4091      	lsls	r1, r2
 8000db6:	000a      	movs	r2, r1
 8000db8:	605a      	str	r2, [r3, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8000dba:	687b      	ldr	r3, [r7, #4]
 8000dbc:	2221      	movs	r2, #33	; 0x21
 8000dbe:	2101      	movs	r1, #1
 8000dc0:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000dc2:	687b      	ldr	r3, [r7, #4]
 8000dc4:	2220      	movs	r2, #32
 8000dc6:	2100      	movs	r1, #0
 8000dc8:	5499      	strb	r1, [r3, r2]

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 8000dca:	687b      	ldr	r3, [r7, #4]
 8000dcc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000dce:	2b00      	cmp	r3, #0
 8000dd0:	d004      	beq.n	8000ddc <HAL_DMA_Abort_IT+0x7c>
    {
      hdma->XferAbortCallback(hdma);
 8000dd2:	687b      	ldr	r3, [r7, #4]
 8000dd4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000dd6:	687a      	ldr	r2, [r7, #4]
 8000dd8:	0010      	movs	r0, r2
 8000dda:	4798      	blx	r3
    }
  }
  return status;
 8000ddc:	230f      	movs	r3, #15
 8000dde:	18fb      	adds	r3, r7, r3
 8000de0:	781b      	ldrb	r3, [r3, #0]
}
 8000de2:	0018      	movs	r0, r3
 8000de4:	46bd      	mov	sp, r7
 8000de6:	b004      	add	sp, #16
 8000de8:	bd80      	pop	{r7, pc}
	...

08000dec <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000dec:	b580      	push	{r7, lr}
 8000dee:	b086      	sub	sp, #24
 8000df0:	af00      	add	r7, sp, #0
 8000df2:	6078      	str	r0, [r7, #4]
 8000df4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000df6:	2300      	movs	r3, #0
 8000df8:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000dfa:	e155      	b.n	80010a8 <HAL_GPIO_Init+0x2bc>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8000dfc:	683b      	ldr	r3, [r7, #0]
 8000dfe:	681b      	ldr	r3, [r3, #0]
 8000e00:	2101      	movs	r1, #1
 8000e02:	697a      	ldr	r2, [r7, #20]
 8000e04:	4091      	lsls	r1, r2
 8000e06:	000a      	movs	r2, r1
 8000e08:	4013      	ands	r3, r2
 8000e0a:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8000e0c:	68fb      	ldr	r3, [r7, #12]
 8000e0e:	2b00      	cmp	r3, #0
 8000e10:	d100      	bne.n	8000e14 <HAL_GPIO_Init+0x28>
 8000e12:	e146      	b.n	80010a2 <HAL_GPIO_Init+0x2b6>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8000e14:	683b      	ldr	r3, [r7, #0]
 8000e16:	685b      	ldr	r3, [r3, #4]
 8000e18:	2203      	movs	r2, #3
 8000e1a:	4013      	ands	r3, r2
 8000e1c:	2b01      	cmp	r3, #1
 8000e1e:	d005      	beq.n	8000e2c <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8000e20:	683b      	ldr	r3, [r7, #0]
 8000e22:	685b      	ldr	r3, [r3, #4]
 8000e24:	2203      	movs	r2, #3
 8000e26:	4013      	ands	r3, r2
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8000e28:	2b02      	cmp	r3, #2
 8000e2a:	d130      	bne.n	8000e8e <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000e2c:	687b      	ldr	r3, [r7, #4]
 8000e2e:	689b      	ldr	r3, [r3, #8]
 8000e30:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8000e32:	697b      	ldr	r3, [r7, #20]
 8000e34:	005b      	lsls	r3, r3, #1
 8000e36:	2203      	movs	r2, #3
 8000e38:	409a      	lsls	r2, r3
 8000e3a:	0013      	movs	r3, r2
 8000e3c:	43da      	mvns	r2, r3
 8000e3e:	693b      	ldr	r3, [r7, #16]
 8000e40:	4013      	ands	r3, r2
 8000e42:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8000e44:	683b      	ldr	r3, [r7, #0]
 8000e46:	68da      	ldr	r2, [r3, #12]
 8000e48:	697b      	ldr	r3, [r7, #20]
 8000e4a:	005b      	lsls	r3, r3, #1
 8000e4c:	409a      	lsls	r2, r3
 8000e4e:	0013      	movs	r3, r2
 8000e50:	693a      	ldr	r2, [r7, #16]
 8000e52:	4313      	orrs	r3, r2
 8000e54:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8000e56:	687b      	ldr	r3, [r7, #4]
 8000e58:	693a      	ldr	r2, [r7, #16]
 8000e5a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000e5c:	687b      	ldr	r3, [r7, #4]
 8000e5e:	685b      	ldr	r3, [r3, #4]
 8000e60:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000e62:	2201      	movs	r2, #1
 8000e64:	697b      	ldr	r3, [r7, #20]
 8000e66:	409a      	lsls	r2, r3
 8000e68:	0013      	movs	r3, r2
 8000e6a:	43da      	mvns	r2, r3
 8000e6c:	693b      	ldr	r3, [r7, #16]
 8000e6e:	4013      	ands	r3, r2
 8000e70:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000e72:	683b      	ldr	r3, [r7, #0]
 8000e74:	685b      	ldr	r3, [r3, #4]
 8000e76:	091b      	lsrs	r3, r3, #4
 8000e78:	2201      	movs	r2, #1
 8000e7a:	401a      	ands	r2, r3
 8000e7c:	697b      	ldr	r3, [r7, #20]
 8000e7e:	409a      	lsls	r2, r3
 8000e80:	0013      	movs	r3, r2
 8000e82:	693a      	ldr	r2, [r7, #16]
 8000e84:	4313      	orrs	r3, r2
 8000e86:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8000e88:	687b      	ldr	r3, [r7, #4]
 8000e8a:	693a      	ldr	r2, [r7, #16]
 8000e8c:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000e8e:	683b      	ldr	r3, [r7, #0]
 8000e90:	685b      	ldr	r3, [r3, #4]
 8000e92:	2203      	movs	r2, #3
 8000e94:	4013      	ands	r3, r2
 8000e96:	2b03      	cmp	r3, #3
 8000e98:	d017      	beq.n	8000eca <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8000e9a:	687b      	ldr	r3, [r7, #4]
 8000e9c:	68db      	ldr	r3, [r3, #12]
 8000e9e:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8000ea0:	697b      	ldr	r3, [r7, #20]
 8000ea2:	005b      	lsls	r3, r3, #1
 8000ea4:	2203      	movs	r2, #3
 8000ea6:	409a      	lsls	r2, r3
 8000ea8:	0013      	movs	r3, r2
 8000eaa:	43da      	mvns	r2, r3
 8000eac:	693b      	ldr	r3, [r7, #16]
 8000eae:	4013      	ands	r3, r2
 8000eb0:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8000eb2:	683b      	ldr	r3, [r7, #0]
 8000eb4:	689a      	ldr	r2, [r3, #8]
 8000eb6:	697b      	ldr	r3, [r7, #20]
 8000eb8:	005b      	lsls	r3, r3, #1
 8000eba:	409a      	lsls	r2, r3
 8000ebc:	0013      	movs	r3, r2
 8000ebe:	693a      	ldr	r2, [r7, #16]
 8000ec0:	4313      	orrs	r3, r2
 8000ec2:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8000ec4:	687b      	ldr	r3, [r7, #4]
 8000ec6:	693a      	ldr	r2, [r7, #16]
 8000ec8:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000eca:	683b      	ldr	r3, [r7, #0]
 8000ecc:	685b      	ldr	r3, [r3, #4]
 8000ece:	2203      	movs	r2, #3
 8000ed0:	4013      	ands	r3, r2
 8000ed2:	2b02      	cmp	r3, #2
 8000ed4:	d123      	bne.n	8000f1e <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8000ed6:	697b      	ldr	r3, [r7, #20]
 8000ed8:	08da      	lsrs	r2, r3, #3
 8000eda:	687b      	ldr	r3, [r7, #4]
 8000edc:	3208      	adds	r2, #8
 8000ede:	0092      	lsls	r2, r2, #2
 8000ee0:	58d3      	ldr	r3, [r2, r3]
 8000ee2:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8000ee4:	697b      	ldr	r3, [r7, #20]
 8000ee6:	2207      	movs	r2, #7
 8000ee8:	4013      	ands	r3, r2
 8000eea:	009b      	lsls	r3, r3, #2
 8000eec:	220f      	movs	r2, #15
 8000eee:	409a      	lsls	r2, r3
 8000ef0:	0013      	movs	r3, r2
 8000ef2:	43da      	mvns	r2, r3
 8000ef4:	693b      	ldr	r3, [r7, #16]
 8000ef6:	4013      	ands	r3, r2
 8000ef8:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8000efa:	683b      	ldr	r3, [r7, #0]
 8000efc:	691a      	ldr	r2, [r3, #16]
 8000efe:	697b      	ldr	r3, [r7, #20]
 8000f00:	2107      	movs	r1, #7
 8000f02:	400b      	ands	r3, r1
 8000f04:	009b      	lsls	r3, r3, #2
 8000f06:	409a      	lsls	r2, r3
 8000f08:	0013      	movs	r3, r2
 8000f0a:	693a      	ldr	r2, [r7, #16]
 8000f0c:	4313      	orrs	r3, r2
 8000f0e:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8000f10:	697b      	ldr	r3, [r7, #20]
 8000f12:	08da      	lsrs	r2, r3, #3
 8000f14:	687b      	ldr	r3, [r7, #4]
 8000f16:	3208      	adds	r2, #8
 8000f18:	0092      	lsls	r2, r2, #2
 8000f1a:	6939      	ldr	r1, [r7, #16]
 8000f1c:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000f1e:	687b      	ldr	r3, [r7, #4]
 8000f20:	681b      	ldr	r3, [r3, #0]
 8000f22:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8000f24:	697b      	ldr	r3, [r7, #20]
 8000f26:	005b      	lsls	r3, r3, #1
 8000f28:	2203      	movs	r2, #3
 8000f2a:	409a      	lsls	r2, r3
 8000f2c:	0013      	movs	r3, r2
 8000f2e:	43da      	mvns	r2, r3
 8000f30:	693b      	ldr	r3, [r7, #16]
 8000f32:	4013      	ands	r3, r2
 8000f34:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8000f36:	683b      	ldr	r3, [r7, #0]
 8000f38:	685b      	ldr	r3, [r3, #4]
 8000f3a:	2203      	movs	r2, #3
 8000f3c:	401a      	ands	r2, r3
 8000f3e:	697b      	ldr	r3, [r7, #20]
 8000f40:	005b      	lsls	r3, r3, #1
 8000f42:	409a      	lsls	r2, r3
 8000f44:	0013      	movs	r3, r2
 8000f46:	693a      	ldr	r2, [r7, #16]
 8000f48:	4313      	orrs	r3, r2
 8000f4a:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8000f4c:	687b      	ldr	r3, [r7, #4]
 8000f4e:	693a      	ldr	r2, [r7, #16]
 8000f50:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8000f52:	683b      	ldr	r3, [r7, #0]
 8000f54:	685a      	ldr	r2, [r3, #4]
 8000f56:	23c0      	movs	r3, #192	; 0xc0
 8000f58:	029b      	lsls	r3, r3, #10
 8000f5a:	4013      	ands	r3, r2
 8000f5c:	d100      	bne.n	8000f60 <HAL_GPIO_Init+0x174>
 8000f5e:	e0a0      	b.n	80010a2 <HAL_GPIO_Init+0x2b6>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000f60:	4b57      	ldr	r3, [pc, #348]	; (80010c0 <HAL_GPIO_Init+0x2d4>)
 8000f62:	699a      	ldr	r2, [r3, #24]
 8000f64:	4b56      	ldr	r3, [pc, #344]	; (80010c0 <HAL_GPIO_Init+0x2d4>)
 8000f66:	2101      	movs	r1, #1
 8000f68:	430a      	orrs	r2, r1
 8000f6a:	619a      	str	r2, [r3, #24]
 8000f6c:	4b54      	ldr	r3, [pc, #336]	; (80010c0 <HAL_GPIO_Init+0x2d4>)
 8000f6e:	699b      	ldr	r3, [r3, #24]
 8000f70:	2201      	movs	r2, #1
 8000f72:	4013      	ands	r3, r2
 8000f74:	60bb      	str	r3, [r7, #8]
 8000f76:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8000f78:	4a52      	ldr	r2, [pc, #328]	; (80010c4 <HAL_GPIO_Init+0x2d8>)
 8000f7a:	697b      	ldr	r3, [r7, #20]
 8000f7c:	089b      	lsrs	r3, r3, #2
 8000f7e:	3302      	adds	r3, #2
 8000f80:	009b      	lsls	r3, r3, #2
 8000f82:	589b      	ldr	r3, [r3, r2]
 8000f84:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8000f86:	697b      	ldr	r3, [r7, #20]
 8000f88:	2203      	movs	r2, #3
 8000f8a:	4013      	ands	r3, r2
 8000f8c:	009b      	lsls	r3, r3, #2
 8000f8e:	220f      	movs	r2, #15
 8000f90:	409a      	lsls	r2, r3
 8000f92:	0013      	movs	r3, r2
 8000f94:	43da      	mvns	r2, r3
 8000f96:	693b      	ldr	r3, [r7, #16]
 8000f98:	4013      	ands	r3, r2
 8000f9a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8000f9c:	687a      	ldr	r2, [r7, #4]
 8000f9e:	2390      	movs	r3, #144	; 0x90
 8000fa0:	05db      	lsls	r3, r3, #23
 8000fa2:	429a      	cmp	r2, r3
 8000fa4:	d019      	beq.n	8000fda <HAL_GPIO_Init+0x1ee>
 8000fa6:	687b      	ldr	r3, [r7, #4]
 8000fa8:	4a47      	ldr	r2, [pc, #284]	; (80010c8 <HAL_GPIO_Init+0x2dc>)
 8000faa:	4293      	cmp	r3, r2
 8000fac:	d013      	beq.n	8000fd6 <HAL_GPIO_Init+0x1ea>
 8000fae:	687b      	ldr	r3, [r7, #4]
 8000fb0:	4a46      	ldr	r2, [pc, #280]	; (80010cc <HAL_GPIO_Init+0x2e0>)
 8000fb2:	4293      	cmp	r3, r2
 8000fb4:	d00d      	beq.n	8000fd2 <HAL_GPIO_Init+0x1e6>
 8000fb6:	687b      	ldr	r3, [r7, #4]
 8000fb8:	4a45      	ldr	r2, [pc, #276]	; (80010d0 <HAL_GPIO_Init+0x2e4>)
 8000fba:	4293      	cmp	r3, r2
 8000fbc:	d007      	beq.n	8000fce <HAL_GPIO_Init+0x1e2>
 8000fbe:	687b      	ldr	r3, [r7, #4]
 8000fc0:	4a44      	ldr	r2, [pc, #272]	; (80010d4 <HAL_GPIO_Init+0x2e8>)
 8000fc2:	4293      	cmp	r3, r2
 8000fc4:	d101      	bne.n	8000fca <HAL_GPIO_Init+0x1de>
 8000fc6:	2304      	movs	r3, #4
 8000fc8:	e008      	b.n	8000fdc <HAL_GPIO_Init+0x1f0>
 8000fca:	2305      	movs	r3, #5
 8000fcc:	e006      	b.n	8000fdc <HAL_GPIO_Init+0x1f0>
 8000fce:	2303      	movs	r3, #3
 8000fd0:	e004      	b.n	8000fdc <HAL_GPIO_Init+0x1f0>
 8000fd2:	2302      	movs	r3, #2
 8000fd4:	e002      	b.n	8000fdc <HAL_GPIO_Init+0x1f0>
 8000fd6:	2301      	movs	r3, #1
 8000fd8:	e000      	b.n	8000fdc <HAL_GPIO_Init+0x1f0>
 8000fda:	2300      	movs	r3, #0
 8000fdc:	697a      	ldr	r2, [r7, #20]
 8000fde:	2103      	movs	r1, #3
 8000fe0:	400a      	ands	r2, r1
 8000fe2:	0092      	lsls	r2, r2, #2
 8000fe4:	4093      	lsls	r3, r2
 8000fe6:	693a      	ldr	r2, [r7, #16]
 8000fe8:	4313      	orrs	r3, r2
 8000fea:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8000fec:	4935      	ldr	r1, [pc, #212]	; (80010c4 <HAL_GPIO_Init+0x2d8>)
 8000fee:	697b      	ldr	r3, [r7, #20]
 8000ff0:	089b      	lsrs	r3, r3, #2
 8000ff2:	3302      	adds	r3, #2
 8000ff4:	009b      	lsls	r3, r3, #2
 8000ff6:	693a      	ldr	r2, [r7, #16]
 8000ff8:	505a      	str	r2, [r3, r1]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8000ffa:	4b37      	ldr	r3, [pc, #220]	; (80010d8 <HAL_GPIO_Init+0x2ec>)
 8000ffc:	689b      	ldr	r3, [r3, #8]
 8000ffe:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001000:	68fb      	ldr	r3, [r7, #12]
 8001002:	43da      	mvns	r2, r3
 8001004:	693b      	ldr	r3, [r7, #16]
 8001006:	4013      	ands	r3, r2
 8001008:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 800100a:	683b      	ldr	r3, [r7, #0]
 800100c:	685a      	ldr	r2, [r3, #4]
 800100e:	2380      	movs	r3, #128	; 0x80
 8001010:	035b      	lsls	r3, r3, #13
 8001012:	4013      	ands	r3, r2
 8001014:	d003      	beq.n	800101e <HAL_GPIO_Init+0x232>
        {
          temp |= iocurrent;
 8001016:	693a      	ldr	r2, [r7, #16]
 8001018:	68fb      	ldr	r3, [r7, #12]
 800101a:	4313      	orrs	r3, r2
 800101c:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 800101e:	4b2e      	ldr	r3, [pc, #184]	; (80010d8 <HAL_GPIO_Init+0x2ec>)
 8001020:	693a      	ldr	r2, [r7, #16]
 8001022:	609a      	str	r2, [r3, #8]

        temp = EXTI->FTSR;
 8001024:	4b2c      	ldr	r3, [pc, #176]	; (80010d8 <HAL_GPIO_Init+0x2ec>)
 8001026:	68db      	ldr	r3, [r3, #12]
 8001028:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800102a:	68fb      	ldr	r3, [r7, #12]
 800102c:	43da      	mvns	r2, r3
 800102e:	693b      	ldr	r3, [r7, #16]
 8001030:	4013      	ands	r3, r2
 8001032:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8001034:	683b      	ldr	r3, [r7, #0]
 8001036:	685a      	ldr	r2, [r3, #4]
 8001038:	2380      	movs	r3, #128	; 0x80
 800103a:	039b      	lsls	r3, r3, #14
 800103c:	4013      	ands	r3, r2
 800103e:	d003      	beq.n	8001048 <HAL_GPIO_Init+0x25c>
        {
          temp |= iocurrent;
 8001040:	693a      	ldr	r2, [r7, #16]
 8001042:	68fb      	ldr	r3, [r7, #12]
 8001044:	4313      	orrs	r3, r2
 8001046:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8001048:	4b23      	ldr	r3, [pc, #140]	; (80010d8 <HAL_GPIO_Init+0x2ec>)
 800104a:	693a      	ldr	r2, [r7, #16]
 800104c:	60da      	str	r2, [r3, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR;
 800104e:	4b22      	ldr	r3, [pc, #136]	; (80010d8 <HAL_GPIO_Init+0x2ec>)
 8001050:	685b      	ldr	r3, [r3, #4]
 8001052:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001054:	68fb      	ldr	r3, [r7, #12]
 8001056:	43da      	mvns	r2, r3
 8001058:	693b      	ldr	r3, [r7, #16]
 800105a:	4013      	ands	r3, r2
 800105c:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 800105e:	683b      	ldr	r3, [r7, #0]
 8001060:	685a      	ldr	r2, [r3, #4]
 8001062:	2380      	movs	r3, #128	; 0x80
 8001064:	029b      	lsls	r3, r3, #10
 8001066:	4013      	ands	r3, r2
 8001068:	d003      	beq.n	8001072 <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 800106a:	693a      	ldr	r2, [r7, #16]
 800106c:	68fb      	ldr	r3, [r7, #12]
 800106e:	4313      	orrs	r3, r2
 8001070:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8001072:	4b19      	ldr	r3, [pc, #100]	; (80010d8 <HAL_GPIO_Init+0x2ec>)
 8001074:	693a      	ldr	r2, [r7, #16]
 8001076:	605a      	str	r2, [r3, #4]

        temp = EXTI->IMR;
 8001078:	4b17      	ldr	r3, [pc, #92]	; (80010d8 <HAL_GPIO_Init+0x2ec>)
 800107a:	681b      	ldr	r3, [r3, #0]
 800107c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800107e:	68fb      	ldr	r3, [r7, #12]
 8001080:	43da      	mvns	r2, r3
 8001082:	693b      	ldr	r3, [r7, #16]
 8001084:	4013      	ands	r3, r2
 8001086:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8001088:	683b      	ldr	r3, [r7, #0]
 800108a:	685a      	ldr	r2, [r3, #4]
 800108c:	2380      	movs	r3, #128	; 0x80
 800108e:	025b      	lsls	r3, r3, #9
 8001090:	4013      	ands	r3, r2
 8001092:	d003      	beq.n	800109c <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 8001094:	693a      	ldr	r2, [r7, #16]
 8001096:	68fb      	ldr	r3, [r7, #12]
 8001098:	4313      	orrs	r3, r2
 800109a:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 800109c:	4b0e      	ldr	r3, [pc, #56]	; (80010d8 <HAL_GPIO_Init+0x2ec>)
 800109e:	693a      	ldr	r2, [r7, #16]
 80010a0:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 80010a2:	697b      	ldr	r3, [r7, #20]
 80010a4:	3301      	adds	r3, #1
 80010a6:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80010a8:	683b      	ldr	r3, [r7, #0]
 80010aa:	681a      	ldr	r2, [r3, #0]
 80010ac:	697b      	ldr	r3, [r7, #20]
 80010ae:	40da      	lsrs	r2, r3
 80010b0:	1e13      	subs	r3, r2, #0
 80010b2:	d000      	beq.n	80010b6 <HAL_GPIO_Init+0x2ca>
 80010b4:	e6a2      	b.n	8000dfc <HAL_GPIO_Init+0x10>
  } 
}
 80010b6:	46c0      	nop			; (mov r8, r8)
 80010b8:	46c0      	nop			; (mov r8, r8)
 80010ba:	46bd      	mov	sp, r7
 80010bc:	b006      	add	sp, #24
 80010be:	bd80      	pop	{r7, pc}
 80010c0:	40021000 	.word	0x40021000
 80010c4:	40010000 	.word	0x40010000
 80010c8:	48000400 	.word	0x48000400
 80010cc:	48000800 	.word	0x48000800
 80010d0:	48000c00 	.word	0x48000c00
 80010d4:	48001000 	.word	0x48001000
 80010d8:	40010400 	.word	0x40010400

080010dc <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80010dc:	b580      	push	{r7, lr}
 80010de:	b082      	sub	sp, #8
 80010e0:	af00      	add	r7, sp, #0
 80010e2:	6078      	str	r0, [r7, #4]
 80010e4:	0008      	movs	r0, r1
 80010e6:	0011      	movs	r1, r2
 80010e8:	1cbb      	adds	r3, r7, #2
 80010ea:	1c02      	adds	r2, r0, #0
 80010ec:	801a      	strh	r2, [r3, #0]
 80010ee:	1c7b      	adds	r3, r7, #1
 80010f0:	1c0a      	adds	r2, r1, #0
 80010f2:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80010f4:	1c7b      	adds	r3, r7, #1
 80010f6:	781b      	ldrb	r3, [r3, #0]
 80010f8:	2b00      	cmp	r3, #0
 80010fa:	d004      	beq.n	8001106 <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80010fc:	1cbb      	adds	r3, r7, #2
 80010fe:	881a      	ldrh	r2, [r3, #0]
 8001100:	687b      	ldr	r3, [r7, #4]
 8001102:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001104:	e003      	b.n	800110e <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001106:	1cbb      	adds	r3, r7, #2
 8001108:	881a      	ldrh	r2, [r3, #0]
 800110a:	687b      	ldr	r3, [r7, #4]
 800110c:	629a      	str	r2, [r3, #40]	; 0x28
}
 800110e:	46c0      	nop			; (mov r8, r8)
 8001110:	46bd      	mov	sp, r7
 8001112:	b002      	add	sp, #8
 8001114:	bd80      	pop	{r7, pc}
	...

08001118 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001118:	b580      	push	{r7, lr}
 800111a:	b088      	sub	sp, #32
 800111c:	af00      	add	r7, sp, #0
 800111e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  uint32_t pll_config2;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001120:	687b      	ldr	r3, [r7, #4]
 8001122:	2b00      	cmp	r3, #0
 8001124:	d102      	bne.n	800112c <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8001126:	2301      	movs	r3, #1
 8001128:	f000 fb76 	bl	8001818 <HAL_RCC_OscConfig+0x700>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800112c:	687b      	ldr	r3, [r7, #4]
 800112e:	681b      	ldr	r3, [r3, #0]
 8001130:	2201      	movs	r2, #1
 8001132:	4013      	ands	r3, r2
 8001134:	d100      	bne.n	8001138 <HAL_RCC_OscConfig+0x20>
 8001136:	e08e      	b.n	8001256 <HAL_RCC_OscConfig+0x13e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8001138:	4bc5      	ldr	r3, [pc, #788]	; (8001450 <HAL_RCC_OscConfig+0x338>)
 800113a:	685b      	ldr	r3, [r3, #4]
 800113c:	220c      	movs	r2, #12
 800113e:	4013      	ands	r3, r2
 8001140:	2b04      	cmp	r3, #4
 8001142:	d00e      	beq.n	8001162 <HAL_RCC_OscConfig+0x4a>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001144:	4bc2      	ldr	r3, [pc, #776]	; (8001450 <HAL_RCC_OscConfig+0x338>)
 8001146:	685b      	ldr	r3, [r3, #4]
 8001148:	220c      	movs	r2, #12
 800114a:	4013      	ands	r3, r2
 800114c:	2b08      	cmp	r3, #8
 800114e:	d117      	bne.n	8001180 <HAL_RCC_OscConfig+0x68>
 8001150:	4bbf      	ldr	r3, [pc, #764]	; (8001450 <HAL_RCC_OscConfig+0x338>)
 8001152:	685a      	ldr	r2, [r3, #4]
 8001154:	23c0      	movs	r3, #192	; 0xc0
 8001156:	025b      	lsls	r3, r3, #9
 8001158:	401a      	ands	r2, r3
 800115a:	2380      	movs	r3, #128	; 0x80
 800115c:	025b      	lsls	r3, r3, #9
 800115e:	429a      	cmp	r2, r3
 8001160:	d10e      	bne.n	8001180 <HAL_RCC_OscConfig+0x68>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001162:	4bbb      	ldr	r3, [pc, #748]	; (8001450 <HAL_RCC_OscConfig+0x338>)
 8001164:	681a      	ldr	r2, [r3, #0]
 8001166:	2380      	movs	r3, #128	; 0x80
 8001168:	029b      	lsls	r3, r3, #10
 800116a:	4013      	ands	r3, r2
 800116c:	d100      	bne.n	8001170 <HAL_RCC_OscConfig+0x58>
 800116e:	e071      	b.n	8001254 <HAL_RCC_OscConfig+0x13c>
 8001170:	687b      	ldr	r3, [r7, #4]
 8001172:	685b      	ldr	r3, [r3, #4]
 8001174:	2b00      	cmp	r3, #0
 8001176:	d000      	beq.n	800117a <HAL_RCC_OscConfig+0x62>
 8001178:	e06c      	b.n	8001254 <HAL_RCC_OscConfig+0x13c>
      {
        return HAL_ERROR;
 800117a:	2301      	movs	r3, #1
 800117c:	f000 fb4c 	bl	8001818 <HAL_RCC_OscConfig+0x700>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001180:	687b      	ldr	r3, [r7, #4]
 8001182:	685b      	ldr	r3, [r3, #4]
 8001184:	2b01      	cmp	r3, #1
 8001186:	d107      	bne.n	8001198 <HAL_RCC_OscConfig+0x80>
 8001188:	4bb1      	ldr	r3, [pc, #708]	; (8001450 <HAL_RCC_OscConfig+0x338>)
 800118a:	681a      	ldr	r2, [r3, #0]
 800118c:	4bb0      	ldr	r3, [pc, #704]	; (8001450 <HAL_RCC_OscConfig+0x338>)
 800118e:	2180      	movs	r1, #128	; 0x80
 8001190:	0249      	lsls	r1, r1, #9
 8001192:	430a      	orrs	r2, r1
 8001194:	601a      	str	r2, [r3, #0]
 8001196:	e02f      	b.n	80011f8 <HAL_RCC_OscConfig+0xe0>
 8001198:	687b      	ldr	r3, [r7, #4]
 800119a:	685b      	ldr	r3, [r3, #4]
 800119c:	2b00      	cmp	r3, #0
 800119e:	d10c      	bne.n	80011ba <HAL_RCC_OscConfig+0xa2>
 80011a0:	4bab      	ldr	r3, [pc, #684]	; (8001450 <HAL_RCC_OscConfig+0x338>)
 80011a2:	681a      	ldr	r2, [r3, #0]
 80011a4:	4baa      	ldr	r3, [pc, #680]	; (8001450 <HAL_RCC_OscConfig+0x338>)
 80011a6:	49ab      	ldr	r1, [pc, #684]	; (8001454 <HAL_RCC_OscConfig+0x33c>)
 80011a8:	400a      	ands	r2, r1
 80011aa:	601a      	str	r2, [r3, #0]
 80011ac:	4ba8      	ldr	r3, [pc, #672]	; (8001450 <HAL_RCC_OscConfig+0x338>)
 80011ae:	681a      	ldr	r2, [r3, #0]
 80011b0:	4ba7      	ldr	r3, [pc, #668]	; (8001450 <HAL_RCC_OscConfig+0x338>)
 80011b2:	49a9      	ldr	r1, [pc, #676]	; (8001458 <HAL_RCC_OscConfig+0x340>)
 80011b4:	400a      	ands	r2, r1
 80011b6:	601a      	str	r2, [r3, #0]
 80011b8:	e01e      	b.n	80011f8 <HAL_RCC_OscConfig+0xe0>
 80011ba:	687b      	ldr	r3, [r7, #4]
 80011bc:	685b      	ldr	r3, [r3, #4]
 80011be:	2b05      	cmp	r3, #5
 80011c0:	d10e      	bne.n	80011e0 <HAL_RCC_OscConfig+0xc8>
 80011c2:	4ba3      	ldr	r3, [pc, #652]	; (8001450 <HAL_RCC_OscConfig+0x338>)
 80011c4:	681a      	ldr	r2, [r3, #0]
 80011c6:	4ba2      	ldr	r3, [pc, #648]	; (8001450 <HAL_RCC_OscConfig+0x338>)
 80011c8:	2180      	movs	r1, #128	; 0x80
 80011ca:	02c9      	lsls	r1, r1, #11
 80011cc:	430a      	orrs	r2, r1
 80011ce:	601a      	str	r2, [r3, #0]
 80011d0:	4b9f      	ldr	r3, [pc, #636]	; (8001450 <HAL_RCC_OscConfig+0x338>)
 80011d2:	681a      	ldr	r2, [r3, #0]
 80011d4:	4b9e      	ldr	r3, [pc, #632]	; (8001450 <HAL_RCC_OscConfig+0x338>)
 80011d6:	2180      	movs	r1, #128	; 0x80
 80011d8:	0249      	lsls	r1, r1, #9
 80011da:	430a      	orrs	r2, r1
 80011dc:	601a      	str	r2, [r3, #0]
 80011de:	e00b      	b.n	80011f8 <HAL_RCC_OscConfig+0xe0>
 80011e0:	4b9b      	ldr	r3, [pc, #620]	; (8001450 <HAL_RCC_OscConfig+0x338>)
 80011e2:	681a      	ldr	r2, [r3, #0]
 80011e4:	4b9a      	ldr	r3, [pc, #616]	; (8001450 <HAL_RCC_OscConfig+0x338>)
 80011e6:	499b      	ldr	r1, [pc, #620]	; (8001454 <HAL_RCC_OscConfig+0x33c>)
 80011e8:	400a      	ands	r2, r1
 80011ea:	601a      	str	r2, [r3, #0]
 80011ec:	4b98      	ldr	r3, [pc, #608]	; (8001450 <HAL_RCC_OscConfig+0x338>)
 80011ee:	681a      	ldr	r2, [r3, #0]
 80011f0:	4b97      	ldr	r3, [pc, #604]	; (8001450 <HAL_RCC_OscConfig+0x338>)
 80011f2:	4999      	ldr	r1, [pc, #612]	; (8001458 <HAL_RCC_OscConfig+0x340>)
 80011f4:	400a      	ands	r2, r1
 80011f6:	601a      	str	r2, [r3, #0]
      

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80011f8:	687b      	ldr	r3, [r7, #4]
 80011fa:	685b      	ldr	r3, [r3, #4]
 80011fc:	2b00      	cmp	r3, #0
 80011fe:	d014      	beq.n	800122a <HAL_RCC_OscConfig+0x112>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001200:	f7ff fc8e 	bl	8000b20 <HAL_GetTick>
 8001204:	0003      	movs	r3, r0
 8001206:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001208:	e008      	b.n	800121c <HAL_RCC_OscConfig+0x104>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800120a:	f7ff fc89 	bl	8000b20 <HAL_GetTick>
 800120e:	0002      	movs	r2, r0
 8001210:	69bb      	ldr	r3, [r7, #24]
 8001212:	1ad3      	subs	r3, r2, r3
 8001214:	2b64      	cmp	r3, #100	; 0x64
 8001216:	d901      	bls.n	800121c <HAL_RCC_OscConfig+0x104>
          {
            return HAL_TIMEOUT;
 8001218:	2303      	movs	r3, #3
 800121a:	e2fd      	b.n	8001818 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800121c:	4b8c      	ldr	r3, [pc, #560]	; (8001450 <HAL_RCC_OscConfig+0x338>)
 800121e:	681a      	ldr	r2, [r3, #0]
 8001220:	2380      	movs	r3, #128	; 0x80
 8001222:	029b      	lsls	r3, r3, #10
 8001224:	4013      	ands	r3, r2
 8001226:	d0f0      	beq.n	800120a <HAL_RCC_OscConfig+0xf2>
 8001228:	e015      	b.n	8001256 <HAL_RCC_OscConfig+0x13e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800122a:	f7ff fc79 	bl	8000b20 <HAL_GetTick>
 800122e:	0003      	movs	r3, r0
 8001230:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001232:	e008      	b.n	8001246 <HAL_RCC_OscConfig+0x12e>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001234:	f7ff fc74 	bl	8000b20 <HAL_GetTick>
 8001238:	0002      	movs	r2, r0
 800123a:	69bb      	ldr	r3, [r7, #24]
 800123c:	1ad3      	subs	r3, r2, r3
 800123e:	2b64      	cmp	r3, #100	; 0x64
 8001240:	d901      	bls.n	8001246 <HAL_RCC_OscConfig+0x12e>
          {
            return HAL_TIMEOUT;
 8001242:	2303      	movs	r3, #3
 8001244:	e2e8      	b.n	8001818 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001246:	4b82      	ldr	r3, [pc, #520]	; (8001450 <HAL_RCC_OscConfig+0x338>)
 8001248:	681a      	ldr	r2, [r3, #0]
 800124a:	2380      	movs	r3, #128	; 0x80
 800124c:	029b      	lsls	r3, r3, #10
 800124e:	4013      	ands	r3, r2
 8001250:	d1f0      	bne.n	8001234 <HAL_RCC_OscConfig+0x11c>
 8001252:	e000      	b.n	8001256 <HAL_RCC_OscConfig+0x13e>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001254:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001256:	687b      	ldr	r3, [r7, #4]
 8001258:	681b      	ldr	r3, [r3, #0]
 800125a:	2202      	movs	r2, #2
 800125c:	4013      	ands	r3, r2
 800125e:	d100      	bne.n	8001262 <HAL_RCC_OscConfig+0x14a>
 8001260:	e06c      	b.n	800133c <HAL_RCC_OscConfig+0x224>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8001262:	4b7b      	ldr	r3, [pc, #492]	; (8001450 <HAL_RCC_OscConfig+0x338>)
 8001264:	685b      	ldr	r3, [r3, #4]
 8001266:	220c      	movs	r2, #12
 8001268:	4013      	ands	r3, r2
 800126a:	d00e      	beq.n	800128a <HAL_RCC_OscConfig+0x172>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 800126c:	4b78      	ldr	r3, [pc, #480]	; (8001450 <HAL_RCC_OscConfig+0x338>)
 800126e:	685b      	ldr	r3, [r3, #4]
 8001270:	220c      	movs	r2, #12
 8001272:	4013      	ands	r3, r2
 8001274:	2b08      	cmp	r3, #8
 8001276:	d11f      	bne.n	80012b8 <HAL_RCC_OscConfig+0x1a0>
 8001278:	4b75      	ldr	r3, [pc, #468]	; (8001450 <HAL_RCC_OscConfig+0x338>)
 800127a:	685a      	ldr	r2, [r3, #4]
 800127c:	23c0      	movs	r3, #192	; 0xc0
 800127e:	025b      	lsls	r3, r3, #9
 8001280:	401a      	ands	r2, r3
 8001282:	2380      	movs	r3, #128	; 0x80
 8001284:	021b      	lsls	r3, r3, #8
 8001286:	429a      	cmp	r2, r3
 8001288:	d116      	bne.n	80012b8 <HAL_RCC_OscConfig+0x1a0>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800128a:	4b71      	ldr	r3, [pc, #452]	; (8001450 <HAL_RCC_OscConfig+0x338>)
 800128c:	681b      	ldr	r3, [r3, #0]
 800128e:	2202      	movs	r2, #2
 8001290:	4013      	ands	r3, r2
 8001292:	d005      	beq.n	80012a0 <HAL_RCC_OscConfig+0x188>
 8001294:	687b      	ldr	r3, [r7, #4]
 8001296:	68db      	ldr	r3, [r3, #12]
 8001298:	2b01      	cmp	r3, #1
 800129a:	d001      	beq.n	80012a0 <HAL_RCC_OscConfig+0x188>
      {
        return HAL_ERROR;
 800129c:	2301      	movs	r3, #1
 800129e:	e2bb      	b.n	8001818 <HAL_RCC_OscConfig+0x700>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80012a0:	4b6b      	ldr	r3, [pc, #428]	; (8001450 <HAL_RCC_OscConfig+0x338>)
 80012a2:	681b      	ldr	r3, [r3, #0]
 80012a4:	22f8      	movs	r2, #248	; 0xf8
 80012a6:	4393      	bics	r3, r2
 80012a8:	0019      	movs	r1, r3
 80012aa:	687b      	ldr	r3, [r7, #4]
 80012ac:	691b      	ldr	r3, [r3, #16]
 80012ae:	00da      	lsls	r2, r3, #3
 80012b0:	4b67      	ldr	r3, [pc, #412]	; (8001450 <HAL_RCC_OscConfig+0x338>)
 80012b2:	430a      	orrs	r2, r1
 80012b4:	601a      	str	r2, [r3, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80012b6:	e041      	b.n	800133c <HAL_RCC_OscConfig+0x224>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80012b8:	687b      	ldr	r3, [r7, #4]
 80012ba:	68db      	ldr	r3, [r3, #12]
 80012bc:	2b00      	cmp	r3, #0
 80012be:	d024      	beq.n	800130a <HAL_RCC_OscConfig+0x1f2>
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80012c0:	4b63      	ldr	r3, [pc, #396]	; (8001450 <HAL_RCC_OscConfig+0x338>)
 80012c2:	681a      	ldr	r2, [r3, #0]
 80012c4:	4b62      	ldr	r3, [pc, #392]	; (8001450 <HAL_RCC_OscConfig+0x338>)
 80012c6:	2101      	movs	r1, #1
 80012c8:	430a      	orrs	r2, r1
 80012ca:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80012cc:	f7ff fc28 	bl	8000b20 <HAL_GetTick>
 80012d0:	0003      	movs	r3, r0
 80012d2:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80012d4:	e008      	b.n	80012e8 <HAL_RCC_OscConfig+0x1d0>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80012d6:	f7ff fc23 	bl	8000b20 <HAL_GetTick>
 80012da:	0002      	movs	r2, r0
 80012dc:	69bb      	ldr	r3, [r7, #24]
 80012de:	1ad3      	subs	r3, r2, r3
 80012e0:	2b02      	cmp	r3, #2
 80012e2:	d901      	bls.n	80012e8 <HAL_RCC_OscConfig+0x1d0>
          {
            return HAL_TIMEOUT;
 80012e4:	2303      	movs	r3, #3
 80012e6:	e297      	b.n	8001818 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80012e8:	4b59      	ldr	r3, [pc, #356]	; (8001450 <HAL_RCC_OscConfig+0x338>)
 80012ea:	681b      	ldr	r3, [r3, #0]
 80012ec:	2202      	movs	r2, #2
 80012ee:	4013      	ands	r3, r2
 80012f0:	d0f1      	beq.n	80012d6 <HAL_RCC_OscConfig+0x1be>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80012f2:	4b57      	ldr	r3, [pc, #348]	; (8001450 <HAL_RCC_OscConfig+0x338>)
 80012f4:	681b      	ldr	r3, [r3, #0]
 80012f6:	22f8      	movs	r2, #248	; 0xf8
 80012f8:	4393      	bics	r3, r2
 80012fa:	0019      	movs	r1, r3
 80012fc:	687b      	ldr	r3, [r7, #4]
 80012fe:	691b      	ldr	r3, [r3, #16]
 8001300:	00da      	lsls	r2, r3, #3
 8001302:	4b53      	ldr	r3, [pc, #332]	; (8001450 <HAL_RCC_OscConfig+0x338>)
 8001304:	430a      	orrs	r2, r1
 8001306:	601a      	str	r2, [r3, #0]
 8001308:	e018      	b.n	800133c <HAL_RCC_OscConfig+0x224>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800130a:	4b51      	ldr	r3, [pc, #324]	; (8001450 <HAL_RCC_OscConfig+0x338>)
 800130c:	681a      	ldr	r2, [r3, #0]
 800130e:	4b50      	ldr	r3, [pc, #320]	; (8001450 <HAL_RCC_OscConfig+0x338>)
 8001310:	2101      	movs	r1, #1
 8001312:	438a      	bics	r2, r1
 8001314:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001316:	f7ff fc03 	bl	8000b20 <HAL_GetTick>
 800131a:	0003      	movs	r3, r0
 800131c:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800131e:	e008      	b.n	8001332 <HAL_RCC_OscConfig+0x21a>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001320:	f7ff fbfe 	bl	8000b20 <HAL_GetTick>
 8001324:	0002      	movs	r2, r0
 8001326:	69bb      	ldr	r3, [r7, #24]
 8001328:	1ad3      	subs	r3, r2, r3
 800132a:	2b02      	cmp	r3, #2
 800132c:	d901      	bls.n	8001332 <HAL_RCC_OscConfig+0x21a>
          {
            return HAL_TIMEOUT;
 800132e:	2303      	movs	r3, #3
 8001330:	e272      	b.n	8001818 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001332:	4b47      	ldr	r3, [pc, #284]	; (8001450 <HAL_RCC_OscConfig+0x338>)
 8001334:	681b      	ldr	r3, [r3, #0]
 8001336:	2202      	movs	r2, #2
 8001338:	4013      	ands	r3, r2
 800133a:	d1f1      	bne.n	8001320 <HAL_RCC_OscConfig+0x208>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800133c:	687b      	ldr	r3, [r7, #4]
 800133e:	681b      	ldr	r3, [r3, #0]
 8001340:	2208      	movs	r2, #8
 8001342:	4013      	ands	r3, r2
 8001344:	d036      	beq.n	80013b4 <HAL_RCC_OscConfig+0x29c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001346:	687b      	ldr	r3, [r7, #4]
 8001348:	69db      	ldr	r3, [r3, #28]
 800134a:	2b00      	cmp	r3, #0
 800134c:	d019      	beq.n	8001382 <HAL_RCC_OscConfig+0x26a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800134e:	4b40      	ldr	r3, [pc, #256]	; (8001450 <HAL_RCC_OscConfig+0x338>)
 8001350:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001352:	4b3f      	ldr	r3, [pc, #252]	; (8001450 <HAL_RCC_OscConfig+0x338>)
 8001354:	2101      	movs	r1, #1
 8001356:	430a      	orrs	r2, r1
 8001358:	625a      	str	r2, [r3, #36]	; 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800135a:	f7ff fbe1 	bl	8000b20 <HAL_GetTick>
 800135e:	0003      	movs	r3, r0
 8001360:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001362:	e008      	b.n	8001376 <HAL_RCC_OscConfig+0x25e>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001364:	f7ff fbdc 	bl	8000b20 <HAL_GetTick>
 8001368:	0002      	movs	r2, r0
 800136a:	69bb      	ldr	r3, [r7, #24]
 800136c:	1ad3      	subs	r3, r2, r3
 800136e:	2b02      	cmp	r3, #2
 8001370:	d901      	bls.n	8001376 <HAL_RCC_OscConfig+0x25e>
        {
          return HAL_TIMEOUT;
 8001372:	2303      	movs	r3, #3
 8001374:	e250      	b.n	8001818 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001376:	4b36      	ldr	r3, [pc, #216]	; (8001450 <HAL_RCC_OscConfig+0x338>)
 8001378:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800137a:	2202      	movs	r2, #2
 800137c:	4013      	ands	r3, r2
 800137e:	d0f1      	beq.n	8001364 <HAL_RCC_OscConfig+0x24c>
 8001380:	e018      	b.n	80013b4 <HAL_RCC_OscConfig+0x29c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001382:	4b33      	ldr	r3, [pc, #204]	; (8001450 <HAL_RCC_OscConfig+0x338>)
 8001384:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001386:	4b32      	ldr	r3, [pc, #200]	; (8001450 <HAL_RCC_OscConfig+0x338>)
 8001388:	2101      	movs	r1, #1
 800138a:	438a      	bics	r2, r1
 800138c:	625a      	str	r2, [r3, #36]	; 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800138e:	f7ff fbc7 	bl	8000b20 <HAL_GetTick>
 8001392:	0003      	movs	r3, r0
 8001394:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001396:	e008      	b.n	80013aa <HAL_RCC_OscConfig+0x292>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001398:	f7ff fbc2 	bl	8000b20 <HAL_GetTick>
 800139c:	0002      	movs	r2, r0
 800139e:	69bb      	ldr	r3, [r7, #24]
 80013a0:	1ad3      	subs	r3, r2, r3
 80013a2:	2b02      	cmp	r3, #2
 80013a4:	d901      	bls.n	80013aa <HAL_RCC_OscConfig+0x292>
        {
          return HAL_TIMEOUT;
 80013a6:	2303      	movs	r3, #3
 80013a8:	e236      	b.n	8001818 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80013aa:	4b29      	ldr	r3, [pc, #164]	; (8001450 <HAL_RCC_OscConfig+0x338>)
 80013ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80013ae:	2202      	movs	r2, #2
 80013b0:	4013      	ands	r3, r2
 80013b2:	d1f1      	bne.n	8001398 <HAL_RCC_OscConfig+0x280>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80013b4:	687b      	ldr	r3, [r7, #4]
 80013b6:	681b      	ldr	r3, [r3, #0]
 80013b8:	2204      	movs	r2, #4
 80013ba:	4013      	ands	r3, r2
 80013bc:	d100      	bne.n	80013c0 <HAL_RCC_OscConfig+0x2a8>
 80013be:	e0b5      	b.n	800152c <HAL_RCC_OscConfig+0x414>
  {
    FlagStatus       pwrclkchanged = RESET;
 80013c0:	201f      	movs	r0, #31
 80013c2:	183b      	adds	r3, r7, r0
 80013c4:	2200      	movs	r2, #0
 80013c6:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80013c8:	4b21      	ldr	r3, [pc, #132]	; (8001450 <HAL_RCC_OscConfig+0x338>)
 80013ca:	69da      	ldr	r2, [r3, #28]
 80013cc:	2380      	movs	r3, #128	; 0x80
 80013ce:	055b      	lsls	r3, r3, #21
 80013d0:	4013      	ands	r3, r2
 80013d2:	d110      	bne.n	80013f6 <HAL_RCC_OscConfig+0x2de>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80013d4:	4b1e      	ldr	r3, [pc, #120]	; (8001450 <HAL_RCC_OscConfig+0x338>)
 80013d6:	69da      	ldr	r2, [r3, #28]
 80013d8:	4b1d      	ldr	r3, [pc, #116]	; (8001450 <HAL_RCC_OscConfig+0x338>)
 80013da:	2180      	movs	r1, #128	; 0x80
 80013dc:	0549      	lsls	r1, r1, #21
 80013de:	430a      	orrs	r2, r1
 80013e0:	61da      	str	r2, [r3, #28]
 80013e2:	4b1b      	ldr	r3, [pc, #108]	; (8001450 <HAL_RCC_OscConfig+0x338>)
 80013e4:	69da      	ldr	r2, [r3, #28]
 80013e6:	2380      	movs	r3, #128	; 0x80
 80013e8:	055b      	lsls	r3, r3, #21
 80013ea:	4013      	ands	r3, r2
 80013ec:	60fb      	str	r3, [r7, #12]
 80013ee:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 80013f0:	183b      	adds	r3, r7, r0
 80013f2:	2201      	movs	r2, #1
 80013f4:	701a      	strb	r2, [r3, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80013f6:	4b19      	ldr	r3, [pc, #100]	; (800145c <HAL_RCC_OscConfig+0x344>)
 80013f8:	681a      	ldr	r2, [r3, #0]
 80013fa:	2380      	movs	r3, #128	; 0x80
 80013fc:	005b      	lsls	r3, r3, #1
 80013fe:	4013      	ands	r3, r2
 8001400:	d11a      	bne.n	8001438 <HAL_RCC_OscConfig+0x320>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001402:	4b16      	ldr	r3, [pc, #88]	; (800145c <HAL_RCC_OscConfig+0x344>)
 8001404:	681a      	ldr	r2, [r3, #0]
 8001406:	4b15      	ldr	r3, [pc, #84]	; (800145c <HAL_RCC_OscConfig+0x344>)
 8001408:	2180      	movs	r1, #128	; 0x80
 800140a:	0049      	lsls	r1, r1, #1
 800140c:	430a      	orrs	r2, r1
 800140e:	601a      	str	r2, [r3, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001410:	f7ff fb86 	bl	8000b20 <HAL_GetTick>
 8001414:	0003      	movs	r3, r0
 8001416:	61bb      	str	r3, [r7, #24]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001418:	e008      	b.n	800142c <HAL_RCC_OscConfig+0x314>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800141a:	f7ff fb81 	bl	8000b20 <HAL_GetTick>
 800141e:	0002      	movs	r2, r0
 8001420:	69bb      	ldr	r3, [r7, #24]
 8001422:	1ad3      	subs	r3, r2, r3
 8001424:	2b64      	cmp	r3, #100	; 0x64
 8001426:	d901      	bls.n	800142c <HAL_RCC_OscConfig+0x314>
        {
          return HAL_TIMEOUT;
 8001428:	2303      	movs	r3, #3
 800142a:	e1f5      	b.n	8001818 <HAL_RCC_OscConfig+0x700>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800142c:	4b0b      	ldr	r3, [pc, #44]	; (800145c <HAL_RCC_OscConfig+0x344>)
 800142e:	681a      	ldr	r2, [r3, #0]
 8001430:	2380      	movs	r3, #128	; 0x80
 8001432:	005b      	lsls	r3, r3, #1
 8001434:	4013      	ands	r3, r2
 8001436:	d0f0      	beq.n	800141a <HAL_RCC_OscConfig+0x302>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001438:	687b      	ldr	r3, [r7, #4]
 800143a:	689b      	ldr	r3, [r3, #8]
 800143c:	2b01      	cmp	r3, #1
 800143e:	d10f      	bne.n	8001460 <HAL_RCC_OscConfig+0x348>
 8001440:	4b03      	ldr	r3, [pc, #12]	; (8001450 <HAL_RCC_OscConfig+0x338>)
 8001442:	6a1a      	ldr	r2, [r3, #32]
 8001444:	4b02      	ldr	r3, [pc, #8]	; (8001450 <HAL_RCC_OscConfig+0x338>)
 8001446:	2101      	movs	r1, #1
 8001448:	430a      	orrs	r2, r1
 800144a:	621a      	str	r2, [r3, #32]
 800144c:	e036      	b.n	80014bc <HAL_RCC_OscConfig+0x3a4>
 800144e:	46c0      	nop			; (mov r8, r8)
 8001450:	40021000 	.word	0x40021000
 8001454:	fffeffff 	.word	0xfffeffff
 8001458:	fffbffff 	.word	0xfffbffff
 800145c:	40007000 	.word	0x40007000
 8001460:	687b      	ldr	r3, [r7, #4]
 8001462:	689b      	ldr	r3, [r3, #8]
 8001464:	2b00      	cmp	r3, #0
 8001466:	d10c      	bne.n	8001482 <HAL_RCC_OscConfig+0x36a>
 8001468:	4bca      	ldr	r3, [pc, #808]	; (8001794 <HAL_RCC_OscConfig+0x67c>)
 800146a:	6a1a      	ldr	r2, [r3, #32]
 800146c:	4bc9      	ldr	r3, [pc, #804]	; (8001794 <HAL_RCC_OscConfig+0x67c>)
 800146e:	2101      	movs	r1, #1
 8001470:	438a      	bics	r2, r1
 8001472:	621a      	str	r2, [r3, #32]
 8001474:	4bc7      	ldr	r3, [pc, #796]	; (8001794 <HAL_RCC_OscConfig+0x67c>)
 8001476:	6a1a      	ldr	r2, [r3, #32]
 8001478:	4bc6      	ldr	r3, [pc, #792]	; (8001794 <HAL_RCC_OscConfig+0x67c>)
 800147a:	2104      	movs	r1, #4
 800147c:	438a      	bics	r2, r1
 800147e:	621a      	str	r2, [r3, #32]
 8001480:	e01c      	b.n	80014bc <HAL_RCC_OscConfig+0x3a4>
 8001482:	687b      	ldr	r3, [r7, #4]
 8001484:	689b      	ldr	r3, [r3, #8]
 8001486:	2b05      	cmp	r3, #5
 8001488:	d10c      	bne.n	80014a4 <HAL_RCC_OscConfig+0x38c>
 800148a:	4bc2      	ldr	r3, [pc, #776]	; (8001794 <HAL_RCC_OscConfig+0x67c>)
 800148c:	6a1a      	ldr	r2, [r3, #32]
 800148e:	4bc1      	ldr	r3, [pc, #772]	; (8001794 <HAL_RCC_OscConfig+0x67c>)
 8001490:	2104      	movs	r1, #4
 8001492:	430a      	orrs	r2, r1
 8001494:	621a      	str	r2, [r3, #32]
 8001496:	4bbf      	ldr	r3, [pc, #764]	; (8001794 <HAL_RCC_OscConfig+0x67c>)
 8001498:	6a1a      	ldr	r2, [r3, #32]
 800149a:	4bbe      	ldr	r3, [pc, #760]	; (8001794 <HAL_RCC_OscConfig+0x67c>)
 800149c:	2101      	movs	r1, #1
 800149e:	430a      	orrs	r2, r1
 80014a0:	621a      	str	r2, [r3, #32]
 80014a2:	e00b      	b.n	80014bc <HAL_RCC_OscConfig+0x3a4>
 80014a4:	4bbb      	ldr	r3, [pc, #748]	; (8001794 <HAL_RCC_OscConfig+0x67c>)
 80014a6:	6a1a      	ldr	r2, [r3, #32]
 80014a8:	4bba      	ldr	r3, [pc, #744]	; (8001794 <HAL_RCC_OscConfig+0x67c>)
 80014aa:	2101      	movs	r1, #1
 80014ac:	438a      	bics	r2, r1
 80014ae:	621a      	str	r2, [r3, #32]
 80014b0:	4bb8      	ldr	r3, [pc, #736]	; (8001794 <HAL_RCC_OscConfig+0x67c>)
 80014b2:	6a1a      	ldr	r2, [r3, #32]
 80014b4:	4bb7      	ldr	r3, [pc, #732]	; (8001794 <HAL_RCC_OscConfig+0x67c>)
 80014b6:	2104      	movs	r1, #4
 80014b8:	438a      	bics	r2, r1
 80014ba:	621a      	str	r2, [r3, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80014bc:	687b      	ldr	r3, [r7, #4]
 80014be:	689b      	ldr	r3, [r3, #8]
 80014c0:	2b00      	cmp	r3, #0
 80014c2:	d014      	beq.n	80014ee <HAL_RCC_OscConfig+0x3d6>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80014c4:	f7ff fb2c 	bl	8000b20 <HAL_GetTick>
 80014c8:	0003      	movs	r3, r0
 80014ca:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80014cc:	e009      	b.n	80014e2 <HAL_RCC_OscConfig+0x3ca>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80014ce:	f7ff fb27 	bl	8000b20 <HAL_GetTick>
 80014d2:	0002      	movs	r2, r0
 80014d4:	69bb      	ldr	r3, [r7, #24]
 80014d6:	1ad3      	subs	r3, r2, r3
 80014d8:	4aaf      	ldr	r2, [pc, #700]	; (8001798 <HAL_RCC_OscConfig+0x680>)
 80014da:	4293      	cmp	r3, r2
 80014dc:	d901      	bls.n	80014e2 <HAL_RCC_OscConfig+0x3ca>
        {
          return HAL_TIMEOUT;
 80014de:	2303      	movs	r3, #3
 80014e0:	e19a      	b.n	8001818 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80014e2:	4bac      	ldr	r3, [pc, #688]	; (8001794 <HAL_RCC_OscConfig+0x67c>)
 80014e4:	6a1b      	ldr	r3, [r3, #32]
 80014e6:	2202      	movs	r2, #2
 80014e8:	4013      	ands	r3, r2
 80014ea:	d0f0      	beq.n	80014ce <HAL_RCC_OscConfig+0x3b6>
 80014ec:	e013      	b.n	8001516 <HAL_RCC_OscConfig+0x3fe>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80014ee:	f7ff fb17 	bl	8000b20 <HAL_GetTick>
 80014f2:	0003      	movs	r3, r0
 80014f4:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80014f6:	e009      	b.n	800150c <HAL_RCC_OscConfig+0x3f4>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80014f8:	f7ff fb12 	bl	8000b20 <HAL_GetTick>
 80014fc:	0002      	movs	r2, r0
 80014fe:	69bb      	ldr	r3, [r7, #24]
 8001500:	1ad3      	subs	r3, r2, r3
 8001502:	4aa5      	ldr	r2, [pc, #660]	; (8001798 <HAL_RCC_OscConfig+0x680>)
 8001504:	4293      	cmp	r3, r2
 8001506:	d901      	bls.n	800150c <HAL_RCC_OscConfig+0x3f4>
        {
          return HAL_TIMEOUT;
 8001508:	2303      	movs	r3, #3
 800150a:	e185      	b.n	8001818 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800150c:	4ba1      	ldr	r3, [pc, #644]	; (8001794 <HAL_RCC_OscConfig+0x67c>)
 800150e:	6a1b      	ldr	r3, [r3, #32]
 8001510:	2202      	movs	r2, #2
 8001512:	4013      	ands	r3, r2
 8001514:	d1f0      	bne.n	80014f8 <HAL_RCC_OscConfig+0x3e0>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8001516:	231f      	movs	r3, #31
 8001518:	18fb      	adds	r3, r7, r3
 800151a:	781b      	ldrb	r3, [r3, #0]
 800151c:	2b01      	cmp	r3, #1
 800151e:	d105      	bne.n	800152c <HAL_RCC_OscConfig+0x414>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001520:	4b9c      	ldr	r3, [pc, #624]	; (8001794 <HAL_RCC_OscConfig+0x67c>)
 8001522:	69da      	ldr	r2, [r3, #28]
 8001524:	4b9b      	ldr	r3, [pc, #620]	; (8001794 <HAL_RCC_OscConfig+0x67c>)
 8001526:	499d      	ldr	r1, [pc, #628]	; (800179c <HAL_RCC_OscConfig+0x684>)
 8001528:	400a      	ands	r2, r1
 800152a:	61da      	str	r2, [r3, #28]
    }
  }

  /*----------------------------- HSI14 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI14) == RCC_OSCILLATORTYPE_HSI14)
 800152c:	687b      	ldr	r3, [r7, #4]
 800152e:	681b      	ldr	r3, [r3, #0]
 8001530:	2210      	movs	r2, #16
 8001532:	4013      	ands	r3, r2
 8001534:	d063      	beq.n	80015fe <HAL_RCC_OscConfig+0x4e6>
    /* Check the parameters */
    assert_param(IS_RCC_HSI14(RCC_OscInitStruct->HSI14State));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSI14CalibrationValue));

    /* Check the HSI14 State */
    if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ON)
 8001536:	687b      	ldr	r3, [r7, #4]
 8001538:	695b      	ldr	r3, [r3, #20]
 800153a:	2b01      	cmp	r3, #1
 800153c:	d12a      	bne.n	8001594 <HAL_RCC_OscConfig+0x47c>
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 800153e:	4b95      	ldr	r3, [pc, #596]	; (8001794 <HAL_RCC_OscConfig+0x67c>)
 8001540:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001542:	4b94      	ldr	r3, [pc, #592]	; (8001794 <HAL_RCC_OscConfig+0x67c>)
 8001544:	2104      	movs	r1, #4
 8001546:	430a      	orrs	r2, r1
 8001548:	635a      	str	r2, [r3, #52]	; 0x34

      /* Enable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_ENABLE();
 800154a:	4b92      	ldr	r3, [pc, #584]	; (8001794 <HAL_RCC_OscConfig+0x67c>)
 800154c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800154e:	4b91      	ldr	r3, [pc, #580]	; (8001794 <HAL_RCC_OscConfig+0x67c>)
 8001550:	2101      	movs	r1, #1
 8001552:	430a      	orrs	r2, r1
 8001554:	635a      	str	r2, [r3, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001556:	f7ff fae3 	bl	8000b20 <HAL_GetTick>
 800155a:	0003      	movs	r3, r0
 800155c:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 800155e:	e008      	b.n	8001572 <HAL_RCC_OscConfig+0x45a>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 8001560:	f7ff fade 	bl	8000b20 <HAL_GetTick>
 8001564:	0002      	movs	r2, r0
 8001566:	69bb      	ldr	r3, [r7, #24]
 8001568:	1ad3      	subs	r3, r2, r3
 800156a:	2b02      	cmp	r3, #2
 800156c:	d901      	bls.n	8001572 <HAL_RCC_OscConfig+0x45a>
        {
          return HAL_TIMEOUT;
 800156e:	2303      	movs	r3, #3
 8001570:	e152      	b.n	8001818 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 8001572:	4b88      	ldr	r3, [pc, #544]	; (8001794 <HAL_RCC_OscConfig+0x67c>)
 8001574:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001576:	2202      	movs	r2, #2
 8001578:	4013      	ands	r3, r2
 800157a:	d0f1      	beq.n	8001560 <HAL_RCC_OscConfig+0x448>
        }      
      } 

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 800157c:	4b85      	ldr	r3, [pc, #532]	; (8001794 <HAL_RCC_OscConfig+0x67c>)
 800157e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001580:	22f8      	movs	r2, #248	; 0xf8
 8001582:	4393      	bics	r3, r2
 8001584:	0019      	movs	r1, r3
 8001586:	687b      	ldr	r3, [r7, #4]
 8001588:	699b      	ldr	r3, [r3, #24]
 800158a:	00da      	lsls	r2, r3, #3
 800158c:	4b81      	ldr	r3, [pc, #516]	; (8001794 <HAL_RCC_OscConfig+0x67c>)
 800158e:	430a      	orrs	r2, r1
 8001590:	635a      	str	r2, [r3, #52]	; 0x34
 8001592:	e034      	b.n	80015fe <HAL_RCC_OscConfig+0x4e6>
    }
    else if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ADC_CONTROL)
 8001594:	687b      	ldr	r3, [r7, #4]
 8001596:	695b      	ldr	r3, [r3, #20]
 8001598:	3305      	adds	r3, #5
 800159a:	d111      	bne.n	80015c0 <HAL_RCC_OscConfig+0x4a8>
    {
      /* Enable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_ENABLE();
 800159c:	4b7d      	ldr	r3, [pc, #500]	; (8001794 <HAL_RCC_OscConfig+0x67c>)
 800159e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80015a0:	4b7c      	ldr	r3, [pc, #496]	; (8001794 <HAL_RCC_OscConfig+0x67c>)
 80015a2:	2104      	movs	r1, #4
 80015a4:	438a      	bics	r2, r1
 80015a6:	635a      	str	r2, [r3, #52]	; 0x34

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 80015a8:	4b7a      	ldr	r3, [pc, #488]	; (8001794 <HAL_RCC_OscConfig+0x67c>)
 80015aa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80015ac:	22f8      	movs	r2, #248	; 0xf8
 80015ae:	4393      	bics	r3, r2
 80015b0:	0019      	movs	r1, r3
 80015b2:	687b      	ldr	r3, [r7, #4]
 80015b4:	699b      	ldr	r3, [r3, #24]
 80015b6:	00da      	lsls	r2, r3, #3
 80015b8:	4b76      	ldr	r3, [pc, #472]	; (8001794 <HAL_RCC_OscConfig+0x67c>)
 80015ba:	430a      	orrs	r2, r1
 80015bc:	635a      	str	r2, [r3, #52]	; 0x34
 80015be:	e01e      	b.n	80015fe <HAL_RCC_OscConfig+0x4e6>
    }
    else
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 80015c0:	4b74      	ldr	r3, [pc, #464]	; (8001794 <HAL_RCC_OscConfig+0x67c>)
 80015c2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80015c4:	4b73      	ldr	r3, [pc, #460]	; (8001794 <HAL_RCC_OscConfig+0x67c>)
 80015c6:	2104      	movs	r1, #4
 80015c8:	430a      	orrs	r2, r1
 80015ca:	635a      	str	r2, [r3, #52]	; 0x34

      /* Disable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_DISABLE();
 80015cc:	4b71      	ldr	r3, [pc, #452]	; (8001794 <HAL_RCC_OscConfig+0x67c>)
 80015ce:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80015d0:	4b70      	ldr	r3, [pc, #448]	; (8001794 <HAL_RCC_OscConfig+0x67c>)
 80015d2:	2101      	movs	r1, #1
 80015d4:	438a      	bics	r2, r1
 80015d6:	635a      	str	r2, [r3, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80015d8:	f7ff faa2 	bl	8000b20 <HAL_GetTick>
 80015dc:	0003      	movs	r3, r0
 80015de:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 80015e0:	e008      	b.n	80015f4 <HAL_RCC_OscConfig+0x4dc>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 80015e2:	f7ff fa9d 	bl	8000b20 <HAL_GetTick>
 80015e6:	0002      	movs	r2, r0
 80015e8:	69bb      	ldr	r3, [r7, #24]
 80015ea:	1ad3      	subs	r3, r2, r3
 80015ec:	2b02      	cmp	r3, #2
 80015ee:	d901      	bls.n	80015f4 <HAL_RCC_OscConfig+0x4dc>
        {
          return HAL_TIMEOUT;
 80015f0:	2303      	movs	r3, #3
 80015f2:	e111      	b.n	8001818 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 80015f4:	4b67      	ldr	r3, [pc, #412]	; (8001794 <HAL_RCC_OscConfig+0x67c>)
 80015f6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80015f8:	2202      	movs	r2, #2
 80015fa:	4013      	ands	r3, r2
 80015fc:	d1f1      	bne.n	80015e2 <HAL_RCC_OscConfig+0x4ca>
    }
  }

#if defined(RCC_HSI48_SUPPORT)
  /*----------------------------- HSI48 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80015fe:	687b      	ldr	r3, [r7, #4]
 8001600:	681b      	ldr	r3, [r3, #0]
 8001602:	2220      	movs	r2, #32
 8001604:	4013      	ands	r3, r2
 8001606:	d05c      	beq.n	80016c2 <HAL_RCC_OscConfig+0x5aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* When the HSI48 is used as system clock it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI48) ||
 8001608:	4b62      	ldr	r3, [pc, #392]	; (8001794 <HAL_RCC_OscConfig+0x67c>)
 800160a:	685b      	ldr	r3, [r3, #4]
 800160c:	220c      	movs	r2, #12
 800160e:	4013      	ands	r3, r2
 8001610:	2b0c      	cmp	r3, #12
 8001612:	d00e      	beq.n	8001632 <HAL_RCC_OscConfig+0x51a>
       ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI48)))
 8001614:	4b5f      	ldr	r3, [pc, #380]	; (8001794 <HAL_RCC_OscConfig+0x67c>)
 8001616:	685b      	ldr	r3, [r3, #4]
 8001618:	220c      	movs	r2, #12
 800161a:	4013      	ands	r3, r2
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI48) ||
 800161c:	2b08      	cmp	r3, #8
 800161e:	d114      	bne.n	800164a <HAL_RCC_OscConfig+0x532>
       ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI48)))
 8001620:	4b5c      	ldr	r3, [pc, #368]	; (8001794 <HAL_RCC_OscConfig+0x67c>)
 8001622:	685a      	ldr	r2, [r3, #4]
 8001624:	23c0      	movs	r3, #192	; 0xc0
 8001626:	025b      	lsls	r3, r3, #9
 8001628:	401a      	ands	r2, r3
 800162a:	23c0      	movs	r3, #192	; 0xc0
 800162c:	025b      	lsls	r3, r3, #9
 800162e:	429a      	cmp	r2, r3
 8001630:	d10b      	bne.n	800164a <HAL_RCC_OscConfig+0x532>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET) && (RCC_OscInitStruct->HSI48State != RCC_HSI48_ON))
 8001632:	4b58      	ldr	r3, [pc, #352]	; (8001794 <HAL_RCC_OscConfig+0x67c>)
 8001634:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001636:	2380      	movs	r3, #128	; 0x80
 8001638:	029b      	lsls	r3, r3, #10
 800163a:	4013      	ands	r3, r2
 800163c:	d040      	beq.n	80016c0 <HAL_RCC_OscConfig+0x5a8>
 800163e:	687b      	ldr	r3, [r7, #4]
 8001640:	6a1b      	ldr	r3, [r3, #32]
 8001642:	2b01      	cmp	r3, #1
 8001644:	d03c      	beq.n	80016c0 <HAL_RCC_OscConfig+0x5a8>
      {
        return HAL_ERROR;
 8001646:	2301      	movs	r3, #1
 8001648:	e0e6      	b.n	8001818 <HAL_RCC_OscConfig+0x700>
      }
    }
    else
    {
      /* Check the HSI48 State */
      if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 800164a:	687b      	ldr	r3, [r7, #4]
 800164c:	6a1b      	ldr	r3, [r3, #32]
 800164e:	2b00      	cmp	r3, #0
 8001650:	d01b      	beq.n	800168a <HAL_RCC_OscConfig+0x572>
      {
        /* Enable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_ENABLE();
 8001652:	4b50      	ldr	r3, [pc, #320]	; (8001794 <HAL_RCC_OscConfig+0x67c>)
 8001654:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001656:	4b4f      	ldr	r3, [pc, #316]	; (8001794 <HAL_RCC_OscConfig+0x67c>)
 8001658:	2180      	movs	r1, #128	; 0x80
 800165a:	0249      	lsls	r1, r1, #9
 800165c:	430a      	orrs	r2, r1
 800165e:	635a      	str	r2, [r3, #52]	; 0x34

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001660:	f7ff fa5e 	bl	8000b20 <HAL_GetTick>
 8001664:	0003      	movs	r3, r0
 8001666:	61bb      	str	r3, [r7, #24]
      
        /* Wait till HSI48 is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == RESET)
 8001668:	e008      	b.n	800167c <HAL_RCC_OscConfig+0x564>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800166a:	f7ff fa59 	bl	8000b20 <HAL_GetTick>
 800166e:	0002      	movs	r2, r0
 8001670:	69bb      	ldr	r3, [r7, #24]
 8001672:	1ad3      	subs	r3, r2, r3
 8001674:	2b02      	cmp	r3, #2
 8001676:	d901      	bls.n	800167c <HAL_RCC_OscConfig+0x564>
          {
            return HAL_TIMEOUT;
 8001678:	2303      	movs	r3, #3
 800167a:	e0cd      	b.n	8001818 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == RESET)
 800167c:	4b45      	ldr	r3, [pc, #276]	; (8001794 <HAL_RCC_OscConfig+0x67c>)
 800167e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001680:	2380      	movs	r3, #128	; 0x80
 8001682:	029b      	lsls	r3, r3, #10
 8001684:	4013      	ands	r3, r2
 8001686:	d0f0      	beq.n	800166a <HAL_RCC_OscConfig+0x552>
 8001688:	e01b      	b.n	80016c2 <HAL_RCC_OscConfig+0x5aa>
        } 
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_DISABLE();
 800168a:	4b42      	ldr	r3, [pc, #264]	; (8001794 <HAL_RCC_OscConfig+0x67c>)
 800168c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800168e:	4b41      	ldr	r3, [pc, #260]	; (8001794 <HAL_RCC_OscConfig+0x67c>)
 8001690:	4943      	ldr	r1, [pc, #268]	; (80017a0 <HAL_RCC_OscConfig+0x688>)
 8001692:	400a      	ands	r2, r1
 8001694:	635a      	str	r2, [r3, #52]	; 0x34

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001696:	f7ff fa43 	bl	8000b20 <HAL_GetTick>
 800169a:	0003      	movs	r3, r0
 800169c:	61bb      	str	r3, [r7, #24]
      
        /* Wait till HSI48 is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET)
 800169e:	e008      	b.n	80016b2 <HAL_RCC_OscConfig+0x59a>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80016a0:	f7ff fa3e 	bl	8000b20 <HAL_GetTick>
 80016a4:	0002      	movs	r2, r0
 80016a6:	69bb      	ldr	r3, [r7, #24]
 80016a8:	1ad3      	subs	r3, r2, r3
 80016aa:	2b02      	cmp	r3, #2
 80016ac:	d901      	bls.n	80016b2 <HAL_RCC_OscConfig+0x59a>
          {
            return HAL_TIMEOUT;
 80016ae:	2303      	movs	r3, #3
 80016b0:	e0b2      	b.n	8001818 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET)
 80016b2:	4b38      	ldr	r3, [pc, #224]	; (8001794 <HAL_RCC_OscConfig+0x67c>)
 80016b4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80016b6:	2380      	movs	r3, #128	; 0x80
 80016b8:	029b      	lsls	r3, r3, #10
 80016ba:	4013      	ands	r3, r2
 80016bc:	d1f0      	bne.n	80016a0 <HAL_RCC_OscConfig+0x588>
 80016be:	e000      	b.n	80016c2 <HAL_RCC_OscConfig+0x5aa>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET) && (RCC_OscInitStruct->HSI48State != RCC_HSI48_ON))
 80016c0:	46c0      	nop			; (mov r8, r8)
#endif /* RCC_HSI48_SUPPORT */
       
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80016c2:	687b      	ldr	r3, [r7, #4]
 80016c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80016c6:	2b00      	cmp	r3, #0
 80016c8:	d100      	bne.n	80016cc <HAL_RCC_OscConfig+0x5b4>
 80016ca:	e0a4      	b.n	8001816 <HAL_RCC_OscConfig+0x6fe>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80016cc:	4b31      	ldr	r3, [pc, #196]	; (8001794 <HAL_RCC_OscConfig+0x67c>)
 80016ce:	685b      	ldr	r3, [r3, #4]
 80016d0:	220c      	movs	r2, #12
 80016d2:	4013      	ands	r3, r2
 80016d4:	2b08      	cmp	r3, #8
 80016d6:	d100      	bne.n	80016da <HAL_RCC_OscConfig+0x5c2>
 80016d8:	e078      	b.n	80017cc <HAL_RCC_OscConfig+0x6b4>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80016da:	687b      	ldr	r3, [r7, #4]
 80016dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80016de:	2b02      	cmp	r3, #2
 80016e0:	d14c      	bne.n	800177c <HAL_RCC_OscConfig+0x664>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80016e2:	4b2c      	ldr	r3, [pc, #176]	; (8001794 <HAL_RCC_OscConfig+0x67c>)
 80016e4:	681a      	ldr	r2, [r3, #0]
 80016e6:	4b2b      	ldr	r3, [pc, #172]	; (8001794 <HAL_RCC_OscConfig+0x67c>)
 80016e8:	492e      	ldr	r1, [pc, #184]	; (80017a4 <HAL_RCC_OscConfig+0x68c>)
 80016ea:	400a      	ands	r2, r1
 80016ec:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80016ee:	f7ff fa17 	bl	8000b20 <HAL_GetTick>
 80016f2:	0003      	movs	r3, r0
 80016f4:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80016f6:	e008      	b.n	800170a <HAL_RCC_OscConfig+0x5f2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80016f8:	f7ff fa12 	bl	8000b20 <HAL_GetTick>
 80016fc:	0002      	movs	r2, r0
 80016fe:	69bb      	ldr	r3, [r7, #24]
 8001700:	1ad3      	subs	r3, r2, r3
 8001702:	2b02      	cmp	r3, #2
 8001704:	d901      	bls.n	800170a <HAL_RCC_OscConfig+0x5f2>
          {
            return HAL_TIMEOUT;
 8001706:	2303      	movs	r3, #3
 8001708:	e086      	b.n	8001818 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800170a:	4b22      	ldr	r3, [pc, #136]	; (8001794 <HAL_RCC_OscConfig+0x67c>)
 800170c:	681a      	ldr	r2, [r3, #0]
 800170e:	2380      	movs	r3, #128	; 0x80
 8001710:	049b      	lsls	r3, r3, #18
 8001712:	4013      	ands	r3, r2
 8001714:	d1f0      	bne.n	80016f8 <HAL_RCC_OscConfig+0x5e0>
          }
        }

        /* Configure the main PLL clock source, predivider and multiplication factor. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001716:	4b1f      	ldr	r3, [pc, #124]	; (8001794 <HAL_RCC_OscConfig+0x67c>)
 8001718:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800171a:	220f      	movs	r2, #15
 800171c:	4393      	bics	r3, r2
 800171e:	0019      	movs	r1, r3
 8001720:	687b      	ldr	r3, [r7, #4]
 8001722:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001724:	4b1b      	ldr	r3, [pc, #108]	; (8001794 <HAL_RCC_OscConfig+0x67c>)
 8001726:	430a      	orrs	r2, r1
 8001728:	62da      	str	r2, [r3, #44]	; 0x2c
 800172a:	4b1a      	ldr	r3, [pc, #104]	; (8001794 <HAL_RCC_OscConfig+0x67c>)
 800172c:	685b      	ldr	r3, [r3, #4]
 800172e:	4a1e      	ldr	r2, [pc, #120]	; (80017a8 <HAL_RCC_OscConfig+0x690>)
 8001730:	4013      	ands	r3, r2
 8001732:	0019      	movs	r1, r3
 8001734:	687b      	ldr	r3, [r7, #4]
 8001736:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001738:	687b      	ldr	r3, [r7, #4]
 800173a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800173c:	431a      	orrs	r2, r3
 800173e:	4b15      	ldr	r3, [pc, #84]	; (8001794 <HAL_RCC_OscConfig+0x67c>)
 8001740:	430a      	orrs	r2, r1
 8001742:	605a      	str	r2, [r3, #4]
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001744:	4b13      	ldr	r3, [pc, #76]	; (8001794 <HAL_RCC_OscConfig+0x67c>)
 8001746:	681a      	ldr	r2, [r3, #0]
 8001748:	4b12      	ldr	r3, [pc, #72]	; (8001794 <HAL_RCC_OscConfig+0x67c>)
 800174a:	2180      	movs	r1, #128	; 0x80
 800174c:	0449      	lsls	r1, r1, #17
 800174e:	430a      	orrs	r2, r1
 8001750:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001752:	f7ff f9e5 	bl	8000b20 <HAL_GetTick>
 8001756:	0003      	movs	r3, r0
 8001758:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800175a:	e008      	b.n	800176e <HAL_RCC_OscConfig+0x656>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800175c:	f7ff f9e0 	bl	8000b20 <HAL_GetTick>
 8001760:	0002      	movs	r2, r0
 8001762:	69bb      	ldr	r3, [r7, #24]
 8001764:	1ad3      	subs	r3, r2, r3
 8001766:	2b02      	cmp	r3, #2
 8001768:	d901      	bls.n	800176e <HAL_RCC_OscConfig+0x656>
          {
            return HAL_TIMEOUT;
 800176a:	2303      	movs	r3, #3
 800176c:	e054      	b.n	8001818 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800176e:	4b09      	ldr	r3, [pc, #36]	; (8001794 <HAL_RCC_OscConfig+0x67c>)
 8001770:	681a      	ldr	r2, [r3, #0]
 8001772:	2380      	movs	r3, #128	; 0x80
 8001774:	049b      	lsls	r3, r3, #18
 8001776:	4013      	ands	r3, r2
 8001778:	d0f0      	beq.n	800175c <HAL_RCC_OscConfig+0x644>
 800177a:	e04c      	b.n	8001816 <HAL_RCC_OscConfig+0x6fe>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800177c:	4b05      	ldr	r3, [pc, #20]	; (8001794 <HAL_RCC_OscConfig+0x67c>)
 800177e:	681a      	ldr	r2, [r3, #0]
 8001780:	4b04      	ldr	r3, [pc, #16]	; (8001794 <HAL_RCC_OscConfig+0x67c>)
 8001782:	4908      	ldr	r1, [pc, #32]	; (80017a4 <HAL_RCC_OscConfig+0x68c>)
 8001784:	400a      	ands	r2, r1
 8001786:	601a      	str	r2, [r3, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001788:	f7ff f9ca 	bl	8000b20 <HAL_GetTick>
 800178c:	0003      	movs	r3, r0
 800178e:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001790:	e015      	b.n	80017be <HAL_RCC_OscConfig+0x6a6>
 8001792:	46c0      	nop			; (mov r8, r8)
 8001794:	40021000 	.word	0x40021000
 8001798:	00001388 	.word	0x00001388
 800179c:	efffffff 	.word	0xefffffff
 80017a0:	fffeffff 	.word	0xfffeffff
 80017a4:	feffffff 	.word	0xfeffffff
 80017a8:	ffc27fff 	.word	0xffc27fff
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80017ac:	f7ff f9b8 	bl	8000b20 <HAL_GetTick>
 80017b0:	0002      	movs	r2, r0
 80017b2:	69bb      	ldr	r3, [r7, #24]
 80017b4:	1ad3      	subs	r3, r2, r3
 80017b6:	2b02      	cmp	r3, #2
 80017b8:	d901      	bls.n	80017be <HAL_RCC_OscConfig+0x6a6>
          {
            return HAL_TIMEOUT;
 80017ba:	2303      	movs	r3, #3
 80017bc:	e02c      	b.n	8001818 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80017be:	4b18      	ldr	r3, [pc, #96]	; (8001820 <HAL_RCC_OscConfig+0x708>)
 80017c0:	681a      	ldr	r2, [r3, #0]
 80017c2:	2380      	movs	r3, #128	; 0x80
 80017c4:	049b      	lsls	r3, r3, #18
 80017c6:	4013      	ands	r3, r2
 80017c8:	d1f0      	bne.n	80017ac <HAL_RCC_OscConfig+0x694>
 80017ca:	e024      	b.n	8001816 <HAL_RCC_OscConfig+0x6fe>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80017cc:	687b      	ldr	r3, [r7, #4]
 80017ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80017d0:	2b01      	cmp	r3, #1
 80017d2:	d101      	bne.n	80017d8 <HAL_RCC_OscConfig+0x6c0>
      {
        return HAL_ERROR;
 80017d4:	2301      	movs	r3, #1
 80017d6:	e01f      	b.n	8001818 <HAL_RCC_OscConfig+0x700>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config  = RCC->CFGR;
 80017d8:	4b11      	ldr	r3, [pc, #68]	; (8001820 <HAL_RCC_OscConfig+0x708>)
 80017da:	685b      	ldr	r3, [r3, #4]
 80017dc:	617b      	str	r3, [r7, #20]
        pll_config2 = RCC->CFGR2;
 80017de:	4b10      	ldr	r3, [pc, #64]	; (8001820 <HAL_RCC_OscConfig+0x708>)
 80017e0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80017e2:	613b      	str	r3, [r7, #16]
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80017e4:	697a      	ldr	r2, [r7, #20]
 80017e6:	23c0      	movs	r3, #192	; 0xc0
 80017e8:	025b      	lsls	r3, r3, #9
 80017ea:	401a      	ands	r2, r3
 80017ec:	687b      	ldr	r3, [r7, #4]
 80017ee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80017f0:	429a      	cmp	r2, r3
 80017f2:	d10e      	bne.n	8001812 <HAL_RCC_OscConfig+0x6fa>
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 80017f4:	693b      	ldr	r3, [r7, #16]
 80017f6:	220f      	movs	r2, #15
 80017f8:	401a      	ands	r2, r3
 80017fa:	687b      	ldr	r3, [r7, #4]
 80017fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80017fe:	429a      	cmp	r2, r3
 8001800:	d107      	bne.n	8001812 <HAL_RCC_OscConfig+0x6fa>
           (READ_BIT(pll_config,  RCC_CFGR_PLLMUL)  != RCC_OscInitStruct->PLL.PLLMUL))
 8001802:	697a      	ldr	r2, [r7, #20]
 8001804:	23f0      	movs	r3, #240	; 0xf0
 8001806:	039b      	lsls	r3, r3, #14
 8001808:	401a      	ands	r2, r3
 800180a:	687b      	ldr	r3, [r7, #4]
 800180c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 800180e:	429a      	cmp	r2, r3
 8001810:	d001      	beq.n	8001816 <HAL_RCC_OscConfig+0x6fe>
        {
          return HAL_ERROR;
 8001812:	2301      	movs	r3, #1
 8001814:	e000      	b.n	8001818 <HAL_RCC_OscConfig+0x700>
        }
      }
    }
  }

  return HAL_OK;
 8001816:	2300      	movs	r3, #0
}
 8001818:	0018      	movs	r0, r3
 800181a:	46bd      	mov	sp, r7
 800181c:	b008      	add	sp, #32
 800181e:	bd80      	pop	{r7, pc}
 8001820:	40021000 	.word	0x40021000

08001824 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001824:	b580      	push	{r7, lr}
 8001826:	b084      	sub	sp, #16
 8001828:	af00      	add	r7, sp, #0
 800182a:	6078      	str	r0, [r7, #4]
 800182c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800182e:	687b      	ldr	r3, [r7, #4]
 8001830:	2b00      	cmp	r3, #0
 8001832:	d101      	bne.n	8001838 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001834:	2301      	movs	r3, #1
 8001836:	e0bf      	b.n	80019b8 <HAL_RCC_ClockConfig+0x194>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001838:	4b61      	ldr	r3, [pc, #388]	; (80019c0 <HAL_RCC_ClockConfig+0x19c>)
 800183a:	681b      	ldr	r3, [r3, #0]
 800183c:	2201      	movs	r2, #1
 800183e:	4013      	ands	r3, r2
 8001840:	683a      	ldr	r2, [r7, #0]
 8001842:	429a      	cmp	r2, r3
 8001844:	d911      	bls.n	800186a <HAL_RCC_ClockConfig+0x46>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001846:	4b5e      	ldr	r3, [pc, #376]	; (80019c0 <HAL_RCC_ClockConfig+0x19c>)
 8001848:	681b      	ldr	r3, [r3, #0]
 800184a:	2201      	movs	r2, #1
 800184c:	4393      	bics	r3, r2
 800184e:	0019      	movs	r1, r3
 8001850:	4b5b      	ldr	r3, [pc, #364]	; (80019c0 <HAL_RCC_ClockConfig+0x19c>)
 8001852:	683a      	ldr	r2, [r7, #0]
 8001854:	430a      	orrs	r2, r1
 8001856:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001858:	4b59      	ldr	r3, [pc, #356]	; (80019c0 <HAL_RCC_ClockConfig+0x19c>)
 800185a:	681b      	ldr	r3, [r3, #0]
 800185c:	2201      	movs	r2, #1
 800185e:	4013      	ands	r3, r2
 8001860:	683a      	ldr	r2, [r7, #0]
 8001862:	429a      	cmp	r2, r3
 8001864:	d001      	beq.n	800186a <HAL_RCC_ClockConfig+0x46>
    {
      return HAL_ERROR;
 8001866:	2301      	movs	r3, #1
 8001868:	e0a6      	b.n	80019b8 <HAL_RCC_ClockConfig+0x194>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800186a:	687b      	ldr	r3, [r7, #4]
 800186c:	681b      	ldr	r3, [r3, #0]
 800186e:	2202      	movs	r2, #2
 8001870:	4013      	ands	r3, r2
 8001872:	d015      	beq.n	80018a0 <HAL_RCC_ClockConfig+0x7c>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001874:	687b      	ldr	r3, [r7, #4]
 8001876:	681b      	ldr	r3, [r3, #0]
 8001878:	2204      	movs	r2, #4
 800187a:	4013      	ands	r3, r2
 800187c:	d006      	beq.n	800188c <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 800187e:	4b51      	ldr	r3, [pc, #324]	; (80019c4 <HAL_RCC_ClockConfig+0x1a0>)
 8001880:	685a      	ldr	r2, [r3, #4]
 8001882:	4b50      	ldr	r3, [pc, #320]	; (80019c4 <HAL_RCC_ClockConfig+0x1a0>)
 8001884:	21e0      	movs	r1, #224	; 0xe0
 8001886:	00c9      	lsls	r1, r1, #3
 8001888:	430a      	orrs	r2, r1
 800188a:	605a      	str	r2, [r3, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800188c:	4b4d      	ldr	r3, [pc, #308]	; (80019c4 <HAL_RCC_ClockConfig+0x1a0>)
 800188e:	685b      	ldr	r3, [r3, #4]
 8001890:	22f0      	movs	r2, #240	; 0xf0
 8001892:	4393      	bics	r3, r2
 8001894:	0019      	movs	r1, r3
 8001896:	687b      	ldr	r3, [r7, #4]
 8001898:	689a      	ldr	r2, [r3, #8]
 800189a:	4b4a      	ldr	r3, [pc, #296]	; (80019c4 <HAL_RCC_ClockConfig+0x1a0>)
 800189c:	430a      	orrs	r2, r1
 800189e:	605a      	str	r2, [r3, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80018a0:	687b      	ldr	r3, [r7, #4]
 80018a2:	681b      	ldr	r3, [r3, #0]
 80018a4:	2201      	movs	r2, #1
 80018a6:	4013      	ands	r3, r2
 80018a8:	d04c      	beq.n	8001944 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80018aa:	687b      	ldr	r3, [r7, #4]
 80018ac:	685b      	ldr	r3, [r3, #4]
 80018ae:	2b01      	cmp	r3, #1
 80018b0:	d107      	bne.n	80018c2 <HAL_RCC_ClockConfig+0x9e>
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80018b2:	4b44      	ldr	r3, [pc, #272]	; (80019c4 <HAL_RCC_ClockConfig+0x1a0>)
 80018b4:	681a      	ldr	r2, [r3, #0]
 80018b6:	2380      	movs	r3, #128	; 0x80
 80018b8:	029b      	lsls	r3, r3, #10
 80018ba:	4013      	ands	r3, r2
 80018bc:	d120      	bne.n	8001900 <HAL_RCC_ClockConfig+0xdc>
      {
        return HAL_ERROR;
 80018be:	2301      	movs	r3, #1
 80018c0:	e07a      	b.n	80019b8 <HAL_RCC_ClockConfig+0x194>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80018c2:	687b      	ldr	r3, [r7, #4]
 80018c4:	685b      	ldr	r3, [r3, #4]
 80018c6:	2b02      	cmp	r3, #2
 80018c8:	d107      	bne.n	80018da <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80018ca:	4b3e      	ldr	r3, [pc, #248]	; (80019c4 <HAL_RCC_ClockConfig+0x1a0>)
 80018cc:	681a      	ldr	r2, [r3, #0]
 80018ce:	2380      	movs	r3, #128	; 0x80
 80018d0:	049b      	lsls	r3, r3, #18
 80018d2:	4013      	ands	r3, r2
 80018d4:	d114      	bne.n	8001900 <HAL_RCC_ClockConfig+0xdc>
      {
        return HAL_ERROR;
 80018d6:	2301      	movs	r3, #1
 80018d8:	e06e      	b.n	80019b8 <HAL_RCC_ClockConfig+0x194>
      }
    }
#if defined(RCC_CFGR_SWS_HSI48)
    /* HSI48 is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI48)
 80018da:	687b      	ldr	r3, [r7, #4]
 80018dc:	685b      	ldr	r3, [r3, #4]
 80018de:	2b03      	cmp	r3, #3
 80018e0:	d107      	bne.n	80018f2 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the HSI48 ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == RESET)
 80018e2:	4b38      	ldr	r3, [pc, #224]	; (80019c4 <HAL_RCC_ClockConfig+0x1a0>)
 80018e4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80018e6:	2380      	movs	r3, #128	; 0x80
 80018e8:	029b      	lsls	r3, r3, #10
 80018ea:	4013      	ands	r3, r2
 80018ec:	d108      	bne.n	8001900 <HAL_RCC_ClockConfig+0xdc>
      {
        return HAL_ERROR;
 80018ee:	2301      	movs	r3, #1
 80018f0:	e062      	b.n	80019b8 <HAL_RCC_ClockConfig+0x194>
#endif /* RCC_CFGR_SWS_HSI48 */
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80018f2:	4b34      	ldr	r3, [pc, #208]	; (80019c4 <HAL_RCC_ClockConfig+0x1a0>)
 80018f4:	681b      	ldr	r3, [r3, #0]
 80018f6:	2202      	movs	r2, #2
 80018f8:	4013      	ands	r3, r2
 80018fa:	d101      	bne.n	8001900 <HAL_RCC_ClockConfig+0xdc>
      {
        return HAL_ERROR;
 80018fc:	2301      	movs	r3, #1
 80018fe:	e05b      	b.n	80019b8 <HAL_RCC_ClockConfig+0x194>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001900:	4b30      	ldr	r3, [pc, #192]	; (80019c4 <HAL_RCC_ClockConfig+0x1a0>)
 8001902:	685b      	ldr	r3, [r3, #4]
 8001904:	2203      	movs	r2, #3
 8001906:	4393      	bics	r3, r2
 8001908:	0019      	movs	r1, r3
 800190a:	687b      	ldr	r3, [r7, #4]
 800190c:	685a      	ldr	r2, [r3, #4]
 800190e:	4b2d      	ldr	r3, [pc, #180]	; (80019c4 <HAL_RCC_ClockConfig+0x1a0>)
 8001910:	430a      	orrs	r2, r1
 8001912:	605a      	str	r2, [r3, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001914:	f7ff f904 	bl	8000b20 <HAL_GetTick>
 8001918:	0003      	movs	r3, r0
 800191a:	60fb      	str	r3, [r7, #12]
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800191c:	e009      	b.n	8001932 <HAL_RCC_ClockConfig+0x10e>
    {
      if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 800191e:	f7ff f8ff 	bl	8000b20 <HAL_GetTick>
 8001922:	0002      	movs	r2, r0
 8001924:	68fb      	ldr	r3, [r7, #12]
 8001926:	1ad3      	subs	r3, r2, r3
 8001928:	4a27      	ldr	r2, [pc, #156]	; (80019c8 <HAL_RCC_ClockConfig+0x1a4>)
 800192a:	4293      	cmp	r3, r2
 800192c:	d901      	bls.n	8001932 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800192e:	2303      	movs	r3, #3
 8001930:	e042      	b.n	80019b8 <HAL_RCC_ClockConfig+0x194>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001932:	4b24      	ldr	r3, [pc, #144]	; (80019c4 <HAL_RCC_ClockConfig+0x1a0>)
 8001934:	685b      	ldr	r3, [r3, #4]
 8001936:	220c      	movs	r2, #12
 8001938:	401a      	ands	r2, r3
 800193a:	687b      	ldr	r3, [r7, #4]
 800193c:	685b      	ldr	r3, [r3, #4]
 800193e:	009b      	lsls	r3, r3, #2
 8001940:	429a      	cmp	r2, r3
 8001942:	d1ec      	bne.n	800191e <HAL_RCC_ClockConfig+0xfa>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001944:	4b1e      	ldr	r3, [pc, #120]	; (80019c0 <HAL_RCC_ClockConfig+0x19c>)
 8001946:	681b      	ldr	r3, [r3, #0]
 8001948:	2201      	movs	r2, #1
 800194a:	4013      	ands	r3, r2
 800194c:	683a      	ldr	r2, [r7, #0]
 800194e:	429a      	cmp	r2, r3
 8001950:	d211      	bcs.n	8001976 <HAL_RCC_ClockConfig+0x152>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001952:	4b1b      	ldr	r3, [pc, #108]	; (80019c0 <HAL_RCC_ClockConfig+0x19c>)
 8001954:	681b      	ldr	r3, [r3, #0]
 8001956:	2201      	movs	r2, #1
 8001958:	4393      	bics	r3, r2
 800195a:	0019      	movs	r1, r3
 800195c:	4b18      	ldr	r3, [pc, #96]	; (80019c0 <HAL_RCC_ClockConfig+0x19c>)
 800195e:	683a      	ldr	r2, [r7, #0]
 8001960:	430a      	orrs	r2, r1
 8001962:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001964:	4b16      	ldr	r3, [pc, #88]	; (80019c0 <HAL_RCC_ClockConfig+0x19c>)
 8001966:	681b      	ldr	r3, [r3, #0]
 8001968:	2201      	movs	r2, #1
 800196a:	4013      	ands	r3, r2
 800196c:	683a      	ldr	r2, [r7, #0]
 800196e:	429a      	cmp	r2, r3
 8001970:	d001      	beq.n	8001976 <HAL_RCC_ClockConfig+0x152>
    {
      return HAL_ERROR;
 8001972:	2301      	movs	r3, #1
 8001974:	e020      	b.n	80019b8 <HAL_RCC_ClockConfig+0x194>
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001976:	687b      	ldr	r3, [r7, #4]
 8001978:	681b      	ldr	r3, [r3, #0]
 800197a:	2204      	movs	r2, #4
 800197c:	4013      	ands	r3, r2
 800197e:	d009      	beq.n	8001994 <HAL_RCC_ClockConfig+0x170>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 8001980:	4b10      	ldr	r3, [pc, #64]	; (80019c4 <HAL_RCC_ClockConfig+0x1a0>)
 8001982:	685b      	ldr	r3, [r3, #4]
 8001984:	4a11      	ldr	r2, [pc, #68]	; (80019cc <HAL_RCC_ClockConfig+0x1a8>)
 8001986:	4013      	ands	r3, r2
 8001988:	0019      	movs	r1, r3
 800198a:	687b      	ldr	r3, [r7, #4]
 800198c:	68da      	ldr	r2, [r3, #12]
 800198e:	4b0d      	ldr	r3, [pc, #52]	; (80019c4 <HAL_RCC_ClockConfig+0x1a0>)
 8001990:	430a      	orrs	r2, r1
 8001992:	605a      	str	r2, [r3, #4]
  }
  
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8001994:	f000 f820 	bl	80019d8 <HAL_RCC_GetSysClockFreq>
 8001998:	0001      	movs	r1, r0
 800199a:	4b0a      	ldr	r3, [pc, #40]	; (80019c4 <HAL_RCC_ClockConfig+0x1a0>)
 800199c:	685b      	ldr	r3, [r3, #4]
 800199e:	091b      	lsrs	r3, r3, #4
 80019a0:	220f      	movs	r2, #15
 80019a2:	4013      	ands	r3, r2
 80019a4:	4a0a      	ldr	r2, [pc, #40]	; (80019d0 <HAL_RCC_ClockConfig+0x1ac>)
 80019a6:	5cd3      	ldrb	r3, [r2, r3]
 80019a8:	000a      	movs	r2, r1
 80019aa:	40da      	lsrs	r2, r3
 80019ac:	4b09      	ldr	r3, [pc, #36]	; (80019d4 <HAL_RCC_ClockConfig+0x1b0>)
 80019ae:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (TICK_INT_PRIORITY);
 80019b0:	2003      	movs	r0, #3
 80019b2:	f7ff f86f 	bl	8000a94 <HAL_InitTick>
  
  return HAL_OK;
 80019b6:	2300      	movs	r3, #0
}
 80019b8:	0018      	movs	r0, r3
 80019ba:	46bd      	mov	sp, r7
 80019bc:	b004      	add	sp, #16
 80019be:	bd80      	pop	{r7, pc}
 80019c0:	40022000 	.word	0x40022000
 80019c4:	40021000 	.word	0x40021000
 80019c8:	00001388 	.word	0x00001388
 80019cc:	fffff8ff 	.word	0xfffff8ff
 80019d0:	08004698 	.word	0x08004698
 80019d4:	200000c0 	.word	0x200000c0

080019d8 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80019d8:	b580      	push	{r7, lr}
 80019da:	b086      	sub	sp, #24
 80019dc:	af00      	add	r7, sp, #0
  static const uint8_t aPLLMULFactorTable[16U] = { 2U,  3U,  4U,  5U,  6U,  7U,  8U,  9U,
                                                   10U, 11U, 12U, 13U, 14U, 15U, 16U, 16U};
  static const uint8_t aPredivFactorTable[16U] = { 1U, 2U,  3U,  4U,  5U,  6U,  7U,  8U,
                                                   9U,10U, 11U, 12U, 13U, 14U, 15U, 16U};

  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80019de:	2300      	movs	r3, #0
 80019e0:	60fb      	str	r3, [r7, #12]
 80019e2:	2300      	movs	r3, #0
 80019e4:	60bb      	str	r3, [r7, #8]
 80019e6:	2300      	movs	r3, #0
 80019e8:	617b      	str	r3, [r7, #20]
 80019ea:	2300      	movs	r3, #0
 80019ec:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 80019ee:	2300      	movs	r3, #0
 80019f0:	613b      	str	r3, [r7, #16]
  
  tmpreg = RCC->CFGR;
 80019f2:	4b2d      	ldr	r3, [pc, #180]	; (8001aa8 <HAL_RCC_GetSysClockFreq+0xd0>)
 80019f4:	685b      	ldr	r3, [r3, #4]
 80019f6:	60fb      	str	r3, [r7, #12]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80019f8:	68fb      	ldr	r3, [r7, #12]
 80019fa:	220c      	movs	r2, #12
 80019fc:	4013      	ands	r3, r2
 80019fe:	2b0c      	cmp	r3, #12
 8001a00:	d046      	beq.n	8001a90 <HAL_RCC_GetSysClockFreq+0xb8>
 8001a02:	d848      	bhi.n	8001a96 <HAL_RCC_GetSysClockFreq+0xbe>
 8001a04:	2b04      	cmp	r3, #4
 8001a06:	d002      	beq.n	8001a0e <HAL_RCC_GetSysClockFreq+0x36>
 8001a08:	2b08      	cmp	r3, #8
 8001a0a:	d003      	beq.n	8001a14 <HAL_RCC_GetSysClockFreq+0x3c>
 8001a0c:	e043      	b.n	8001a96 <HAL_RCC_GetSysClockFreq+0xbe>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8001a0e:	4b27      	ldr	r3, [pc, #156]	; (8001aac <HAL_RCC_GetSysClockFreq+0xd4>)
 8001a10:	613b      	str	r3, [r7, #16]
      break;
 8001a12:	e043      	b.n	8001a9c <HAL_RCC_GetSysClockFreq+0xc4>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_BITNUMBER];
 8001a14:	68fb      	ldr	r3, [r7, #12]
 8001a16:	0c9b      	lsrs	r3, r3, #18
 8001a18:	220f      	movs	r2, #15
 8001a1a:	4013      	ands	r3, r2
 8001a1c:	4a24      	ldr	r2, [pc, #144]	; (8001ab0 <HAL_RCC_GetSysClockFreq+0xd8>)
 8001a1e:	5cd3      	ldrb	r3, [r2, r3]
 8001a20:	607b      	str	r3, [r7, #4]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> RCC_CFGR2_PREDIV_BITNUMBER];
 8001a22:	4b21      	ldr	r3, [pc, #132]	; (8001aa8 <HAL_RCC_GetSysClockFreq+0xd0>)
 8001a24:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001a26:	220f      	movs	r2, #15
 8001a28:	4013      	ands	r3, r2
 8001a2a:	4a22      	ldr	r2, [pc, #136]	; (8001ab4 <HAL_RCC_GetSysClockFreq+0xdc>)
 8001a2c:	5cd3      	ldrb	r3, [r2, r3]
 8001a2e:	60bb      	str	r3, [r7, #8]
      if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 8001a30:	68fa      	ldr	r2, [r7, #12]
 8001a32:	23c0      	movs	r3, #192	; 0xc0
 8001a34:	025b      	lsls	r3, r3, #9
 8001a36:	401a      	ands	r2, r3
 8001a38:	2380      	movs	r3, #128	; 0x80
 8001a3a:	025b      	lsls	r3, r3, #9
 8001a3c:	429a      	cmp	r2, r3
 8001a3e:	d109      	bne.n	8001a54 <HAL_RCC_GetSysClockFreq+0x7c>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8001a40:	68b9      	ldr	r1, [r7, #8]
 8001a42:	481a      	ldr	r0, [pc, #104]	; (8001aac <HAL_RCC_GetSysClockFreq+0xd4>)
 8001a44:	f7fe fb68 	bl	8000118 <__udivsi3>
 8001a48:	0003      	movs	r3, r0
 8001a4a:	001a      	movs	r2, r3
 8001a4c:	687b      	ldr	r3, [r7, #4]
 8001a4e:	4353      	muls	r3, r2
 8001a50:	617b      	str	r3, [r7, #20]
 8001a52:	e01a      	b.n	8001a8a <HAL_RCC_GetSysClockFreq+0xb2>
      }
#if defined(RCC_CFGR_PLLSRC_HSI48_PREDIV)
      else if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSI48)
 8001a54:	68fa      	ldr	r2, [r7, #12]
 8001a56:	23c0      	movs	r3, #192	; 0xc0
 8001a58:	025b      	lsls	r3, r3, #9
 8001a5a:	401a      	ands	r2, r3
 8001a5c:	23c0      	movs	r3, #192	; 0xc0
 8001a5e:	025b      	lsls	r3, r3, #9
 8001a60:	429a      	cmp	r2, r3
 8001a62:	d109      	bne.n	8001a78 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        /* HSI48 used as PLL clock source : PLLCLK = HSI48/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI48_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8001a64:	68b9      	ldr	r1, [r7, #8]
 8001a66:	4814      	ldr	r0, [pc, #80]	; (8001ab8 <HAL_RCC_GetSysClockFreq+0xe0>)
 8001a68:	f7fe fb56 	bl	8000118 <__udivsi3>
 8001a6c:	0003      	movs	r3, r0
 8001a6e:	001a      	movs	r2, r3
 8001a70:	687b      	ldr	r3, [r7, #4]
 8001a72:	4353      	muls	r3, r2
 8001a74:	617b      	str	r3, [r7, #20]
 8001a76:	e008      	b.n	8001a8a <HAL_RCC_GetSysClockFreq+0xb2>
#endif /* RCC_CFGR_PLLSRC_HSI48_PREDIV */
      else
      {
#if  (defined(STM32F042x6) || defined(STM32F048xx) || defined(STM32F070x6) || defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx) || defined(STM32F070xB) || defined(STM32F091xC) || defined(STM32F098xx) || defined(STM32F030xC))
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8001a78:	68b9      	ldr	r1, [r7, #8]
 8001a7a:	480c      	ldr	r0, [pc, #48]	; (8001aac <HAL_RCC_GetSysClockFreq+0xd4>)
 8001a7c:	f7fe fb4c 	bl	8000118 <__udivsi3>
 8001a80:	0003      	movs	r3, r0
 8001a82:	001a      	movs	r2, r3
 8001a84:	687b      	ldr	r3, [r7, #4]
 8001a86:	4353      	muls	r3, r2
 8001a88:	617b      	str	r3, [r7, #20]
#else
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
#endif
      }
      sysclockfreq = pllclk;
 8001a8a:	697b      	ldr	r3, [r7, #20]
 8001a8c:	613b      	str	r3, [r7, #16]
      break;
 8001a8e:	e005      	b.n	8001a9c <HAL_RCC_GetSysClockFreq+0xc4>
    }
#if defined(RCC_CFGR_SWS_HSI48)
    case RCC_SYSCLKSOURCE_STATUS_HSI48:    /* HSI48 used as system clock source */
    {
      sysclockfreq = HSI48_VALUE;
 8001a90:	4b09      	ldr	r3, [pc, #36]	; (8001ab8 <HAL_RCC_GetSysClockFreq+0xe0>)
 8001a92:	613b      	str	r3, [r7, #16]
      break;
 8001a94:	e002      	b.n	8001a9c <HAL_RCC_GetSysClockFreq+0xc4>
    }
#endif /* RCC_CFGR_SWS_HSI48 */
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8001a96:	4b05      	ldr	r3, [pc, #20]	; (8001aac <HAL_RCC_GetSysClockFreq+0xd4>)
 8001a98:	613b      	str	r3, [r7, #16]
      break;
 8001a9a:	46c0      	nop			; (mov r8, r8)
    }
  }
  return sysclockfreq;
 8001a9c:	693b      	ldr	r3, [r7, #16]
}
 8001a9e:	0018      	movs	r0, r3
 8001aa0:	46bd      	mov	sp, r7
 8001aa2:	b006      	add	sp, #24
 8001aa4:	bd80      	pop	{r7, pc}
 8001aa6:	46c0      	nop			; (mov r8, r8)
 8001aa8:	40021000 	.word	0x40021000
 8001aac:	007a1200 	.word	0x007a1200
 8001ab0:	080046b0 	.word	0x080046b0
 8001ab4:	080046c0 	.word	0x080046c0
 8001ab8:	02dc6c00 	.word	0x02dc6c00

08001abc <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001abc:	b580      	push	{r7, lr}
 8001abe:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001ac0:	4b02      	ldr	r3, [pc, #8]	; (8001acc <HAL_RCC_GetHCLKFreq+0x10>)
 8001ac2:	681b      	ldr	r3, [r3, #0]
}
 8001ac4:	0018      	movs	r0, r3
 8001ac6:	46bd      	mov	sp, r7
 8001ac8:	bd80      	pop	{r7, pc}
 8001aca:	46c0      	nop			; (mov r8, r8)
 8001acc:	200000c0 	.word	0x200000c0

08001ad0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001ad0:	b580      	push	{r7, lr}
 8001ad2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE) >> RCC_CFGR_PPRE_BITNUMBER]);
 8001ad4:	f7ff fff2 	bl	8001abc <HAL_RCC_GetHCLKFreq>
 8001ad8:	0001      	movs	r1, r0
 8001ada:	4b06      	ldr	r3, [pc, #24]	; (8001af4 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001adc:	685b      	ldr	r3, [r3, #4]
 8001ade:	0a1b      	lsrs	r3, r3, #8
 8001ae0:	2207      	movs	r2, #7
 8001ae2:	4013      	ands	r3, r2
 8001ae4:	4a04      	ldr	r2, [pc, #16]	; (8001af8 <HAL_RCC_GetPCLK1Freq+0x28>)
 8001ae6:	5cd3      	ldrb	r3, [r2, r3]
 8001ae8:	40d9      	lsrs	r1, r3
 8001aea:	000b      	movs	r3, r1
}    
 8001aec:	0018      	movs	r0, r3
 8001aee:	46bd      	mov	sp, r7
 8001af0:	bd80      	pop	{r7, pc}
 8001af2:	46c0      	nop			; (mov r8, r8)
 8001af4:	40021000 	.word	0x40021000
 8001af8:	080046a8 	.word	0x080046a8

08001afc <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8001afc:	b580      	push	{r7, lr}
 8001afe:	b086      	sub	sp, #24
 8001b00:	af00      	add	r7, sp, #0
 8001b02:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8001b04:	2300      	movs	r3, #0
 8001b06:	613b      	str	r3, [r7, #16]
  uint32_t temp_reg = 0U;
 8001b08:	2300      	movs	r3, #0
 8001b0a:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8001b0c:	687b      	ldr	r3, [r7, #4]
 8001b0e:	681a      	ldr	r2, [r3, #0]
 8001b10:	2380      	movs	r3, #128	; 0x80
 8001b12:	025b      	lsls	r3, r3, #9
 8001b14:	4013      	ands	r3, r2
 8001b16:	d100      	bne.n	8001b1a <HAL_RCCEx_PeriphCLKConfig+0x1e>
 8001b18:	e08e      	b.n	8001c38 <HAL_RCCEx_PeriphCLKConfig+0x13c>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));
    
    FlagStatus       pwrclkchanged = RESET;
 8001b1a:	2017      	movs	r0, #23
 8001b1c:	183b      	adds	r3, r7, r0
 8001b1e:	2200      	movs	r2, #0
 8001b20:	701a      	strb	r2, [r3, #0]

    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001b22:	4b6e      	ldr	r3, [pc, #440]	; (8001cdc <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8001b24:	69da      	ldr	r2, [r3, #28]
 8001b26:	2380      	movs	r3, #128	; 0x80
 8001b28:	055b      	lsls	r3, r3, #21
 8001b2a:	4013      	ands	r3, r2
 8001b2c:	d110      	bne.n	8001b50 <HAL_RCCEx_PeriphCLKConfig+0x54>
    {
    __HAL_RCC_PWR_CLK_ENABLE();
 8001b2e:	4b6b      	ldr	r3, [pc, #428]	; (8001cdc <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8001b30:	69da      	ldr	r2, [r3, #28]
 8001b32:	4b6a      	ldr	r3, [pc, #424]	; (8001cdc <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8001b34:	2180      	movs	r1, #128	; 0x80
 8001b36:	0549      	lsls	r1, r1, #21
 8001b38:	430a      	orrs	r2, r1
 8001b3a:	61da      	str	r2, [r3, #28]
 8001b3c:	4b67      	ldr	r3, [pc, #412]	; (8001cdc <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8001b3e:	69da      	ldr	r2, [r3, #28]
 8001b40:	2380      	movs	r3, #128	; 0x80
 8001b42:	055b      	lsls	r3, r3, #21
 8001b44:	4013      	ands	r3, r2
 8001b46:	60bb      	str	r3, [r7, #8]
 8001b48:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001b4a:	183b      	adds	r3, r7, r0
 8001b4c:	2201      	movs	r2, #1
 8001b4e:	701a      	strb	r2, [r3, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001b50:	4b63      	ldr	r3, [pc, #396]	; (8001ce0 <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 8001b52:	681a      	ldr	r2, [r3, #0]
 8001b54:	2380      	movs	r3, #128	; 0x80
 8001b56:	005b      	lsls	r3, r3, #1
 8001b58:	4013      	ands	r3, r2
 8001b5a:	d11a      	bne.n	8001b92 <HAL_RCCEx_PeriphCLKConfig+0x96>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001b5c:	4b60      	ldr	r3, [pc, #384]	; (8001ce0 <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 8001b5e:	681a      	ldr	r2, [r3, #0]
 8001b60:	4b5f      	ldr	r3, [pc, #380]	; (8001ce0 <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 8001b62:	2180      	movs	r1, #128	; 0x80
 8001b64:	0049      	lsls	r1, r1, #1
 8001b66:	430a      	orrs	r2, r1
 8001b68:	601a      	str	r2, [r3, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001b6a:	f7fe ffd9 	bl	8000b20 <HAL_GetTick>
 8001b6e:	0003      	movs	r3, r0
 8001b70:	613b      	str	r3, [r7, #16]
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001b72:	e008      	b.n	8001b86 <HAL_RCCEx_PeriphCLKConfig+0x8a>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001b74:	f7fe ffd4 	bl	8000b20 <HAL_GetTick>
 8001b78:	0002      	movs	r2, r0
 8001b7a:	693b      	ldr	r3, [r7, #16]
 8001b7c:	1ad3      	subs	r3, r2, r3
 8001b7e:	2b64      	cmp	r3, #100	; 0x64
 8001b80:	d901      	bls.n	8001b86 <HAL_RCCEx_PeriphCLKConfig+0x8a>
        {
          return HAL_TIMEOUT;
 8001b82:	2303      	movs	r3, #3
 8001b84:	e0a6      	b.n	8001cd4 <HAL_RCCEx_PeriphCLKConfig+0x1d8>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001b86:	4b56      	ldr	r3, [pc, #344]	; (8001ce0 <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 8001b88:	681a      	ldr	r2, [r3, #0]
 8001b8a:	2380      	movs	r3, #128	; 0x80
 8001b8c:	005b      	lsls	r3, r3, #1
 8001b8e:	4013      	ands	r3, r2
 8001b90:	d0f0      	beq.n	8001b74 <HAL_RCCEx_PeriphCLKConfig+0x78>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8001b92:	4b52      	ldr	r3, [pc, #328]	; (8001cdc <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8001b94:	6a1a      	ldr	r2, [r3, #32]
 8001b96:	23c0      	movs	r3, #192	; 0xc0
 8001b98:	009b      	lsls	r3, r3, #2
 8001b9a:	4013      	ands	r3, r2
 8001b9c:	60fb      	str	r3, [r7, #12]
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8001b9e:	68fb      	ldr	r3, [r7, #12]
 8001ba0:	2b00      	cmp	r3, #0
 8001ba2:	d034      	beq.n	8001c0e <HAL_RCCEx_PeriphCLKConfig+0x112>
 8001ba4:	687b      	ldr	r3, [r7, #4]
 8001ba6:	685a      	ldr	r2, [r3, #4]
 8001ba8:	23c0      	movs	r3, #192	; 0xc0
 8001baa:	009b      	lsls	r3, r3, #2
 8001bac:	4013      	ands	r3, r2
 8001bae:	68fa      	ldr	r2, [r7, #12]
 8001bb0:	429a      	cmp	r2, r3
 8001bb2:	d02c      	beq.n	8001c0e <HAL_RCCEx_PeriphCLKConfig+0x112>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8001bb4:	4b49      	ldr	r3, [pc, #292]	; (8001cdc <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8001bb6:	6a1b      	ldr	r3, [r3, #32]
 8001bb8:	4a4a      	ldr	r2, [pc, #296]	; (8001ce4 <HAL_RCCEx_PeriphCLKConfig+0x1e8>)
 8001bba:	4013      	ands	r3, r2
 8001bbc:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8001bbe:	4b47      	ldr	r3, [pc, #284]	; (8001cdc <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8001bc0:	6a1a      	ldr	r2, [r3, #32]
 8001bc2:	4b46      	ldr	r3, [pc, #280]	; (8001cdc <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8001bc4:	2180      	movs	r1, #128	; 0x80
 8001bc6:	0249      	lsls	r1, r1, #9
 8001bc8:	430a      	orrs	r2, r1
 8001bca:	621a      	str	r2, [r3, #32]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8001bcc:	4b43      	ldr	r3, [pc, #268]	; (8001cdc <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8001bce:	6a1a      	ldr	r2, [r3, #32]
 8001bd0:	4b42      	ldr	r3, [pc, #264]	; (8001cdc <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8001bd2:	4945      	ldr	r1, [pc, #276]	; (8001ce8 <HAL_RCCEx_PeriphCLKConfig+0x1ec>)
 8001bd4:	400a      	ands	r2, r1
 8001bd6:	621a      	str	r2, [r3, #32]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8001bd8:	4b40      	ldr	r3, [pc, #256]	; (8001cdc <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8001bda:	68fa      	ldr	r2, [r7, #12]
 8001bdc:	621a      	str	r2, [r3, #32]
      
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8001bde:	68fb      	ldr	r3, [r7, #12]
 8001be0:	2201      	movs	r2, #1
 8001be2:	4013      	ands	r3, r2
 8001be4:	d013      	beq.n	8001c0e <HAL_RCCEx_PeriphCLKConfig+0x112>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001be6:	f7fe ff9b 	bl	8000b20 <HAL_GetTick>
 8001bea:	0003      	movs	r3, r0
 8001bec:	613b      	str	r3, [r7, #16]
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001bee:	e009      	b.n	8001c04 <HAL_RCCEx_PeriphCLKConfig+0x108>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001bf0:	f7fe ff96 	bl	8000b20 <HAL_GetTick>
 8001bf4:	0002      	movs	r2, r0
 8001bf6:	693b      	ldr	r3, [r7, #16]
 8001bf8:	1ad3      	subs	r3, r2, r3
 8001bfa:	4a3c      	ldr	r2, [pc, #240]	; (8001cec <HAL_RCCEx_PeriphCLKConfig+0x1f0>)
 8001bfc:	4293      	cmp	r3, r2
 8001bfe:	d901      	bls.n	8001c04 <HAL_RCCEx_PeriphCLKConfig+0x108>
          {
            return HAL_TIMEOUT;
 8001c00:	2303      	movs	r3, #3
 8001c02:	e067      	b.n	8001cd4 <HAL_RCCEx_PeriphCLKConfig+0x1d8>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001c04:	4b35      	ldr	r3, [pc, #212]	; (8001cdc <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8001c06:	6a1b      	ldr	r3, [r3, #32]
 8001c08:	2202      	movs	r2, #2
 8001c0a:	4013      	ands	r3, r2
 8001c0c:	d0f0      	beq.n	8001bf0 <HAL_RCCEx_PeriphCLKConfig+0xf4>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8001c0e:	4b33      	ldr	r3, [pc, #204]	; (8001cdc <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8001c10:	6a1b      	ldr	r3, [r3, #32]
 8001c12:	4a34      	ldr	r2, [pc, #208]	; (8001ce4 <HAL_RCCEx_PeriphCLKConfig+0x1e8>)
 8001c14:	4013      	ands	r3, r2
 8001c16:	0019      	movs	r1, r3
 8001c18:	687b      	ldr	r3, [r7, #4]
 8001c1a:	685a      	ldr	r2, [r3, #4]
 8001c1c:	4b2f      	ldr	r3, [pc, #188]	; (8001cdc <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8001c1e:	430a      	orrs	r2, r1
 8001c20:	621a      	str	r2, [r3, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8001c22:	2317      	movs	r3, #23
 8001c24:	18fb      	adds	r3, r7, r3
 8001c26:	781b      	ldrb	r3, [r3, #0]
 8001c28:	2b01      	cmp	r3, #1
 8001c2a:	d105      	bne.n	8001c38 <HAL_RCCEx_PeriphCLKConfig+0x13c>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001c2c:	4b2b      	ldr	r3, [pc, #172]	; (8001cdc <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8001c2e:	69da      	ldr	r2, [r3, #28]
 8001c30:	4b2a      	ldr	r3, [pc, #168]	; (8001cdc <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8001c32:	492f      	ldr	r1, [pc, #188]	; (8001cf0 <HAL_RCCEx_PeriphCLKConfig+0x1f4>)
 8001c34:	400a      	ands	r2, r1
 8001c36:	61da      	str	r2, [r3, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8001c38:	687b      	ldr	r3, [r7, #4]
 8001c3a:	681b      	ldr	r3, [r3, #0]
 8001c3c:	2201      	movs	r2, #1
 8001c3e:	4013      	ands	r3, r2
 8001c40:	d009      	beq.n	8001c56 <HAL_RCCEx_PeriphCLKConfig+0x15a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8001c42:	4b26      	ldr	r3, [pc, #152]	; (8001cdc <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8001c44:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c46:	2203      	movs	r2, #3
 8001c48:	4393      	bics	r3, r2
 8001c4a:	0019      	movs	r1, r3
 8001c4c:	687b      	ldr	r3, [r7, #4]
 8001c4e:	689a      	ldr	r2, [r3, #8]
 8001c50:	4b22      	ldr	r3, [pc, #136]	; (8001cdc <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8001c52:	430a      	orrs	r2, r1
 8001c54:	631a      	str	r2, [r3, #48]	; 0x30
  }
  
#if defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx)\
 || defined(STM32F091xC) || defined(STM32F098xx)
  /*----------------------------- USART2 Configuration --------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8001c56:	687b      	ldr	r3, [r7, #4]
 8001c58:	681b      	ldr	r3, [r3, #0]
 8001c5a:	2202      	movs	r2, #2
 8001c5c:	4013      	ands	r3, r2
 8001c5e:	d009      	beq.n	8001c74 <HAL_RCCEx_PeriphCLKConfig+0x178>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));
    
    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8001c60:	4b1e      	ldr	r3, [pc, #120]	; (8001cdc <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8001c62:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c64:	4a23      	ldr	r2, [pc, #140]	; (8001cf4 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8001c66:	4013      	ands	r3, r2
 8001c68:	0019      	movs	r1, r3
 8001c6a:	687b      	ldr	r3, [r7, #4]
 8001c6c:	68da      	ldr	r2, [r3, #12]
 8001c6e:	4b1b      	ldr	r3, [pc, #108]	; (8001cdc <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8001c70:	430a      	orrs	r2, r1
 8001c72:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
  }
#endif /* STM32F091xC || STM32F098xx */  

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8001c74:	687b      	ldr	r3, [r7, #4]
 8001c76:	681b      	ldr	r3, [r3, #0]
 8001c78:	2220      	movs	r2, #32
 8001c7a:	4013      	ands	r3, r2
 8001c7c:	d009      	beq.n	8001c92 <HAL_RCCEx_PeriphCLKConfig+0x196>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8001c7e:	4b17      	ldr	r3, [pc, #92]	; (8001cdc <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8001c80:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c82:	2210      	movs	r2, #16
 8001c84:	4393      	bics	r3, r2
 8001c86:	0019      	movs	r1, r3
 8001c88:	687b      	ldr	r3, [r7, #4]
 8001c8a:	691a      	ldr	r2, [r3, #16]
 8001c8c:	4b13      	ldr	r3, [pc, #76]	; (8001cdc <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8001c8e:	430a      	orrs	r2, r1
 8001c90:	631a      	str	r2, [r3, #48]	; 0x30
  }

#if defined(STM32F042x6) || defined(STM32F048xx) || defined(STM32F072xB) || defined(STM32F078xx) || defined(STM32F070xB) || defined(STM32F070x6)
  /*------------------------------ USB Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8001c92:	687b      	ldr	r3, [r7, #4]
 8001c94:	681a      	ldr	r2, [r3, #0]
 8001c96:	2380      	movs	r3, #128	; 0x80
 8001c98:	029b      	lsls	r3, r3, #10
 8001c9a:	4013      	ands	r3, r2
 8001c9c:	d009      	beq.n	8001cb2 <HAL_RCCEx_PeriphCLKConfig+0x1b6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    
    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8001c9e:	4b0f      	ldr	r3, [pc, #60]	; (8001cdc <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8001ca0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ca2:	2280      	movs	r2, #128	; 0x80
 8001ca4:	4393      	bics	r3, r2
 8001ca6:	0019      	movs	r1, r3
 8001ca8:	687b      	ldr	r3, [r7, #4]
 8001caa:	699a      	ldr	r2, [r3, #24]
 8001cac:	4b0b      	ldr	r3, [pc, #44]	; (8001cdc <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8001cae:	430a      	orrs	r2, r1
 8001cb0:	631a      	str	r2, [r3, #48]	; 0x30
#if defined(STM32F042x6) || defined(STM32F048xx)\
 || defined(STM32F051x8) || defined(STM32F058xx)\
 || defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx)\
 || defined(STM32F091xC) || defined(STM32F098xx)
  /*------------------------------ CEC clock Configuration -------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8001cb2:	687b      	ldr	r3, [r7, #4]
 8001cb4:	681a      	ldr	r2, [r3, #0]
 8001cb6:	2380      	movs	r3, #128	; 0x80
 8001cb8:	00db      	lsls	r3, r3, #3
 8001cba:	4013      	ands	r3, r2
 8001cbc:	d009      	beq.n	8001cd2 <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8001cbe:	4b07      	ldr	r3, [pc, #28]	; (8001cdc <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8001cc0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001cc2:	2240      	movs	r2, #64	; 0x40
 8001cc4:	4393      	bics	r3, r2
 8001cc6:	0019      	movs	r1, r3
 8001cc8:	687b      	ldr	r3, [r7, #4]
 8001cca:	695a      	ldr	r2, [r3, #20]
 8001ccc:	4b03      	ldr	r3, [pc, #12]	; (8001cdc <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8001cce:	430a      	orrs	r2, r1
 8001cd0:	631a      	str	r2, [r3, #48]	; 0x30
#endif /* STM32F042x6 || STM32F048xx ||                */
       /* STM32F051x8 || STM32F058xx ||                */
       /* STM32F071xB || STM32F072xB || STM32F078xx || */
       /* STM32F091xC || STM32F098xx */
  
  return HAL_OK;
 8001cd2:	2300      	movs	r3, #0
}
 8001cd4:	0018      	movs	r0, r3
 8001cd6:	46bd      	mov	sp, r7
 8001cd8:	b006      	add	sp, #24
 8001cda:	bd80      	pop	{r7, pc}
 8001cdc:	40021000 	.word	0x40021000
 8001ce0:	40007000 	.word	0x40007000
 8001ce4:	fffffcff 	.word	0xfffffcff
 8001ce8:	fffeffff 	.word	0xfffeffff
 8001cec:	00001388 	.word	0x00001388
 8001cf0:	efffffff 	.word	0xefffffff
 8001cf4:	fffcffff 	.word	0xfffcffff

08001cf8 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8001cf8:	b580      	push	{r7, lr}
 8001cfa:	b082      	sub	sp, #8
 8001cfc:	af00      	add	r7, sp, #0
 8001cfe:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001d00:	687b      	ldr	r3, [r7, #4]
 8001d02:	2b00      	cmp	r3, #0
 8001d04:	d101      	bne.n	8001d0a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8001d06:	2301      	movs	r3, #1
 8001d08:	e042      	b.n	8001d90 <HAL_TIM_Base_Init+0x98>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001d0a:	687b      	ldr	r3, [r7, #4]
 8001d0c:	223d      	movs	r2, #61	; 0x3d
 8001d0e:	5c9b      	ldrb	r3, [r3, r2]
 8001d10:	b2db      	uxtb	r3, r3
 8001d12:	2b00      	cmp	r3, #0
 8001d14:	d107      	bne.n	8001d26 <HAL_TIM_Base_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001d16:	687b      	ldr	r3, [r7, #4]
 8001d18:	223c      	movs	r2, #60	; 0x3c
 8001d1a:	2100      	movs	r1, #0
 8001d1c:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8001d1e:	687b      	ldr	r3, [r7, #4]
 8001d20:	0018      	movs	r0, r3
 8001d22:	f7fe fd81 	bl	8000828 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001d26:	687b      	ldr	r3, [r7, #4]
 8001d28:	223d      	movs	r2, #61	; 0x3d
 8001d2a:	2102      	movs	r1, #2
 8001d2c:	5499      	strb	r1, [r3, r2]

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001d2e:	687b      	ldr	r3, [r7, #4]
 8001d30:	681a      	ldr	r2, [r3, #0]
 8001d32:	687b      	ldr	r3, [r7, #4]
 8001d34:	3304      	adds	r3, #4
 8001d36:	0019      	movs	r1, r3
 8001d38:	0010      	movs	r0, r2
 8001d3a:	f000 fd21 	bl	8002780 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8001d3e:	687b      	ldr	r3, [r7, #4]
 8001d40:	2246      	movs	r2, #70	; 0x46
 8001d42:	2101      	movs	r1, #1
 8001d44:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001d46:	687b      	ldr	r3, [r7, #4]
 8001d48:	223e      	movs	r2, #62	; 0x3e
 8001d4a:	2101      	movs	r1, #1
 8001d4c:	5499      	strb	r1, [r3, r2]
 8001d4e:	687b      	ldr	r3, [r7, #4]
 8001d50:	223f      	movs	r2, #63	; 0x3f
 8001d52:	2101      	movs	r1, #1
 8001d54:	5499      	strb	r1, [r3, r2]
 8001d56:	687b      	ldr	r3, [r7, #4]
 8001d58:	2240      	movs	r2, #64	; 0x40
 8001d5a:	2101      	movs	r1, #1
 8001d5c:	5499      	strb	r1, [r3, r2]
 8001d5e:	687b      	ldr	r3, [r7, #4]
 8001d60:	2241      	movs	r2, #65	; 0x41
 8001d62:	2101      	movs	r1, #1
 8001d64:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001d66:	687b      	ldr	r3, [r7, #4]
 8001d68:	2242      	movs	r2, #66	; 0x42
 8001d6a:	2101      	movs	r1, #1
 8001d6c:	5499      	strb	r1, [r3, r2]
 8001d6e:	687b      	ldr	r3, [r7, #4]
 8001d70:	2243      	movs	r2, #67	; 0x43
 8001d72:	2101      	movs	r1, #1
 8001d74:	5499      	strb	r1, [r3, r2]
 8001d76:	687b      	ldr	r3, [r7, #4]
 8001d78:	2244      	movs	r2, #68	; 0x44
 8001d7a:	2101      	movs	r1, #1
 8001d7c:	5499      	strb	r1, [r3, r2]
 8001d7e:	687b      	ldr	r3, [r7, #4]
 8001d80:	2245      	movs	r2, #69	; 0x45
 8001d82:	2101      	movs	r1, #1
 8001d84:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001d86:	687b      	ldr	r3, [r7, #4]
 8001d88:	223d      	movs	r2, #61	; 0x3d
 8001d8a:	2101      	movs	r1, #1
 8001d8c:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8001d8e:	2300      	movs	r3, #0
}
 8001d90:	0018      	movs	r0, r3
 8001d92:	46bd      	mov	sp, r7
 8001d94:	b002      	add	sp, #8
 8001d96:	bd80      	pop	{r7, pc}

08001d98 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8001d98:	b580      	push	{r7, lr}
 8001d9a:	b082      	sub	sp, #8
 8001d9c:	af00      	add	r7, sp, #0
 8001d9e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001da0:	687b      	ldr	r3, [r7, #4]
 8001da2:	2b00      	cmp	r3, #0
 8001da4:	d101      	bne.n	8001daa <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8001da6:	2301      	movs	r3, #1
 8001da8:	e042      	b.n	8001e30 <HAL_TIM_PWM_Init+0x98>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001daa:	687b      	ldr	r3, [r7, #4]
 8001dac:	223d      	movs	r2, #61	; 0x3d
 8001dae:	5c9b      	ldrb	r3, [r3, r2]
 8001db0:	b2db      	uxtb	r3, r3
 8001db2:	2b00      	cmp	r3, #0
 8001db4:	d107      	bne.n	8001dc6 <HAL_TIM_PWM_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001db6:	687b      	ldr	r3, [r7, #4]
 8001db8:	223c      	movs	r2, #60	; 0x3c
 8001dba:	2100      	movs	r1, #0
 8001dbc:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8001dbe:	687b      	ldr	r3, [r7, #4]
 8001dc0:	0018      	movs	r0, r3
 8001dc2:	f000 f839 	bl	8001e38 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001dc6:	687b      	ldr	r3, [r7, #4]
 8001dc8:	223d      	movs	r2, #61	; 0x3d
 8001dca:	2102      	movs	r1, #2
 8001dcc:	5499      	strb	r1, [r3, r2]

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001dce:	687b      	ldr	r3, [r7, #4]
 8001dd0:	681a      	ldr	r2, [r3, #0]
 8001dd2:	687b      	ldr	r3, [r7, #4]
 8001dd4:	3304      	adds	r3, #4
 8001dd6:	0019      	movs	r1, r3
 8001dd8:	0010      	movs	r0, r2
 8001dda:	f000 fcd1 	bl	8002780 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8001dde:	687b      	ldr	r3, [r7, #4]
 8001de0:	2246      	movs	r2, #70	; 0x46
 8001de2:	2101      	movs	r1, #1
 8001de4:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001de6:	687b      	ldr	r3, [r7, #4]
 8001de8:	223e      	movs	r2, #62	; 0x3e
 8001dea:	2101      	movs	r1, #1
 8001dec:	5499      	strb	r1, [r3, r2]
 8001dee:	687b      	ldr	r3, [r7, #4]
 8001df0:	223f      	movs	r2, #63	; 0x3f
 8001df2:	2101      	movs	r1, #1
 8001df4:	5499      	strb	r1, [r3, r2]
 8001df6:	687b      	ldr	r3, [r7, #4]
 8001df8:	2240      	movs	r2, #64	; 0x40
 8001dfa:	2101      	movs	r1, #1
 8001dfc:	5499      	strb	r1, [r3, r2]
 8001dfe:	687b      	ldr	r3, [r7, #4]
 8001e00:	2241      	movs	r2, #65	; 0x41
 8001e02:	2101      	movs	r1, #1
 8001e04:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001e06:	687b      	ldr	r3, [r7, #4]
 8001e08:	2242      	movs	r2, #66	; 0x42
 8001e0a:	2101      	movs	r1, #1
 8001e0c:	5499      	strb	r1, [r3, r2]
 8001e0e:	687b      	ldr	r3, [r7, #4]
 8001e10:	2243      	movs	r2, #67	; 0x43
 8001e12:	2101      	movs	r1, #1
 8001e14:	5499      	strb	r1, [r3, r2]
 8001e16:	687b      	ldr	r3, [r7, #4]
 8001e18:	2244      	movs	r2, #68	; 0x44
 8001e1a:	2101      	movs	r1, #1
 8001e1c:	5499      	strb	r1, [r3, r2]
 8001e1e:	687b      	ldr	r3, [r7, #4]
 8001e20:	2245      	movs	r2, #69	; 0x45
 8001e22:	2101      	movs	r1, #1
 8001e24:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001e26:	687b      	ldr	r3, [r7, #4]
 8001e28:	223d      	movs	r2, #61	; 0x3d
 8001e2a:	2101      	movs	r1, #1
 8001e2c:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8001e2e:	2300      	movs	r3, #0
}
 8001e30:	0018      	movs	r0, r3
 8001e32:	46bd      	mov	sp, r7
 8001e34:	b002      	add	sp, #8
 8001e36:	bd80      	pop	{r7, pc}

08001e38 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8001e38:	b580      	push	{r7, lr}
 8001e3a:	b082      	sub	sp, #8
 8001e3c:	af00      	add	r7, sp, #0
 8001e3e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8001e40:	46c0      	nop			; (mov r8, r8)
 8001e42:	46bd      	mov	sp, r7
 8001e44:	b002      	add	sp, #8
 8001e46:	bd80      	pop	{r7, pc}

08001e48 <HAL_TIM_PWM_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8001e48:	b580      	push	{r7, lr}
 8001e4a:	b084      	sub	sp, #16
 8001e4c:	af00      	add	r7, sp, #0
 8001e4e:	6078      	str	r0, [r7, #4]
 8001e50:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8001e52:	230f      	movs	r3, #15
 8001e54:	18fb      	adds	r3, r7, r3
 8001e56:	2200      	movs	r2, #0
 8001e58:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8001e5a:	683b      	ldr	r3, [r7, #0]
 8001e5c:	2b00      	cmp	r3, #0
 8001e5e:	d108      	bne.n	8001e72 <HAL_TIM_PWM_Start_IT+0x2a>
 8001e60:	687b      	ldr	r3, [r7, #4]
 8001e62:	223e      	movs	r2, #62	; 0x3e
 8001e64:	5c9b      	ldrb	r3, [r3, r2]
 8001e66:	b2db      	uxtb	r3, r3
 8001e68:	3b01      	subs	r3, #1
 8001e6a:	1e5a      	subs	r2, r3, #1
 8001e6c:	4193      	sbcs	r3, r2
 8001e6e:	b2db      	uxtb	r3, r3
 8001e70:	e01f      	b.n	8001eb2 <HAL_TIM_PWM_Start_IT+0x6a>
 8001e72:	683b      	ldr	r3, [r7, #0]
 8001e74:	2b04      	cmp	r3, #4
 8001e76:	d108      	bne.n	8001e8a <HAL_TIM_PWM_Start_IT+0x42>
 8001e78:	687b      	ldr	r3, [r7, #4]
 8001e7a:	223f      	movs	r2, #63	; 0x3f
 8001e7c:	5c9b      	ldrb	r3, [r3, r2]
 8001e7e:	b2db      	uxtb	r3, r3
 8001e80:	3b01      	subs	r3, #1
 8001e82:	1e5a      	subs	r2, r3, #1
 8001e84:	4193      	sbcs	r3, r2
 8001e86:	b2db      	uxtb	r3, r3
 8001e88:	e013      	b.n	8001eb2 <HAL_TIM_PWM_Start_IT+0x6a>
 8001e8a:	683b      	ldr	r3, [r7, #0]
 8001e8c:	2b08      	cmp	r3, #8
 8001e8e:	d108      	bne.n	8001ea2 <HAL_TIM_PWM_Start_IT+0x5a>
 8001e90:	687b      	ldr	r3, [r7, #4]
 8001e92:	2240      	movs	r2, #64	; 0x40
 8001e94:	5c9b      	ldrb	r3, [r3, r2]
 8001e96:	b2db      	uxtb	r3, r3
 8001e98:	3b01      	subs	r3, #1
 8001e9a:	1e5a      	subs	r2, r3, #1
 8001e9c:	4193      	sbcs	r3, r2
 8001e9e:	b2db      	uxtb	r3, r3
 8001ea0:	e007      	b.n	8001eb2 <HAL_TIM_PWM_Start_IT+0x6a>
 8001ea2:	687b      	ldr	r3, [r7, #4]
 8001ea4:	2241      	movs	r2, #65	; 0x41
 8001ea6:	5c9b      	ldrb	r3, [r3, r2]
 8001ea8:	b2db      	uxtb	r3, r3
 8001eaa:	3b01      	subs	r3, #1
 8001eac:	1e5a      	subs	r2, r3, #1
 8001eae:	4193      	sbcs	r3, r2
 8001eb0:	b2db      	uxtb	r3, r3
 8001eb2:	2b00      	cmp	r3, #0
 8001eb4:	d001      	beq.n	8001eba <HAL_TIM_PWM_Start_IT+0x72>
  {
    return HAL_ERROR;
 8001eb6:	2301      	movs	r3, #1
 8001eb8:	e0b7      	b.n	800202a <HAL_TIM_PWM_Start_IT+0x1e2>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8001eba:	683b      	ldr	r3, [r7, #0]
 8001ebc:	2b00      	cmp	r3, #0
 8001ebe:	d104      	bne.n	8001eca <HAL_TIM_PWM_Start_IT+0x82>
 8001ec0:	687b      	ldr	r3, [r7, #4]
 8001ec2:	223e      	movs	r2, #62	; 0x3e
 8001ec4:	2102      	movs	r1, #2
 8001ec6:	5499      	strb	r1, [r3, r2]
 8001ec8:	e013      	b.n	8001ef2 <HAL_TIM_PWM_Start_IT+0xaa>
 8001eca:	683b      	ldr	r3, [r7, #0]
 8001ecc:	2b04      	cmp	r3, #4
 8001ece:	d104      	bne.n	8001eda <HAL_TIM_PWM_Start_IT+0x92>
 8001ed0:	687b      	ldr	r3, [r7, #4]
 8001ed2:	223f      	movs	r2, #63	; 0x3f
 8001ed4:	2102      	movs	r1, #2
 8001ed6:	5499      	strb	r1, [r3, r2]
 8001ed8:	e00b      	b.n	8001ef2 <HAL_TIM_PWM_Start_IT+0xaa>
 8001eda:	683b      	ldr	r3, [r7, #0]
 8001edc:	2b08      	cmp	r3, #8
 8001ede:	d104      	bne.n	8001eea <HAL_TIM_PWM_Start_IT+0xa2>
 8001ee0:	687b      	ldr	r3, [r7, #4]
 8001ee2:	2240      	movs	r2, #64	; 0x40
 8001ee4:	2102      	movs	r1, #2
 8001ee6:	5499      	strb	r1, [r3, r2]
 8001ee8:	e003      	b.n	8001ef2 <HAL_TIM_PWM_Start_IT+0xaa>
 8001eea:	687b      	ldr	r3, [r7, #4]
 8001eec:	2241      	movs	r2, #65	; 0x41
 8001eee:	2102      	movs	r1, #2
 8001ef0:	5499      	strb	r1, [r3, r2]

  switch (Channel)
 8001ef2:	683b      	ldr	r3, [r7, #0]
 8001ef4:	2b0c      	cmp	r3, #12
 8001ef6:	d02a      	beq.n	8001f4e <HAL_TIM_PWM_Start_IT+0x106>
 8001ef8:	683b      	ldr	r3, [r7, #0]
 8001efa:	2b0c      	cmp	r3, #12
 8001efc:	d830      	bhi.n	8001f60 <HAL_TIM_PWM_Start_IT+0x118>
 8001efe:	683b      	ldr	r3, [r7, #0]
 8001f00:	2b08      	cmp	r3, #8
 8001f02:	d01b      	beq.n	8001f3c <HAL_TIM_PWM_Start_IT+0xf4>
 8001f04:	683b      	ldr	r3, [r7, #0]
 8001f06:	2b08      	cmp	r3, #8
 8001f08:	d82a      	bhi.n	8001f60 <HAL_TIM_PWM_Start_IT+0x118>
 8001f0a:	683b      	ldr	r3, [r7, #0]
 8001f0c:	2b00      	cmp	r3, #0
 8001f0e:	d003      	beq.n	8001f18 <HAL_TIM_PWM_Start_IT+0xd0>
 8001f10:	683b      	ldr	r3, [r7, #0]
 8001f12:	2b04      	cmp	r3, #4
 8001f14:	d009      	beq.n	8001f2a <HAL_TIM_PWM_Start_IT+0xe2>
 8001f16:	e023      	b.n	8001f60 <HAL_TIM_PWM_Start_IT+0x118>
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8001f18:	687b      	ldr	r3, [r7, #4]
 8001f1a:	681b      	ldr	r3, [r3, #0]
 8001f1c:	68da      	ldr	r2, [r3, #12]
 8001f1e:	687b      	ldr	r3, [r7, #4]
 8001f20:	681b      	ldr	r3, [r3, #0]
 8001f22:	2102      	movs	r1, #2
 8001f24:	430a      	orrs	r2, r1
 8001f26:	60da      	str	r2, [r3, #12]
      break;
 8001f28:	e01f      	b.n	8001f6a <HAL_TIM_PWM_Start_IT+0x122>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 8001f2a:	687b      	ldr	r3, [r7, #4]
 8001f2c:	681b      	ldr	r3, [r3, #0]
 8001f2e:	68da      	ldr	r2, [r3, #12]
 8001f30:	687b      	ldr	r3, [r7, #4]
 8001f32:	681b      	ldr	r3, [r3, #0]
 8001f34:	2104      	movs	r1, #4
 8001f36:	430a      	orrs	r2, r1
 8001f38:	60da      	str	r2, [r3, #12]
      break;
 8001f3a:	e016      	b.n	8001f6a <HAL_TIM_PWM_Start_IT+0x122>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 8001f3c:	687b      	ldr	r3, [r7, #4]
 8001f3e:	681b      	ldr	r3, [r3, #0]
 8001f40:	68da      	ldr	r2, [r3, #12]
 8001f42:	687b      	ldr	r3, [r7, #4]
 8001f44:	681b      	ldr	r3, [r3, #0]
 8001f46:	2108      	movs	r1, #8
 8001f48:	430a      	orrs	r2, r1
 8001f4a:	60da      	str	r2, [r3, #12]
      break;
 8001f4c:	e00d      	b.n	8001f6a <HAL_TIM_PWM_Start_IT+0x122>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 8001f4e:	687b      	ldr	r3, [r7, #4]
 8001f50:	681b      	ldr	r3, [r3, #0]
 8001f52:	68da      	ldr	r2, [r3, #12]
 8001f54:	687b      	ldr	r3, [r7, #4]
 8001f56:	681b      	ldr	r3, [r3, #0]
 8001f58:	2110      	movs	r1, #16
 8001f5a:	430a      	orrs	r2, r1
 8001f5c:	60da      	str	r2, [r3, #12]
      break;
 8001f5e:	e004      	b.n	8001f6a <HAL_TIM_PWM_Start_IT+0x122>
    }

    default:
      status = HAL_ERROR;
 8001f60:	230f      	movs	r3, #15
 8001f62:	18fb      	adds	r3, r7, r3
 8001f64:	2201      	movs	r2, #1
 8001f66:	701a      	strb	r2, [r3, #0]
      break;
 8001f68:	46c0      	nop			; (mov r8, r8)
  }

  if (status == HAL_OK)
 8001f6a:	230f      	movs	r3, #15
 8001f6c:	18fb      	adds	r3, r7, r3
 8001f6e:	781b      	ldrb	r3, [r3, #0]
 8001f70:	2b00      	cmp	r3, #0
 8001f72:	d157      	bne.n	8002024 <HAL_TIM_PWM_Start_IT+0x1dc>
  {
    /* Enable the Capture compare channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8001f74:	687b      	ldr	r3, [r7, #4]
 8001f76:	681b      	ldr	r3, [r3, #0]
 8001f78:	6839      	ldr	r1, [r7, #0]
 8001f7a:	2201      	movs	r2, #1
 8001f7c:	0018      	movs	r0, r3
 8001f7e:	f000 ff15 	bl	8002dac <TIM_CCxChannelCmd>

    if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8001f82:	687b      	ldr	r3, [r7, #4]
 8001f84:	681b      	ldr	r3, [r3, #0]
 8001f86:	4a2b      	ldr	r2, [pc, #172]	; (8002034 <HAL_TIM_PWM_Start_IT+0x1ec>)
 8001f88:	4293      	cmp	r3, r2
 8001f8a:	d00e      	beq.n	8001faa <HAL_TIM_PWM_Start_IT+0x162>
 8001f8c:	687b      	ldr	r3, [r7, #4]
 8001f8e:	681b      	ldr	r3, [r3, #0]
 8001f90:	4a29      	ldr	r2, [pc, #164]	; (8002038 <HAL_TIM_PWM_Start_IT+0x1f0>)
 8001f92:	4293      	cmp	r3, r2
 8001f94:	d009      	beq.n	8001faa <HAL_TIM_PWM_Start_IT+0x162>
 8001f96:	687b      	ldr	r3, [r7, #4]
 8001f98:	681b      	ldr	r3, [r3, #0]
 8001f9a:	4a28      	ldr	r2, [pc, #160]	; (800203c <HAL_TIM_PWM_Start_IT+0x1f4>)
 8001f9c:	4293      	cmp	r3, r2
 8001f9e:	d004      	beq.n	8001faa <HAL_TIM_PWM_Start_IT+0x162>
 8001fa0:	687b      	ldr	r3, [r7, #4]
 8001fa2:	681b      	ldr	r3, [r3, #0]
 8001fa4:	4a26      	ldr	r2, [pc, #152]	; (8002040 <HAL_TIM_PWM_Start_IT+0x1f8>)
 8001fa6:	4293      	cmp	r3, r2
 8001fa8:	d101      	bne.n	8001fae <HAL_TIM_PWM_Start_IT+0x166>
 8001faa:	2301      	movs	r3, #1
 8001fac:	e000      	b.n	8001fb0 <HAL_TIM_PWM_Start_IT+0x168>
 8001fae:	2300      	movs	r3, #0
 8001fb0:	2b00      	cmp	r3, #0
 8001fb2:	d008      	beq.n	8001fc6 <HAL_TIM_PWM_Start_IT+0x17e>
    {
      /* Enable the main output */
      __HAL_TIM_MOE_ENABLE(htim);
 8001fb4:	687b      	ldr	r3, [r7, #4]
 8001fb6:	681b      	ldr	r3, [r3, #0]
 8001fb8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8001fba:	687b      	ldr	r3, [r7, #4]
 8001fbc:	681b      	ldr	r3, [r3, #0]
 8001fbe:	2180      	movs	r1, #128	; 0x80
 8001fc0:	0209      	lsls	r1, r1, #8
 8001fc2:	430a      	orrs	r2, r1
 8001fc4:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8001fc6:	687b      	ldr	r3, [r7, #4]
 8001fc8:	681b      	ldr	r3, [r3, #0]
 8001fca:	4a1a      	ldr	r2, [pc, #104]	; (8002034 <HAL_TIM_PWM_Start_IT+0x1ec>)
 8001fcc:	4293      	cmp	r3, r2
 8001fce:	d00f      	beq.n	8001ff0 <HAL_TIM_PWM_Start_IT+0x1a8>
 8001fd0:	687b      	ldr	r3, [r7, #4]
 8001fd2:	681a      	ldr	r2, [r3, #0]
 8001fd4:	2380      	movs	r3, #128	; 0x80
 8001fd6:	05db      	lsls	r3, r3, #23
 8001fd8:	429a      	cmp	r2, r3
 8001fda:	d009      	beq.n	8001ff0 <HAL_TIM_PWM_Start_IT+0x1a8>
 8001fdc:	687b      	ldr	r3, [r7, #4]
 8001fde:	681b      	ldr	r3, [r3, #0]
 8001fe0:	4a18      	ldr	r2, [pc, #96]	; (8002044 <HAL_TIM_PWM_Start_IT+0x1fc>)
 8001fe2:	4293      	cmp	r3, r2
 8001fe4:	d004      	beq.n	8001ff0 <HAL_TIM_PWM_Start_IT+0x1a8>
 8001fe6:	687b      	ldr	r3, [r7, #4]
 8001fe8:	681b      	ldr	r3, [r3, #0]
 8001fea:	4a13      	ldr	r2, [pc, #76]	; (8002038 <HAL_TIM_PWM_Start_IT+0x1f0>)
 8001fec:	4293      	cmp	r3, r2
 8001fee:	d111      	bne.n	8002014 <HAL_TIM_PWM_Start_IT+0x1cc>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8001ff0:	687b      	ldr	r3, [r7, #4]
 8001ff2:	681b      	ldr	r3, [r3, #0]
 8001ff4:	689b      	ldr	r3, [r3, #8]
 8001ff6:	2207      	movs	r2, #7
 8001ff8:	4013      	ands	r3, r2
 8001ffa:	60bb      	str	r3, [r7, #8]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001ffc:	68bb      	ldr	r3, [r7, #8]
 8001ffe:	2b06      	cmp	r3, #6
 8002000:	d010      	beq.n	8002024 <HAL_TIM_PWM_Start_IT+0x1dc>
      {
        __HAL_TIM_ENABLE(htim);
 8002002:	687b      	ldr	r3, [r7, #4]
 8002004:	681b      	ldr	r3, [r3, #0]
 8002006:	681a      	ldr	r2, [r3, #0]
 8002008:	687b      	ldr	r3, [r7, #4]
 800200a:	681b      	ldr	r3, [r3, #0]
 800200c:	2101      	movs	r1, #1
 800200e:	430a      	orrs	r2, r1
 8002010:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002012:	e007      	b.n	8002024 <HAL_TIM_PWM_Start_IT+0x1dc>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 8002014:	687b      	ldr	r3, [r7, #4]
 8002016:	681b      	ldr	r3, [r3, #0]
 8002018:	681a      	ldr	r2, [r3, #0]
 800201a:	687b      	ldr	r3, [r7, #4]
 800201c:	681b      	ldr	r3, [r3, #0]
 800201e:	2101      	movs	r1, #1
 8002020:	430a      	orrs	r2, r1
 8002022:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return status;
 8002024:	230f      	movs	r3, #15
 8002026:	18fb      	adds	r3, r7, r3
 8002028:	781b      	ldrb	r3, [r3, #0]
}
 800202a:	0018      	movs	r0, r3
 800202c:	46bd      	mov	sp, r7
 800202e:	b004      	add	sp, #16
 8002030:	bd80      	pop	{r7, pc}
 8002032:	46c0      	nop			; (mov r8, r8)
 8002034:	40012c00 	.word	0x40012c00
 8002038:	40014000 	.word	0x40014000
 800203c:	40014400 	.word	0x40014400
 8002040:	40014800 	.word	0x40014800
 8002044:	40000400 	.word	0x40000400

08002048 <HAL_TIM_PWM_Stop_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8002048:	b580      	push	{r7, lr}
 800204a:	b084      	sub	sp, #16
 800204c:	af00      	add	r7, sp, #0
 800204e:	6078      	str	r0, [r7, #4]
 8002050:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002052:	230f      	movs	r3, #15
 8002054:	18fb      	adds	r3, r7, r3
 8002056:	2200      	movs	r2, #0
 8002058:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  switch (Channel)
 800205a:	683b      	ldr	r3, [r7, #0]
 800205c:	2b0c      	cmp	r3, #12
 800205e:	d02a      	beq.n	80020b6 <HAL_TIM_PWM_Stop_IT+0x6e>
 8002060:	683b      	ldr	r3, [r7, #0]
 8002062:	2b0c      	cmp	r3, #12
 8002064:	d830      	bhi.n	80020c8 <HAL_TIM_PWM_Stop_IT+0x80>
 8002066:	683b      	ldr	r3, [r7, #0]
 8002068:	2b08      	cmp	r3, #8
 800206a:	d01b      	beq.n	80020a4 <HAL_TIM_PWM_Stop_IT+0x5c>
 800206c:	683b      	ldr	r3, [r7, #0]
 800206e:	2b08      	cmp	r3, #8
 8002070:	d82a      	bhi.n	80020c8 <HAL_TIM_PWM_Stop_IT+0x80>
 8002072:	683b      	ldr	r3, [r7, #0]
 8002074:	2b00      	cmp	r3, #0
 8002076:	d003      	beq.n	8002080 <HAL_TIM_PWM_Stop_IT+0x38>
 8002078:	683b      	ldr	r3, [r7, #0]
 800207a:	2b04      	cmp	r3, #4
 800207c:	d009      	beq.n	8002092 <HAL_TIM_PWM_Stop_IT+0x4a>
 800207e:	e023      	b.n	80020c8 <HAL_TIM_PWM_Stop_IT+0x80>
  {
    case TIM_CHANNEL_1:
    {
      /* Disable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC1);
 8002080:	687b      	ldr	r3, [r7, #4]
 8002082:	681b      	ldr	r3, [r3, #0]
 8002084:	68da      	ldr	r2, [r3, #12]
 8002086:	687b      	ldr	r3, [r7, #4]
 8002088:	681b      	ldr	r3, [r3, #0]
 800208a:	2102      	movs	r1, #2
 800208c:	438a      	bics	r2, r1
 800208e:	60da      	str	r2, [r3, #12]
      break;
 8002090:	e01f      	b.n	80020d2 <HAL_TIM_PWM_Stop_IT+0x8a>
    }

    case TIM_CHANNEL_2:
    {
      /* Disable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC2);
 8002092:	687b      	ldr	r3, [r7, #4]
 8002094:	681b      	ldr	r3, [r3, #0]
 8002096:	68da      	ldr	r2, [r3, #12]
 8002098:	687b      	ldr	r3, [r7, #4]
 800209a:	681b      	ldr	r3, [r3, #0]
 800209c:	2104      	movs	r1, #4
 800209e:	438a      	bics	r2, r1
 80020a0:	60da      	str	r2, [r3, #12]
      break;
 80020a2:	e016      	b.n	80020d2 <HAL_TIM_PWM_Stop_IT+0x8a>
    }

    case TIM_CHANNEL_3:
    {
      /* Disable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC3);
 80020a4:	687b      	ldr	r3, [r7, #4]
 80020a6:	681b      	ldr	r3, [r3, #0]
 80020a8:	68da      	ldr	r2, [r3, #12]
 80020aa:	687b      	ldr	r3, [r7, #4]
 80020ac:	681b      	ldr	r3, [r3, #0]
 80020ae:	2108      	movs	r1, #8
 80020b0:	438a      	bics	r2, r1
 80020b2:	60da      	str	r2, [r3, #12]
      break;
 80020b4:	e00d      	b.n	80020d2 <HAL_TIM_PWM_Stop_IT+0x8a>
    }

    case TIM_CHANNEL_4:
    {
      /* Disable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC4);
 80020b6:	687b      	ldr	r3, [r7, #4]
 80020b8:	681b      	ldr	r3, [r3, #0]
 80020ba:	68da      	ldr	r2, [r3, #12]
 80020bc:	687b      	ldr	r3, [r7, #4]
 80020be:	681b      	ldr	r3, [r3, #0]
 80020c0:	2110      	movs	r1, #16
 80020c2:	438a      	bics	r2, r1
 80020c4:	60da      	str	r2, [r3, #12]
      break;
 80020c6:	e004      	b.n	80020d2 <HAL_TIM_PWM_Stop_IT+0x8a>
    }

    default:
      status = HAL_ERROR;
 80020c8:	230f      	movs	r3, #15
 80020ca:	18fb      	adds	r3, r7, r3
 80020cc:	2201      	movs	r2, #1
 80020ce:	701a      	strb	r2, [r3, #0]
      break;
 80020d0:	46c0      	nop			; (mov r8, r8)
  }

  if (status == HAL_OK)
 80020d2:	230f      	movs	r3, #15
 80020d4:	18fb      	adds	r3, r7, r3
 80020d6:	781b      	ldrb	r3, [r3, #0]
 80020d8:	2b00      	cmp	r3, #0
 80020da:	d000      	beq.n	80020de <HAL_TIM_PWM_Stop_IT+0x96>
 80020dc:	e063      	b.n	80021a6 <HAL_TIM_PWM_Stop_IT+0x15e>
  {
    /* Disable the Capture compare channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 80020de:	687b      	ldr	r3, [r7, #4]
 80020e0:	681b      	ldr	r3, [r3, #0]
 80020e2:	6839      	ldr	r1, [r7, #0]
 80020e4:	2200      	movs	r2, #0
 80020e6:	0018      	movs	r0, r3
 80020e8:	f000 fe60 	bl	8002dac <TIM_CCxChannelCmd>

    if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80020ec:	687b      	ldr	r3, [r7, #4]
 80020ee:	681b      	ldr	r3, [r3, #0]
 80020f0:	4a30      	ldr	r2, [pc, #192]	; (80021b4 <HAL_TIM_PWM_Stop_IT+0x16c>)
 80020f2:	4293      	cmp	r3, r2
 80020f4:	d00e      	beq.n	8002114 <HAL_TIM_PWM_Stop_IT+0xcc>
 80020f6:	687b      	ldr	r3, [r7, #4]
 80020f8:	681b      	ldr	r3, [r3, #0]
 80020fa:	4a2f      	ldr	r2, [pc, #188]	; (80021b8 <HAL_TIM_PWM_Stop_IT+0x170>)
 80020fc:	4293      	cmp	r3, r2
 80020fe:	d009      	beq.n	8002114 <HAL_TIM_PWM_Stop_IT+0xcc>
 8002100:	687b      	ldr	r3, [r7, #4]
 8002102:	681b      	ldr	r3, [r3, #0]
 8002104:	4a2d      	ldr	r2, [pc, #180]	; (80021bc <HAL_TIM_PWM_Stop_IT+0x174>)
 8002106:	4293      	cmp	r3, r2
 8002108:	d004      	beq.n	8002114 <HAL_TIM_PWM_Stop_IT+0xcc>
 800210a:	687b      	ldr	r3, [r7, #4]
 800210c:	681b      	ldr	r3, [r3, #0]
 800210e:	4a2c      	ldr	r2, [pc, #176]	; (80021c0 <HAL_TIM_PWM_Stop_IT+0x178>)
 8002110:	4293      	cmp	r3, r2
 8002112:	d101      	bne.n	8002118 <HAL_TIM_PWM_Stop_IT+0xd0>
 8002114:	2301      	movs	r3, #1
 8002116:	e000      	b.n	800211a <HAL_TIM_PWM_Stop_IT+0xd2>
 8002118:	2300      	movs	r3, #0
 800211a:	2b00      	cmp	r3, #0
 800211c:	d013      	beq.n	8002146 <HAL_TIM_PWM_Stop_IT+0xfe>
    {
      /* Disable the Main Output */
      __HAL_TIM_MOE_DISABLE(htim);
 800211e:	687b      	ldr	r3, [r7, #4]
 8002120:	681b      	ldr	r3, [r3, #0]
 8002122:	6a1b      	ldr	r3, [r3, #32]
 8002124:	4a27      	ldr	r2, [pc, #156]	; (80021c4 <HAL_TIM_PWM_Stop_IT+0x17c>)
 8002126:	4013      	ands	r3, r2
 8002128:	d10d      	bne.n	8002146 <HAL_TIM_PWM_Stop_IT+0xfe>
 800212a:	687b      	ldr	r3, [r7, #4]
 800212c:	681b      	ldr	r3, [r3, #0]
 800212e:	6a1b      	ldr	r3, [r3, #32]
 8002130:	4a25      	ldr	r2, [pc, #148]	; (80021c8 <HAL_TIM_PWM_Stop_IT+0x180>)
 8002132:	4013      	ands	r3, r2
 8002134:	d107      	bne.n	8002146 <HAL_TIM_PWM_Stop_IT+0xfe>
 8002136:	687b      	ldr	r3, [r7, #4]
 8002138:	681b      	ldr	r3, [r3, #0]
 800213a:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800213c:	687b      	ldr	r3, [r7, #4]
 800213e:	681b      	ldr	r3, [r3, #0]
 8002140:	4922      	ldr	r1, [pc, #136]	; (80021cc <HAL_TIM_PWM_Stop_IT+0x184>)
 8002142:	400a      	ands	r2, r1
 8002144:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Disable the Peripheral */
    __HAL_TIM_DISABLE(htim);
 8002146:	687b      	ldr	r3, [r7, #4]
 8002148:	681b      	ldr	r3, [r3, #0]
 800214a:	6a1b      	ldr	r3, [r3, #32]
 800214c:	4a1d      	ldr	r2, [pc, #116]	; (80021c4 <HAL_TIM_PWM_Stop_IT+0x17c>)
 800214e:	4013      	ands	r3, r2
 8002150:	d10d      	bne.n	800216e <HAL_TIM_PWM_Stop_IT+0x126>
 8002152:	687b      	ldr	r3, [r7, #4]
 8002154:	681b      	ldr	r3, [r3, #0]
 8002156:	6a1b      	ldr	r3, [r3, #32]
 8002158:	4a1b      	ldr	r2, [pc, #108]	; (80021c8 <HAL_TIM_PWM_Stop_IT+0x180>)
 800215a:	4013      	ands	r3, r2
 800215c:	d107      	bne.n	800216e <HAL_TIM_PWM_Stop_IT+0x126>
 800215e:	687b      	ldr	r3, [r7, #4]
 8002160:	681b      	ldr	r3, [r3, #0]
 8002162:	681a      	ldr	r2, [r3, #0]
 8002164:	687b      	ldr	r3, [r7, #4]
 8002166:	681b      	ldr	r3, [r3, #0]
 8002168:	2101      	movs	r1, #1
 800216a:	438a      	bics	r2, r1
 800216c:	601a      	str	r2, [r3, #0]

    /* Set the TIM channel state */
    TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 800216e:	683b      	ldr	r3, [r7, #0]
 8002170:	2b00      	cmp	r3, #0
 8002172:	d104      	bne.n	800217e <HAL_TIM_PWM_Stop_IT+0x136>
 8002174:	687b      	ldr	r3, [r7, #4]
 8002176:	223e      	movs	r2, #62	; 0x3e
 8002178:	2101      	movs	r1, #1
 800217a:	5499      	strb	r1, [r3, r2]
 800217c:	e013      	b.n	80021a6 <HAL_TIM_PWM_Stop_IT+0x15e>
 800217e:	683b      	ldr	r3, [r7, #0]
 8002180:	2b04      	cmp	r3, #4
 8002182:	d104      	bne.n	800218e <HAL_TIM_PWM_Stop_IT+0x146>
 8002184:	687b      	ldr	r3, [r7, #4]
 8002186:	223f      	movs	r2, #63	; 0x3f
 8002188:	2101      	movs	r1, #1
 800218a:	5499      	strb	r1, [r3, r2]
 800218c:	e00b      	b.n	80021a6 <HAL_TIM_PWM_Stop_IT+0x15e>
 800218e:	683b      	ldr	r3, [r7, #0]
 8002190:	2b08      	cmp	r3, #8
 8002192:	d104      	bne.n	800219e <HAL_TIM_PWM_Stop_IT+0x156>
 8002194:	687b      	ldr	r3, [r7, #4]
 8002196:	2240      	movs	r2, #64	; 0x40
 8002198:	2101      	movs	r1, #1
 800219a:	5499      	strb	r1, [r3, r2]
 800219c:	e003      	b.n	80021a6 <HAL_TIM_PWM_Stop_IT+0x15e>
 800219e:	687b      	ldr	r3, [r7, #4]
 80021a0:	2241      	movs	r2, #65	; 0x41
 80021a2:	2101      	movs	r1, #1
 80021a4:	5499      	strb	r1, [r3, r2]
  }

  /* Return function status */
  return status;
 80021a6:	230f      	movs	r3, #15
 80021a8:	18fb      	adds	r3, r7, r3
 80021aa:	781b      	ldrb	r3, [r3, #0]
}
 80021ac:	0018      	movs	r0, r3
 80021ae:	46bd      	mov	sp, r7
 80021b0:	b004      	add	sp, #16
 80021b2:	bd80      	pop	{r7, pc}
 80021b4:	40012c00 	.word	0x40012c00
 80021b8:	40014000 	.word	0x40014000
 80021bc:	40014400 	.word	0x40014400
 80021c0:	40014800 	.word	0x40014800
 80021c4:	00001111 	.word	0x00001111
 80021c8:	00000444 	.word	0x00000444
 80021cc:	ffff7fff 	.word	0xffff7fff

080021d0 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80021d0:	b580      	push	{r7, lr}
 80021d2:	b082      	sub	sp, #8
 80021d4:	af00      	add	r7, sp, #0
 80021d6:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80021d8:	687b      	ldr	r3, [r7, #4]
 80021da:	681b      	ldr	r3, [r3, #0]
 80021dc:	691b      	ldr	r3, [r3, #16]
 80021de:	2202      	movs	r2, #2
 80021e0:	4013      	ands	r3, r2
 80021e2:	2b02      	cmp	r3, #2
 80021e4:	d124      	bne.n	8002230 <HAL_TIM_IRQHandler+0x60>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80021e6:	687b      	ldr	r3, [r7, #4]
 80021e8:	681b      	ldr	r3, [r3, #0]
 80021ea:	68db      	ldr	r3, [r3, #12]
 80021ec:	2202      	movs	r2, #2
 80021ee:	4013      	ands	r3, r2
 80021f0:	2b02      	cmp	r3, #2
 80021f2:	d11d      	bne.n	8002230 <HAL_TIM_IRQHandler+0x60>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80021f4:	687b      	ldr	r3, [r7, #4]
 80021f6:	681b      	ldr	r3, [r3, #0]
 80021f8:	2203      	movs	r2, #3
 80021fa:	4252      	negs	r2, r2
 80021fc:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80021fe:	687b      	ldr	r3, [r7, #4]
 8002200:	2201      	movs	r2, #1
 8002202:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002204:	687b      	ldr	r3, [r7, #4]
 8002206:	681b      	ldr	r3, [r3, #0]
 8002208:	699b      	ldr	r3, [r3, #24]
 800220a:	2203      	movs	r2, #3
 800220c:	4013      	ands	r3, r2
 800220e:	d004      	beq.n	800221a <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8002210:	687b      	ldr	r3, [r7, #4]
 8002212:	0018      	movs	r0, r3
 8002214:	f000 fa9c 	bl	8002750 <HAL_TIM_IC_CaptureCallback>
 8002218:	e007      	b.n	800222a <HAL_TIM_IRQHandler+0x5a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800221a:	687b      	ldr	r3, [r7, #4]
 800221c:	0018      	movs	r0, r3
 800221e:	f000 fa8f 	bl	8002740 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002222:	687b      	ldr	r3, [r7, #4]
 8002224:	0018      	movs	r0, r3
 8002226:	f000 fa9b 	bl	8002760 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800222a:	687b      	ldr	r3, [r7, #4]
 800222c:	2200      	movs	r2, #0
 800222e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8002230:	687b      	ldr	r3, [r7, #4]
 8002232:	681b      	ldr	r3, [r3, #0]
 8002234:	691b      	ldr	r3, [r3, #16]
 8002236:	2204      	movs	r2, #4
 8002238:	4013      	ands	r3, r2
 800223a:	2b04      	cmp	r3, #4
 800223c:	d125      	bne.n	800228a <HAL_TIM_IRQHandler+0xba>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800223e:	687b      	ldr	r3, [r7, #4]
 8002240:	681b      	ldr	r3, [r3, #0]
 8002242:	68db      	ldr	r3, [r3, #12]
 8002244:	2204      	movs	r2, #4
 8002246:	4013      	ands	r3, r2
 8002248:	2b04      	cmp	r3, #4
 800224a:	d11e      	bne.n	800228a <HAL_TIM_IRQHandler+0xba>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800224c:	687b      	ldr	r3, [r7, #4]
 800224e:	681b      	ldr	r3, [r3, #0]
 8002250:	2205      	movs	r2, #5
 8002252:	4252      	negs	r2, r2
 8002254:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002256:	687b      	ldr	r3, [r7, #4]
 8002258:	2202      	movs	r2, #2
 800225a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800225c:	687b      	ldr	r3, [r7, #4]
 800225e:	681b      	ldr	r3, [r3, #0]
 8002260:	699a      	ldr	r2, [r3, #24]
 8002262:	23c0      	movs	r3, #192	; 0xc0
 8002264:	009b      	lsls	r3, r3, #2
 8002266:	4013      	ands	r3, r2
 8002268:	d004      	beq.n	8002274 <HAL_TIM_IRQHandler+0xa4>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800226a:	687b      	ldr	r3, [r7, #4]
 800226c:	0018      	movs	r0, r3
 800226e:	f000 fa6f 	bl	8002750 <HAL_TIM_IC_CaptureCallback>
 8002272:	e007      	b.n	8002284 <HAL_TIM_IRQHandler+0xb4>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002274:	687b      	ldr	r3, [r7, #4]
 8002276:	0018      	movs	r0, r3
 8002278:	f000 fa62 	bl	8002740 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800227c:	687b      	ldr	r3, [r7, #4]
 800227e:	0018      	movs	r0, r3
 8002280:	f000 fa6e 	bl	8002760 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002284:	687b      	ldr	r3, [r7, #4]
 8002286:	2200      	movs	r2, #0
 8002288:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800228a:	687b      	ldr	r3, [r7, #4]
 800228c:	681b      	ldr	r3, [r3, #0]
 800228e:	691b      	ldr	r3, [r3, #16]
 8002290:	2208      	movs	r2, #8
 8002292:	4013      	ands	r3, r2
 8002294:	2b08      	cmp	r3, #8
 8002296:	d124      	bne.n	80022e2 <HAL_TIM_IRQHandler+0x112>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8002298:	687b      	ldr	r3, [r7, #4]
 800229a:	681b      	ldr	r3, [r3, #0]
 800229c:	68db      	ldr	r3, [r3, #12]
 800229e:	2208      	movs	r2, #8
 80022a0:	4013      	ands	r3, r2
 80022a2:	2b08      	cmp	r3, #8
 80022a4:	d11d      	bne.n	80022e2 <HAL_TIM_IRQHandler+0x112>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80022a6:	687b      	ldr	r3, [r7, #4]
 80022a8:	681b      	ldr	r3, [r3, #0]
 80022aa:	2209      	movs	r2, #9
 80022ac:	4252      	negs	r2, r2
 80022ae:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80022b0:	687b      	ldr	r3, [r7, #4]
 80022b2:	2204      	movs	r2, #4
 80022b4:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80022b6:	687b      	ldr	r3, [r7, #4]
 80022b8:	681b      	ldr	r3, [r3, #0]
 80022ba:	69db      	ldr	r3, [r3, #28]
 80022bc:	2203      	movs	r2, #3
 80022be:	4013      	ands	r3, r2
 80022c0:	d004      	beq.n	80022cc <HAL_TIM_IRQHandler+0xfc>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80022c2:	687b      	ldr	r3, [r7, #4]
 80022c4:	0018      	movs	r0, r3
 80022c6:	f000 fa43 	bl	8002750 <HAL_TIM_IC_CaptureCallback>
 80022ca:	e007      	b.n	80022dc <HAL_TIM_IRQHandler+0x10c>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80022cc:	687b      	ldr	r3, [r7, #4]
 80022ce:	0018      	movs	r0, r3
 80022d0:	f000 fa36 	bl	8002740 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80022d4:	687b      	ldr	r3, [r7, #4]
 80022d6:	0018      	movs	r0, r3
 80022d8:	f000 fa42 	bl	8002760 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80022dc:	687b      	ldr	r3, [r7, #4]
 80022de:	2200      	movs	r2, #0
 80022e0:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80022e2:	687b      	ldr	r3, [r7, #4]
 80022e4:	681b      	ldr	r3, [r3, #0]
 80022e6:	691b      	ldr	r3, [r3, #16]
 80022e8:	2210      	movs	r2, #16
 80022ea:	4013      	ands	r3, r2
 80022ec:	2b10      	cmp	r3, #16
 80022ee:	d125      	bne.n	800233c <HAL_TIM_IRQHandler+0x16c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80022f0:	687b      	ldr	r3, [r7, #4]
 80022f2:	681b      	ldr	r3, [r3, #0]
 80022f4:	68db      	ldr	r3, [r3, #12]
 80022f6:	2210      	movs	r2, #16
 80022f8:	4013      	ands	r3, r2
 80022fa:	2b10      	cmp	r3, #16
 80022fc:	d11e      	bne.n	800233c <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80022fe:	687b      	ldr	r3, [r7, #4]
 8002300:	681b      	ldr	r3, [r3, #0]
 8002302:	2211      	movs	r2, #17
 8002304:	4252      	negs	r2, r2
 8002306:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002308:	687b      	ldr	r3, [r7, #4]
 800230a:	2208      	movs	r2, #8
 800230c:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800230e:	687b      	ldr	r3, [r7, #4]
 8002310:	681b      	ldr	r3, [r3, #0]
 8002312:	69da      	ldr	r2, [r3, #28]
 8002314:	23c0      	movs	r3, #192	; 0xc0
 8002316:	009b      	lsls	r3, r3, #2
 8002318:	4013      	ands	r3, r2
 800231a:	d004      	beq.n	8002326 <HAL_TIM_IRQHandler+0x156>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800231c:	687b      	ldr	r3, [r7, #4]
 800231e:	0018      	movs	r0, r3
 8002320:	f000 fa16 	bl	8002750 <HAL_TIM_IC_CaptureCallback>
 8002324:	e007      	b.n	8002336 <HAL_TIM_IRQHandler+0x166>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002326:	687b      	ldr	r3, [r7, #4]
 8002328:	0018      	movs	r0, r3
 800232a:	f000 fa09 	bl	8002740 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800232e:	687b      	ldr	r3, [r7, #4]
 8002330:	0018      	movs	r0, r3
 8002332:	f000 fa15 	bl	8002760 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002336:	687b      	ldr	r3, [r7, #4]
 8002338:	2200      	movs	r2, #0
 800233a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800233c:	687b      	ldr	r3, [r7, #4]
 800233e:	681b      	ldr	r3, [r3, #0]
 8002340:	691b      	ldr	r3, [r3, #16]
 8002342:	2201      	movs	r2, #1
 8002344:	4013      	ands	r3, r2
 8002346:	2b01      	cmp	r3, #1
 8002348:	d10f      	bne.n	800236a <HAL_TIM_IRQHandler+0x19a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800234a:	687b      	ldr	r3, [r7, #4]
 800234c:	681b      	ldr	r3, [r3, #0]
 800234e:	68db      	ldr	r3, [r3, #12]
 8002350:	2201      	movs	r2, #1
 8002352:	4013      	ands	r3, r2
 8002354:	2b01      	cmp	r3, #1
 8002356:	d108      	bne.n	800236a <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8002358:	687b      	ldr	r3, [r7, #4]
 800235a:	681b      	ldr	r3, [r3, #0]
 800235c:	2202      	movs	r2, #2
 800235e:	4252      	negs	r2, r2
 8002360:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8002362:	687b      	ldr	r3, [r7, #4]
 8002364:	0018      	movs	r0, r3
 8002366:	f000 f9e3 	bl	8002730 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800236a:	687b      	ldr	r3, [r7, #4]
 800236c:	681b      	ldr	r3, [r3, #0]
 800236e:	691b      	ldr	r3, [r3, #16]
 8002370:	2280      	movs	r2, #128	; 0x80
 8002372:	4013      	ands	r3, r2
 8002374:	2b80      	cmp	r3, #128	; 0x80
 8002376:	d10f      	bne.n	8002398 <HAL_TIM_IRQHandler+0x1c8>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8002378:	687b      	ldr	r3, [r7, #4]
 800237a:	681b      	ldr	r3, [r3, #0]
 800237c:	68db      	ldr	r3, [r3, #12]
 800237e:	2280      	movs	r2, #128	; 0x80
 8002380:	4013      	ands	r3, r2
 8002382:	2b80      	cmp	r3, #128	; 0x80
 8002384:	d108      	bne.n	8002398 <HAL_TIM_IRQHandler+0x1c8>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8002386:	687b      	ldr	r3, [r7, #4]
 8002388:	681b      	ldr	r3, [r3, #0]
 800238a:	2281      	movs	r2, #129	; 0x81
 800238c:	4252      	negs	r2, r2
 800238e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8002390:	687b      	ldr	r3, [r7, #4]
 8002392:	0018      	movs	r0, r3
 8002394:	f000 fdf2 	bl	8002f7c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8002398:	687b      	ldr	r3, [r7, #4]
 800239a:	681b      	ldr	r3, [r3, #0]
 800239c:	691b      	ldr	r3, [r3, #16]
 800239e:	2240      	movs	r2, #64	; 0x40
 80023a0:	4013      	ands	r3, r2
 80023a2:	2b40      	cmp	r3, #64	; 0x40
 80023a4:	d10f      	bne.n	80023c6 <HAL_TIM_IRQHandler+0x1f6>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80023a6:	687b      	ldr	r3, [r7, #4]
 80023a8:	681b      	ldr	r3, [r3, #0]
 80023aa:	68db      	ldr	r3, [r3, #12]
 80023ac:	2240      	movs	r2, #64	; 0x40
 80023ae:	4013      	ands	r3, r2
 80023b0:	2b40      	cmp	r3, #64	; 0x40
 80023b2:	d108      	bne.n	80023c6 <HAL_TIM_IRQHandler+0x1f6>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80023b4:	687b      	ldr	r3, [r7, #4]
 80023b6:	681b      	ldr	r3, [r3, #0]
 80023b8:	2241      	movs	r2, #65	; 0x41
 80023ba:	4252      	negs	r2, r2
 80023bc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80023be:	687b      	ldr	r3, [r7, #4]
 80023c0:	0018      	movs	r0, r3
 80023c2:	f000 f9d5 	bl	8002770 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80023c6:	687b      	ldr	r3, [r7, #4]
 80023c8:	681b      	ldr	r3, [r3, #0]
 80023ca:	691b      	ldr	r3, [r3, #16]
 80023cc:	2220      	movs	r2, #32
 80023ce:	4013      	ands	r3, r2
 80023d0:	2b20      	cmp	r3, #32
 80023d2:	d10f      	bne.n	80023f4 <HAL_TIM_IRQHandler+0x224>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80023d4:	687b      	ldr	r3, [r7, #4]
 80023d6:	681b      	ldr	r3, [r3, #0]
 80023d8:	68db      	ldr	r3, [r3, #12]
 80023da:	2220      	movs	r2, #32
 80023dc:	4013      	ands	r3, r2
 80023de:	2b20      	cmp	r3, #32
 80023e0:	d108      	bne.n	80023f4 <HAL_TIM_IRQHandler+0x224>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80023e2:	687b      	ldr	r3, [r7, #4]
 80023e4:	681b      	ldr	r3, [r3, #0]
 80023e6:	2221      	movs	r2, #33	; 0x21
 80023e8:	4252      	negs	r2, r2
 80023ea:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80023ec:	687b      	ldr	r3, [r7, #4]
 80023ee:	0018      	movs	r0, r3
 80023f0:	f000 fdbc 	bl	8002f6c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80023f4:	46c0      	nop			; (mov r8, r8)
 80023f6:	46bd      	mov	sp, r7
 80023f8:	b002      	add	sp, #8
 80023fa:	bd80      	pop	{r7, pc}

080023fc <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80023fc:	b580      	push	{r7, lr}
 80023fe:	b086      	sub	sp, #24
 8002400:	af00      	add	r7, sp, #0
 8002402:	60f8      	str	r0, [r7, #12]
 8002404:	60b9      	str	r1, [r7, #8]
 8002406:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002408:	2317      	movs	r3, #23
 800240a:	18fb      	adds	r3, r7, r3
 800240c:	2200      	movs	r2, #0
 800240e:	701a      	strb	r2, [r3, #0]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8002410:	68fb      	ldr	r3, [r7, #12]
 8002412:	223c      	movs	r2, #60	; 0x3c
 8002414:	5c9b      	ldrb	r3, [r3, r2]
 8002416:	2b01      	cmp	r3, #1
 8002418:	d101      	bne.n	800241e <HAL_TIM_PWM_ConfigChannel+0x22>
 800241a:	2302      	movs	r3, #2
 800241c:	e0ad      	b.n	800257a <HAL_TIM_PWM_ConfigChannel+0x17e>
 800241e:	68fb      	ldr	r3, [r7, #12]
 8002420:	223c      	movs	r2, #60	; 0x3c
 8002422:	2101      	movs	r1, #1
 8002424:	5499      	strb	r1, [r3, r2]

  switch (Channel)
 8002426:	687b      	ldr	r3, [r7, #4]
 8002428:	2b0c      	cmp	r3, #12
 800242a:	d100      	bne.n	800242e <HAL_TIM_PWM_ConfigChannel+0x32>
 800242c:	e076      	b.n	800251c <HAL_TIM_PWM_ConfigChannel+0x120>
 800242e:	687b      	ldr	r3, [r7, #4]
 8002430:	2b0c      	cmp	r3, #12
 8002432:	d900      	bls.n	8002436 <HAL_TIM_PWM_ConfigChannel+0x3a>
 8002434:	e095      	b.n	8002562 <HAL_TIM_PWM_ConfigChannel+0x166>
 8002436:	687b      	ldr	r3, [r7, #4]
 8002438:	2b08      	cmp	r3, #8
 800243a:	d04e      	beq.n	80024da <HAL_TIM_PWM_ConfigChannel+0xde>
 800243c:	687b      	ldr	r3, [r7, #4]
 800243e:	2b08      	cmp	r3, #8
 8002440:	d900      	bls.n	8002444 <HAL_TIM_PWM_ConfigChannel+0x48>
 8002442:	e08e      	b.n	8002562 <HAL_TIM_PWM_ConfigChannel+0x166>
 8002444:	687b      	ldr	r3, [r7, #4]
 8002446:	2b00      	cmp	r3, #0
 8002448:	d003      	beq.n	8002452 <HAL_TIM_PWM_ConfigChannel+0x56>
 800244a:	687b      	ldr	r3, [r7, #4]
 800244c:	2b04      	cmp	r3, #4
 800244e:	d021      	beq.n	8002494 <HAL_TIM_PWM_ConfigChannel+0x98>
 8002450:	e087      	b.n	8002562 <HAL_TIM_PWM_ConfigChannel+0x166>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8002452:	68fb      	ldr	r3, [r7, #12]
 8002454:	681b      	ldr	r3, [r3, #0]
 8002456:	68ba      	ldr	r2, [r7, #8]
 8002458:	0011      	movs	r1, r2
 800245a:	0018      	movs	r0, r3
 800245c:	f000 fa10 	bl	8002880 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8002460:	68fb      	ldr	r3, [r7, #12]
 8002462:	681b      	ldr	r3, [r3, #0]
 8002464:	699a      	ldr	r2, [r3, #24]
 8002466:	68fb      	ldr	r3, [r7, #12]
 8002468:	681b      	ldr	r3, [r3, #0]
 800246a:	2108      	movs	r1, #8
 800246c:	430a      	orrs	r2, r1
 800246e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8002470:	68fb      	ldr	r3, [r7, #12]
 8002472:	681b      	ldr	r3, [r3, #0]
 8002474:	699a      	ldr	r2, [r3, #24]
 8002476:	68fb      	ldr	r3, [r7, #12]
 8002478:	681b      	ldr	r3, [r3, #0]
 800247a:	2104      	movs	r1, #4
 800247c:	438a      	bics	r2, r1
 800247e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8002480:	68fb      	ldr	r3, [r7, #12]
 8002482:	681b      	ldr	r3, [r3, #0]
 8002484:	6999      	ldr	r1, [r3, #24]
 8002486:	68bb      	ldr	r3, [r7, #8]
 8002488:	691a      	ldr	r2, [r3, #16]
 800248a:	68fb      	ldr	r3, [r7, #12]
 800248c:	681b      	ldr	r3, [r3, #0]
 800248e:	430a      	orrs	r2, r1
 8002490:	619a      	str	r2, [r3, #24]
      break;
 8002492:	e06b      	b.n	800256c <HAL_TIM_PWM_ConfigChannel+0x170>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8002494:	68fb      	ldr	r3, [r7, #12]
 8002496:	681b      	ldr	r3, [r3, #0]
 8002498:	68ba      	ldr	r2, [r7, #8]
 800249a:	0011      	movs	r1, r2
 800249c:	0018      	movs	r0, r3
 800249e:	f000 fa77 	bl	8002990 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80024a2:	68fb      	ldr	r3, [r7, #12]
 80024a4:	681b      	ldr	r3, [r3, #0]
 80024a6:	699a      	ldr	r2, [r3, #24]
 80024a8:	68fb      	ldr	r3, [r7, #12]
 80024aa:	681b      	ldr	r3, [r3, #0]
 80024ac:	2180      	movs	r1, #128	; 0x80
 80024ae:	0109      	lsls	r1, r1, #4
 80024b0:	430a      	orrs	r2, r1
 80024b2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80024b4:	68fb      	ldr	r3, [r7, #12]
 80024b6:	681b      	ldr	r3, [r3, #0]
 80024b8:	699a      	ldr	r2, [r3, #24]
 80024ba:	68fb      	ldr	r3, [r7, #12]
 80024bc:	681b      	ldr	r3, [r3, #0]
 80024be:	4931      	ldr	r1, [pc, #196]	; (8002584 <HAL_TIM_PWM_ConfigChannel+0x188>)
 80024c0:	400a      	ands	r2, r1
 80024c2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80024c4:	68fb      	ldr	r3, [r7, #12]
 80024c6:	681b      	ldr	r3, [r3, #0]
 80024c8:	6999      	ldr	r1, [r3, #24]
 80024ca:	68bb      	ldr	r3, [r7, #8]
 80024cc:	691b      	ldr	r3, [r3, #16]
 80024ce:	021a      	lsls	r2, r3, #8
 80024d0:	68fb      	ldr	r3, [r7, #12]
 80024d2:	681b      	ldr	r3, [r3, #0]
 80024d4:	430a      	orrs	r2, r1
 80024d6:	619a      	str	r2, [r3, #24]
      break;
 80024d8:	e048      	b.n	800256c <HAL_TIM_PWM_ConfigChannel+0x170>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80024da:	68fb      	ldr	r3, [r7, #12]
 80024dc:	681b      	ldr	r3, [r3, #0]
 80024de:	68ba      	ldr	r2, [r7, #8]
 80024e0:	0011      	movs	r1, r2
 80024e2:	0018      	movs	r0, r3
 80024e4:	f000 fad8 	bl	8002a98 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80024e8:	68fb      	ldr	r3, [r7, #12]
 80024ea:	681b      	ldr	r3, [r3, #0]
 80024ec:	69da      	ldr	r2, [r3, #28]
 80024ee:	68fb      	ldr	r3, [r7, #12]
 80024f0:	681b      	ldr	r3, [r3, #0]
 80024f2:	2108      	movs	r1, #8
 80024f4:	430a      	orrs	r2, r1
 80024f6:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80024f8:	68fb      	ldr	r3, [r7, #12]
 80024fa:	681b      	ldr	r3, [r3, #0]
 80024fc:	69da      	ldr	r2, [r3, #28]
 80024fe:	68fb      	ldr	r3, [r7, #12]
 8002500:	681b      	ldr	r3, [r3, #0]
 8002502:	2104      	movs	r1, #4
 8002504:	438a      	bics	r2, r1
 8002506:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8002508:	68fb      	ldr	r3, [r7, #12]
 800250a:	681b      	ldr	r3, [r3, #0]
 800250c:	69d9      	ldr	r1, [r3, #28]
 800250e:	68bb      	ldr	r3, [r7, #8]
 8002510:	691a      	ldr	r2, [r3, #16]
 8002512:	68fb      	ldr	r3, [r7, #12]
 8002514:	681b      	ldr	r3, [r3, #0]
 8002516:	430a      	orrs	r2, r1
 8002518:	61da      	str	r2, [r3, #28]
      break;
 800251a:	e027      	b.n	800256c <HAL_TIM_PWM_ConfigChannel+0x170>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800251c:	68fb      	ldr	r3, [r7, #12]
 800251e:	681b      	ldr	r3, [r3, #0]
 8002520:	68ba      	ldr	r2, [r7, #8]
 8002522:	0011      	movs	r1, r2
 8002524:	0018      	movs	r0, r3
 8002526:	f000 fb3d 	bl	8002ba4 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800252a:	68fb      	ldr	r3, [r7, #12]
 800252c:	681b      	ldr	r3, [r3, #0]
 800252e:	69da      	ldr	r2, [r3, #28]
 8002530:	68fb      	ldr	r3, [r7, #12]
 8002532:	681b      	ldr	r3, [r3, #0]
 8002534:	2180      	movs	r1, #128	; 0x80
 8002536:	0109      	lsls	r1, r1, #4
 8002538:	430a      	orrs	r2, r1
 800253a:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800253c:	68fb      	ldr	r3, [r7, #12]
 800253e:	681b      	ldr	r3, [r3, #0]
 8002540:	69da      	ldr	r2, [r3, #28]
 8002542:	68fb      	ldr	r3, [r7, #12]
 8002544:	681b      	ldr	r3, [r3, #0]
 8002546:	490f      	ldr	r1, [pc, #60]	; (8002584 <HAL_TIM_PWM_ConfigChannel+0x188>)
 8002548:	400a      	ands	r2, r1
 800254a:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800254c:	68fb      	ldr	r3, [r7, #12]
 800254e:	681b      	ldr	r3, [r3, #0]
 8002550:	69d9      	ldr	r1, [r3, #28]
 8002552:	68bb      	ldr	r3, [r7, #8]
 8002554:	691b      	ldr	r3, [r3, #16]
 8002556:	021a      	lsls	r2, r3, #8
 8002558:	68fb      	ldr	r3, [r7, #12]
 800255a:	681b      	ldr	r3, [r3, #0]
 800255c:	430a      	orrs	r2, r1
 800255e:	61da      	str	r2, [r3, #28]
      break;
 8002560:	e004      	b.n	800256c <HAL_TIM_PWM_ConfigChannel+0x170>
    }

    default:
      status = HAL_ERROR;
 8002562:	2317      	movs	r3, #23
 8002564:	18fb      	adds	r3, r7, r3
 8002566:	2201      	movs	r2, #1
 8002568:	701a      	strb	r2, [r3, #0]
      break;
 800256a:	46c0      	nop			; (mov r8, r8)
  }

  __HAL_UNLOCK(htim);
 800256c:	68fb      	ldr	r3, [r7, #12]
 800256e:	223c      	movs	r2, #60	; 0x3c
 8002570:	2100      	movs	r1, #0
 8002572:	5499      	strb	r1, [r3, r2]

  return status;
 8002574:	2317      	movs	r3, #23
 8002576:	18fb      	adds	r3, r7, r3
 8002578:	781b      	ldrb	r3, [r3, #0]
}
 800257a:	0018      	movs	r0, r3
 800257c:	46bd      	mov	sp, r7
 800257e:	b006      	add	sp, #24
 8002580:	bd80      	pop	{r7, pc}
 8002582:	46c0      	nop			; (mov r8, r8)
 8002584:	fffffbff 	.word	0xfffffbff

08002588 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8002588:	b580      	push	{r7, lr}
 800258a:	b084      	sub	sp, #16
 800258c:	af00      	add	r7, sp, #0
 800258e:	6078      	str	r0, [r7, #4]
 8002590:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002592:	230f      	movs	r3, #15
 8002594:	18fb      	adds	r3, r7, r3
 8002596:	2200      	movs	r2, #0
 8002598:	701a      	strb	r2, [r3, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800259a:	687b      	ldr	r3, [r7, #4]
 800259c:	223c      	movs	r2, #60	; 0x3c
 800259e:	5c9b      	ldrb	r3, [r3, r2]
 80025a0:	2b01      	cmp	r3, #1
 80025a2:	d101      	bne.n	80025a8 <HAL_TIM_ConfigClockSource+0x20>
 80025a4:	2302      	movs	r3, #2
 80025a6:	e0bc      	b.n	8002722 <HAL_TIM_ConfigClockSource+0x19a>
 80025a8:	687b      	ldr	r3, [r7, #4]
 80025aa:	223c      	movs	r2, #60	; 0x3c
 80025ac:	2101      	movs	r1, #1
 80025ae:	5499      	strb	r1, [r3, r2]

  htim->State = HAL_TIM_STATE_BUSY;
 80025b0:	687b      	ldr	r3, [r7, #4]
 80025b2:	223d      	movs	r2, #61	; 0x3d
 80025b4:	2102      	movs	r1, #2
 80025b6:	5499      	strb	r1, [r3, r2]

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80025b8:	687b      	ldr	r3, [r7, #4]
 80025ba:	681b      	ldr	r3, [r3, #0]
 80025bc:	689b      	ldr	r3, [r3, #8]
 80025be:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80025c0:	68bb      	ldr	r3, [r7, #8]
 80025c2:	2277      	movs	r2, #119	; 0x77
 80025c4:	4393      	bics	r3, r2
 80025c6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80025c8:	68bb      	ldr	r3, [r7, #8]
 80025ca:	4a58      	ldr	r2, [pc, #352]	; (800272c <HAL_TIM_ConfigClockSource+0x1a4>)
 80025cc:	4013      	ands	r3, r2
 80025ce:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80025d0:	687b      	ldr	r3, [r7, #4]
 80025d2:	681b      	ldr	r3, [r3, #0]
 80025d4:	68ba      	ldr	r2, [r7, #8]
 80025d6:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80025d8:	683b      	ldr	r3, [r7, #0]
 80025da:	681b      	ldr	r3, [r3, #0]
 80025dc:	2280      	movs	r2, #128	; 0x80
 80025de:	0192      	lsls	r2, r2, #6
 80025e0:	4293      	cmp	r3, r2
 80025e2:	d040      	beq.n	8002666 <HAL_TIM_ConfigClockSource+0xde>
 80025e4:	2280      	movs	r2, #128	; 0x80
 80025e6:	0192      	lsls	r2, r2, #6
 80025e8:	4293      	cmp	r3, r2
 80025ea:	d900      	bls.n	80025ee <HAL_TIM_ConfigClockSource+0x66>
 80025ec:	e088      	b.n	8002700 <HAL_TIM_ConfigClockSource+0x178>
 80025ee:	2280      	movs	r2, #128	; 0x80
 80025f0:	0152      	lsls	r2, r2, #5
 80025f2:	4293      	cmp	r3, r2
 80025f4:	d100      	bne.n	80025f8 <HAL_TIM_ConfigClockSource+0x70>
 80025f6:	e088      	b.n	800270a <HAL_TIM_ConfigClockSource+0x182>
 80025f8:	2280      	movs	r2, #128	; 0x80
 80025fa:	0152      	lsls	r2, r2, #5
 80025fc:	4293      	cmp	r3, r2
 80025fe:	d900      	bls.n	8002602 <HAL_TIM_ConfigClockSource+0x7a>
 8002600:	e07e      	b.n	8002700 <HAL_TIM_ConfigClockSource+0x178>
 8002602:	2b70      	cmp	r3, #112	; 0x70
 8002604:	d018      	beq.n	8002638 <HAL_TIM_ConfigClockSource+0xb0>
 8002606:	d900      	bls.n	800260a <HAL_TIM_ConfigClockSource+0x82>
 8002608:	e07a      	b.n	8002700 <HAL_TIM_ConfigClockSource+0x178>
 800260a:	2b60      	cmp	r3, #96	; 0x60
 800260c:	d04f      	beq.n	80026ae <HAL_TIM_ConfigClockSource+0x126>
 800260e:	d900      	bls.n	8002612 <HAL_TIM_ConfigClockSource+0x8a>
 8002610:	e076      	b.n	8002700 <HAL_TIM_ConfigClockSource+0x178>
 8002612:	2b50      	cmp	r3, #80	; 0x50
 8002614:	d03b      	beq.n	800268e <HAL_TIM_ConfigClockSource+0x106>
 8002616:	d900      	bls.n	800261a <HAL_TIM_ConfigClockSource+0x92>
 8002618:	e072      	b.n	8002700 <HAL_TIM_ConfigClockSource+0x178>
 800261a:	2b40      	cmp	r3, #64	; 0x40
 800261c:	d057      	beq.n	80026ce <HAL_TIM_ConfigClockSource+0x146>
 800261e:	d900      	bls.n	8002622 <HAL_TIM_ConfigClockSource+0x9a>
 8002620:	e06e      	b.n	8002700 <HAL_TIM_ConfigClockSource+0x178>
 8002622:	2b30      	cmp	r3, #48	; 0x30
 8002624:	d063      	beq.n	80026ee <HAL_TIM_ConfigClockSource+0x166>
 8002626:	d86b      	bhi.n	8002700 <HAL_TIM_ConfigClockSource+0x178>
 8002628:	2b20      	cmp	r3, #32
 800262a:	d060      	beq.n	80026ee <HAL_TIM_ConfigClockSource+0x166>
 800262c:	d868      	bhi.n	8002700 <HAL_TIM_ConfigClockSource+0x178>
 800262e:	2b00      	cmp	r3, #0
 8002630:	d05d      	beq.n	80026ee <HAL_TIM_ConfigClockSource+0x166>
 8002632:	2b10      	cmp	r3, #16
 8002634:	d05b      	beq.n	80026ee <HAL_TIM_ConfigClockSource+0x166>
 8002636:	e063      	b.n	8002700 <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8002638:	687b      	ldr	r3, [r7, #4]
 800263a:	6818      	ldr	r0, [r3, #0]
 800263c:	683b      	ldr	r3, [r7, #0]
 800263e:	6899      	ldr	r1, [r3, #8]
 8002640:	683b      	ldr	r3, [r7, #0]
 8002642:	685a      	ldr	r2, [r3, #4]
 8002644:	683b      	ldr	r3, [r7, #0]
 8002646:	68db      	ldr	r3, [r3, #12]
 8002648:	f000 fb90 	bl	8002d6c <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800264c:	687b      	ldr	r3, [r7, #4]
 800264e:	681b      	ldr	r3, [r3, #0]
 8002650:	689b      	ldr	r3, [r3, #8]
 8002652:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8002654:	68bb      	ldr	r3, [r7, #8]
 8002656:	2277      	movs	r2, #119	; 0x77
 8002658:	4313      	orrs	r3, r2
 800265a:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800265c:	687b      	ldr	r3, [r7, #4]
 800265e:	681b      	ldr	r3, [r3, #0]
 8002660:	68ba      	ldr	r2, [r7, #8]
 8002662:	609a      	str	r2, [r3, #8]
      break;
 8002664:	e052      	b.n	800270c <HAL_TIM_ConfigClockSource+0x184>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8002666:	687b      	ldr	r3, [r7, #4]
 8002668:	6818      	ldr	r0, [r3, #0]
 800266a:	683b      	ldr	r3, [r7, #0]
 800266c:	6899      	ldr	r1, [r3, #8]
 800266e:	683b      	ldr	r3, [r7, #0]
 8002670:	685a      	ldr	r2, [r3, #4]
 8002672:	683b      	ldr	r3, [r7, #0]
 8002674:	68db      	ldr	r3, [r3, #12]
 8002676:	f000 fb79 	bl	8002d6c <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800267a:	687b      	ldr	r3, [r7, #4]
 800267c:	681b      	ldr	r3, [r3, #0]
 800267e:	689a      	ldr	r2, [r3, #8]
 8002680:	687b      	ldr	r3, [r7, #4]
 8002682:	681b      	ldr	r3, [r3, #0]
 8002684:	2180      	movs	r1, #128	; 0x80
 8002686:	01c9      	lsls	r1, r1, #7
 8002688:	430a      	orrs	r2, r1
 800268a:	609a      	str	r2, [r3, #8]
      break;
 800268c:	e03e      	b.n	800270c <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800268e:	687b      	ldr	r3, [r7, #4]
 8002690:	6818      	ldr	r0, [r3, #0]
 8002692:	683b      	ldr	r3, [r7, #0]
 8002694:	6859      	ldr	r1, [r3, #4]
 8002696:	683b      	ldr	r3, [r7, #0]
 8002698:	68db      	ldr	r3, [r3, #12]
 800269a:	001a      	movs	r2, r3
 800269c:	f000 faec 	bl	8002c78 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80026a0:	687b      	ldr	r3, [r7, #4]
 80026a2:	681b      	ldr	r3, [r3, #0]
 80026a4:	2150      	movs	r1, #80	; 0x50
 80026a6:	0018      	movs	r0, r3
 80026a8:	f000 fb46 	bl	8002d38 <TIM_ITRx_SetConfig>
      break;
 80026ac:	e02e      	b.n	800270c <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80026ae:	687b      	ldr	r3, [r7, #4]
 80026b0:	6818      	ldr	r0, [r3, #0]
 80026b2:	683b      	ldr	r3, [r7, #0]
 80026b4:	6859      	ldr	r1, [r3, #4]
 80026b6:	683b      	ldr	r3, [r7, #0]
 80026b8:	68db      	ldr	r3, [r3, #12]
 80026ba:	001a      	movs	r2, r3
 80026bc:	f000 fb0a 	bl	8002cd4 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80026c0:	687b      	ldr	r3, [r7, #4]
 80026c2:	681b      	ldr	r3, [r3, #0]
 80026c4:	2160      	movs	r1, #96	; 0x60
 80026c6:	0018      	movs	r0, r3
 80026c8:	f000 fb36 	bl	8002d38 <TIM_ITRx_SetConfig>
      break;
 80026cc:	e01e      	b.n	800270c <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80026ce:	687b      	ldr	r3, [r7, #4]
 80026d0:	6818      	ldr	r0, [r3, #0]
 80026d2:	683b      	ldr	r3, [r7, #0]
 80026d4:	6859      	ldr	r1, [r3, #4]
 80026d6:	683b      	ldr	r3, [r7, #0]
 80026d8:	68db      	ldr	r3, [r3, #12]
 80026da:	001a      	movs	r2, r3
 80026dc:	f000 facc 	bl	8002c78 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80026e0:	687b      	ldr	r3, [r7, #4]
 80026e2:	681b      	ldr	r3, [r3, #0]
 80026e4:	2140      	movs	r1, #64	; 0x40
 80026e6:	0018      	movs	r0, r3
 80026e8:	f000 fb26 	bl	8002d38 <TIM_ITRx_SetConfig>
      break;
 80026ec:	e00e      	b.n	800270c <HAL_TIM_ConfigClockSource+0x184>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80026ee:	687b      	ldr	r3, [r7, #4]
 80026f0:	681a      	ldr	r2, [r3, #0]
 80026f2:	683b      	ldr	r3, [r7, #0]
 80026f4:	681b      	ldr	r3, [r3, #0]
 80026f6:	0019      	movs	r1, r3
 80026f8:	0010      	movs	r0, r2
 80026fa:	f000 fb1d 	bl	8002d38 <TIM_ITRx_SetConfig>
      break;
 80026fe:	e005      	b.n	800270c <HAL_TIM_ConfigClockSource+0x184>
    }

    default:
      status = HAL_ERROR;
 8002700:	230f      	movs	r3, #15
 8002702:	18fb      	adds	r3, r7, r3
 8002704:	2201      	movs	r2, #1
 8002706:	701a      	strb	r2, [r3, #0]
      break;
 8002708:	e000      	b.n	800270c <HAL_TIM_ConfigClockSource+0x184>
      break;
 800270a:	46c0      	nop			; (mov r8, r8)
  }
  htim->State = HAL_TIM_STATE_READY;
 800270c:	687b      	ldr	r3, [r7, #4]
 800270e:	223d      	movs	r2, #61	; 0x3d
 8002710:	2101      	movs	r1, #1
 8002712:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 8002714:	687b      	ldr	r3, [r7, #4]
 8002716:	223c      	movs	r2, #60	; 0x3c
 8002718:	2100      	movs	r1, #0
 800271a:	5499      	strb	r1, [r3, r2]

  return status;
 800271c:	230f      	movs	r3, #15
 800271e:	18fb      	adds	r3, r7, r3
 8002720:	781b      	ldrb	r3, [r3, #0]
}
 8002722:	0018      	movs	r0, r3
 8002724:	46bd      	mov	sp, r7
 8002726:	b004      	add	sp, #16
 8002728:	bd80      	pop	{r7, pc}
 800272a:	46c0      	nop			; (mov r8, r8)
 800272c:	ffff00ff 	.word	0xffff00ff

08002730 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002730:	b580      	push	{r7, lr}
 8002732:	b082      	sub	sp, #8
 8002734:	af00      	add	r7, sp, #0
 8002736:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8002738:	46c0      	nop			; (mov r8, r8)
 800273a:	46bd      	mov	sp, r7
 800273c:	b002      	add	sp, #8
 800273e:	bd80      	pop	{r7, pc}

08002740 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002740:	b580      	push	{r7, lr}
 8002742:	b082      	sub	sp, #8
 8002744:	af00      	add	r7, sp, #0
 8002746:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8002748:	46c0      	nop			; (mov r8, r8)
 800274a:	46bd      	mov	sp, r7
 800274c:	b002      	add	sp, #8
 800274e:	bd80      	pop	{r7, pc}

08002750 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8002750:	b580      	push	{r7, lr}
 8002752:	b082      	sub	sp, #8
 8002754:	af00      	add	r7, sp, #0
 8002756:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8002758:	46c0      	nop			; (mov r8, r8)
 800275a:	46bd      	mov	sp, r7
 800275c:	b002      	add	sp, #8
 800275e:	bd80      	pop	{r7, pc}

08002760 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8002760:	b580      	push	{r7, lr}
 8002762:	b082      	sub	sp, #8
 8002764:	af00      	add	r7, sp, #0
 8002766:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8002768:	46c0      	nop			; (mov r8, r8)
 800276a:	46bd      	mov	sp, r7
 800276c:	b002      	add	sp, #8
 800276e:	bd80      	pop	{r7, pc}

08002770 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8002770:	b580      	push	{r7, lr}
 8002772:	b082      	sub	sp, #8
 8002774:	af00      	add	r7, sp, #0
 8002776:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8002778:	46c0      	nop			; (mov r8, r8)
 800277a:	46bd      	mov	sp, r7
 800277c:	b002      	add	sp, #8
 800277e:	bd80      	pop	{r7, pc}

08002780 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8002780:	b580      	push	{r7, lr}
 8002782:	b084      	sub	sp, #16
 8002784:	af00      	add	r7, sp, #0
 8002786:	6078      	str	r0, [r7, #4]
 8002788:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800278a:	687b      	ldr	r3, [r7, #4]
 800278c:	681b      	ldr	r3, [r3, #0]
 800278e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002790:	687b      	ldr	r3, [r7, #4]
 8002792:	4a34      	ldr	r2, [pc, #208]	; (8002864 <TIM_Base_SetConfig+0xe4>)
 8002794:	4293      	cmp	r3, r2
 8002796:	d008      	beq.n	80027aa <TIM_Base_SetConfig+0x2a>
 8002798:	687a      	ldr	r2, [r7, #4]
 800279a:	2380      	movs	r3, #128	; 0x80
 800279c:	05db      	lsls	r3, r3, #23
 800279e:	429a      	cmp	r2, r3
 80027a0:	d003      	beq.n	80027aa <TIM_Base_SetConfig+0x2a>
 80027a2:	687b      	ldr	r3, [r7, #4]
 80027a4:	4a30      	ldr	r2, [pc, #192]	; (8002868 <TIM_Base_SetConfig+0xe8>)
 80027a6:	4293      	cmp	r3, r2
 80027a8:	d108      	bne.n	80027bc <TIM_Base_SetConfig+0x3c>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80027aa:	68fb      	ldr	r3, [r7, #12]
 80027ac:	2270      	movs	r2, #112	; 0x70
 80027ae:	4393      	bics	r3, r2
 80027b0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80027b2:	683b      	ldr	r3, [r7, #0]
 80027b4:	685b      	ldr	r3, [r3, #4]
 80027b6:	68fa      	ldr	r2, [r7, #12]
 80027b8:	4313      	orrs	r3, r2
 80027ba:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80027bc:	687b      	ldr	r3, [r7, #4]
 80027be:	4a29      	ldr	r2, [pc, #164]	; (8002864 <TIM_Base_SetConfig+0xe4>)
 80027c0:	4293      	cmp	r3, r2
 80027c2:	d018      	beq.n	80027f6 <TIM_Base_SetConfig+0x76>
 80027c4:	687a      	ldr	r2, [r7, #4]
 80027c6:	2380      	movs	r3, #128	; 0x80
 80027c8:	05db      	lsls	r3, r3, #23
 80027ca:	429a      	cmp	r2, r3
 80027cc:	d013      	beq.n	80027f6 <TIM_Base_SetConfig+0x76>
 80027ce:	687b      	ldr	r3, [r7, #4]
 80027d0:	4a25      	ldr	r2, [pc, #148]	; (8002868 <TIM_Base_SetConfig+0xe8>)
 80027d2:	4293      	cmp	r3, r2
 80027d4:	d00f      	beq.n	80027f6 <TIM_Base_SetConfig+0x76>
 80027d6:	687b      	ldr	r3, [r7, #4]
 80027d8:	4a24      	ldr	r2, [pc, #144]	; (800286c <TIM_Base_SetConfig+0xec>)
 80027da:	4293      	cmp	r3, r2
 80027dc:	d00b      	beq.n	80027f6 <TIM_Base_SetConfig+0x76>
 80027de:	687b      	ldr	r3, [r7, #4]
 80027e0:	4a23      	ldr	r2, [pc, #140]	; (8002870 <TIM_Base_SetConfig+0xf0>)
 80027e2:	4293      	cmp	r3, r2
 80027e4:	d007      	beq.n	80027f6 <TIM_Base_SetConfig+0x76>
 80027e6:	687b      	ldr	r3, [r7, #4]
 80027e8:	4a22      	ldr	r2, [pc, #136]	; (8002874 <TIM_Base_SetConfig+0xf4>)
 80027ea:	4293      	cmp	r3, r2
 80027ec:	d003      	beq.n	80027f6 <TIM_Base_SetConfig+0x76>
 80027ee:	687b      	ldr	r3, [r7, #4]
 80027f0:	4a21      	ldr	r2, [pc, #132]	; (8002878 <TIM_Base_SetConfig+0xf8>)
 80027f2:	4293      	cmp	r3, r2
 80027f4:	d108      	bne.n	8002808 <TIM_Base_SetConfig+0x88>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80027f6:	68fb      	ldr	r3, [r7, #12]
 80027f8:	4a20      	ldr	r2, [pc, #128]	; (800287c <TIM_Base_SetConfig+0xfc>)
 80027fa:	4013      	ands	r3, r2
 80027fc:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80027fe:	683b      	ldr	r3, [r7, #0]
 8002800:	68db      	ldr	r3, [r3, #12]
 8002802:	68fa      	ldr	r2, [r7, #12]
 8002804:	4313      	orrs	r3, r2
 8002806:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002808:	68fb      	ldr	r3, [r7, #12]
 800280a:	2280      	movs	r2, #128	; 0x80
 800280c:	4393      	bics	r3, r2
 800280e:	001a      	movs	r2, r3
 8002810:	683b      	ldr	r3, [r7, #0]
 8002812:	695b      	ldr	r3, [r3, #20]
 8002814:	4313      	orrs	r3, r2
 8002816:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002818:	687b      	ldr	r3, [r7, #4]
 800281a:	68fa      	ldr	r2, [r7, #12]
 800281c:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800281e:	683b      	ldr	r3, [r7, #0]
 8002820:	689a      	ldr	r2, [r3, #8]
 8002822:	687b      	ldr	r3, [r7, #4]
 8002824:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002826:	683b      	ldr	r3, [r7, #0]
 8002828:	681a      	ldr	r2, [r3, #0]
 800282a:	687b      	ldr	r3, [r7, #4]
 800282c:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800282e:	687b      	ldr	r3, [r7, #4]
 8002830:	4a0c      	ldr	r2, [pc, #48]	; (8002864 <TIM_Base_SetConfig+0xe4>)
 8002832:	4293      	cmp	r3, r2
 8002834:	d00b      	beq.n	800284e <TIM_Base_SetConfig+0xce>
 8002836:	687b      	ldr	r3, [r7, #4]
 8002838:	4a0d      	ldr	r2, [pc, #52]	; (8002870 <TIM_Base_SetConfig+0xf0>)
 800283a:	4293      	cmp	r3, r2
 800283c:	d007      	beq.n	800284e <TIM_Base_SetConfig+0xce>
 800283e:	687b      	ldr	r3, [r7, #4]
 8002840:	4a0c      	ldr	r2, [pc, #48]	; (8002874 <TIM_Base_SetConfig+0xf4>)
 8002842:	4293      	cmp	r3, r2
 8002844:	d003      	beq.n	800284e <TIM_Base_SetConfig+0xce>
 8002846:	687b      	ldr	r3, [r7, #4]
 8002848:	4a0b      	ldr	r2, [pc, #44]	; (8002878 <TIM_Base_SetConfig+0xf8>)
 800284a:	4293      	cmp	r3, r2
 800284c:	d103      	bne.n	8002856 <TIM_Base_SetConfig+0xd6>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800284e:	683b      	ldr	r3, [r7, #0]
 8002850:	691a      	ldr	r2, [r3, #16]
 8002852:	687b      	ldr	r3, [r7, #4]
 8002854:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002856:	687b      	ldr	r3, [r7, #4]
 8002858:	2201      	movs	r2, #1
 800285a:	615a      	str	r2, [r3, #20]
}
 800285c:	46c0      	nop			; (mov r8, r8)
 800285e:	46bd      	mov	sp, r7
 8002860:	b004      	add	sp, #16
 8002862:	bd80      	pop	{r7, pc}
 8002864:	40012c00 	.word	0x40012c00
 8002868:	40000400 	.word	0x40000400
 800286c:	40002000 	.word	0x40002000
 8002870:	40014000 	.word	0x40014000
 8002874:	40014400 	.word	0x40014400
 8002878:	40014800 	.word	0x40014800
 800287c:	fffffcff 	.word	0xfffffcff

08002880 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8002880:	b580      	push	{r7, lr}
 8002882:	b086      	sub	sp, #24
 8002884:	af00      	add	r7, sp, #0
 8002886:	6078      	str	r0, [r7, #4]
 8002888:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800288a:	687b      	ldr	r3, [r7, #4]
 800288c:	6a1b      	ldr	r3, [r3, #32]
 800288e:	2201      	movs	r2, #1
 8002890:	4393      	bics	r3, r2
 8002892:	001a      	movs	r2, r3
 8002894:	687b      	ldr	r3, [r7, #4]
 8002896:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002898:	687b      	ldr	r3, [r7, #4]
 800289a:	6a1b      	ldr	r3, [r3, #32]
 800289c:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800289e:	687b      	ldr	r3, [r7, #4]
 80028a0:	685b      	ldr	r3, [r3, #4]
 80028a2:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80028a4:	687b      	ldr	r3, [r7, #4]
 80028a6:	699b      	ldr	r3, [r3, #24]
 80028a8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80028aa:	68fb      	ldr	r3, [r7, #12]
 80028ac:	2270      	movs	r2, #112	; 0x70
 80028ae:	4393      	bics	r3, r2
 80028b0:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80028b2:	68fb      	ldr	r3, [r7, #12]
 80028b4:	2203      	movs	r2, #3
 80028b6:	4393      	bics	r3, r2
 80028b8:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80028ba:	683b      	ldr	r3, [r7, #0]
 80028bc:	681b      	ldr	r3, [r3, #0]
 80028be:	68fa      	ldr	r2, [r7, #12]
 80028c0:	4313      	orrs	r3, r2
 80028c2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80028c4:	697b      	ldr	r3, [r7, #20]
 80028c6:	2202      	movs	r2, #2
 80028c8:	4393      	bics	r3, r2
 80028ca:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80028cc:	683b      	ldr	r3, [r7, #0]
 80028ce:	689b      	ldr	r3, [r3, #8]
 80028d0:	697a      	ldr	r2, [r7, #20]
 80028d2:	4313      	orrs	r3, r2
 80028d4:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80028d6:	687b      	ldr	r3, [r7, #4]
 80028d8:	4a27      	ldr	r2, [pc, #156]	; (8002978 <TIM_OC1_SetConfig+0xf8>)
 80028da:	4293      	cmp	r3, r2
 80028dc:	d00b      	beq.n	80028f6 <TIM_OC1_SetConfig+0x76>
 80028de:	687b      	ldr	r3, [r7, #4]
 80028e0:	4a26      	ldr	r2, [pc, #152]	; (800297c <TIM_OC1_SetConfig+0xfc>)
 80028e2:	4293      	cmp	r3, r2
 80028e4:	d007      	beq.n	80028f6 <TIM_OC1_SetConfig+0x76>
 80028e6:	687b      	ldr	r3, [r7, #4]
 80028e8:	4a25      	ldr	r2, [pc, #148]	; (8002980 <TIM_OC1_SetConfig+0x100>)
 80028ea:	4293      	cmp	r3, r2
 80028ec:	d003      	beq.n	80028f6 <TIM_OC1_SetConfig+0x76>
 80028ee:	687b      	ldr	r3, [r7, #4]
 80028f0:	4a24      	ldr	r2, [pc, #144]	; (8002984 <TIM_OC1_SetConfig+0x104>)
 80028f2:	4293      	cmp	r3, r2
 80028f4:	d10c      	bne.n	8002910 <TIM_OC1_SetConfig+0x90>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80028f6:	697b      	ldr	r3, [r7, #20]
 80028f8:	2208      	movs	r2, #8
 80028fa:	4393      	bics	r3, r2
 80028fc:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80028fe:	683b      	ldr	r3, [r7, #0]
 8002900:	68db      	ldr	r3, [r3, #12]
 8002902:	697a      	ldr	r2, [r7, #20]
 8002904:	4313      	orrs	r3, r2
 8002906:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8002908:	697b      	ldr	r3, [r7, #20]
 800290a:	2204      	movs	r2, #4
 800290c:	4393      	bics	r3, r2
 800290e:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002910:	687b      	ldr	r3, [r7, #4]
 8002912:	4a19      	ldr	r2, [pc, #100]	; (8002978 <TIM_OC1_SetConfig+0xf8>)
 8002914:	4293      	cmp	r3, r2
 8002916:	d00b      	beq.n	8002930 <TIM_OC1_SetConfig+0xb0>
 8002918:	687b      	ldr	r3, [r7, #4]
 800291a:	4a18      	ldr	r2, [pc, #96]	; (800297c <TIM_OC1_SetConfig+0xfc>)
 800291c:	4293      	cmp	r3, r2
 800291e:	d007      	beq.n	8002930 <TIM_OC1_SetConfig+0xb0>
 8002920:	687b      	ldr	r3, [r7, #4]
 8002922:	4a17      	ldr	r2, [pc, #92]	; (8002980 <TIM_OC1_SetConfig+0x100>)
 8002924:	4293      	cmp	r3, r2
 8002926:	d003      	beq.n	8002930 <TIM_OC1_SetConfig+0xb0>
 8002928:	687b      	ldr	r3, [r7, #4]
 800292a:	4a16      	ldr	r2, [pc, #88]	; (8002984 <TIM_OC1_SetConfig+0x104>)
 800292c:	4293      	cmp	r3, r2
 800292e:	d111      	bne.n	8002954 <TIM_OC1_SetConfig+0xd4>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8002930:	693b      	ldr	r3, [r7, #16]
 8002932:	4a15      	ldr	r2, [pc, #84]	; (8002988 <TIM_OC1_SetConfig+0x108>)
 8002934:	4013      	ands	r3, r2
 8002936:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8002938:	693b      	ldr	r3, [r7, #16]
 800293a:	4a14      	ldr	r2, [pc, #80]	; (800298c <TIM_OC1_SetConfig+0x10c>)
 800293c:	4013      	ands	r3, r2
 800293e:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8002940:	683b      	ldr	r3, [r7, #0]
 8002942:	695b      	ldr	r3, [r3, #20]
 8002944:	693a      	ldr	r2, [r7, #16]
 8002946:	4313      	orrs	r3, r2
 8002948:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800294a:	683b      	ldr	r3, [r7, #0]
 800294c:	699b      	ldr	r3, [r3, #24]
 800294e:	693a      	ldr	r2, [r7, #16]
 8002950:	4313      	orrs	r3, r2
 8002952:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002954:	687b      	ldr	r3, [r7, #4]
 8002956:	693a      	ldr	r2, [r7, #16]
 8002958:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800295a:	687b      	ldr	r3, [r7, #4]
 800295c:	68fa      	ldr	r2, [r7, #12]
 800295e:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8002960:	683b      	ldr	r3, [r7, #0]
 8002962:	685a      	ldr	r2, [r3, #4]
 8002964:	687b      	ldr	r3, [r7, #4]
 8002966:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002968:	687b      	ldr	r3, [r7, #4]
 800296a:	697a      	ldr	r2, [r7, #20]
 800296c:	621a      	str	r2, [r3, #32]
}
 800296e:	46c0      	nop			; (mov r8, r8)
 8002970:	46bd      	mov	sp, r7
 8002972:	b006      	add	sp, #24
 8002974:	bd80      	pop	{r7, pc}
 8002976:	46c0      	nop			; (mov r8, r8)
 8002978:	40012c00 	.word	0x40012c00
 800297c:	40014000 	.word	0x40014000
 8002980:	40014400 	.word	0x40014400
 8002984:	40014800 	.word	0x40014800
 8002988:	fffffeff 	.word	0xfffffeff
 800298c:	fffffdff 	.word	0xfffffdff

08002990 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8002990:	b580      	push	{r7, lr}
 8002992:	b086      	sub	sp, #24
 8002994:	af00      	add	r7, sp, #0
 8002996:	6078      	str	r0, [r7, #4]
 8002998:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800299a:	687b      	ldr	r3, [r7, #4]
 800299c:	6a1b      	ldr	r3, [r3, #32]
 800299e:	2210      	movs	r2, #16
 80029a0:	4393      	bics	r3, r2
 80029a2:	001a      	movs	r2, r3
 80029a4:	687b      	ldr	r3, [r7, #4]
 80029a6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80029a8:	687b      	ldr	r3, [r7, #4]
 80029aa:	6a1b      	ldr	r3, [r3, #32]
 80029ac:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80029ae:	687b      	ldr	r3, [r7, #4]
 80029b0:	685b      	ldr	r3, [r3, #4]
 80029b2:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80029b4:	687b      	ldr	r3, [r7, #4]
 80029b6:	699b      	ldr	r3, [r3, #24]
 80029b8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80029ba:	68fb      	ldr	r3, [r7, #12]
 80029bc:	4a2e      	ldr	r2, [pc, #184]	; (8002a78 <TIM_OC2_SetConfig+0xe8>)
 80029be:	4013      	ands	r3, r2
 80029c0:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80029c2:	68fb      	ldr	r3, [r7, #12]
 80029c4:	4a2d      	ldr	r2, [pc, #180]	; (8002a7c <TIM_OC2_SetConfig+0xec>)
 80029c6:	4013      	ands	r3, r2
 80029c8:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80029ca:	683b      	ldr	r3, [r7, #0]
 80029cc:	681b      	ldr	r3, [r3, #0]
 80029ce:	021b      	lsls	r3, r3, #8
 80029d0:	68fa      	ldr	r2, [r7, #12]
 80029d2:	4313      	orrs	r3, r2
 80029d4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80029d6:	697b      	ldr	r3, [r7, #20]
 80029d8:	2220      	movs	r2, #32
 80029da:	4393      	bics	r3, r2
 80029dc:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80029de:	683b      	ldr	r3, [r7, #0]
 80029e0:	689b      	ldr	r3, [r3, #8]
 80029e2:	011b      	lsls	r3, r3, #4
 80029e4:	697a      	ldr	r2, [r7, #20]
 80029e6:	4313      	orrs	r3, r2
 80029e8:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80029ea:	687b      	ldr	r3, [r7, #4]
 80029ec:	4a24      	ldr	r2, [pc, #144]	; (8002a80 <TIM_OC2_SetConfig+0xf0>)
 80029ee:	4293      	cmp	r3, r2
 80029f0:	d10d      	bne.n	8002a0e <TIM_OC2_SetConfig+0x7e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80029f2:	697b      	ldr	r3, [r7, #20]
 80029f4:	2280      	movs	r2, #128	; 0x80
 80029f6:	4393      	bics	r3, r2
 80029f8:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80029fa:	683b      	ldr	r3, [r7, #0]
 80029fc:	68db      	ldr	r3, [r3, #12]
 80029fe:	011b      	lsls	r3, r3, #4
 8002a00:	697a      	ldr	r2, [r7, #20]
 8002a02:	4313      	orrs	r3, r2
 8002a04:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8002a06:	697b      	ldr	r3, [r7, #20]
 8002a08:	2240      	movs	r2, #64	; 0x40
 8002a0a:	4393      	bics	r3, r2
 8002a0c:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002a0e:	687b      	ldr	r3, [r7, #4]
 8002a10:	4a1b      	ldr	r2, [pc, #108]	; (8002a80 <TIM_OC2_SetConfig+0xf0>)
 8002a12:	4293      	cmp	r3, r2
 8002a14:	d00b      	beq.n	8002a2e <TIM_OC2_SetConfig+0x9e>
 8002a16:	687b      	ldr	r3, [r7, #4]
 8002a18:	4a1a      	ldr	r2, [pc, #104]	; (8002a84 <TIM_OC2_SetConfig+0xf4>)
 8002a1a:	4293      	cmp	r3, r2
 8002a1c:	d007      	beq.n	8002a2e <TIM_OC2_SetConfig+0x9e>
 8002a1e:	687b      	ldr	r3, [r7, #4]
 8002a20:	4a19      	ldr	r2, [pc, #100]	; (8002a88 <TIM_OC2_SetConfig+0xf8>)
 8002a22:	4293      	cmp	r3, r2
 8002a24:	d003      	beq.n	8002a2e <TIM_OC2_SetConfig+0x9e>
 8002a26:	687b      	ldr	r3, [r7, #4]
 8002a28:	4a18      	ldr	r2, [pc, #96]	; (8002a8c <TIM_OC2_SetConfig+0xfc>)
 8002a2a:	4293      	cmp	r3, r2
 8002a2c:	d113      	bne.n	8002a56 <TIM_OC2_SetConfig+0xc6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8002a2e:	693b      	ldr	r3, [r7, #16]
 8002a30:	4a17      	ldr	r2, [pc, #92]	; (8002a90 <TIM_OC2_SetConfig+0x100>)
 8002a32:	4013      	ands	r3, r2
 8002a34:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8002a36:	693b      	ldr	r3, [r7, #16]
 8002a38:	4a16      	ldr	r2, [pc, #88]	; (8002a94 <TIM_OC2_SetConfig+0x104>)
 8002a3a:	4013      	ands	r3, r2
 8002a3c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8002a3e:	683b      	ldr	r3, [r7, #0]
 8002a40:	695b      	ldr	r3, [r3, #20]
 8002a42:	009b      	lsls	r3, r3, #2
 8002a44:	693a      	ldr	r2, [r7, #16]
 8002a46:	4313      	orrs	r3, r2
 8002a48:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8002a4a:	683b      	ldr	r3, [r7, #0]
 8002a4c:	699b      	ldr	r3, [r3, #24]
 8002a4e:	009b      	lsls	r3, r3, #2
 8002a50:	693a      	ldr	r2, [r7, #16]
 8002a52:	4313      	orrs	r3, r2
 8002a54:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002a56:	687b      	ldr	r3, [r7, #4]
 8002a58:	693a      	ldr	r2, [r7, #16]
 8002a5a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8002a5c:	687b      	ldr	r3, [r7, #4]
 8002a5e:	68fa      	ldr	r2, [r7, #12]
 8002a60:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8002a62:	683b      	ldr	r3, [r7, #0]
 8002a64:	685a      	ldr	r2, [r3, #4]
 8002a66:	687b      	ldr	r3, [r7, #4]
 8002a68:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002a6a:	687b      	ldr	r3, [r7, #4]
 8002a6c:	697a      	ldr	r2, [r7, #20]
 8002a6e:	621a      	str	r2, [r3, #32]
}
 8002a70:	46c0      	nop			; (mov r8, r8)
 8002a72:	46bd      	mov	sp, r7
 8002a74:	b006      	add	sp, #24
 8002a76:	bd80      	pop	{r7, pc}
 8002a78:	ffff8fff 	.word	0xffff8fff
 8002a7c:	fffffcff 	.word	0xfffffcff
 8002a80:	40012c00 	.word	0x40012c00
 8002a84:	40014000 	.word	0x40014000
 8002a88:	40014400 	.word	0x40014400
 8002a8c:	40014800 	.word	0x40014800
 8002a90:	fffffbff 	.word	0xfffffbff
 8002a94:	fffff7ff 	.word	0xfffff7ff

08002a98 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8002a98:	b580      	push	{r7, lr}
 8002a9a:	b086      	sub	sp, #24
 8002a9c:	af00      	add	r7, sp, #0
 8002a9e:	6078      	str	r0, [r7, #4]
 8002aa0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8002aa2:	687b      	ldr	r3, [r7, #4]
 8002aa4:	6a1b      	ldr	r3, [r3, #32]
 8002aa6:	4a35      	ldr	r2, [pc, #212]	; (8002b7c <TIM_OC3_SetConfig+0xe4>)
 8002aa8:	401a      	ands	r2, r3
 8002aaa:	687b      	ldr	r3, [r7, #4]
 8002aac:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002aae:	687b      	ldr	r3, [r7, #4]
 8002ab0:	6a1b      	ldr	r3, [r3, #32]
 8002ab2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002ab4:	687b      	ldr	r3, [r7, #4]
 8002ab6:	685b      	ldr	r3, [r3, #4]
 8002ab8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8002aba:	687b      	ldr	r3, [r7, #4]
 8002abc:	69db      	ldr	r3, [r3, #28]
 8002abe:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8002ac0:	68fb      	ldr	r3, [r7, #12]
 8002ac2:	2270      	movs	r2, #112	; 0x70
 8002ac4:	4393      	bics	r3, r2
 8002ac6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8002ac8:	68fb      	ldr	r3, [r7, #12]
 8002aca:	2203      	movs	r2, #3
 8002acc:	4393      	bics	r3, r2
 8002ace:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8002ad0:	683b      	ldr	r3, [r7, #0]
 8002ad2:	681b      	ldr	r3, [r3, #0]
 8002ad4:	68fa      	ldr	r2, [r7, #12]
 8002ad6:	4313      	orrs	r3, r2
 8002ad8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8002ada:	697b      	ldr	r3, [r7, #20]
 8002adc:	4a28      	ldr	r2, [pc, #160]	; (8002b80 <TIM_OC3_SetConfig+0xe8>)
 8002ade:	4013      	ands	r3, r2
 8002ae0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8002ae2:	683b      	ldr	r3, [r7, #0]
 8002ae4:	689b      	ldr	r3, [r3, #8]
 8002ae6:	021b      	lsls	r3, r3, #8
 8002ae8:	697a      	ldr	r2, [r7, #20]
 8002aea:	4313      	orrs	r3, r2
 8002aec:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8002aee:	687b      	ldr	r3, [r7, #4]
 8002af0:	4a24      	ldr	r2, [pc, #144]	; (8002b84 <TIM_OC3_SetConfig+0xec>)
 8002af2:	4293      	cmp	r3, r2
 8002af4:	d10d      	bne.n	8002b12 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8002af6:	697b      	ldr	r3, [r7, #20]
 8002af8:	4a23      	ldr	r2, [pc, #140]	; (8002b88 <TIM_OC3_SetConfig+0xf0>)
 8002afa:	4013      	ands	r3, r2
 8002afc:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8002afe:	683b      	ldr	r3, [r7, #0]
 8002b00:	68db      	ldr	r3, [r3, #12]
 8002b02:	021b      	lsls	r3, r3, #8
 8002b04:	697a      	ldr	r2, [r7, #20]
 8002b06:	4313      	orrs	r3, r2
 8002b08:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8002b0a:	697b      	ldr	r3, [r7, #20]
 8002b0c:	4a1f      	ldr	r2, [pc, #124]	; (8002b8c <TIM_OC3_SetConfig+0xf4>)
 8002b0e:	4013      	ands	r3, r2
 8002b10:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002b12:	687b      	ldr	r3, [r7, #4]
 8002b14:	4a1b      	ldr	r2, [pc, #108]	; (8002b84 <TIM_OC3_SetConfig+0xec>)
 8002b16:	4293      	cmp	r3, r2
 8002b18:	d00b      	beq.n	8002b32 <TIM_OC3_SetConfig+0x9a>
 8002b1a:	687b      	ldr	r3, [r7, #4]
 8002b1c:	4a1c      	ldr	r2, [pc, #112]	; (8002b90 <TIM_OC3_SetConfig+0xf8>)
 8002b1e:	4293      	cmp	r3, r2
 8002b20:	d007      	beq.n	8002b32 <TIM_OC3_SetConfig+0x9a>
 8002b22:	687b      	ldr	r3, [r7, #4]
 8002b24:	4a1b      	ldr	r2, [pc, #108]	; (8002b94 <TIM_OC3_SetConfig+0xfc>)
 8002b26:	4293      	cmp	r3, r2
 8002b28:	d003      	beq.n	8002b32 <TIM_OC3_SetConfig+0x9a>
 8002b2a:	687b      	ldr	r3, [r7, #4]
 8002b2c:	4a1a      	ldr	r2, [pc, #104]	; (8002b98 <TIM_OC3_SetConfig+0x100>)
 8002b2e:	4293      	cmp	r3, r2
 8002b30:	d113      	bne.n	8002b5a <TIM_OC3_SetConfig+0xc2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8002b32:	693b      	ldr	r3, [r7, #16]
 8002b34:	4a19      	ldr	r2, [pc, #100]	; (8002b9c <TIM_OC3_SetConfig+0x104>)
 8002b36:	4013      	ands	r3, r2
 8002b38:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8002b3a:	693b      	ldr	r3, [r7, #16]
 8002b3c:	4a18      	ldr	r2, [pc, #96]	; (8002ba0 <TIM_OC3_SetConfig+0x108>)
 8002b3e:	4013      	ands	r3, r2
 8002b40:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8002b42:	683b      	ldr	r3, [r7, #0]
 8002b44:	695b      	ldr	r3, [r3, #20]
 8002b46:	011b      	lsls	r3, r3, #4
 8002b48:	693a      	ldr	r2, [r7, #16]
 8002b4a:	4313      	orrs	r3, r2
 8002b4c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8002b4e:	683b      	ldr	r3, [r7, #0]
 8002b50:	699b      	ldr	r3, [r3, #24]
 8002b52:	011b      	lsls	r3, r3, #4
 8002b54:	693a      	ldr	r2, [r7, #16]
 8002b56:	4313      	orrs	r3, r2
 8002b58:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002b5a:	687b      	ldr	r3, [r7, #4]
 8002b5c:	693a      	ldr	r2, [r7, #16]
 8002b5e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8002b60:	687b      	ldr	r3, [r7, #4]
 8002b62:	68fa      	ldr	r2, [r7, #12]
 8002b64:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8002b66:	683b      	ldr	r3, [r7, #0]
 8002b68:	685a      	ldr	r2, [r3, #4]
 8002b6a:	687b      	ldr	r3, [r7, #4]
 8002b6c:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002b6e:	687b      	ldr	r3, [r7, #4]
 8002b70:	697a      	ldr	r2, [r7, #20]
 8002b72:	621a      	str	r2, [r3, #32]
}
 8002b74:	46c0      	nop			; (mov r8, r8)
 8002b76:	46bd      	mov	sp, r7
 8002b78:	b006      	add	sp, #24
 8002b7a:	bd80      	pop	{r7, pc}
 8002b7c:	fffffeff 	.word	0xfffffeff
 8002b80:	fffffdff 	.word	0xfffffdff
 8002b84:	40012c00 	.word	0x40012c00
 8002b88:	fffff7ff 	.word	0xfffff7ff
 8002b8c:	fffffbff 	.word	0xfffffbff
 8002b90:	40014000 	.word	0x40014000
 8002b94:	40014400 	.word	0x40014400
 8002b98:	40014800 	.word	0x40014800
 8002b9c:	ffffefff 	.word	0xffffefff
 8002ba0:	ffffdfff 	.word	0xffffdfff

08002ba4 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8002ba4:	b580      	push	{r7, lr}
 8002ba6:	b086      	sub	sp, #24
 8002ba8:	af00      	add	r7, sp, #0
 8002baa:	6078      	str	r0, [r7, #4]
 8002bac:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8002bae:	687b      	ldr	r3, [r7, #4]
 8002bb0:	6a1b      	ldr	r3, [r3, #32]
 8002bb2:	4a28      	ldr	r2, [pc, #160]	; (8002c54 <TIM_OC4_SetConfig+0xb0>)
 8002bb4:	401a      	ands	r2, r3
 8002bb6:	687b      	ldr	r3, [r7, #4]
 8002bb8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002bba:	687b      	ldr	r3, [r7, #4]
 8002bbc:	6a1b      	ldr	r3, [r3, #32]
 8002bbe:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002bc0:	687b      	ldr	r3, [r7, #4]
 8002bc2:	685b      	ldr	r3, [r3, #4]
 8002bc4:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8002bc6:	687b      	ldr	r3, [r7, #4]
 8002bc8:	69db      	ldr	r3, [r3, #28]
 8002bca:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8002bcc:	68fb      	ldr	r3, [r7, #12]
 8002bce:	4a22      	ldr	r2, [pc, #136]	; (8002c58 <TIM_OC4_SetConfig+0xb4>)
 8002bd0:	4013      	ands	r3, r2
 8002bd2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8002bd4:	68fb      	ldr	r3, [r7, #12]
 8002bd6:	4a21      	ldr	r2, [pc, #132]	; (8002c5c <TIM_OC4_SetConfig+0xb8>)
 8002bd8:	4013      	ands	r3, r2
 8002bda:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8002bdc:	683b      	ldr	r3, [r7, #0]
 8002bde:	681b      	ldr	r3, [r3, #0]
 8002be0:	021b      	lsls	r3, r3, #8
 8002be2:	68fa      	ldr	r2, [r7, #12]
 8002be4:	4313      	orrs	r3, r2
 8002be6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8002be8:	693b      	ldr	r3, [r7, #16]
 8002bea:	4a1d      	ldr	r2, [pc, #116]	; (8002c60 <TIM_OC4_SetConfig+0xbc>)
 8002bec:	4013      	ands	r3, r2
 8002bee:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8002bf0:	683b      	ldr	r3, [r7, #0]
 8002bf2:	689b      	ldr	r3, [r3, #8]
 8002bf4:	031b      	lsls	r3, r3, #12
 8002bf6:	693a      	ldr	r2, [r7, #16]
 8002bf8:	4313      	orrs	r3, r2
 8002bfa:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002bfc:	687b      	ldr	r3, [r7, #4]
 8002bfe:	4a19      	ldr	r2, [pc, #100]	; (8002c64 <TIM_OC4_SetConfig+0xc0>)
 8002c00:	4293      	cmp	r3, r2
 8002c02:	d00b      	beq.n	8002c1c <TIM_OC4_SetConfig+0x78>
 8002c04:	687b      	ldr	r3, [r7, #4]
 8002c06:	4a18      	ldr	r2, [pc, #96]	; (8002c68 <TIM_OC4_SetConfig+0xc4>)
 8002c08:	4293      	cmp	r3, r2
 8002c0a:	d007      	beq.n	8002c1c <TIM_OC4_SetConfig+0x78>
 8002c0c:	687b      	ldr	r3, [r7, #4]
 8002c0e:	4a17      	ldr	r2, [pc, #92]	; (8002c6c <TIM_OC4_SetConfig+0xc8>)
 8002c10:	4293      	cmp	r3, r2
 8002c12:	d003      	beq.n	8002c1c <TIM_OC4_SetConfig+0x78>
 8002c14:	687b      	ldr	r3, [r7, #4]
 8002c16:	4a16      	ldr	r2, [pc, #88]	; (8002c70 <TIM_OC4_SetConfig+0xcc>)
 8002c18:	4293      	cmp	r3, r2
 8002c1a:	d109      	bne.n	8002c30 <TIM_OC4_SetConfig+0x8c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8002c1c:	697b      	ldr	r3, [r7, #20]
 8002c1e:	4a15      	ldr	r2, [pc, #84]	; (8002c74 <TIM_OC4_SetConfig+0xd0>)
 8002c20:	4013      	ands	r3, r2
 8002c22:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8002c24:	683b      	ldr	r3, [r7, #0]
 8002c26:	695b      	ldr	r3, [r3, #20]
 8002c28:	019b      	lsls	r3, r3, #6
 8002c2a:	697a      	ldr	r2, [r7, #20]
 8002c2c:	4313      	orrs	r3, r2
 8002c2e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002c30:	687b      	ldr	r3, [r7, #4]
 8002c32:	697a      	ldr	r2, [r7, #20]
 8002c34:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8002c36:	687b      	ldr	r3, [r7, #4]
 8002c38:	68fa      	ldr	r2, [r7, #12]
 8002c3a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8002c3c:	683b      	ldr	r3, [r7, #0]
 8002c3e:	685a      	ldr	r2, [r3, #4]
 8002c40:	687b      	ldr	r3, [r7, #4]
 8002c42:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002c44:	687b      	ldr	r3, [r7, #4]
 8002c46:	693a      	ldr	r2, [r7, #16]
 8002c48:	621a      	str	r2, [r3, #32]
}
 8002c4a:	46c0      	nop			; (mov r8, r8)
 8002c4c:	46bd      	mov	sp, r7
 8002c4e:	b006      	add	sp, #24
 8002c50:	bd80      	pop	{r7, pc}
 8002c52:	46c0      	nop			; (mov r8, r8)
 8002c54:	ffffefff 	.word	0xffffefff
 8002c58:	ffff8fff 	.word	0xffff8fff
 8002c5c:	fffffcff 	.word	0xfffffcff
 8002c60:	ffffdfff 	.word	0xffffdfff
 8002c64:	40012c00 	.word	0x40012c00
 8002c68:	40014000 	.word	0x40014000
 8002c6c:	40014400 	.word	0x40014400
 8002c70:	40014800 	.word	0x40014800
 8002c74:	ffffbfff 	.word	0xffffbfff

08002c78 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002c78:	b580      	push	{r7, lr}
 8002c7a:	b086      	sub	sp, #24
 8002c7c:	af00      	add	r7, sp, #0
 8002c7e:	60f8      	str	r0, [r7, #12]
 8002c80:	60b9      	str	r1, [r7, #8]
 8002c82:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8002c84:	68fb      	ldr	r3, [r7, #12]
 8002c86:	6a1b      	ldr	r3, [r3, #32]
 8002c88:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002c8a:	68fb      	ldr	r3, [r7, #12]
 8002c8c:	6a1b      	ldr	r3, [r3, #32]
 8002c8e:	2201      	movs	r2, #1
 8002c90:	4393      	bics	r3, r2
 8002c92:	001a      	movs	r2, r3
 8002c94:	68fb      	ldr	r3, [r7, #12]
 8002c96:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002c98:	68fb      	ldr	r3, [r7, #12]
 8002c9a:	699b      	ldr	r3, [r3, #24]
 8002c9c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8002c9e:	693b      	ldr	r3, [r7, #16]
 8002ca0:	22f0      	movs	r2, #240	; 0xf0
 8002ca2:	4393      	bics	r3, r2
 8002ca4:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8002ca6:	687b      	ldr	r3, [r7, #4]
 8002ca8:	011b      	lsls	r3, r3, #4
 8002caa:	693a      	ldr	r2, [r7, #16]
 8002cac:	4313      	orrs	r3, r2
 8002cae:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8002cb0:	697b      	ldr	r3, [r7, #20]
 8002cb2:	220a      	movs	r2, #10
 8002cb4:	4393      	bics	r3, r2
 8002cb6:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8002cb8:	697a      	ldr	r2, [r7, #20]
 8002cba:	68bb      	ldr	r3, [r7, #8]
 8002cbc:	4313      	orrs	r3, r2
 8002cbe:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8002cc0:	68fb      	ldr	r3, [r7, #12]
 8002cc2:	693a      	ldr	r2, [r7, #16]
 8002cc4:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002cc6:	68fb      	ldr	r3, [r7, #12]
 8002cc8:	697a      	ldr	r2, [r7, #20]
 8002cca:	621a      	str	r2, [r3, #32]
}
 8002ccc:	46c0      	nop			; (mov r8, r8)
 8002cce:	46bd      	mov	sp, r7
 8002cd0:	b006      	add	sp, #24
 8002cd2:	bd80      	pop	{r7, pc}

08002cd4 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002cd4:	b580      	push	{r7, lr}
 8002cd6:	b086      	sub	sp, #24
 8002cd8:	af00      	add	r7, sp, #0
 8002cda:	60f8      	str	r0, [r7, #12]
 8002cdc:	60b9      	str	r1, [r7, #8]
 8002cde:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002ce0:	68fb      	ldr	r3, [r7, #12]
 8002ce2:	6a1b      	ldr	r3, [r3, #32]
 8002ce4:	2210      	movs	r2, #16
 8002ce6:	4393      	bics	r3, r2
 8002ce8:	001a      	movs	r2, r3
 8002cea:	68fb      	ldr	r3, [r7, #12]
 8002cec:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002cee:	68fb      	ldr	r3, [r7, #12]
 8002cf0:	699b      	ldr	r3, [r3, #24]
 8002cf2:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8002cf4:	68fb      	ldr	r3, [r7, #12]
 8002cf6:	6a1b      	ldr	r3, [r3, #32]
 8002cf8:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8002cfa:	697b      	ldr	r3, [r7, #20]
 8002cfc:	4a0d      	ldr	r2, [pc, #52]	; (8002d34 <TIM_TI2_ConfigInputStage+0x60>)
 8002cfe:	4013      	ands	r3, r2
 8002d00:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8002d02:	687b      	ldr	r3, [r7, #4]
 8002d04:	031b      	lsls	r3, r3, #12
 8002d06:	697a      	ldr	r2, [r7, #20]
 8002d08:	4313      	orrs	r3, r2
 8002d0a:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8002d0c:	693b      	ldr	r3, [r7, #16]
 8002d0e:	22a0      	movs	r2, #160	; 0xa0
 8002d10:	4393      	bics	r3, r2
 8002d12:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8002d14:	68bb      	ldr	r3, [r7, #8]
 8002d16:	011b      	lsls	r3, r3, #4
 8002d18:	693a      	ldr	r2, [r7, #16]
 8002d1a:	4313      	orrs	r3, r2
 8002d1c:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8002d1e:	68fb      	ldr	r3, [r7, #12]
 8002d20:	697a      	ldr	r2, [r7, #20]
 8002d22:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002d24:	68fb      	ldr	r3, [r7, #12]
 8002d26:	693a      	ldr	r2, [r7, #16]
 8002d28:	621a      	str	r2, [r3, #32]
}
 8002d2a:	46c0      	nop			; (mov r8, r8)
 8002d2c:	46bd      	mov	sp, r7
 8002d2e:	b006      	add	sp, #24
 8002d30:	bd80      	pop	{r7, pc}
 8002d32:	46c0      	nop			; (mov r8, r8)
 8002d34:	ffff0fff 	.word	0xffff0fff

08002d38 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8002d38:	b580      	push	{r7, lr}
 8002d3a:	b084      	sub	sp, #16
 8002d3c:	af00      	add	r7, sp, #0
 8002d3e:	6078      	str	r0, [r7, #4]
 8002d40:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8002d42:	687b      	ldr	r3, [r7, #4]
 8002d44:	689b      	ldr	r3, [r3, #8]
 8002d46:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8002d48:	68fb      	ldr	r3, [r7, #12]
 8002d4a:	2270      	movs	r2, #112	; 0x70
 8002d4c:	4393      	bics	r3, r2
 8002d4e:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8002d50:	683a      	ldr	r2, [r7, #0]
 8002d52:	68fb      	ldr	r3, [r7, #12]
 8002d54:	4313      	orrs	r3, r2
 8002d56:	2207      	movs	r2, #7
 8002d58:	4313      	orrs	r3, r2
 8002d5a:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002d5c:	687b      	ldr	r3, [r7, #4]
 8002d5e:	68fa      	ldr	r2, [r7, #12]
 8002d60:	609a      	str	r2, [r3, #8]
}
 8002d62:	46c0      	nop			; (mov r8, r8)
 8002d64:	46bd      	mov	sp, r7
 8002d66:	b004      	add	sp, #16
 8002d68:	bd80      	pop	{r7, pc}
	...

08002d6c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8002d6c:	b580      	push	{r7, lr}
 8002d6e:	b086      	sub	sp, #24
 8002d70:	af00      	add	r7, sp, #0
 8002d72:	60f8      	str	r0, [r7, #12]
 8002d74:	60b9      	str	r1, [r7, #8]
 8002d76:	607a      	str	r2, [r7, #4]
 8002d78:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8002d7a:	68fb      	ldr	r3, [r7, #12]
 8002d7c:	689b      	ldr	r3, [r3, #8]
 8002d7e:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002d80:	697b      	ldr	r3, [r7, #20]
 8002d82:	4a09      	ldr	r2, [pc, #36]	; (8002da8 <TIM_ETR_SetConfig+0x3c>)
 8002d84:	4013      	ands	r3, r2
 8002d86:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8002d88:	683b      	ldr	r3, [r7, #0]
 8002d8a:	021a      	lsls	r2, r3, #8
 8002d8c:	687b      	ldr	r3, [r7, #4]
 8002d8e:	431a      	orrs	r2, r3
 8002d90:	68bb      	ldr	r3, [r7, #8]
 8002d92:	4313      	orrs	r3, r2
 8002d94:	697a      	ldr	r2, [r7, #20]
 8002d96:	4313      	orrs	r3, r2
 8002d98:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002d9a:	68fb      	ldr	r3, [r7, #12]
 8002d9c:	697a      	ldr	r2, [r7, #20]
 8002d9e:	609a      	str	r2, [r3, #8]
}
 8002da0:	46c0      	nop			; (mov r8, r8)
 8002da2:	46bd      	mov	sp, r7
 8002da4:	b006      	add	sp, #24
 8002da6:	bd80      	pop	{r7, pc}
 8002da8:	ffff00ff 	.word	0xffff00ff

08002dac <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8002dac:	b580      	push	{r7, lr}
 8002dae:	b086      	sub	sp, #24
 8002db0:	af00      	add	r7, sp, #0
 8002db2:	60f8      	str	r0, [r7, #12]
 8002db4:	60b9      	str	r1, [r7, #8]
 8002db6:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8002db8:	68bb      	ldr	r3, [r7, #8]
 8002dba:	221f      	movs	r2, #31
 8002dbc:	4013      	ands	r3, r2
 8002dbe:	2201      	movs	r2, #1
 8002dc0:	409a      	lsls	r2, r3
 8002dc2:	0013      	movs	r3, r2
 8002dc4:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8002dc6:	68fb      	ldr	r3, [r7, #12]
 8002dc8:	6a1b      	ldr	r3, [r3, #32]
 8002dca:	697a      	ldr	r2, [r7, #20]
 8002dcc:	43d2      	mvns	r2, r2
 8002dce:	401a      	ands	r2, r3
 8002dd0:	68fb      	ldr	r3, [r7, #12]
 8002dd2:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8002dd4:	68fb      	ldr	r3, [r7, #12]
 8002dd6:	6a1a      	ldr	r2, [r3, #32]
 8002dd8:	68bb      	ldr	r3, [r7, #8]
 8002dda:	211f      	movs	r1, #31
 8002ddc:	400b      	ands	r3, r1
 8002dde:	6879      	ldr	r1, [r7, #4]
 8002de0:	4099      	lsls	r1, r3
 8002de2:	000b      	movs	r3, r1
 8002de4:	431a      	orrs	r2, r3
 8002de6:	68fb      	ldr	r3, [r7, #12]
 8002de8:	621a      	str	r2, [r3, #32]
}
 8002dea:	46c0      	nop			; (mov r8, r8)
 8002dec:	46bd      	mov	sp, r7
 8002dee:	b006      	add	sp, #24
 8002df0:	bd80      	pop	{r7, pc}
	...

08002df4 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8002df4:	b580      	push	{r7, lr}
 8002df6:	b084      	sub	sp, #16
 8002df8:	af00      	add	r7, sp, #0
 8002dfa:	6078      	str	r0, [r7, #4]
 8002dfc:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8002dfe:	687b      	ldr	r3, [r7, #4]
 8002e00:	223c      	movs	r2, #60	; 0x3c
 8002e02:	5c9b      	ldrb	r3, [r3, r2]
 8002e04:	2b01      	cmp	r3, #1
 8002e06:	d101      	bne.n	8002e0c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8002e08:	2302      	movs	r3, #2
 8002e0a:	e047      	b.n	8002e9c <HAL_TIMEx_MasterConfigSynchronization+0xa8>
 8002e0c:	687b      	ldr	r3, [r7, #4]
 8002e0e:	223c      	movs	r2, #60	; 0x3c
 8002e10:	2101      	movs	r1, #1
 8002e12:	5499      	strb	r1, [r3, r2]

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002e14:	687b      	ldr	r3, [r7, #4]
 8002e16:	223d      	movs	r2, #61	; 0x3d
 8002e18:	2102      	movs	r1, #2
 8002e1a:	5499      	strb	r1, [r3, r2]

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8002e1c:	687b      	ldr	r3, [r7, #4]
 8002e1e:	681b      	ldr	r3, [r3, #0]
 8002e20:	685b      	ldr	r3, [r3, #4]
 8002e22:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8002e24:	687b      	ldr	r3, [r7, #4]
 8002e26:	681b      	ldr	r3, [r3, #0]
 8002e28:	689b      	ldr	r3, [r3, #8]
 8002e2a:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8002e2c:	68fb      	ldr	r3, [r7, #12]
 8002e2e:	2270      	movs	r2, #112	; 0x70
 8002e30:	4393      	bics	r3, r2
 8002e32:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8002e34:	683b      	ldr	r3, [r7, #0]
 8002e36:	681b      	ldr	r3, [r3, #0]
 8002e38:	68fa      	ldr	r2, [r7, #12]
 8002e3a:	4313      	orrs	r3, r2
 8002e3c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8002e3e:	687b      	ldr	r3, [r7, #4]
 8002e40:	681b      	ldr	r3, [r3, #0]
 8002e42:	68fa      	ldr	r2, [r7, #12]
 8002e44:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002e46:	687b      	ldr	r3, [r7, #4]
 8002e48:	681b      	ldr	r3, [r3, #0]
 8002e4a:	4a16      	ldr	r2, [pc, #88]	; (8002ea4 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8002e4c:	4293      	cmp	r3, r2
 8002e4e:	d00f      	beq.n	8002e70 <HAL_TIMEx_MasterConfigSynchronization+0x7c>
 8002e50:	687b      	ldr	r3, [r7, #4]
 8002e52:	681a      	ldr	r2, [r3, #0]
 8002e54:	2380      	movs	r3, #128	; 0x80
 8002e56:	05db      	lsls	r3, r3, #23
 8002e58:	429a      	cmp	r2, r3
 8002e5a:	d009      	beq.n	8002e70 <HAL_TIMEx_MasterConfigSynchronization+0x7c>
 8002e5c:	687b      	ldr	r3, [r7, #4]
 8002e5e:	681b      	ldr	r3, [r3, #0]
 8002e60:	4a11      	ldr	r2, [pc, #68]	; (8002ea8 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8002e62:	4293      	cmp	r3, r2
 8002e64:	d004      	beq.n	8002e70 <HAL_TIMEx_MasterConfigSynchronization+0x7c>
 8002e66:	687b      	ldr	r3, [r7, #4]
 8002e68:	681b      	ldr	r3, [r3, #0]
 8002e6a:	4a10      	ldr	r2, [pc, #64]	; (8002eac <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 8002e6c:	4293      	cmp	r3, r2
 8002e6e:	d10c      	bne.n	8002e8a <HAL_TIMEx_MasterConfigSynchronization+0x96>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8002e70:	68bb      	ldr	r3, [r7, #8]
 8002e72:	2280      	movs	r2, #128	; 0x80
 8002e74:	4393      	bics	r3, r2
 8002e76:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8002e78:	683b      	ldr	r3, [r7, #0]
 8002e7a:	685b      	ldr	r3, [r3, #4]
 8002e7c:	68ba      	ldr	r2, [r7, #8]
 8002e7e:	4313      	orrs	r3, r2
 8002e80:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8002e82:	687b      	ldr	r3, [r7, #4]
 8002e84:	681b      	ldr	r3, [r3, #0]
 8002e86:	68ba      	ldr	r2, [r7, #8]
 8002e88:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8002e8a:	687b      	ldr	r3, [r7, #4]
 8002e8c:	223d      	movs	r2, #61	; 0x3d
 8002e8e:	2101      	movs	r1, #1
 8002e90:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 8002e92:	687b      	ldr	r3, [r7, #4]
 8002e94:	223c      	movs	r2, #60	; 0x3c
 8002e96:	2100      	movs	r1, #0
 8002e98:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8002e9a:	2300      	movs	r3, #0
}
 8002e9c:	0018      	movs	r0, r3
 8002e9e:	46bd      	mov	sp, r7
 8002ea0:	b004      	add	sp, #16
 8002ea2:	bd80      	pop	{r7, pc}
 8002ea4:	40012c00 	.word	0x40012c00
 8002ea8:	40000400 	.word	0x40000400
 8002eac:	40014000 	.word	0x40014000

08002eb0 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8002eb0:	b580      	push	{r7, lr}
 8002eb2:	b084      	sub	sp, #16
 8002eb4:	af00      	add	r7, sp, #0
 8002eb6:	6078      	str	r0, [r7, #4]
 8002eb8:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8002eba:	2300      	movs	r3, #0
 8002ebc:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8002ebe:	687b      	ldr	r3, [r7, #4]
 8002ec0:	223c      	movs	r2, #60	; 0x3c
 8002ec2:	5c9b      	ldrb	r3, [r3, r2]
 8002ec4:	2b01      	cmp	r3, #1
 8002ec6:	d101      	bne.n	8002ecc <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8002ec8:	2302      	movs	r3, #2
 8002eca:	e03e      	b.n	8002f4a <HAL_TIMEx_ConfigBreakDeadTime+0x9a>
 8002ecc:	687b      	ldr	r3, [r7, #4]
 8002ece:	223c      	movs	r2, #60	; 0x3c
 8002ed0:	2101      	movs	r1, #1
 8002ed2:	5499      	strb	r1, [r3, r2]

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8002ed4:	68fb      	ldr	r3, [r7, #12]
 8002ed6:	22ff      	movs	r2, #255	; 0xff
 8002ed8:	4393      	bics	r3, r2
 8002eda:	001a      	movs	r2, r3
 8002edc:	683b      	ldr	r3, [r7, #0]
 8002ede:	68db      	ldr	r3, [r3, #12]
 8002ee0:	4313      	orrs	r3, r2
 8002ee2:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8002ee4:	68fb      	ldr	r3, [r7, #12]
 8002ee6:	4a1b      	ldr	r2, [pc, #108]	; (8002f54 <HAL_TIMEx_ConfigBreakDeadTime+0xa4>)
 8002ee8:	401a      	ands	r2, r3
 8002eea:	683b      	ldr	r3, [r7, #0]
 8002eec:	689b      	ldr	r3, [r3, #8]
 8002eee:	4313      	orrs	r3, r2
 8002ef0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8002ef2:	68fb      	ldr	r3, [r7, #12]
 8002ef4:	4a18      	ldr	r2, [pc, #96]	; (8002f58 <HAL_TIMEx_ConfigBreakDeadTime+0xa8>)
 8002ef6:	401a      	ands	r2, r3
 8002ef8:	683b      	ldr	r3, [r7, #0]
 8002efa:	685b      	ldr	r3, [r3, #4]
 8002efc:	4313      	orrs	r3, r2
 8002efe:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8002f00:	68fb      	ldr	r3, [r7, #12]
 8002f02:	4a16      	ldr	r2, [pc, #88]	; (8002f5c <HAL_TIMEx_ConfigBreakDeadTime+0xac>)
 8002f04:	401a      	ands	r2, r3
 8002f06:	683b      	ldr	r3, [r7, #0]
 8002f08:	681b      	ldr	r3, [r3, #0]
 8002f0a:	4313      	orrs	r3, r2
 8002f0c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8002f0e:	68fb      	ldr	r3, [r7, #12]
 8002f10:	4a13      	ldr	r2, [pc, #76]	; (8002f60 <HAL_TIMEx_ConfigBreakDeadTime+0xb0>)
 8002f12:	401a      	ands	r2, r3
 8002f14:	683b      	ldr	r3, [r7, #0]
 8002f16:	691b      	ldr	r3, [r3, #16]
 8002f18:	4313      	orrs	r3, r2
 8002f1a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8002f1c:	68fb      	ldr	r3, [r7, #12]
 8002f1e:	4a11      	ldr	r2, [pc, #68]	; (8002f64 <HAL_TIMEx_ConfigBreakDeadTime+0xb4>)
 8002f20:	401a      	ands	r2, r3
 8002f22:	683b      	ldr	r3, [r7, #0]
 8002f24:	695b      	ldr	r3, [r3, #20]
 8002f26:	4313      	orrs	r3, r2
 8002f28:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8002f2a:	68fb      	ldr	r3, [r7, #12]
 8002f2c:	4a0e      	ldr	r2, [pc, #56]	; (8002f68 <HAL_TIMEx_ConfigBreakDeadTime+0xb8>)
 8002f2e:	401a      	ands	r2, r3
 8002f30:	683b      	ldr	r3, [r7, #0]
 8002f32:	69db      	ldr	r3, [r3, #28]
 8002f34:	4313      	orrs	r3, r2
 8002f36:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8002f38:	687b      	ldr	r3, [r7, #4]
 8002f3a:	681b      	ldr	r3, [r3, #0]
 8002f3c:	68fa      	ldr	r2, [r7, #12]
 8002f3e:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8002f40:	687b      	ldr	r3, [r7, #4]
 8002f42:	223c      	movs	r2, #60	; 0x3c
 8002f44:	2100      	movs	r1, #0
 8002f46:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8002f48:	2300      	movs	r3, #0
}
 8002f4a:	0018      	movs	r0, r3
 8002f4c:	46bd      	mov	sp, r7
 8002f4e:	b004      	add	sp, #16
 8002f50:	bd80      	pop	{r7, pc}
 8002f52:	46c0      	nop			; (mov r8, r8)
 8002f54:	fffffcff 	.word	0xfffffcff
 8002f58:	fffffbff 	.word	0xfffffbff
 8002f5c:	fffff7ff 	.word	0xfffff7ff
 8002f60:	ffffefff 	.word	0xffffefff
 8002f64:	ffffdfff 	.word	0xffffdfff
 8002f68:	ffffbfff 	.word	0xffffbfff

08002f6c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8002f6c:	b580      	push	{r7, lr}
 8002f6e:	b082      	sub	sp, #8
 8002f70:	af00      	add	r7, sp, #0
 8002f72:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8002f74:	46c0      	nop			; (mov r8, r8)
 8002f76:	46bd      	mov	sp, r7
 8002f78:	b002      	add	sp, #8
 8002f7a:	bd80      	pop	{r7, pc}

08002f7c <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8002f7c:	b580      	push	{r7, lr}
 8002f7e:	b082      	sub	sp, #8
 8002f80:	af00      	add	r7, sp, #0
 8002f82:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8002f84:	46c0      	nop			; (mov r8, r8)
 8002f86:	46bd      	mov	sp, r7
 8002f88:	b002      	add	sp, #8
 8002f8a:	bd80      	pop	{r7, pc}

08002f8c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002f8c:	b580      	push	{r7, lr}
 8002f8e:	b082      	sub	sp, #8
 8002f90:	af00      	add	r7, sp, #0
 8002f92:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002f94:	687b      	ldr	r3, [r7, #4]
 8002f96:	2b00      	cmp	r3, #0
 8002f98:	d101      	bne.n	8002f9e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002f9a:	2301      	movs	r3, #1
 8002f9c:	e044      	b.n	8003028 <HAL_UART_Init+0x9c>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8002f9e:	687b      	ldr	r3, [r7, #4]
 8002fa0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002fa2:	2b00      	cmp	r3, #0
 8002fa4:	d107      	bne.n	8002fb6 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002fa6:	687b      	ldr	r3, [r7, #4]
 8002fa8:	2278      	movs	r2, #120	; 0x78
 8002faa:	2100      	movs	r1, #0
 8002fac:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002fae:	687b      	ldr	r3, [r7, #4]
 8002fb0:	0018      	movs	r0, r3
 8002fb2:	f7fd fca1 	bl	80008f8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002fb6:	687b      	ldr	r3, [r7, #4]
 8002fb8:	2224      	movs	r2, #36	; 0x24
 8002fba:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 8002fbc:	687b      	ldr	r3, [r7, #4]
 8002fbe:	681b      	ldr	r3, [r3, #0]
 8002fc0:	681a      	ldr	r2, [r3, #0]
 8002fc2:	687b      	ldr	r3, [r7, #4]
 8002fc4:	681b      	ldr	r3, [r3, #0]
 8002fc6:	2101      	movs	r1, #1
 8002fc8:	438a      	bics	r2, r1
 8002fca:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8002fcc:	687b      	ldr	r3, [r7, #4]
 8002fce:	0018      	movs	r0, r3
 8002fd0:	f000 fbf4 	bl	80037bc <UART_SetConfig>
 8002fd4:	0003      	movs	r3, r0
 8002fd6:	2b01      	cmp	r3, #1
 8002fd8:	d101      	bne.n	8002fde <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 8002fda:	2301      	movs	r3, #1
 8002fdc:	e024      	b.n	8003028 <HAL_UART_Init+0x9c>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8002fde:	687b      	ldr	r3, [r7, #4]
 8002fe0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002fe2:	2b00      	cmp	r3, #0
 8002fe4:	d003      	beq.n	8002fee <HAL_UART_Init+0x62>
  {
    UART_AdvFeatureConfig(huart);
 8002fe6:	687b      	ldr	r3, [r7, #4]
 8002fe8:	0018      	movs	r0, r3
 8002fea:	f000 fd6f 	bl	8003acc <UART_AdvFeatureConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN (if LIN is supported) and CLKEN bits in the USART_CR2 register,
  - SCEN (if Smartcard is supported), HDSEL and IREN (if IrDA is supported)  bits in the USART_CR3 register.*/
#if defined (USART_CR2_LINEN)
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002fee:	687b      	ldr	r3, [r7, #4]
 8002ff0:	681b      	ldr	r3, [r3, #0]
 8002ff2:	685a      	ldr	r2, [r3, #4]
 8002ff4:	687b      	ldr	r3, [r7, #4]
 8002ff6:	681b      	ldr	r3, [r3, #0]
 8002ff8:	490d      	ldr	r1, [pc, #52]	; (8003030 <HAL_UART_Init+0xa4>)
 8002ffa:	400a      	ands	r2, r1
 8002ffc:	605a      	str	r2, [r3, #4]
#else
  CLEAR_BIT(huart->Instance->CR2, USART_CR2_CLKEN);
#endif /* USART_CR2_LINEN */
#if defined (USART_CR3_SCEN)
#if defined (USART_CR3_IREN)
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002ffe:	687b      	ldr	r3, [r7, #4]
 8003000:	681b      	ldr	r3, [r3, #0]
 8003002:	689a      	ldr	r2, [r3, #8]
 8003004:	687b      	ldr	r3, [r7, #4]
 8003006:	681b      	ldr	r3, [r3, #0]
 8003008:	212a      	movs	r1, #42	; 0x2a
 800300a:	438a      	bics	r2, r1
 800300c:	609a      	str	r2, [r3, #8]
#else
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_HDSEL);
#endif /* USART_CR3_IREN*/
#endif /* USART_CR3_SCEN */

  __HAL_UART_ENABLE(huart);
 800300e:	687b      	ldr	r3, [r7, #4]
 8003010:	681b      	ldr	r3, [r3, #0]
 8003012:	681a      	ldr	r2, [r3, #0]
 8003014:	687b      	ldr	r3, [r7, #4]
 8003016:	681b      	ldr	r3, [r3, #0]
 8003018:	2101      	movs	r1, #1
 800301a:	430a      	orrs	r2, r1
 800301c:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800301e:	687b      	ldr	r3, [r7, #4]
 8003020:	0018      	movs	r0, r3
 8003022:	f000 fe07 	bl	8003c34 <UART_CheckIdleState>
 8003026:	0003      	movs	r3, r0
}
 8003028:	0018      	movs	r0, r3
 800302a:	46bd      	mov	sp, r7
 800302c:	b002      	add	sp, #8
 800302e:	bd80      	pop	{r7, pc}
 8003030:	ffffb7ff 	.word	0xffffb7ff

08003034 <HAL_UART_Transmit_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 8003034:	b580      	push	{r7, lr}
 8003036:	b088      	sub	sp, #32
 8003038:	af00      	add	r7, sp, #0
 800303a:	60f8      	str	r0, [r7, #12]
 800303c:	60b9      	str	r1, [r7, #8]
 800303e:	1dbb      	adds	r3, r7, #6
 8003040:	801a      	strh	r2, [r3, #0]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003042:	68fb      	ldr	r3, [r7, #12]
 8003044:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003046:	2b20      	cmp	r3, #32
 8003048:	d15b      	bne.n	8003102 <HAL_UART_Transmit_IT+0xce>
  {
    if ((pData == NULL) || (Size == 0U))
 800304a:	68bb      	ldr	r3, [r7, #8]
 800304c:	2b00      	cmp	r3, #0
 800304e:	d003      	beq.n	8003058 <HAL_UART_Transmit_IT+0x24>
 8003050:	1dbb      	adds	r3, r7, #6
 8003052:	881b      	ldrh	r3, [r3, #0]
 8003054:	2b00      	cmp	r3, #0
 8003056:	d101      	bne.n	800305c <HAL_UART_Transmit_IT+0x28>
    {
      return HAL_ERROR;
 8003058:	2301      	movs	r3, #1
 800305a:	e053      	b.n	8003104 <HAL_UART_Transmit_IT+0xd0>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be filled into TDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800305c:	68fb      	ldr	r3, [r7, #12]
 800305e:	689a      	ldr	r2, [r3, #8]
 8003060:	2380      	movs	r3, #128	; 0x80
 8003062:	015b      	lsls	r3, r3, #5
 8003064:	429a      	cmp	r2, r3
 8003066:	d109      	bne.n	800307c <HAL_UART_Transmit_IT+0x48>
 8003068:	68fb      	ldr	r3, [r7, #12]
 800306a:	691b      	ldr	r3, [r3, #16]
 800306c:	2b00      	cmp	r3, #0
 800306e:	d105      	bne.n	800307c <HAL_UART_Transmit_IT+0x48>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 8003070:	68bb      	ldr	r3, [r7, #8]
 8003072:	2201      	movs	r2, #1
 8003074:	4013      	ands	r3, r2
 8003076:	d001      	beq.n	800307c <HAL_UART_Transmit_IT+0x48>
      {
        return  HAL_ERROR;
 8003078:	2301      	movs	r3, #1
 800307a:	e043      	b.n	8003104 <HAL_UART_Transmit_IT+0xd0>
      }
    }

    huart->pTxBuffPtr  = pData;
 800307c:	68fb      	ldr	r3, [r7, #12]
 800307e:	68ba      	ldr	r2, [r7, #8]
 8003080:	64da      	str	r2, [r3, #76]	; 0x4c
    huart->TxXferSize  = Size;
 8003082:	68fb      	ldr	r3, [r7, #12]
 8003084:	1dba      	adds	r2, r7, #6
 8003086:	2150      	movs	r1, #80	; 0x50
 8003088:	8812      	ldrh	r2, [r2, #0]
 800308a:	525a      	strh	r2, [r3, r1]
    huart->TxXferCount = Size;
 800308c:	68fb      	ldr	r3, [r7, #12]
 800308e:	1dba      	adds	r2, r7, #6
 8003090:	2152      	movs	r1, #82	; 0x52
 8003092:	8812      	ldrh	r2, [r2, #0]
 8003094:	525a      	strh	r2, [r3, r1]
    huart->TxISR       = NULL;
 8003096:	68fb      	ldr	r3, [r7, #12]
 8003098:	2200      	movs	r2, #0
 800309a:	66da      	str	r2, [r3, #108]	; 0x6c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800309c:	68fb      	ldr	r3, [r7, #12]
 800309e:	2284      	movs	r2, #132	; 0x84
 80030a0:	2100      	movs	r1, #0
 80030a2:	5099      	str	r1, [r3, r2]
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80030a4:	68fb      	ldr	r3, [r7, #12]
 80030a6:	2221      	movs	r2, #33	; 0x21
 80030a8:	67da      	str	r2, [r3, #124]	; 0x7c

    /* Set the Tx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80030aa:	68fb      	ldr	r3, [r7, #12]
 80030ac:	689a      	ldr	r2, [r3, #8]
 80030ae:	2380      	movs	r3, #128	; 0x80
 80030b0:	015b      	lsls	r3, r3, #5
 80030b2:	429a      	cmp	r2, r3
 80030b4:	d107      	bne.n	80030c6 <HAL_UART_Transmit_IT+0x92>
 80030b6:	68fb      	ldr	r3, [r7, #12]
 80030b8:	691b      	ldr	r3, [r3, #16]
 80030ba:	2b00      	cmp	r3, #0
 80030bc:	d103      	bne.n	80030c6 <HAL_UART_Transmit_IT+0x92>
    {
      huart->TxISR = UART_TxISR_16BIT;
 80030be:	68fb      	ldr	r3, [r7, #12]
 80030c0:	4a12      	ldr	r2, [pc, #72]	; (800310c <HAL_UART_Transmit_IT+0xd8>)
 80030c2:	66da      	str	r2, [r3, #108]	; 0x6c
 80030c4:	e002      	b.n	80030cc <HAL_UART_Transmit_IT+0x98>
    }
    else
    {
      huart->TxISR = UART_TxISR_8BIT;
 80030c6:	68fb      	ldr	r3, [r7, #12]
 80030c8:	4a11      	ldr	r2, [pc, #68]	; (8003110 <HAL_UART_Transmit_IT+0xdc>)
 80030ca:	66da      	str	r2, [r3, #108]	; 0x6c
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80030cc:	f3ef 8310 	mrs	r3, PRIMASK
 80030d0:	613b      	str	r3, [r7, #16]
  return(result);
 80030d2:	693b      	ldr	r3, [r7, #16]
    }

    /* Enable the Transmit Data Register Empty interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 80030d4:	61fb      	str	r3, [r7, #28]
 80030d6:	2301      	movs	r3, #1
 80030d8:	617b      	str	r3, [r7, #20]
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80030da:	697b      	ldr	r3, [r7, #20]
 80030dc:	f383 8810 	msr	PRIMASK, r3
}
 80030e0:	46c0      	nop			; (mov r8, r8)
 80030e2:	68fb      	ldr	r3, [r7, #12]
 80030e4:	681b      	ldr	r3, [r3, #0]
 80030e6:	681a      	ldr	r2, [r3, #0]
 80030e8:	68fb      	ldr	r3, [r7, #12]
 80030ea:	681b      	ldr	r3, [r3, #0]
 80030ec:	2180      	movs	r1, #128	; 0x80
 80030ee:	430a      	orrs	r2, r1
 80030f0:	601a      	str	r2, [r3, #0]
 80030f2:	69fb      	ldr	r3, [r7, #28]
 80030f4:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80030f6:	69bb      	ldr	r3, [r7, #24]
 80030f8:	f383 8810 	msr	PRIMASK, r3
}
 80030fc:	46c0      	nop			; (mov r8, r8)

    return HAL_OK;
 80030fe:	2300      	movs	r3, #0
 8003100:	e000      	b.n	8003104 <HAL_UART_Transmit_IT+0xd0>
  }
  else
  {
    return HAL_BUSY;
 8003102:	2302      	movs	r3, #2
  }
}
 8003104:	0018      	movs	r0, r3
 8003106:	46bd      	mov	sp, r7
 8003108:	b008      	add	sp, #32
 800310a:	bd80      	pop	{r7, pc}
 800310c:	08004197 	.word	0x08004197
 8003110:	080040e3 	.word	0x080040e3

08003114 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8003114:	b580      	push	{r7, lr}
 8003116:	b088      	sub	sp, #32
 8003118:	af00      	add	r7, sp, #0
 800311a:	60f8      	str	r0, [r7, #12]
 800311c:	60b9      	str	r1, [r7, #8]
 800311e:	1dbb      	adds	r3, r7, #6
 8003120:	801a      	strh	r2, [r3, #0]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8003122:	68fb      	ldr	r3, [r7, #12]
 8003124:	2280      	movs	r2, #128	; 0x80
 8003126:	589b      	ldr	r3, [r3, r2]
 8003128:	2b20      	cmp	r3, #32
 800312a:	d145      	bne.n	80031b8 <HAL_UART_Receive_IT+0xa4>
  {
    if ((pData == NULL) || (Size == 0U))
 800312c:	68bb      	ldr	r3, [r7, #8]
 800312e:	2b00      	cmp	r3, #0
 8003130:	d003      	beq.n	800313a <HAL_UART_Receive_IT+0x26>
 8003132:	1dbb      	adds	r3, r7, #6
 8003134:	881b      	ldrh	r3, [r3, #0]
 8003136:	2b00      	cmp	r3, #0
 8003138:	d101      	bne.n	800313e <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 800313a:	2301      	movs	r3, #1
 800313c:	e03d      	b.n	80031ba <HAL_UART_Receive_IT+0xa6>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be received from RDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800313e:	68fb      	ldr	r3, [r7, #12]
 8003140:	689a      	ldr	r2, [r3, #8]
 8003142:	2380      	movs	r3, #128	; 0x80
 8003144:	015b      	lsls	r3, r3, #5
 8003146:	429a      	cmp	r2, r3
 8003148:	d109      	bne.n	800315e <HAL_UART_Receive_IT+0x4a>
 800314a:	68fb      	ldr	r3, [r7, #12]
 800314c:	691b      	ldr	r3, [r3, #16]
 800314e:	2b00      	cmp	r3, #0
 8003150:	d105      	bne.n	800315e <HAL_UART_Receive_IT+0x4a>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 8003152:	68bb      	ldr	r3, [r7, #8]
 8003154:	2201      	movs	r2, #1
 8003156:	4013      	ands	r3, r2
 8003158:	d001      	beq.n	800315e <HAL_UART_Receive_IT+0x4a>
      {
        return  HAL_ERROR;
 800315a:	2301      	movs	r3, #1
 800315c:	e02d      	b.n	80031ba <HAL_UART_Receive_IT+0xa6>
      }
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800315e:	68fb      	ldr	r3, [r7, #12]
 8003160:	2200      	movs	r2, #0
 8003162:	661a      	str	r2, [r3, #96]	; 0x60

    /* Check that USART RTOEN bit is set */
    if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8003164:	68fb      	ldr	r3, [r7, #12]
 8003166:	681b      	ldr	r3, [r3, #0]
 8003168:	685a      	ldr	r2, [r3, #4]
 800316a:	2380      	movs	r3, #128	; 0x80
 800316c:	041b      	lsls	r3, r3, #16
 800316e:	4013      	ands	r3, r2
 8003170:	d019      	beq.n	80031a6 <HAL_UART_Receive_IT+0x92>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003172:	f3ef 8310 	mrs	r3, PRIMASK
 8003176:	613b      	str	r3, [r7, #16]
  return(result);
 8003178:	693b      	ldr	r3, [r7, #16]
    {
      /* Enable the UART Receiver Timeout Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800317a:	61fb      	str	r3, [r7, #28]
 800317c:	2301      	movs	r3, #1
 800317e:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003180:	697b      	ldr	r3, [r7, #20]
 8003182:	f383 8810 	msr	PRIMASK, r3
}
 8003186:	46c0      	nop			; (mov r8, r8)
 8003188:	68fb      	ldr	r3, [r7, #12]
 800318a:	681b      	ldr	r3, [r3, #0]
 800318c:	681a      	ldr	r2, [r3, #0]
 800318e:	68fb      	ldr	r3, [r7, #12]
 8003190:	681b      	ldr	r3, [r3, #0]
 8003192:	2180      	movs	r1, #128	; 0x80
 8003194:	04c9      	lsls	r1, r1, #19
 8003196:	430a      	orrs	r2, r1
 8003198:	601a      	str	r2, [r3, #0]
 800319a:	69fb      	ldr	r3, [r7, #28]
 800319c:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800319e:	69bb      	ldr	r3, [r7, #24]
 80031a0:	f383 8810 	msr	PRIMASK, r3
}
 80031a4:	46c0      	nop			; (mov r8, r8)
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 80031a6:	1dbb      	adds	r3, r7, #6
 80031a8:	881a      	ldrh	r2, [r3, #0]
 80031aa:	68b9      	ldr	r1, [r7, #8]
 80031ac:	68fb      	ldr	r3, [r7, #12]
 80031ae:	0018      	movs	r0, r3
 80031b0:	f000 fe52 	bl	8003e58 <UART_Start_Receive_IT>
 80031b4:	0003      	movs	r3, r0
 80031b6:	e000      	b.n	80031ba <HAL_UART_Receive_IT+0xa6>
  }
  else
  {
    return HAL_BUSY;
 80031b8:	2302      	movs	r3, #2
  }
}
 80031ba:	0018      	movs	r0, r3
 80031bc:	46bd      	mov	sp, r7
 80031be:	b008      	add	sp, #32
 80031c0:	bd80      	pop	{r7, pc}
	...

080031c4 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80031c4:	b590      	push	{r4, r7, lr}
 80031c6:	b0ab      	sub	sp, #172	; 0xac
 80031c8:	af00      	add	r7, sp, #0
 80031ca:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 80031cc:	687b      	ldr	r3, [r7, #4]
 80031ce:	681b      	ldr	r3, [r3, #0]
 80031d0:	69db      	ldr	r3, [r3, #28]
 80031d2:	22a4      	movs	r2, #164	; 0xa4
 80031d4:	18b9      	adds	r1, r7, r2
 80031d6:	600b      	str	r3, [r1, #0]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80031d8:	687b      	ldr	r3, [r7, #4]
 80031da:	681b      	ldr	r3, [r3, #0]
 80031dc:	681b      	ldr	r3, [r3, #0]
 80031de:	20a0      	movs	r0, #160	; 0xa0
 80031e0:	1839      	adds	r1, r7, r0
 80031e2:	600b      	str	r3, [r1, #0]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80031e4:	687b      	ldr	r3, [r7, #4]
 80031e6:	681b      	ldr	r3, [r3, #0]
 80031e8:	689b      	ldr	r3, [r3, #8]
 80031ea:	219c      	movs	r1, #156	; 0x9c
 80031ec:	1879      	adds	r1, r7, r1
 80031ee:	600b      	str	r3, [r1, #0]

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 80031f0:	0011      	movs	r1, r2
 80031f2:	18bb      	adds	r3, r7, r2
 80031f4:	681b      	ldr	r3, [r3, #0]
 80031f6:	4a99      	ldr	r2, [pc, #612]	; (800345c <HAL_UART_IRQHandler+0x298>)
 80031f8:	4013      	ands	r3, r2
 80031fa:	2298      	movs	r2, #152	; 0x98
 80031fc:	18bc      	adds	r4, r7, r2
 80031fe:	6023      	str	r3, [r4, #0]
  if (errorflags == 0U)
 8003200:	18bb      	adds	r3, r7, r2
 8003202:	681b      	ldr	r3, [r3, #0]
 8003204:	2b00      	cmp	r3, #0
 8003206:	d114      	bne.n	8003232 <HAL_UART_IRQHandler+0x6e>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8003208:	187b      	adds	r3, r7, r1
 800320a:	681b      	ldr	r3, [r3, #0]
 800320c:	2220      	movs	r2, #32
 800320e:	4013      	ands	r3, r2
 8003210:	d00f      	beq.n	8003232 <HAL_UART_IRQHandler+0x6e>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8003212:	183b      	adds	r3, r7, r0
 8003214:	681b      	ldr	r3, [r3, #0]
 8003216:	2220      	movs	r2, #32
 8003218:	4013      	ands	r3, r2
 800321a:	d00a      	beq.n	8003232 <HAL_UART_IRQHandler+0x6e>
    {
      if (huart->RxISR != NULL)
 800321c:	687b      	ldr	r3, [r7, #4]
 800321e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003220:	2b00      	cmp	r3, #0
 8003222:	d100      	bne.n	8003226 <HAL_UART_IRQHandler+0x62>
 8003224:	e29e      	b.n	8003764 <HAL_UART_IRQHandler+0x5a0>
      {
        huart->RxISR(huart);
 8003226:	687b      	ldr	r3, [r7, #4]
 8003228:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800322a:	687a      	ldr	r2, [r7, #4]
 800322c:	0010      	movs	r0, r2
 800322e:	4798      	blx	r3
      }
      return;
 8003230:	e298      	b.n	8003764 <HAL_UART_IRQHandler+0x5a0>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8003232:	2398      	movs	r3, #152	; 0x98
 8003234:	18fb      	adds	r3, r7, r3
 8003236:	681b      	ldr	r3, [r3, #0]
 8003238:	2b00      	cmp	r3, #0
 800323a:	d100      	bne.n	800323e <HAL_UART_IRQHandler+0x7a>
 800323c:	e114      	b.n	8003468 <HAL_UART_IRQHandler+0x2a4>
      && (((cr3its & USART_CR3_EIE) != 0U)
 800323e:	239c      	movs	r3, #156	; 0x9c
 8003240:	18fb      	adds	r3, r7, r3
 8003242:	681b      	ldr	r3, [r3, #0]
 8003244:	2201      	movs	r2, #1
 8003246:	4013      	ands	r3, r2
 8003248:	d106      	bne.n	8003258 <HAL_UART_IRQHandler+0x94>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 800324a:	23a0      	movs	r3, #160	; 0xa0
 800324c:	18fb      	adds	r3, r7, r3
 800324e:	681b      	ldr	r3, [r3, #0]
 8003250:	4a83      	ldr	r2, [pc, #524]	; (8003460 <HAL_UART_IRQHandler+0x29c>)
 8003252:	4013      	ands	r3, r2
 8003254:	d100      	bne.n	8003258 <HAL_UART_IRQHandler+0x94>
 8003256:	e107      	b.n	8003468 <HAL_UART_IRQHandler+0x2a4>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8003258:	23a4      	movs	r3, #164	; 0xa4
 800325a:	18fb      	adds	r3, r7, r3
 800325c:	681b      	ldr	r3, [r3, #0]
 800325e:	2201      	movs	r2, #1
 8003260:	4013      	ands	r3, r2
 8003262:	d012      	beq.n	800328a <HAL_UART_IRQHandler+0xc6>
 8003264:	23a0      	movs	r3, #160	; 0xa0
 8003266:	18fb      	adds	r3, r7, r3
 8003268:	681a      	ldr	r2, [r3, #0]
 800326a:	2380      	movs	r3, #128	; 0x80
 800326c:	005b      	lsls	r3, r3, #1
 800326e:	4013      	ands	r3, r2
 8003270:	d00b      	beq.n	800328a <HAL_UART_IRQHandler+0xc6>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8003272:	687b      	ldr	r3, [r7, #4]
 8003274:	681b      	ldr	r3, [r3, #0]
 8003276:	2201      	movs	r2, #1
 8003278:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800327a:	687b      	ldr	r3, [r7, #4]
 800327c:	2284      	movs	r2, #132	; 0x84
 800327e:	589b      	ldr	r3, [r3, r2]
 8003280:	2201      	movs	r2, #1
 8003282:	431a      	orrs	r2, r3
 8003284:	687b      	ldr	r3, [r7, #4]
 8003286:	2184      	movs	r1, #132	; 0x84
 8003288:	505a      	str	r2, [r3, r1]
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800328a:	23a4      	movs	r3, #164	; 0xa4
 800328c:	18fb      	adds	r3, r7, r3
 800328e:	681b      	ldr	r3, [r3, #0]
 8003290:	2202      	movs	r2, #2
 8003292:	4013      	ands	r3, r2
 8003294:	d011      	beq.n	80032ba <HAL_UART_IRQHandler+0xf6>
 8003296:	239c      	movs	r3, #156	; 0x9c
 8003298:	18fb      	adds	r3, r7, r3
 800329a:	681b      	ldr	r3, [r3, #0]
 800329c:	2201      	movs	r2, #1
 800329e:	4013      	ands	r3, r2
 80032a0:	d00b      	beq.n	80032ba <HAL_UART_IRQHandler+0xf6>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 80032a2:	687b      	ldr	r3, [r7, #4]
 80032a4:	681b      	ldr	r3, [r3, #0]
 80032a6:	2202      	movs	r2, #2
 80032a8:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80032aa:	687b      	ldr	r3, [r7, #4]
 80032ac:	2284      	movs	r2, #132	; 0x84
 80032ae:	589b      	ldr	r3, [r3, r2]
 80032b0:	2204      	movs	r2, #4
 80032b2:	431a      	orrs	r2, r3
 80032b4:	687b      	ldr	r3, [r7, #4]
 80032b6:	2184      	movs	r1, #132	; 0x84
 80032b8:	505a      	str	r2, [r3, r1]
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80032ba:	23a4      	movs	r3, #164	; 0xa4
 80032bc:	18fb      	adds	r3, r7, r3
 80032be:	681b      	ldr	r3, [r3, #0]
 80032c0:	2204      	movs	r2, #4
 80032c2:	4013      	ands	r3, r2
 80032c4:	d011      	beq.n	80032ea <HAL_UART_IRQHandler+0x126>
 80032c6:	239c      	movs	r3, #156	; 0x9c
 80032c8:	18fb      	adds	r3, r7, r3
 80032ca:	681b      	ldr	r3, [r3, #0]
 80032cc:	2201      	movs	r2, #1
 80032ce:	4013      	ands	r3, r2
 80032d0:	d00b      	beq.n	80032ea <HAL_UART_IRQHandler+0x126>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 80032d2:	687b      	ldr	r3, [r7, #4]
 80032d4:	681b      	ldr	r3, [r3, #0]
 80032d6:	2204      	movs	r2, #4
 80032d8:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80032da:	687b      	ldr	r3, [r7, #4]
 80032dc:	2284      	movs	r2, #132	; 0x84
 80032de:	589b      	ldr	r3, [r3, r2]
 80032e0:	2202      	movs	r2, #2
 80032e2:	431a      	orrs	r2, r3
 80032e4:	687b      	ldr	r3, [r7, #4]
 80032e6:	2184      	movs	r1, #132	; 0x84
 80032e8:	505a      	str	r2, [r3, r1]
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 80032ea:	23a4      	movs	r3, #164	; 0xa4
 80032ec:	18fb      	adds	r3, r7, r3
 80032ee:	681b      	ldr	r3, [r3, #0]
 80032f0:	2208      	movs	r2, #8
 80032f2:	4013      	ands	r3, r2
 80032f4:	d017      	beq.n	8003326 <HAL_UART_IRQHandler+0x162>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 80032f6:	23a0      	movs	r3, #160	; 0xa0
 80032f8:	18fb      	adds	r3, r7, r3
 80032fa:	681b      	ldr	r3, [r3, #0]
 80032fc:	2220      	movs	r2, #32
 80032fe:	4013      	ands	r3, r2
 8003300:	d105      	bne.n	800330e <HAL_UART_IRQHandler+0x14a>
            ((cr3its & USART_CR3_EIE) != 0U)))
 8003302:	239c      	movs	r3, #156	; 0x9c
 8003304:	18fb      	adds	r3, r7, r3
 8003306:	681b      	ldr	r3, [r3, #0]
 8003308:	2201      	movs	r2, #1
 800330a:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 800330c:	d00b      	beq.n	8003326 <HAL_UART_IRQHandler+0x162>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800330e:	687b      	ldr	r3, [r7, #4]
 8003310:	681b      	ldr	r3, [r3, #0]
 8003312:	2208      	movs	r2, #8
 8003314:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8003316:	687b      	ldr	r3, [r7, #4]
 8003318:	2284      	movs	r2, #132	; 0x84
 800331a:	589b      	ldr	r3, [r3, r2]
 800331c:	2208      	movs	r2, #8
 800331e:	431a      	orrs	r2, r3
 8003320:	687b      	ldr	r3, [r7, #4]
 8003322:	2184      	movs	r1, #132	; 0x84
 8003324:	505a      	str	r2, [r3, r1]
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8003326:	23a4      	movs	r3, #164	; 0xa4
 8003328:	18fb      	adds	r3, r7, r3
 800332a:	681a      	ldr	r2, [r3, #0]
 800332c:	2380      	movs	r3, #128	; 0x80
 800332e:	011b      	lsls	r3, r3, #4
 8003330:	4013      	ands	r3, r2
 8003332:	d013      	beq.n	800335c <HAL_UART_IRQHandler+0x198>
 8003334:	23a0      	movs	r3, #160	; 0xa0
 8003336:	18fb      	adds	r3, r7, r3
 8003338:	681a      	ldr	r2, [r3, #0]
 800333a:	2380      	movs	r3, #128	; 0x80
 800333c:	04db      	lsls	r3, r3, #19
 800333e:	4013      	ands	r3, r2
 8003340:	d00c      	beq.n	800335c <HAL_UART_IRQHandler+0x198>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8003342:	687b      	ldr	r3, [r7, #4]
 8003344:	681b      	ldr	r3, [r3, #0]
 8003346:	2280      	movs	r2, #128	; 0x80
 8003348:	0112      	lsls	r2, r2, #4
 800334a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 800334c:	687b      	ldr	r3, [r7, #4]
 800334e:	2284      	movs	r2, #132	; 0x84
 8003350:	589b      	ldr	r3, [r3, r2]
 8003352:	2220      	movs	r2, #32
 8003354:	431a      	orrs	r2, r3
 8003356:	687b      	ldr	r3, [r7, #4]
 8003358:	2184      	movs	r1, #132	; 0x84
 800335a:	505a      	str	r2, [r3, r1]
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800335c:	687b      	ldr	r3, [r7, #4]
 800335e:	2284      	movs	r2, #132	; 0x84
 8003360:	589b      	ldr	r3, [r3, r2]
 8003362:	2b00      	cmp	r3, #0
 8003364:	d100      	bne.n	8003368 <HAL_UART_IRQHandler+0x1a4>
 8003366:	e1ff      	b.n	8003768 <HAL_UART_IRQHandler+0x5a4>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 8003368:	23a4      	movs	r3, #164	; 0xa4
 800336a:	18fb      	adds	r3, r7, r3
 800336c:	681b      	ldr	r3, [r3, #0]
 800336e:	2220      	movs	r2, #32
 8003370:	4013      	ands	r3, r2
 8003372:	d00e      	beq.n	8003392 <HAL_UART_IRQHandler+0x1ce>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8003374:	23a0      	movs	r3, #160	; 0xa0
 8003376:	18fb      	adds	r3, r7, r3
 8003378:	681b      	ldr	r3, [r3, #0]
 800337a:	2220      	movs	r2, #32
 800337c:	4013      	ands	r3, r2
 800337e:	d008      	beq.n	8003392 <HAL_UART_IRQHandler+0x1ce>
      {
        if (huart->RxISR != NULL)
 8003380:	687b      	ldr	r3, [r7, #4]
 8003382:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003384:	2b00      	cmp	r3, #0
 8003386:	d004      	beq.n	8003392 <HAL_UART_IRQHandler+0x1ce>
        {
          huart->RxISR(huart);
 8003388:	687b      	ldr	r3, [r7, #4]
 800338a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800338c:	687a      	ldr	r2, [r7, #4]
 800338e:	0010      	movs	r0, r2
 8003390:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8003392:	687b      	ldr	r3, [r7, #4]
 8003394:	2284      	movs	r2, #132	; 0x84
 8003396:	589b      	ldr	r3, [r3, r2]
 8003398:	2194      	movs	r1, #148	; 0x94
 800339a:	187a      	adds	r2, r7, r1
 800339c:	6013      	str	r3, [r2, #0]
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800339e:	687b      	ldr	r3, [r7, #4]
 80033a0:	681b      	ldr	r3, [r3, #0]
 80033a2:	689b      	ldr	r3, [r3, #8]
 80033a4:	2240      	movs	r2, #64	; 0x40
 80033a6:	4013      	ands	r3, r2
 80033a8:	2b40      	cmp	r3, #64	; 0x40
 80033aa:	d004      	beq.n	80033b6 <HAL_UART_IRQHandler+0x1f2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 80033ac:	187b      	adds	r3, r7, r1
 80033ae:	681b      	ldr	r3, [r3, #0]
 80033b0:	2228      	movs	r2, #40	; 0x28
 80033b2:	4013      	ands	r3, r2
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80033b4:	d047      	beq.n	8003446 <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80033b6:	687b      	ldr	r3, [r7, #4]
 80033b8:	0018      	movs	r0, r3
 80033ba:	f000 fe17 	bl	8003fec <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80033be:	687b      	ldr	r3, [r7, #4]
 80033c0:	681b      	ldr	r3, [r3, #0]
 80033c2:	689b      	ldr	r3, [r3, #8]
 80033c4:	2240      	movs	r2, #64	; 0x40
 80033c6:	4013      	ands	r3, r2
 80033c8:	2b40      	cmp	r3, #64	; 0x40
 80033ca:	d137      	bne.n	800343c <HAL_UART_IRQHandler+0x278>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80033cc:	f3ef 8310 	mrs	r3, PRIMASK
 80033d0:	663b      	str	r3, [r7, #96]	; 0x60
  return(result);
 80033d2:	6e3b      	ldr	r3, [r7, #96]	; 0x60
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80033d4:	2090      	movs	r0, #144	; 0x90
 80033d6:	183a      	adds	r2, r7, r0
 80033d8:	6013      	str	r3, [r2, #0]
 80033da:	2301      	movs	r3, #1
 80033dc:	667b      	str	r3, [r7, #100]	; 0x64
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80033de:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80033e0:	f383 8810 	msr	PRIMASK, r3
}
 80033e4:	46c0      	nop			; (mov r8, r8)
 80033e6:	687b      	ldr	r3, [r7, #4]
 80033e8:	681b      	ldr	r3, [r3, #0]
 80033ea:	689a      	ldr	r2, [r3, #8]
 80033ec:	687b      	ldr	r3, [r7, #4]
 80033ee:	681b      	ldr	r3, [r3, #0]
 80033f0:	2140      	movs	r1, #64	; 0x40
 80033f2:	438a      	bics	r2, r1
 80033f4:	609a      	str	r2, [r3, #8]
 80033f6:	183b      	adds	r3, r7, r0
 80033f8:	681b      	ldr	r3, [r3, #0]
 80033fa:	66bb      	str	r3, [r7, #104]	; 0x68
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80033fc:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80033fe:	f383 8810 	msr	PRIMASK, r3
}
 8003402:	46c0      	nop			; (mov r8, r8)

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8003404:	687b      	ldr	r3, [r7, #4]
 8003406:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003408:	2b00      	cmp	r3, #0
 800340a:	d012      	beq.n	8003432 <HAL_UART_IRQHandler+0x26e>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800340c:	687b      	ldr	r3, [r7, #4]
 800340e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003410:	4a14      	ldr	r2, [pc, #80]	; (8003464 <HAL_UART_IRQHandler+0x2a0>)
 8003412:	635a      	str	r2, [r3, #52]	; 0x34

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8003414:	687b      	ldr	r3, [r7, #4]
 8003416:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003418:	0018      	movs	r0, r3
 800341a:	f7fd fca1 	bl	8000d60 <HAL_DMA_Abort_IT>
 800341e:	1e03      	subs	r3, r0, #0
 8003420:	d01a      	beq.n	8003458 <HAL_UART_IRQHandler+0x294>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8003422:	687b      	ldr	r3, [r7, #4]
 8003424:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003426:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003428:	687b      	ldr	r3, [r7, #4]
 800342a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800342c:	0018      	movs	r0, r3
 800342e:	4790      	blx	r2
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003430:	e012      	b.n	8003458 <HAL_UART_IRQHandler+0x294>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8003432:	687b      	ldr	r3, [r7, #4]
 8003434:	0018      	movs	r0, r3
 8003436:	f000 f9ad 	bl	8003794 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800343a:	e00d      	b.n	8003458 <HAL_UART_IRQHandler+0x294>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800343c:	687b      	ldr	r3, [r7, #4]
 800343e:	0018      	movs	r0, r3
 8003440:	f000 f9a8 	bl	8003794 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003444:	e008      	b.n	8003458 <HAL_UART_IRQHandler+0x294>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8003446:	687b      	ldr	r3, [r7, #4]
 8003448:	0018      	movs	r0, r3
 800344a:	f000 f9a3 	bl	8003794 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800344e:	687b      	ldr	r3, [r7, #4]
 8003450:	2284      	movs	r2, #132	; 0x84
 8003452:	2100      	movs	r1, #0
 8003454:	5099      	str	r1, [r3, r2]
      }
    }
    return;
 8003456:	e187      	b.n	8003768 <HAL_UART_IRQHandler+0x5a4>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003458:	46c0      	nop			; (mov r8, r8)
    return;
 800345a:	e185      	b.n	8003768 <HAL_UART_IRQHandler+0x5a4>
 800345c:	0000080f 	.word	0x0000080f
 8003460:	04000120 	.word	0x04000120
 8003464:	080040b5 	.word	0x080040b5

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003468:	687b      	ldr	r3, [r7, #4]
 800346a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800346c:	2b01      	cmp	r3, #1
 800346e:	d000      	beq.n	8003472 <HAL_UART_IRQHandler+0x2ae>
 8003470:	e139      	b.n	80036e6 <HAL_UART_IRQHandler+0x522>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8003472:	23a4      	movs	r3, #164	; 0xa4
 8003474:	18fb      	adds	r3, r7, r3
 8003476:	681b      	ldr	r3, [r3, #0]
 8003478:	2210      	movs	r2, #16
 800347a:	4013      	ands	r3, r2
 800347c:	d100      	bne.n	8003480 <HAL_UART_IRQHandler+0x2bc>
 800347e:	e132      	b.n	80036e6 <HAL_UART_IRQHandler+0x522>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8003480:	23a0      	movs	r3, #160	; 0xa0
 8003482:	18fb      	adds	r3, r7, r3
 8003484:	681b      	ldr	r3, [r3, #0]
 8003486:	2210      	movs	r2, #16
 8003488:	4013      	ands	r3, r2
 800348a:	d100      	bne.n	800348e <HAL_UART_IRQHandler+0x2ca>
 800348c:	e12b      	b.n	80036e6 <HAL_UART_IRQHandler+0x522>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800348e:	687b      	ldr	r3, [r7, #4]
 8003490:	681b      	ldr	r3, [r3, #0]
 8003492:	2210      	movs	r2, #16
 8003494:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003496:	687b      	ldr	r3, [r7, #4]
 8003498:	681b      	ldr	r3, [r3, #0]
 800349a:	689b      	ldr	r3, [r3, #8]
 800349c:	2240      	movs	r2, #64	; 0x40
 800349e:	4013      	ands	r3, r2
 80034a0:	2b40      	cmp	r3, #64	; 0x40
 80034a2:	d000      	beq.n	80034a6 <HAL_UART_IRQHandler+0x2e2>
 80034a4:	e09f      	b.n	80035e6 <HAL_UART_IRQHandler+0x422>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80034a6:	687b      	ldr	r3, [r7, #4]
 80034a8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80034aa:	681b      	ldr	r3, [r3, #0]
 80034ac:	685a      	ldr	r2, [r3, #4]
 80034ae:	217e      	movs	r1, #126	; 0x7e
 80034b0:	187b      	adds	r3, r7, r1
 80034b2:	801a      	strh	r2, [r3, #0]
      if ((nb_remaining_rx_data > 0U)
 80034b4:	187b      	adds	r3, r7, r1
 80034b6:	881b      	ldrh	r3, [r3, #0]
 80034b8:	2b00      	cmp	r3, #0
 80034ba:	d100      	bne.n	80034be <HAL_UART_IRQHandler+0x2fa>
 80034bc:	e156      	b.n	800376c <HAL_UART_IRQHandler+0x5a8>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80034be:	687b      	ldr	r3, [r7, #4]
 80034c0:	2258      	movs	r2, #88	; 0x58
 80034c2:	5a9b      	ldrh	r3, [r3, r2]
 80034c4:	187a      	adds	r2, r7, r1
 80034c6:	8812      	ldrh	r2, [r2, #0]
 80034c8:	429a      	cmp	r2, r3
 80034ca:	d300      	bcc.n	80034ce <HAL_UART_IRQHandler+0x30a>
 80034cc:	e14e      	b.n	800376c <HAL_UART_IRQHandler+0x5a8>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80034ce:	687b      	ldr	r3, [r7, #4]
 80034d0:	187a      	adds	r2, r7, r1
 80034d2:	215a      	movs	r1, #90	; 0x5a
 80034d4:	8812      	ldrh	r2, [r2, #0]
 80034d6:	525a      	strh	r2, [r3, r1]

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 80034d8:	687b      	ldr	r3, [r7, #4]
 80034da:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80034dc:	699b      	ldr	r3, [r3, #24]
 80034de:	2b20      	cmp	r3, #32
 80034e0:	d06f      	beq.n	80035c2 <HAL_UART_IRQHandler+0x3fe>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80034e2:	f3ef 8310 	mrs	r3, PRIMASK
 80034e6:	633b      	str	r3, [r7, #48]	; 0x30
  return(result);
 80034e8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80034ea:	67bb      	str	r3, [r7, #120]	; 0x78
 80034ec:	2301      	movs	r3, #1
 80034ee:	637b      	str	r3, [r7, #52]	; 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80034f0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80034f2:	f383 8810 	msr	PRIMASK, r3
}
 80034f6:	46c0      	nop			; (mov r8, r8)
 80034f8:	687b      	ldr	r3, [r7, #4]
 80034fa:	681b      	ldr	r3, [r3, #0]
 80034fc:	681a      	ldr	r2, [r3, #0]
 80034fe:	687b      	ldr	r3, [r7, #4]
 8003500:	681b      	ldr	r3, [r3, #0]
 8003502:	499e      	ldr	r1, [pc, #632]	; (800377c <HAL_UART_IRQHandler+0x5b8>)
 8003504:	400a      	ands	r2, r1
 8003506:	601a      	str	r2, [r3, #0]
 8003508:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800350a:	63bb      	str	r3, [r7, #56]	; 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800350c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800350e:	f383 8810 	msr	PRIMASK, r3
}
 8003512:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003514:	f3ef 8310 	mrs	r3, PRIMASK
 8003518:	63fb      	str	r3, [r7, #60]	; 0x3c
  return(result);
 800351a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800351c:	677b      	str	r3, [r7, #116]	; 0x74
 800351e:	2301      	movs	r3, #1
 8003520:	643b      	str	r3, [r7, #64]	; 0x40
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003522:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003524:	f383 8810 	msr	PRIMASK, r3
}
 8003528:	46c0      	nop			; (mov r8, r8)
 800352a:	687b      	ldr	r3, [r7, #4]
 800352c:	681b      	ldr	r3, [r3, #0]
 800352e:	689a      	ldr	r2, [r3, #8]
 8003530:	687b      	ldr	r3, [r7, #4]
 8003532:	681b      	ldr	r3, [r3, #0]
 8003534:	2101      	movs	r1, #1
 8003536:	438a      	bics	r2, r1
 8003538:	609a      	str	r2, [r3, #8]
 800353a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800353c:	647b      	str	r3, [r7, #68]	; 0x44
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800353e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003540:	f383 8810 	msr	PRIMASK, r3
}
 8003544:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003546:	f3ef 8310 	mrs	r3, PRIMASK
 800354a:	64bb      	str	r3, [r7, #72]	; 0x48
  return(result);
 800354c:	6cbb      	ldr	r3, [r7, #72]	; 0x48

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800354e:	673b      	str	r3, [r7, #112]	; 0x70
 8003550:	2301      	movs	r3, #1
 8003552:	64fb      	str	r3, [r7, #76]	; 0x4c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003554:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003556:	f383 8810 	msr	PRIMASK, r3
}
 800355a:	46c0      	nop			; (mov r8, r8)
 800355c:	687b      	ldr	r3, [r7, #4]
 800355e:	681b      	ldr	r3, [r3, #0]
 8003560:	689a      	ldr	r2, [r3, #8]
 8003562:	687b      	ldr	r3, [r7, #4]
 8003564:	681b      	ldr	r3, [r3, #0]
 8003566:	2140      	movs	r1, #64	; 0x40
 8003568:	438a      	bics	r2, r1
 800356a:	609a      	str	r2, [r3, #8]
 800356c:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800356e:	653b      	str	r3, [r7, #80]	; 0x50
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003570:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003572:	f383 8810 	msr	PRIMASK, r3
}
 8003576:	46c0      	nop			; (mov r8, r8)

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8003578:	687b      	ldr	r3, [r7, #4]
 800357a:	2280      	movs	r2, #128	; 0x80
 800357c:	2120      	movs	r1, #32
 800357e:	5099      	str	r1, [r3, r2]
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003580:	687b      	ldr	r3, [r7, #4]
 8003582:	2200      	movs	r2, #0
 8003584:	661a      	str	r2, [r3, #96]	; 0x60
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003586:	f3ef 8310 	mrs	r3, PRIMASK
 800358a:	657b      	str	r3, [r7, #84]	; 0x54
  return(result);
 800358c:	6d7b      	ldr	r3, [r7, #84]	; 0x54

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800358e:	66fb      	str	r3, [r7, #108]	; 0x6c
 8003590:	2301      	movs	r3, #1
 8003592:	65bb      	str	r3, [r7, #88]	; 0x58
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003594:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8003596:	f383 8810 	msr	PRIMASK, r3
}
 800359a:	46c0      	nop			; (mov r8, r8)
 800359c:	687b      	ldr	r3, [r7, #4]
 800359e:	681b      	ldr	r3, [r3, #0]
 80035a0:	681a      	ldr	r2, [r3, #0]
 80035a2:	687b      	ldr	r3, [r7, #4]
 80035a4:	681b      	ldr	r3, [r3, #0]
 80035a6:	2110      	movs	r1, #16
 80035a8:	438a      	bics	r2, r1
 80035aa:	601a      	str	r2, [r3, #0]
 80035ac:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80035ae:	65fb      	str	r3, [r7, #92]	; 0x5c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80035b0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80035b2:	f383 8810 	msr	PRIMASK, r3
}
 80035b6:	46c0      	nop			; (mov r8, r8)

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80035b8:	687b      	ldr	r3, [r7, #4]
 80035ba:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80035bc:	0018      	movs	r0, r3
 80035be:	f7fd fb97 	bl	8000cf0 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80035c2:	687b      	ldr	r3, [r7, #4]
 80035c4:	2202      	movs	r2, #2
 80035c6:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80035c8:	687b      	ldr	r3, [r7, #4]
 80035ca:	2258      	movs	r2, #88	; 0x58
 80035cc:	5a9a      	ldrh	r2, [r3, r2]
 80035ce:	687b      	ldr	r3, [r7, #4]
 80035d0:	215a      	movs	r1, #90	; 0x5a
 80035d2:	5a5b      	ldrh	r3, [r3, r1]
 80035d4:	b29b      	uxth	r3, r3
 80035d6:	1ad3      	subs	r3, r2, r3
 80035d8:	b29a      	uxth	r2, r3
 80035da:	687b      	ldr	r3, [r7, #4]
 80035dc:	0011      	movs	r1, r2
 80035de:	0018      	movs	r0, r3
 80035e0:	f000 f8e0 	bl	80037a4 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 80035e4:	e0c2      	b.n	800376c <HAL_UART_IRQHandler+0x5a8>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80035e6:	687b      	ldr	r3, [r7, #4]
 80035e8:	2258      	movs	r2, #88	; 0x58
 80035ea:	5a99      	ldrh	r1, [r3, r2]
 80035ec:	687b      	ldr	r3, [r7, #4]
 80035ee:	225a      	movs	r2, #90	; 0x5a
 80035f0:	5a9b      	ldrh	r3, [r3, r2]
 80035f2:	b29a      	uxth	r2, r3
 80035f4:	208e      	movs	r0, #142	; 0x8e
 80035f6:	183b      	adds	r3, r7, r0
 80035f8:	1a8a      	subs	r2, r1, r2
 80035fa:	801a      	strh	r2, [r3, #0]
      if ((huart->RxXferCount > 0U)
 80035fc:	687b      	ldr	r3, [r7, #4]
 80035fe:	225a      	movs	r2, #90	; 0x5a
 8003600:	5a9b      	ldrh	r3, [r3, r2]
 8003602:	b29b      	uxth	r3, r3
 8003604:	2b00      	cmp	r3, #0
 8003606:	d100      	bne.n	800360a <HAL_UART_IRQHandler+0x446>
 8003608:	e0b2      	b.n	8003770 <HAL_UART_IRQHandler+0x5ac>
          && (nb_rx_data > 0U))
 800360a:	183b      	adds	r3, r7, r0
 800360c:	881b      	ldrh	r3, [r3, #0]
 800360e:	2b00      	cmp	r3, #0
 8003610:	d100      	bne.n	8003614 <HAL_UART_IRQHandler+0x450>
 8003612:	e0ad      	b.n	8003770 <HAL_UART_IRQHandler+0x5ac>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003614:	f3ef 8310 	mrs	r3, PRIMASK
 8003618:	60fb      	str	r3, [r7, #12]
  return(result);
 800361a:	68fb      	ldr	r3, [r7, #12]
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800361c:	2488      	movs	r4, #136	; 0x88
 800361e:	193a      	adds	r2, r7, r4
 8003620:	6013      	str	r3, [r2, #0]
 8003622:	2301      	movs	r3, #1
 8003624:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003626:	693b      	ldr	r3, [r7, #16]
 8003628:	f383 8810 	msr	PRIMASK, r3
}
 800362c:	46c0      	nop			; (mov r8, r8)
 800362e:	687b      	ldr	r3, [r7, #4]
 8003630:	681b      	ldr	r3, [r3, #0]
 8003632:	681a      	ldr	r2, [r3, #0]
 8003634:	687b      	ldr	r3, [r7, #4]
 8003636:	681b      	ldr	r3, [r3, #0]
 8003638:	4951      	ldr	r1, [pc, #324]	; (8003780 <HAL_UART_IRQHandler+0x5bc>)
 800363a:	400a      	ands	r2, r1
 800363c:	601a      	str	r2, [r3, #0]
 800363e:	193b      	adds	r3, r7, r4
 8003640:	681b      	ldr	r3, [r3, #0]
 8003642:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003644:	697b      	ldr	r3, [r7, #20]
 8003646:	f383 8810 	msr	PRIMASK, r3
}
 800364a:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800364c:	f3ef 8310 	mrs	r3, PRIMASK
 8003650:	61bb      	str	r3, [r7, #24]
  return(result);
 8003652:	69bb      	ldr	r3, [r7, #24]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003654:	2484      	movs	r4, #132	; 0x84
 8003656:	193a      	adds	r2, r7, r4
 8003658:	6013      	str	r3, [r2, #0]
 800365a:	2301      	movs	r3, #1
 800365c:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800365e:	69fb      	ldr	r3, [r7, #28]
 8003660:	f383 8810 	msr	PRIMASK, r3
}
 8003664:	46c0      	nop			; (mov r8, r8)
 8003666:	687b      	ldr	r3, [r7, #4]
 8003668:	681b      	ldr	r3, [r3, #0]
 800366a:	689a      	ldr	r2, [r3, #8]
 800366c:	687b      	ldr	r3, [r7, #4]
 800366e:	681b      	ldr	r3, [r3, #0]
 8003670:	2101      	movs	r1, #1
 8003672:	438a      	bics	r2, r1
 8003674:	609a      	str	r2, [r3, #8]
 8003676:	193b      	adds	r3, r7, r4
 8003678:	681b      	ldr	r3, [r3, #0]
 800367a:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800367c:	6a3b      	ldr	r3, [r7, #32]
 800367e:	f383 8810 	msr	PRIMASK, r3
}
 8003682:	46c0      	nop			; (mov r8, r8)

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8003684:	687b      	ldr	r3, [r7, #4]
 8003686:	2280      	movs	r2, #128	; 0x80
 8003688:	2120      	movs	r1, #32
 800368a:	5099      	str	r1, [r3, r2]
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800368c:	687b      	ldr	r3, [r7, #4]
 800368e:	2200      	movs	r2, #0
 8003690:	661a      	str	r2, [r3, #96]	; 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8003692:	687b      	ldr	r3, [r7, #4]
 8003694:	2200      	movs	r2, #0
 8003696:	669a      	str	r2, [r3, #104]	; 0x68
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003698:	f3ef 8310 	mrs	r3, PRIMASK
 800369c:	627b      	str	r3, [r7, #36]	; 0x24
  return(result);
 800369e:	6a7b      	ldr	r3, [r7, #36]	; 0x24

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80036a0:	2480      	movs	r4, #128	; 0x80
 80036a2:	193a      	adds	r2, r7, r4
 80036a4:	6013      	str	r3, [r2, #0]
 80036a6:	2301      	movs	r3, #1
 80036a8:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80036aa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80036ac:	f383 8810 	msr	PRIMASK, r3
}
 80036b0:	46c0      	nop			; (mov r8, r8)
 80036b2:	687b      	ldr	r3, [r7, #4]
 80036b4:	681b      	ldr	r3, [r3, #0]
 80036b6:	681a      	ldr	r2, [r3, #0]
 80036b8:	687b      	ldr	r3, [r7, #4]
 80036ba:	681b      	ldr	r3, [r3, #0]
 80036bc:	2110      	movs	r1, #16
 80036be:	438a      	bics	r2, r1
 80036c0:	601a      	str	r2, [r3, #0]
 80036c2:	193b      	adds	r3, r7, r4
 80036c4:	681b      	ldr	r3, [r3, #0]
 80036c6:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80036c8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80036ca:	f383 8810 	msr	PRIMASK, r3
}
 80036ce:	46c0      	nop			; (mov r8, r8)

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80036d0:	687b      	ldr	r3, [r7, #4]
 80036d2:	2202      	movs	r2, #2
 80036d4:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80036d6:	183b      	adds	r3, r7, r0
 80036d8:	881a      	ldrh	r2, [r3, #0]
 80036da:	687b      	ldr	r3, [r7, #4]
 80036dc:	0011      	movs	r1, r2
 80036de:	0018      	movs	r0, r3
 80036e0:	f000 f860 	bl	80037a4 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 80036e4:	e044      	b.n	8003770 <HAL_UART_IRQHandler+0x5ac>
  }
#if defined(USART_CR1_UESM)
#if defined(USART_CR3_WUFIE)

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 80036e6:	23a4      	movs	r3, #164	; 0xa4
 80036e8:	18fb      	adds	r3, r7, r3
 80036ea:	681a      	ldr	r2, [r3, #0]
 80036ec:	2380      	movs	r3, #128	; 0x80
 80036ee:	035b      	lsls	r3, r3, #13
 80036f0:	4013      	ands	r3, r2
 80036f2:	d010      	beq.n	8003716 <HAL_UART_IRQHandler+0x552>
 80036f4:	239c      	movs	r3, #156	; 0x9c
 80036f6:	18fb      	adds	r3, r7, r3
 80036f8:	681a      	ldr	r2, [r3, #0]
 80036fa:	2380      	movs	r3, #128	; 0x80
 80036fc:	03db      	lsls	r3, r3, #15
 80036fe:	4013      	ands	r3, r2
 8003700:	d009      	beq.n	8003716 <HAL_UART_IRQHandler+0x552>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8003702:	687b      	ldr	r3, [r7, #4]
 8003704:	681b      	ldr	r3, [r3, #0]
 8003706:	2280      	movs	r2, #128	; 0x80
 8003708:	0352      	lsls	r2, r2, #13
 800370a:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 800370c:	687b      	ldr	r3, [r7, #4]
 800370e:	0018      	movs	r0, r3
 8003710:	f000 ff82 	bl	8004618 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8003714:	e02f      	b.n	8003776 <HAL_UART_IRQHandler+0x5b2>
  }
#endif /* USART_CR3_WUFIE */
#endif /* USART_CR1_UESM */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 8003716:	23a4      	movs	r3, #164	; 0xa4
 8003718:	18fb      	adds	r3, r7, r3
 800371a:	681b      	ldr	r3, [r3, #0]
 800371c:	2280      	movs	r2, #128	; 0x80
 800371e:	4013      	ands	r3, r2
 8003720:	d00f      	beq.n	8003742 <HAL_UART_IRQHandler+0x57e>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 8003722:	23a0      	movs	r3, #160	; 0xa0
 8003724:	18fb      	adds	r3, r7, r3
 8003726:	681b      	ldr	r3, [r3, #0]
 8003728:	2280      	movs	r2, #128	; 0x80
 800372a:	4013      	ands	r3, r2
 800372c:	d009      	beq.n	8003742 <HAL_UART_IRQHandler+0x57e>
  {
    if (huart->TxISR != NULL)
 800372e:	687b      	ldr	r3, [r7, #4]
 8003730:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003732:	2b00      	cmp	r3, #0
 8003734:	d01e      	beq.n	8003774 <HAL_UART_IRQHandler+0x5b0>
    {
      huart->TxISR(huart);
 8003736:	687b      	ldr	r3, [r7, #4]
 8003738:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800373a:	687a      	ldr	r2, [r7, #4]
 800373c:	0010      	movs	r0, r2
 800373e:	4798      	blx	r3
    }
    return;
 8003740:	e018      	b.n	8003774 <HAL_UART_IRQHandler+0x5b0>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8003742:	23a4      	movs	r3, #164	; 0xa4
 8003744:	18fb      	adds	r3, r7, r3
 8003746:	681b      	ldr	r3, [r3, #0]
 8003748:	2240      	movs	r2, #64	; 0x40
 800374a:	4013      	ands	r3, r2
 800374c:	d013      	beq.n	8003776 <HAL_UART_IRQHandler+0x5b2>
 800374e:	23a0      	movs	r3, #160	; 0xa0
 8003750:	18fb      	adds	r3, r7, r3
 8003752:	681b      	ldr	r3, [r3, #0]
 8003754:	2240      	movs	r2, #64	; 0x40
 8003756:	4013      	ands	r3, r2
 8003758:	d00d      	beq.n	8003776 <HAL_UART_IRQHandler+0x5b2>
  {
    UART_EndTransmit_IT(huart);
 800375a:	687b      	ldr	r3, [r7, #4]
 800375c:	0018      	movs	r0, r3
 800375e:	f000 fd78 	bl	8004252 <UART_EndTransmit_IT>
    return;
 8003762:	e008      	b.n	8003776 <HAL_UART_IRQHandler+0x5b2>
      return;
 8003764:	46c0      	nop			; (mov r8, r8)
 8003766:	e006      	b.n	8003776 <HAL_UART_IRQHandler+0x5b2>
    return;
 8003768:	46c0      	nop			; (mov r8, r8)
 800376a:	e004      	b.n	8003776 <HAL_UART_IRQHandler+0x5b2>
      return;
 800376c:	46c0      	nop			; (mov r8, r8)
 800376e:	e002      	b.n	8003776 <HAL_UART_IRQHandler+0x5b2>
      return;
 8003770:	46c0      	nop			; (mov r8, r8)
 8003772:	e000      	b.n	8003776 <HAL_UART_IRQHandler+0x5b2>
    return;
 8003774:	46c0      	nop			; (mov r8, r8)
  }

}
 8003776:	46bd      	mov	sp, r7
 8003778:	b02b      	add	sp, #172	; 0xac
 800377a:	bd90      	pop	{r4, r7, pc}
 800377c:	fffffeff 	.word	0xfffffeff
 8003780:	fffffedf 	.word	0xfffffedf

08003784 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8003784:	b580      	push	{r7, lr}
 8003786:	b082      	sub	sp, #8
 8003788:	af00      	add	r7, sp, #0
 800378a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 800378c:	46c0      	nop			; (mov r8, r8)
 800378e:	46bd      	mov	sp, r7
 8003790:	b002      	add	sp, #8
 8003792:	bd80      	pop	{r7, pc}

08003794 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8003794:	b580      	push	{r7, lr}
 8003796:	b082      	sub	sp, #8
 8003798:	af00      	add	r7, sp, #0
 800379a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 800379c:	46c0      	nop			; (mov r8, r8)
 800379e:	46bd      	mov	sp, r7
 80037a0:	b002      	add	sp, #8
 80037a2:	bd80      	pop	{r7, pc}

080037a4 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80037a4:	b580      	push	{r7, lr}
 80037a6:	b082      	sub	sp, #8
 80037a8:	af00      	add	r7, sp, #0
 80037aa:	6078      	str	r0, [r7, #4]
 80037ac:	000a      	movs	r2, r1
 80037ae:	1cbb      	adds	r3, r7, #2
 80037b0:	801a      	strh	r2, [r3, #0]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80037b2:	46c0      	nop			; (mov r8, r8)
 80037b4:	46bd      	mov	sp, r7
 80037b6:	b002      	add	sp, #8
 80037b8:	bd80      	pop	{r7, pc}
	...

080037bc <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80037bc:	b580      	push	{r7, lr}
 80037be:	b088      	sub	sp, #32
 80037c0:	af00      	add	r7, sp, #0
 80037c2:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80037c4:	231e      	movs	r3, #30
 80037c6:	18fb      	adds	r3, r7, r3
 80037c8:	2200      	movs	r2, #0
 80037ca:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80037cc:	687b      	ldr	r3, [r7, #4]
 80037ce:	689a      	ldr	r2, [r3, #8]
 80037d0:	687b      	ldr	r3, [r7, #4]
 80037d2:	691b      	ldr	r3, [r3, #16]
 80037d4:	431a      	orrs	r2, r3
 80037d6:	687b      	ldr	r3, [r7, #4]
 80037d8:	695b      	ldr	r3, [r3, #20]
 80037da:	431a      	orrs	r2, r3
 80037dc:	687b      	ldr	r3, [r7, #4]
 80037de:	69db      	ldr	r3, [r3, #28]
 80037e0:	4313      	orrs	r3, r2
 80037e2:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80037e4:	687b      	ldr	r3, [r7, #4]
 80037e6:	681b      	ldr	r3, [r3, #0]
 80037e8:	681b      	ldr	r3, [r3, #0]
 80037ea:	4aaf      	ldr	r2, [pc, #700]	; (8003aa8 <UART_SetConfig+0x2ec>)
 80037ec:	4013      	ands	r3, r2
 80037ee:	0019      	movs	r1, r3
 80037f0:	687b      	ldr	r3, [r7, #4]
 80037f2:	681b      	ldr	r3, [r3, #0]
 80037f4:	697a      	ldr	r2, [r7, #20]
 80037f6:	430a      	orrs	r2, r1
 80037f8:	601a      	str	r2, [r3, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80037fa:	687b      	ldr	r3, [r7, #4]
 80037fc:	681b      	ldr	r3, [r3, #0]
 80037fe:	685b      	ldr	r3, [r3, #4]
 8003800:	4aaa      	ldr	r2, [pc, #680]	; (8003aac <UART_SetConfig+0x2f0>)
 8003802:	4013      	ands	r3, r2
 8003804:	0019      	movs	r1, r3
 8003806:	687b      	ldr	r3, [r7, #4]
 8003808:	68da      	ldr	r2, [r3, #12]
 800380a:	687b      	ldr	r3, [r7, #4]
 800380c:	681b      	ldr	r3, [r3, #0]
 800380e:	430a      	orrs	r2, r1
 8003810:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8003812:	687b      	ldr	r3, [r7, #4]
 8003814:	699b      	ldr	r3, [r3, #24]
 8003816:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8003818:	687b      	ldr	r3, [r7, #4]
 800381a:	6a1b      	ldr	r3, [r3, #32]
 800381c:	697a      	ldr	r2, [r7, #20]
 800381e:	4313      	orrs	r3, r2
 8003820:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8003822:	687b      	ldr	r3, [r7, #4]
 8003824:	681b      	ldr	r3, [r3, #0]
 8003826:	689b      	ldr	r3, [r3, #8]
 8003828:	4aa1      	ldr	r2, [pc, #644]	; (8003ab0 <UART_SetConfig+0x2f4>)
 800382a:	4013      	ands	r3, r2
 800382c:	0019      	movs	r1, r3
 800382e:	687b      	ldr	r3, [r7, #4]
 8003830:	681b      	ldr	r3, [r3, #0]
 8003832:	697a      	ldr	r2, [r7, #20]
 8003834:	430a      	orrs	r2, r1
 8003836:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8003838:	687b      	ldr	r3, [r7, #4]
 800383a:	681b      	ldr	r3, [r3, #0]
 800383c:	4a9d      	ldr	r2, [pc, #628]	; (8003ab4 <UART_SetConfig+0x2f8>)
 800383e:	4293      	cmp	r3, r2
 8003840:	d127      	bne.n	8003892 <UART_SetConfig+0xd6>
 8003842:	4b9d      	ldr	r3, [pc, #628]	; (8003ab8 <UART_SetConfig+0x2fc>)
 8003844:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003846:	2203      	movs	r2, #3
 8003848:	4013      	ands	r3, r2
 800384a:	2b03      	cmp	r3, #3
 800384c:	d00d      	beq.n	800386a <UART_SetConfig+0xae>
 800384e:	d81b      	bhi.n	8003888 <UART_SetConfig+0xcc>
 8003850:	2b02      	cmp	r3, #2
 8003852:	d014      	beq.n	800387e <UART_SetConfig+0xc2>
 8003854:	d818      	bhi.n	8003888 <UART_SetConfig+0xcc>
 8003856:	2b00      	cmp	r3, #0
 8003858:	d002      	beq.n	8003860 <UART_SetConfig+0xa4>
 800385a:	2b01      	cmp	r3, #1
 800385c:	d00a      	beq.n	8003874 <UART_SetConfig+0xb8>
 800385e:	e013      	b.n	8003888 <UART_SetConfig+0xcc>
 8003860:	231f      	movs	r3, #31
 8003862:	18fb      	adds	r3, r7, r3
 8003864:	2200      	movs	r2, #0
 8003866:	701a      	strb	r2, [r3, #0]
 8003868:	e065      	b.n	8003936 <UART_SetConfig+0x17a>
 800386a:	231f      	movs	r3, #31
 800386c:	18fb      	adds	r3, r7, r3
 800386e:	2202      	movs	r2, #2
 8003870:	701a      	strb	r2, [r3, #0]
 8003872:	e060      	b.n	8003936 <UART_SetConfig+0x17a>
 8003874:	231f      	movs	r3, #31
 8003876:	18fb      	adds	r3, r7, r3
 8003878:	2204      	movs	r2, #4
 800387a:	701a      	strb	r2, [r3, #0]
 800387c:	e05b      	b.n	8003936 <UART_SetConfig+0x17a>
 800387e:	231f      	movs	r3, #31
 8003880:	18fb      	adds	r3, r7, r3
 8003882:	2208      	movs	r2, #8
 8003884:	701a      	strb	r2, [r3, #0]
 8003886:	e056      	b.n	8003936 <UART_SetConfig+0x17a>
 8003888:	231f      	movs	r3, #31
 800388a:	18fb      	adds	r3, r7, r3
 800388c:	2210      	movs	r2, #16
 800388e:	701a      	strb	r2, [r3, #0]
 8003890:	e051      	b.n	8003936 <UART_SetConfig+0x17a>
 8003892:	687b      	ldr	r3, [r7, #4]
 8003894:	681b      	ldr	r3, [r3, #0]
 8003896:	4a89      	ldr	r2, [pc, #548]	; (8003abc <UART_SetConfig+0x300>)
 8003898:	4293      	cmp	r3, r2
 800389a:	d134      	bne.n	8003906 <UART_SetConfig+0x14a>
 800389c:	4b86      	ldr	r3, [pc, #536]	; (8003ab8 <UART_SetConfig+0x2fc>)
 800389e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80038a0:	23c0      	movs	r3, #192	; 0xc0
 80038a2:	029b      	lsls	r3, r3, #10
 80038a4:	4013      	ands	r3, r2
 80038a6:	22c0      	movs	r2, #192	; 0xc0
 80038a8:	0292      	lsls	r2, r2, #10
 80038aa:	4293      	cmp	r3, r2
 80038ac:	d017      	beq.n	80038de <UART_SetConfig+0x122>
 80038ae:	22c0      	movs	r2, #192	; 0xc0
 80038b0:	0292      	lsls	r2, r2, #10
 80038b2:	4293      	cmp	r3, r2
 80038b4:	d822      	bhi.n	80038fc <UART_SetConfig+0x140>
 80038b6:	2280      	movs	r2, #128	; 0x80
 80038b8:	0292      	lsls	r2, r2, #10
 80038ba:	4293      	cmp	r3, r2
 80038bc:	d019      	beq.n	80038f2 <UART_SetConfig+0x136>
 80038be:	2280      	movs	r2, #128	; 0x80
 80038c0:	0292      	lsls	r2, r2, #10
 80038c2:	4293      	cmp	r3, r2
 80038c4:	d81a      	bhi.n	80038fc <UART_SetConfig+0x140>
 80038c6:	2b00      	cmp	r3, #0
 80038c8:	d004      	beq.n	80038d4 <UART_SetConfig+0x118>
 80038ca:	2280      	movs	r2, #128	; 0x80
 80038cc:	0252      	lsls	r2, r2, #9
 80038ce:	4293      	cmp	r3, r2
 80038d0:	d00a      	beq.n	80038e8 <UART_SetConfig+0x12c>
 80038d2:	e013      	b.n	80038fc <UART_SetConfig+0x140>
 80038d4:	231f      	movs	r3, #31
 80038d6:	18fb      	adds	r3, r7, r3
 80038d8:	2200      	movs	r2, #0
 80038da:	701a      	strb	r2, [r3, #0]
 80038dc:	e02b      	b.n	8003936 <UART_SetConfig+0x17a>
 80038de:	231f      	movs	r3, #31
 80038e0:	18fb      	adds	r3, r7, r3
 80038e2:	2202      	movs	r2, #2
 80038e4:	701a      	strb	r2, [r3, #0]
 80038e6:	e026      	b.n	8003936 <UART_SetConfig+0x17a>
 80038e8:	231f      	movs	r3, #31
 80038ea:	18fb      	adds	r3, r7, r3
 80038ec:	2204      	movs	r2, #4
 80038ee:	701a      	strb	r2, [r3, #0]
 80038f0:	e021      	b.n	8003936 <UART_SetConfig+0x17a>
 80038f2:	231f      	movs	r3, #31
 80038f4:	18fb      	adds	r3, r7, r3
 80038f6:	2208      	movs	r2, #8
 80038f8:	701a      	strb	r2, [r3, #0]
 80038fa:	e01c      	b.n	8003936 <UART_SetConfig+0x17a>
 80038fc:	231f      	movs	r3, #31
 80038fe:	18fb      	adds	r3, r7, r3
 8003900:	2210      	movs	r2, #16
 8003902:	701a      	strb	r2, [r3, #0]
 8003904:	e017      	b.n	8003936 <UART_SetConfig+0x17a>
 8003906:	687b      	ldr	r3, [r7, #4]
 8003908:	681b      	ldr	r3, [r3, #0]
 800390a:	4a6d      	ldr	r2, [pc, #436]	; (8003ac0 <UART_SetConfig+0x304>)
 800390c:	4293      	cmp	r3, r2
 800390e:	d104      	bne.n	800391a <UART_SetConfig+0x15e>
 8003910:	231f      	movs	r3, #31
 8003912:	18fb      	adds	r3, r7, r3
 8003914:	2200      	movs	r2, #0
 8003916:	701a      	strb	r2, [r3, #0]
 8003918:	e00d      	b.n	8003936 <UART_SetConfig+0x17a>
 800391a:	687b      	ldr	r3, [r7, #4]
 800391c:	681b      	ldr	r3, [r3, #0]
 800391e:	4a69      	ldr	r2, [pc, #420]	; (8003ac4 <UART_SetConfig+0x308>)
 8003920:	4293      	cmp	r3, r2
 8003922:	d104      	bne.n	800392e <UART_SetConfig+0x172>
 8003924:	231f      	movs	r3, #31
 8003926:	18fb      	adds	r3, r7, r3
 8003928:	2200      	movs	r2, #0
 800392a:	701a      	strb	r2, [r3, #0]
 800392c:	e003      	b.n	8003936 <UART_SetConfig+0x17a>
 800392e:	231f      	movs	r3, #31
 8003930:	18fb      	adds	r3, r7, r3
 8003932:	2210      	movs	r2, #16
 8003934:	701a      	strb	r2, [r3, #0]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003936:	687b      	ldr	r3, [r7, #4]
 8003938:	69da      	ldr	r2, [r3, #28]
 800393a:	2380      	movs	r3, #128	; 0x80
 800393c:	021b      	lsls	r3, r3, #8
 800393e:	429a      	cmp	r2, r3
 8003940:	d15c      	bne.n	80039fc <UART_SetConfig+0x240>
  {
    switch (clocksource)
 8003942:	231f      	movs	r3, #31
 8003944:	18fb      	adds	r3, r7, r3
 8003946:	781b      	ldrb	r3, [r3, #0]
 8003948:	2b08      	cmp	r3, #8
 800394a:	d015      	beq.n	8003978 <UART_SetConfig+0x1bc>
 800394c:	dc18      	bgt.n	8003980 <UART_SetConfig+0x1c4>
 800394e:	2b04      	cmp	r3, #4
 8003950:	d00d      	beq.n	800396e <UART_SetConfig+0x1b2>
 8003952:	dc15      	bgt.n	8003980 <UART_SetConfig+0x1c4>
 8003954:	2b00      	cmp	r3, #0
 8003956:	d002      	beq.n	800395e <UART_SetConfig+0x1a2>
 8003958:	2b02      	cmp	r3, #2
 800395a:	d005      	beq.n	8003968 <UART_SetConfig+0x1ac>
 800395c:	e010      	b.n	8003980 <UART_SetConfig+0x1c4>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800395e:	f7fe f8b7 	bl	8001ad0 <HAL_RCC_GetPCLK1Freq>
 8003962:	0003      	movs	r3, r0
 8003964:	61bb      	str	r3, [r7, #24]
        break;
 8003966:	e012      	b.n	800398e <UART_SetConfig+0x1d2>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003968:	4b57      	ldr	r3, [pc, #348]	; (8003ac8 <UART_SetConfig+0x30c>)
 800396a:	61bb      	str	r3, [r7, #24]
        break;
 800396c:	e00f      	b.n	800398e <UART_SetConfig+0x1d2>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800396e:	f7fe f833 	bl	80019d8 <HAL_RCC_GetSysClockFreq>
 8003972:	0003      	movs	r3, r0
 8003974:	61bb      	str	r3, [r7, #24]
        break;
 8003976:	e00a      	b.n	800398e <UART_SetConfig+0x1d2>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003978:	2380      	movs	r3, #128	; 0x80
 800397a:	021b      	lsls	r3, r3, #8
 800397c:	61bb      	str	r3, [r7, #24]
        break;
 800397e:	e006      	b.n	800398e <UART_SetConfig+0x1d2>
      default:
        pclk = 0U;
 8003980:	2300      	movs	r3, #0
 8003982:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8003984:	231e      	movs	r3, #30
 8003986:	18fb      	adds	r3, r7, r3
 8003988:	2201      	movs	r2, #1
 800398a:	701a      	strb	r2, [r3, #0]
        break;
 800398c:	46c0      	nop			; (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800398e:	69bb      	ldr	r3, [r7, #24]
 8003990:	2b00      	cmp	r3, #0
 8003992:	d100      	bne.n	8003996 <UART_SetConfig+0x1da>
 8003994:	e07a      	b.n	8003a8c <UART_SetConfig+0x2d0>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8003996:	69bb      	ldr	r3, [r7, #24]
 8003998:	005a      	lsls	r2, r3, #1
 800399a:	687b      	ldr	r3, [r7, #4]
 800399c:	685b      	ldr	r3, [r3, #4]
 800399e:	085b      	lsrs	r3, r3, #1
 80039a0:	18d2      	adds	r2, r2, r3
 80039a2:	687b      	ldr	r3, [r7, #4]
 80039a4:	685b      	ldr	r3, [r3, #4]
 80039a6:	0019      	movs	r1, r3
 80039a8:	0010      	movs	r0, r2
 80039aa:	f7fc fbb5 	bl	8000118 <__udivsi3>
 80039ae:	0003      	movs	r3, r0
 80039b0:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80039b2:	693b      	ldr	r3, [r7, #16]
 80039b4:	2b0f      	cmp	r3, #15
 80039b6:	d91c      	bls.n	80039f2 <UART_SetConfig+0x236>
 80039b8:	693a      	ldr	r2, [r7, #16]
 80039ba:	2380      	movs	r3, #128	; 0x80
 80039bc:	025b      	lsls	r3, r3, #9
 80039be:	429a      	cmp	r2, r3
 80039c0:	d217      	bcs.n	80039f2 <UART_SetConfig+0x236>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80039c2:	693b      	ldr	r3, [r7, #16]
 80039c4:	b29a      	uxth	r2, r3
 80039c6:	200e      	movs	r0, #14
 80039c8:	183b      	adds	r3, r7, r0
 80039ca:	210f      	movs	r1, #15
 80039cc:	438a      	bics	r2, r1
 80039ce:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80039d0:	693b      	ldr	r3, [r7, #16]
 80039d2:	085b      	lsrs	r3, r3, #1
 80039d4:	b29b      	uxth	r3, r3
 80039d6:	2207      	movs	r2, #7
 80039d8:	4013      	ands	r3, r2
 80039da:	b299      	uxth	r1, r3
 80039dc:	183b      	adds	r3, r7, r0
 80039de:	183a      	adds	r2, r7, r0
 80039e0:	8812      	ldrh	r2, [r2, #0]
 80039e2:	430a      	orrs	r2, r1
 80039e4:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
 80039e6:	687b      	ldr	r3, [r7, #4]
 80039e8:	681b      	ldr	r3, [r3, #0]
 80039ea:	183a      	adds	r2, r7, r0
 80039ec:	8812      	ldrh	r2, [r2, #0]
 80039ee:	60da      	str	r2, [r3, #12]
 80039f0:	e04c      	b.n	8003a8c <UART_SetConfig+0x2d0>
      }
      else
      {
        ret = HAL_ERROR;
 80039f2:	231e      	movs	r3, #30
 80039f4:	18fb      	adds	r3, r7, r3
 80039f6:	2201      	movs	r2, #1
 80039f8:	701a      	strb	r2, [r3, #0]
 80039fa:	e047      	b.n	8003a8c <UART_SetConfig+0x2d0>
      }
    }
  }
  else
  {
    switch (clocksource)
 80039fc:	231f      	movs	r3, #31
 80039fe:	18fb      	adds	r3, r7, r3
 8003a00:	781b      	ldrb	r3, [r3, #0]
 8003a02:	2b08      	cmp	r3, #8
 8003a04:	d015      	beq.n	8003a32 <UART_SetConfig+0x276>
 8003a06:	dc18      	bgt.n	8003a3a <UART_SetConfig+0x27e>
 8003a08:	2b04      	cmp	r3, #4
 8003a0a:	d00d      	beq.n	8003a28 <UART_SetConfig+0x26c>
 8003a0c:	dc15      	bgt.n	8003a3a <UART_SetConfig+0x27e>
 8003a0e:	2b00      	cmp	r3, #0
 8003a10:	d002      	beq.n	8003a18 <UART_SetConfig+0x25c>
 8003a12:	2b02      	cmp	r3, #2
 8003a14:	d005      	beq.n	8003a22 <UART_SetConfig+0x266>
 8003a16:	e010      	b.n	8003a3a <UART_SetConfig+0x27e>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003a18:	f7fe f85a 	bl	8001ad0 <HAL_RCC_GetPCLK1Freq>
 8003a1c:	0003      	movs	r3, r0
 8003a1e:	61bb      	str	r3, [r7, #24]
        break;
 8003a20:	e012      	b.n	8003a48 <UART_SetConfig+0x28c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003a22:	4b29      	ldr	r3, [pc, #164]	; (8003ac8 <UART_SetConfig+0x30c>)
 8003a24:	61bb      	str	r3, [r7, #24]
        break;
 8003a26:	e00f      	b.n	8003a48 <UART_SetConfig+0x28c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003a28:	f7fd ffd6 	bl	80019d8 <HAL_RCC_GetSysClockFreq>
 8003a2c:	0003      	movs	r3, r0
 8003a2e:	61bb      	str	r3, [r7, #24]
        break;
 8003a30:	e00a      	b.n	8003a48 <UART_SetConfig+0x28c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003a32:	2380      	movs	r3, #128	; 0x80
 8003a34:	021b      	lsls	r3, r3, #8
 8003a36:	61bb      	str	r3, [r7, #24]
        break;
 8003a38:	e006      	b.n	8003a48 <UART_SetConfig+0x28c>
      default:
        pclk = 0U;
 8003a3a:	2300      	movs	r3, #0
 8003a3c:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8003a3e:	231e      	movs	r3, #30
 8003a40:	18fb      	adds	r3, r7, r3
 8003a42:	2201      	movs	r2, #1
 8003a44:	701a      	strb	r2, [r3, #0]
        break;
 8003a46:	46c0      	nop			; (mov r8, r8)
    }

    if (pclk != 0U)
 8003a48:	69bb      	ldr	r3, [r7, #24]
 8003a4a:	2b00      	cmp	r3, #0
 8003a4c:	d01e      	beq.n	8003a8c <UART_SetConfig+0x2d0>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8003a4e:	687b      	ldr	r3, [r7, #4]
 8003a50:	685b      	ldr	r3, [r3, #4]
 8003a52:	085a      	lsrs	r2, r3, #1
 8003a54:	69bb      	ldr	r3, [r7, #24]
 8003a56:	18d2      	adds	r2, r2, r3
 8003a58:	687b      	ldr	r3, [r7, #4]
 8003a5a:	685b      	ldr	r3, [r3, #4]
 8003a5c:	0019      	movs	r1, r3
 8003a5e:	0010      	movs	r0, r2
 8003a60:	f7fc fb5a 	bl	8000118 <__udivsi3>
 8003a64:	0003      	movs	r3, r0
 8003a66:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003a68:	693b      	ldr	r3, [r7, #16]
 8003a6a:	2b0f      	cmp	r3, #15
 8003a6c:	d90a      	bls.n	8003a84 <UART_SetConfig+0x2c8>
 8003a6e:	693a      	ldr	r2, [r7, #16]
 8003a70:	2380      	movs	r3, #128	; 0x80
 8003a72:	025b      	lsls	r3, r3, #9
 8003a74:	429a      	cmp	r2, r3
 8003a76:	d205      	bcs.n	8003a84 <UART_SetConfig+0x2c8>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8003a78:	693b      	ldr	r3, [r7, #16]
 8003a7a:	b29a      	uxth	r2, r3
 8003a7c:	687b      	ldr	r3, [r7, #4]
 8003a7e:	681b      	ldr	r3, [r3, #0]
 8003a80:	60da      	str	r2, [r3, #12]
 8003a82:	e003      	b.n	8003a8c <UART_SetConfig+0x2d0>
      }
      else
      {
        ret = HAL_ERROR;
 8003a84:	231e      	movs	r3, #30
 8003a86:	18fb      	adds	r3, r7, r3
 8003a88:	2201      	movs	r2, #1
 8003a8a:	701a      	strb	r2, [r3, #0]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8003a8c:	687b      	ldr	r3, [r7, #4]
 8003a8e:	2200      	movs	r2, #0
 8003a90:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 8003a92:	687b      	ldr	r3, [r7, #4]
 8003a94:	2200      	movs	r2, #0
 8003a96:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 8003a98:	231e      	movs	r3, #30
 8003a9a:	18fb      	adds	r3, r7, r3
 8003a9c:	781b      	ldrb	r3, [r3, #0]
}
 8003a9e:	0018      	movs	r0, r3
 8003aa0:	46bd      	mov	sp, r7
 8003aa2:	b008      	add	sp, #32
 8003aa4:	bd80      	pop	{r7, pc}
 8003aa6:	46c0      	nop			; (mov r8, r8)
 8003aa8:	efff69f3 	.word	0xefff69f3
 8003aac:	ffffcfff 	.word	0xffffcfff
 8003ab0:	fffff4ff 	.word	0xfffff4ff
 8003ab4:	40013800 	.word	0x40013800
 8003ab8:	40021000 	.word	0x40021000
 8003abc:	40004400 	.word	0x40004400
 8003ac0:	40004800 	.word	0x40004800
 8003ac4:	40004c00 	.word	0x40004c00
 8003ac8:	007a1200 	.word	0x007a1200

08003acc <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8003acc:	b580      	push	{r7, lr}
 8003ace:	b082      	sub	sp, #8
 8003ad0:	af00      	add	r7, sp, #0
 8003ad2:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8003ad4:	687b      	ldr	r3, [r7, #4]
 8003ad6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ad8:	2201      	movs	r2, #1
 8003ada:	4013      	ands	r3, r2
 8003adc:	d00b      	beq.n	8003af6 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8003ade:	687b      	ldr	r3, [r7, #4]
 8003ae0:	681b      	ldr	r3, [r3, #0]
 8003ae2:	685b      	ldr	r3, [r3, #4]
 8003ae4:	4a4a      	ldr	r2, [pc, #296]	; (8003c10 <UART_AdvFeatureConfig+0x144>)
 8003ae6:	4013      	ands	r3, r2
 8003ae8:	0019      	movs	r1, r3
 8003aea:	687b      	ldr	r3, [r7, #4]
 8003aec:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003aee:	687b      	ldr	r3, [r7, #4]
 8003af0:	681b      	ldr	r3, [r3, #0]
 8003af2:	430a      	orrs	r2, r1
 8003af4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8003af6:	687b      	ldr	r3, [r7, #4]
 8003af8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003afa:	2202      	movs	r2, #2
 8003afc:	4013      	ands	r3, r2
 8003afe:	d00b      	beq.n	8003b18 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8003b00:	687b      	ldr	r3, [r7, #4]
 8003b02:	681b      	ldr	r3, [r3, #0]
 8003b04:	685b      	ldr	r3, [r3, #4]
 8003b06:	4a43      	ldr	r2, [pc, #268]	; (8003c14 <UART_AdvFeatureConfig+0x148>)
 8003b08:	4013      	ands	r3, r2
 8003b0a:	0019      	movs	r1, r3
 8003b0c:	687b      	ldr	r3, [r7, #4]
 8003b0e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003b10:	687b      	ldr	r3, [r7, #4]
 8003b12:	681b      	ldr	r3, [r3, #0]
 8003b14:	430a      	orrs	r2, r1
 8003b16:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8003b18:	687b      	ldr	r3, [r7, #4]
 8003b1a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b1c:	2204      	movs	r2, #4
 8003b1e:	4013      	ands	r3, r2
 8003b20:	d00b      	beq.n	8003b3a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8003b22:	687b      	ldr	r3, [r7, #4]
 8003b24:	681b      	ldr	r3, [r3, #0]
 8003b26:	685b      	ldr	r3, [r3, #4]
 8003b28:	4a3b      	ldr	r2, [pc, #236]	; (8003c18 <UART_AdvFeatureConfig+0x14c>)
 8003b2a:	4013      	ands	r3, r2
 8003b2c:	0019      	movs	r1, r3
 8003b2e:	687b      	ldr	r3, [r7, #4]
 8003b30:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003b32:	687b      	ldr	r3, [r7, #4]
 8003b34:	681b      	ldr	r3, [r3, #0]
 8003b36:	430a      	orrs	r2, r1
 8003b38:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8003b3a:	687b      	ldr	r3, [r7, #4]
 8003b3c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b3e:	2208      	movs	r2, #8
 8003b40:	4013      	ands	r3, r2
 8003b42:	d00b      	beq.n	8003b5c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8003b44:	687b      	ldr	r3, [r7, #4]
 8003b46:	681b      	ldr	r3, [r3, #0]
 8003b48:	685b      	ldr	r3, [r3, #4]
 8003b4a:	4a34      	ldr	r2, [pc, #208]	; (8003c1c <UART_AdvFeatureConfig+0x150>)
 8003b4c:	4013      	ands	r3, r2
 8003b4e:	0019      	movs	r1, r3
 8003b50:	687b      	ldr	r3, [r7, #4]
 8003b52:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003b54:	687b      	ldr	r3, [r7, #4]
 8003b56:	681b      	ldr	r3, [r3, #0]
 8003b58:	430a      	orrs	r2, r1
 8003b5a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8003b5c:	687b      	ldr	r3, [r7, #4]
 8003b5e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b60:	2210      	movs	r2, #16
 8003b62:	4013      	ands	r3, r2
 8003b64:	d00b      	beq.n	8003b7e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8003b66:	687b      	ldr	r3, [r7, #4]
 8003b68:	681b      	ldr	r3, [r3, #0]
 8003b6a:	689b      	ldr	r3, [r3, #8]
 8003b6c:	4a2c      	ldr	r2, [pc, #176]	; (8003c20 <UART_AdvFeatureConfig+0x154>)
 8003b6e:	4013      	ands	r3, r2
 8003b70:	0019      	movs	r1, r3
 8003b72:	687b      	ldr	r3, [r7, #4]
 8003b74:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003b76:	687b      	ldr	r3, [r7, #4]
 8003b78:	681b      	ldr	r3, [r3, #0]
 8003b7a:	430a      	orrs	r2, r1
 8003b7c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8003b7e:	687b      	ldr	r3, [r7, #4]
 8003b80:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b82:	2220      	movs	r2, #32
 8003b84:	4013      	ands	r3, r2
 8003b86:	d00b      	beq.n	8003ba0 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8003b88:	687b      	ldr	r3, [r7, #4]
 8003b8a:	681b      	ldr	r3, [r3, #0]
 8003b8c:	689b      	ldr	r3, [r3, #8]
 8003b8e:	4a25      	ldr	r2, [pc, #148]	; (8003c24 <UART_AdvFeatureConfig+0x158>)
 8003b90:	4013      	ands	r3, r2
 8003b92:	0019      	movs	r1, r3
 8003b94:	687b      	ldr	r3, [r7, #4]
 8003b96:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003b98:	687b      	ldr	r3, [r7, #4]
 8003b9a:	681b      	ldr	r3, [r3, #0]
 8003b9c:	430a      	orrs	r2, r1
 8003b9e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8003ba0:	687b      	ldr	r3, [r7, #4]
 8003ba2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ba4:	2240      	movs	r2, #64	; 0x40
 8003ba6:	4013      	ands	r3, r2
 8003ba8:	d01d      	beq.n	8003be6 <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8003baa:	687b      	ldr	r3, [r7, #4]
 8003bac:	681b      	ldr	r3, [r3, #0]
 8003bae:	685b      	ldr	r3, [r3, #4]
 8003bb0:	4a1d      	ldr	r2, [pc, #116]	; (8003c28 <UART_AdvFeatureConfig+0x15c>)
 8003bb2:	4013      	ands	r3, r2
 8003bb4:	0019      	movs	r1, r3
 8003bb6:	687b      	ldr	r3, [r7, #4]
 8003bb8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003bba:	687b      	ldr	r3, [r7, #4]
 8003bbc:	681b      	ldr	r3, [r3, #0]
 8003bbe:	430a      	orrs	r2, r1
 8003bc0:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8003bc2:	687b      	ldr	r3, [r7, #4]
 8003bc4:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003bc6:	2380      	movs	r3, #128	; 0x80
 8003bc8:	035b      	lsls	r3, r3, #13
 8003bca:	429a      	cmp	r2, r3
 8003bcc:	d10b      	bne.n	8003be6 <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8003bce:	687b      	ldr	r3, [r7, #4]
 8003bd0:	681b      	ldr	r3, [r3, #0]
 8003bd2:	685b      	ldr	r3, [r3, #4]
 8003bd4:	4a15      	ldr	r2, [pc, #84]	; (8003c2c <UART_AdvFeatureConfig+0x160>)
 8003bd6:	4013      	ands	r3, r2
 8003bd8:	0019      	movs	r1, r3
 8003bda:	687b      	ldr	r3, [r7, #4]
 8003bdc:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003bde:	687b      	ldr	r3, [r7, #4]
 8003be0:	681b      	ldr	r3, [r3, #0]
 8003be2:	430a      	orrs	r2, r1
 8003be4:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8003be6:	687b      	ldr	r3, [r7, #4]
 8003be8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003bea:	2280      	movs	r2, #128	; 0x80
 8003bec:	4013      	ands	r3, r2
 8003bee:	d00b      	beq.n	8003c08 <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8003bf0:	687b      	ldr	r3, [r7, #4]
 8003bf2:	681b      	ldr	r3, [r3, #0]
 8003bf4:	685b      	ldr	r3, [r3, #4]
 8003bf6:	4a0e      	ldr	r2, [pc, #56]	; (8003c30 <UART_AdvFeatureConfig+0x164>)
 8003bf8:	4013      	ands	r3, r2
 8003bfa:	0019      	movs	r1, r3
 8003bfc:	687b      	ldr	r3, [r7, #4]
 8003bfe:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8003c00:	687b      	ldr	r3, [r7, #4]
 8003c02:	681b      	ldr	r3, [r3, #0]
 8003c04:	430a      	orrs	r2, r1
 8003c06:	605a      	str	r2, [r3, #4]
  }
}
 8003c08:	46c0      	nop			; (mov r8, r8)
 8003c0a:	46bd      	mov	sp, r7
 8003c0c:	b002      	add	sp, #8
 8003c0e:	bd80      	pop	{r7, pc}
 8003c10:	fffdffff 	.word	0xfffdffff
 8003c14:	fffeffff 	.word	0xfffeffff
 8003c18:	fffbffff 	.word	0xfffbffff
 8003c1c:	ffff7fff 	.word	0xffff7fff
 8003c20:	ffffefff 	.word	0xffffefff
 8003c24:	ffffdfff 	.word	0xffffdfff
 8003c28:	ffefffff 	.word	0xffefffff
 8003c2c:	ff9fffff 	.word	0xff9fffff
 8003c30:	fff7ffff 	.word	0xfff7ffff

08003c34 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8003c34:	b580      	push	{r7, lr}
 8003c36:	b092      	sub	sp, #72	; 0x48
 8003c38:	af02      	add	r7, sp, #8
 8003c3a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003c3c:	687b      	ldr	r3, [r7, #4]
 8003c3e:	2284      	movs	r2, #132	; 0x84
 8003c40:	2100      	movs	r1, #0
 8003c42:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8003c44:	f7fc ff6c 	bl	8000b20 <HAL_GetTick>
 8003c48:	0003      	movs	r3, r0
 8003c4a:	63fb      	str	r3, [r7, #60]	; 0x3c

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8003c4c:	687b      	ldr	r3, [r7, #4]
 8003c4e:	681b      	ldr	r3, [r3, #0]
 8003c50:	681b      	ldr	r3, [r3, #0]
 8003c52:	2208      	movs	r2, #8
 8003c54:	4013      	ands	r3, r2
 8003c56:	2b08      	cmp	r3, #8
 8003c58:	d12c      	bne.n	8003cb4 <UART_CheckIdleState+0x80>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003c5a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003c5c:	2280      	movs	r2, #128	; 0x80
 8003c5e:	0391      	lsls	r1, r2, #14
 8003c60:	6878      	ldr	r0, [r7, #4]
 8003c62:	4a46      	ldr	r2, [pc, #280]	; (8003d7c <UART_CheckIdleState+0x148>)
 8003c64:	9200      	str	r2, [sp, #0]
 8003c66:	2200      	movs	r2, #0
 8003c68:	f000 f88c 	bl	8003d84 <UART_WaitOnFlagUntilTimeout>
 8003c6c:	1e03      	subs	r3, r0, #0
 8003c6e:	d021      	beq.n	8003cb4 <UART_CheckIdleState+0x80>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003c70:	f3ef 8310 	mrs	r3, PRIMASK
 8003c74:	627b      	str	r3, [r7, #36]	; 0x24
  return(result);
 8003c76:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 8003c78:	63bb      	str	r3, [r7, #56]	; 0x38
 8003c7a:	2301      	movs	r3, #1
 8003c7c:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003c7e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003c80:	f383 8810 	msr	PRIMASK, r3
}
 8003c84:	46c0      	nop			; (mov r8, r8)
 8003c86:	687b      	ldr	r3, [r7, #4]
 8003c88:	681b      	ldr	r3, [r3, #0]
 8003c8a:	681a      	ldr	r2, [r3, #0]
 8003c8c:	687b      	ldr	r3, [r7, #4]
 8003c8e:	681b      	ldr	r3, [r3, #0]
 8003c90:	2180      	movs	r1, #128	; 0x80
 8003c92:	438a      	bics	r2, r1
 8003c94:	601a      	str	r2, [r3, #0]
 8003c96:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003c98:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003c9a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003c9c:	f383 8810 	msr	PRIMASK, r3
}
 8003ca0:	46c0      	nop			; (mov r8, r8)

      huart->gState = HAL_UART_STATE_READY;
 8003ca2:	687b      	ldr	r3, [r7, #4]
 8003ca4:	2220      	movs	r2, #32
 8003ca6:	67da      	str	r2, [r3, #124]	; 0x7c

      __HAL_UNLOCK(huart);
 8003ca8:	687b      	ldr	r3, [r7, #4]
 8003caa:	2278      	movs	r2, #120	; 0x78
 8003cac:	2100      	movs	r1, #0
 8003cae:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003cb0:	2303      	movs	r3, #3
 8003cb2:	e05f      	b.n	8003d74 <UART_CheckIdleState+0x140>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8003cb4:	687b      	ldr	r3, [r7, #4]
 8003cb6:	681b      	ldr	r3, [r3, #0]
 8003cb8:	681b      	ldr	r3, [r3, #0]
 8003cba:	2204      	movs	r2, #4
 8003cbc:	4013      	ands	r3, r2
 8003cbe:	2b04      	cmp	r3, #4
 8003cc0:	d146      	bne.n	8003d50 <UART_CheckIdleState+0x11c>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003cc2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003cc4:	2280      	movs	r2, #128	; 0x80
 8003cc6:	03d1      	lsls	r1, r2, #15
 8003cc8:	6878      	ldr	r0, [r7, #4]
 8003cca:	4a2c      	ldr	r2, [pc, #176]	; (8003d7c <UART_CheckIdleState+0x148>)
 8003ccc:	9200      	str	r2, [sp, #0]
 8003cce:	2200      	movs	r2, #0
 8003cd0:	f000 f858 	bl	8003d84 <UART_WaitOnFlagUntilTimeout>
 8003cd4:	1e03      	subs	r3, r0, #0
 8003cd6:	d03b      	beq.n	8003d50 <UART_CheckIdleState+0x11c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003cd8:	f3ef 8310 	mrs	r3, PRIMASK
 8003cdc:	60fb      	str	r3, [r7, #12]
  return(result);
 8003cde:	68fb      	ldr	r3, [r7, #12]
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003ce0:	637b      	str	r3, [r7, #52]	; 0x34
 8003ce2:	2301      	movs	r3, #1
 8003ce4:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003ce6:	693b      	ldr	r3, [r7, #16]
 8003ce8:	f383 8810 	msr	PRIMASK, r3
}
 8003cec:	46c0      	nop			; (mov r8, r8)
 8003cee:	687b      	ldr	r3, [r7, #4]
 8003cf0:	681b      	ldr	r3, [r3, #0]
 8003cf2:	681a      	ldr	r2, [r3, #0]
 8003cf4:	687b      	ldr	r3, [r7, #4]
 8003cf6:	681b      	ldr	r3, [r3, #0]
 8003cf8:	4921      	ldr	r1, [pc, #132]	; (8003d80 <UART_CheckIdleState+0x14c>)
 8003cfa:	400a      	ands	r2, r1
 8003cfc:	601a      	str	r2, [r3, #0]
 8003cfe:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003d00:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003d02:	697b      	ldr	r3, [r7, #20]
 8003d04:	f383 8810 	msr	PRIMASK, r3
}
 8003d08:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003d0a:	f3ef 8310 	mrs	r3, PRIMASK
 8003d0e:	61bb      	str	r3, [r7, #24]
  return(result);
 8003d10:	69bb      	ldr	r3, [r7, #24]
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003d12:	633b      	str	r3, [r7, #48]	; 0x30
 8003d14:	2301      	movs	r3, #1
 8003d16:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003d18:	69fb      	ldr	r3, [r7, #28]
 8003d1a:	f383 8810 	msr	PRIMASK, r3
}
 8003d1e:	46c0      	nop			; (mov r8, r8)
 8003d20:	687b      	ldr	r3, [r7, #4]
 8003d22:	681b      	ldr	r3, [r3, #0]
 8003d24:	689a      	ldr	r2, [r3, #8]
 8003d26:	687b      	ldr	r3, [r7, #4]
 8003d28:	681b      	ldr	r3, [r3, #0]
 8003d2a:	2101      	movs	r1, #1
 8003d2c:	438a      	bics	r2, r1
 8003d2e:	609a      	str	r2, [r3, #8]
 8003d30:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003d32:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003d34:	6a3b      	ldr	r3, [r7, #32]
 8003d36:	f383 8810 	msr	PRIMASK, r3
}
 8003d3a:	46c0      	nop			; (mov r8, r8)

      huart->RxState = HAL_UART_STATE_READY;
 8003d3c:	687b      	ldr	r3, [r7, #4]
 8003d3e:	2280      	movs	r2, #128	; 0x80
 8003d40:	2120      	movs	r1, #32
 8003d42:	5099      	str	r1, [r3, r2]

      __HAL_UNLOCK(huart);
 8003d44:	687b      	ldr	r3, [r7, #4]
 8003d46:	2278      	movs	r2, #120	; 0x78
 8003d48:	2100      	movs	r1, #0
 8003d4a:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003d4c:	2303      	movs	r3, #3
 8003d4e:	e011      	b.n	8003d74 <UART_CheckIdleState+0x140>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8003d50:	687b      	ldr	r3, [r7, #4]
 8003d52:	2220      	movs	r2, #32
 8003d54:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8003d56:	687b      	ldr	r3, [r7, #4]
 8003d58:	2280      	movs	r2, #128	; 0x80
 8003d5a:	2120      	movs	r1, #32
 8003d5c:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003d5e:	687b      	ldr	r3, [r7, #4]
 8003d60:	2200      	movs	r2, #0
 8003d62:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003d64:	687b      	ldr	r3, [r7, #4]
 8003d66:	2200      	movs	r2, #0
 8003d68:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 8003d6a:	687b      	ldr	r3, [r7, #4]
 8003d6c:	2278      	movs	r2, #120	; 0x78
 8003d6e:	2100      	movs	r1, #0
 8003d70:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8003d72:	2300      	movs	r3, #0
}
 8003d74:	0018      	movs	r0, r3
 8003d76:	46bd      	mov	sp, r7
 8003d78:	b010      	add	sp, #64	; 0x40
 8003d7a:	bd80      	pop	{r7, pc}
 8003d7c:	01ffffff 	.word	0x01ffffff
 8003d80:	fffffedf 	.word	0xfffffedf

08003d84 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8003d84:	b580      	push	{r7, lr}
 8003d86:	b084      	sub	sp, #16
 8003d88:	af00      	add	r7, sp, #0
 8003d8a:	60f8      	str	r0, [r7, #12]
 8003d8c:	60b9      	str	r1, [r7, #8]
 8003d8e:	603b      	str	r3, [r7, #0]
 8003d90:	1dfb      	adds	r3, r7, #7
 8003d92:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003d94:	e04b      	b.n	8003e2e <UART_WaitOnFlagUntilTimeout+0xaa>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003d96:	69bb      	ldr	r3, [r7, #24]
 8003d98:	3301      	adds	r3, #1
 8003d9a:	d048      	beq.n	8003e2e <UART_WaitOnFlagUntilTimeout+0xaa>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003d9c:	f7fc fec0 	bl	8000b20 <HAL_GetTick>
 8003da0:	0002      	movs	r2, r0
 8003da2:	683b      	ldr	r3, [r7, #0]
 8003da4:	1ad3      	subs	r3, r2, r3
 8003da6:	69ba      	ldr	r2, [r7, #24]
 8003da8:	429a      	cmp	r2, r3
 8003daa:	d302      	bcc.n	8003db2 <UART_WaitOnFlagUntilTimeout+0x2e>
 8003dac:	69bb      	ldr	r3, [r7, #24]
 8003dae:	2b00      	cmp	r3, #0
 8003db0:	d101      	bne.n	8003db6 <UART_WaitOnFlagUntilTimeout+0x32>
      {

        return HAL_TIMEOUT;
 8003db2:	2303      	movs	r3, #3
 8003db4:	e04b      	b.n	8003e4e <UART_WaitOnFlagUntilTimeout+0xca>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8003db6:	68fb      	ldr	r3, [r7, #12]
 8003db8:	681b      	ldr	r3, [r3, #0]
 8003dba:	681b      	ldr	r3, [r3, #0]
 8003dbc:	2204      	movs	r2, #4
 8003dbe:	4013      	ands	r3, r2
 8003dc0:	d035      	beq.n	8003e2e <UART_WaitOnFlagUntilTimeout+0xaa>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8003dc2:	68fb      	ldr	r3, [r7, #12]
 8003dc4:	681b      	ldr	r3, [r3, #0]
 8003dc6:	69db      	ldr	r3, [r3, #28]
 8003dc8:	2208      	movs	r2, #8
 8003dca:	4013      	ands	r3, r2
 8003dcc:	2b08      	cmp	r3, #8
 8003dce:	d111      	bne.n	8003df4 <UART_WaitOnFlagUntilTimeout+0x70>
        {
           /* Clear Overrun Error flag*/
           __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8003dd0:	68fb      	ldr	r3, [r7, #12]
 8003dd2:	681b      	ldr	r3, [r3, #0]
 8003dd4:	2208      	movs	r2, #8
 8003dd6:	621a      	str	r2, [r3, #32]

           /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts if ongoing */
           UART_EndRxTransfer(huart);
 8003dd8:	68fb      	ldr	r3, [r7, #12]
 8003dda:	0018      	movs	r0, r3
 8003ddc:	f000 f906 	bl	8003fec <UART_EndRxTransfer>

           huart->ErrorCode = HAL_UART_ERROR_ORE;
 8003de0:	68fb      	ldr	r3, [r7, #12]
 8003de2:	2284      	movs	r2, #132	; 0x84
 8003de4:	2108      	movs	r1, #8
 8003de6:	5099      	str	r1, [r3, r2]

           /* Process Unlocked */
           __HAL_UNLOCK(huart);
 8003de8:	68fb      	ldr	r3, [r7, #12]
 8003dea:	2278      	movs	r2, #120	; 0x78
 8003dec:	2100      	movs	r1, #0
 8003dee:	5499      	strb	r1, [r3, r2]

           return HAL_ERROR;
 8003df0:	2301      	movs	r3, #1
 8003df2:	e02c      	b.n	8003e4e <UART_WaitOnFlagUntilTimeout+0xca>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8003df4:	68fb      	ldr	r3, [r7, #12]
 8003df6:	681b      	ldr	r3, [r3, #0]
 8003df8:	69da      	ldr	r2, [r3, #28]
 8003dfa:	2380      	movs	r3, #128	; 0x80
 8003dfc:	011b      	lsls	r3, r3, #4
 8003dfe:	401a      	ands	r2, r3
 8003e00:	2380      	movs	r3, #128	; 0x80
 8003e02:	011b      	lsls	r3, r3, #4
 8003e04:	429a      	cmp	r2, r3
 8003e06:	d112      	bne.n	8003e2e <UART_WaitOnFlagUntilTimeout+0xaa>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8003e08:	68fb      	ldr	r3, [r7, #12]
 8003e0a:	681b      	ldr	r3, [r3, #0]
 8003e0c:	2280      	movs	r2, #128	; 0x80
 8003e0e:	0112      	lsls	r2, r2, #4
 8003e10:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8003e12:	68fb      	ldr	r3, [r7, #12]
 8003e14:	0018      	movs	r0, r3
 8003e16:	f000 f8e9 	bl	8003fec <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8003e1a:	68fb      	ldr	r3, [r7, #12]
 8003e1c:	2284      	movs	r2, #132	; 0x84
 8003e1e:	2120      	movs	r1, #32
 8003e20:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8003e22:	68fb      	ldr	r3, [r7, #12]
 8003e24:	2278      	movs	r2, #120	; 0x78
 8003e26:	2100      	movs	r1, #0
 8003e28:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 8003e2a:	2303      	movs	r3, #3
 8003e2c:	e00f      	b.n	8003e4e <UART_WaitOnFlagUntilTimeout+0xca>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003e2e:	68fb      	ldr	r3, [r7, #12]
 8003e30:	681b      	ldr	r3, [r3, #0]
 8003e32:	69db      	ldr	r3, [r3, #28]
 8003e34:	68ba      	ldr	r2, [r7, #8]
 8003e36:	4013      	ands	r3, r2
 8003e38:	68ba      	ldr	r2, [r7, #8]
 8003e3a:	1ad3      	subs	r3, r2, r3
 8003e3c:	425a      	negs	r2, r3
 8003e3e:	4153      	adcs	r3, r2
 8003e40:	b2db      	uxtb	r3, r3
 8003e42:	001a      	movs	r2, r3
 8003e44:	1dfb      	adds	r3, r7, #7
 8003e46:	781b      	ldrb	r3, [r3, #0]
 8003e48:	429a      	cmp	r2, r3
 8003e4a:	d0a4      	beq.n	8003d96 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003e4c:	2300      	movs	r3, #0
}
 8003e4e:	0018      	movs	r0, r3
 8003e50:	46bd      	mov	sp, r7
 8003e52:	b004      	add	sp, #16
 8003e54:	bd80      	pop	{r7, pc}
	...

08003e58 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8003e58:	b580      	push	{r7, lr}
 8003e5a:	b090      	sub	sp, #64	; 0x40
 8003e5c:	af00      	add	r7, sp, #0
 8003e5e:	60f8      	str	r0, [r7, #12]
 8003e60:	60b9      	str	r1, [r7, #8]
 8003e62:	1dbb      	adds	r3, r7, #6
 8003e64:	801a      	strh	r2, [r3, #0]
  huart->pRxBuffPtr  = pData;
 8003e66:	68fb      	ldr	r3, [r7, #12]
 8003e68:	68ba      	ldr	r2, [r7, #8]
 8003e6a:	655a      	str	r2, [r3, #84]	; 0x54
  huart->RxXferSize  = Size;
 8003e6c:	68fb      	ldr	r3, [r7, #12]
 8003e6e:	1dba      	adds	r2, r7, #6
 8003e70:	2158      	movs	r1, #88	; 0x58
 8003e72:	8812      	ldrh	r2, [r2, #0]
 8003e74:	525a      	strh	r2, [r3, r1]
  huart->RxXferCount = Size;
 8003e76:	68fb      	ldr	r3, [r7, #12]
 8003e78:	1dba      	adds	r2, r7, #6
 8003e7a:	215a      	movs	r1, #90	; 0x5a
 8003e7c:	8812      	ldrh	r2, [r2, #0]
 8003e7e:	525a      	strh	r2, [r3, r1]
  huart->RxISR       = NULL;
 8003e80:	68fb      	ldr	r3, [r7, #12]
 8003e82:	2200      	movs	r2, #0
 8003e84:	669a      	str	r2, [r3, #104]	; 0x68

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 8003e86:	68fb      	ldr	r3, [r7, #12]
 8003e88:	689a      	ldr	r2, [r3, #8]
 8003e8a:	2380      	movs	r3, #128	; 0x80
 8003e8c:	015b      	lsls	r3, r3, #5
 8003e8e:	429a      	cmp	r2, r3
 8003e90:	d10d      	bne.n	8003eae <UART_Start_Receive_IT+0x56>
 8003e92:	68fb      	ldr	r3, [r7, #12]
 8003e94:	691b      	ldr	r3, [r3, #16]
 8003e96:	2b00      	cmp	r3, #0
 8003e98:	d104      	bne.n	8003ea4 <UART_Start_Receive_IT+0x4c>
 8003e9a:	68fb      	ldr	r3, [r7, #12]
 8003e9c:	225c      	movs	r2, #92	; 0x5c
 8003e9e:	4950      	ldr	r1, [pc, #320]	; (8003fe0 <UART_Start_Receive_IT+0x188>)
 8003ea0:	5299      	strh	r1, [r3, r2]
 8003ea2:	e02e      	b.n	8003f02 <UART_Start_Receive_IT+0xaa>
 8003ea4:	68fb      	ldr	r3, [r7, #12]
 8003ea6:	225c      	movs	r2, #92	; 0x5c
 8003ea8:	21ff      	movs	r1, #255	; 0xff
 8003eaa:	5299      	strh	r1, [r3, r2]
 8003eac:	e029      	b.n	8003f02 <UART_Start_Receive_IT+0xaa>
 8003eae:	68fb      	ldr	r3, [r7, #12]
 8003eb0:	689b      	ldr	r3, [r3, #8]
 8003eb2:	2b00      	cmp	r3, #0
 8003eb4:	d10d      	bne.n	8003ed2 <UART_Start_Receive_IT+0x7a>
 8003eb6:	68fb      	ldr	r3, [r7, #12]
 8003eb8:	691b      	ldr	r3, [r3, #16]
 8003eba:	2b00      	cmp	r3, #0
 8003ebc:	d104      	bne.n	8003ec8 <UART_Start_Receive_IT+0x70>
 8003ebe:	68fb      	ldr	r3, [r7, #12]
 8003ec0:	225c      	movs	r2, #92	; 0x5c
 8003ec2:	21ff      	movs	r1, #255	; 0xff
 8003ec4:	5299      	strh	r1, [r3, r2]
 8003ec6:	e01c      	b.n	8003f02 <UART_Start_Receive_IT+0xaa>
 8003ec8:	68fb      	ldr	r3, [r7, #12]
 8003eca:	225c      	movs	r2, #92	; 0x5c
 8003ecc:	217f      	movs	r1, #127	; 0x7f
 8003ece:	5299      	strh	r1, [r3, r2]
 8003ed0:	e017      	b.n	8003f02 <UART_Start_Receive_IT+0xaa>
 8003ed2:	68fb      	ldr	r3, [r7, #12]
 8003ed4:	689a      	ldr	r2, [r3, #8]
 8003ed6:	2380      	movs	r3, #128	; 0x80
 8003ed8:	055b      	lsls	r3, r3, #21
 8003eda:	429a      	cmp	r2, r3
 8003edc:	d10d      	bne.n	8003efa <UART_Start_Receive_IT+0xa2>
 8003ede:	68fb      	ldr	r3, [r7, #12]
 8003ee0:	691b      	ldr	r3, [r3, #16]
 8003ee2:	2b00      	cmp	r3, #0
 8003ee4:	d104      	bne.n	8003ef0 <UART_Start_Receive_IT+0x98>
 8003ee6:	68fb      	ldr	r3, [r7, #12]
 8003ee8:	225c      	movs	r2, #92	; 0x5c
 8003eea:	217f      	movs	r1, #127	; 0x7f
 8003eec:	5299      	strh	r1, [r3, r2]
 8003eee:	e008      	b.n	8003f02 <UART_Start_Receive_IT+0xaa>
 8003ef0:	68fb      	ldr	r3, [r7, #12]
 8003ef2:	225c      	movs	r2, #92	; 0x5c
 8003ef4:	213f      	movs	r1, #63	; 0x3f
 8003ef6:	5299      	strh	r1, [r3, r2]
 8003ef8:	e003      	b.n	8003f02 <UART_Start_Receive_IT+0xaa>
 8003efa:	68fb      	ldr	r3, [r7, #12]
 8003efc:	225c      	movs	r2, #92	; 0x5c
 8003efe:	2100      	movs	r1, #0
 8003f00:	5299      	strh	r1, [r3, r2]

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003f02:	68fb      	ldr	r3, [r7, #12]
 8003f04:	2284      	movs	r2, #132	; 0x84
 8003f06:	2100      	movs	r1, #0
 8003f08:	5099      	str	r1, [r3, r2]
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8003f0a:	68fb      	ldr	r3, [r7, #12]
 8003f0c:	2280      	movs	r2, #128	; 0x80
 8003f0e:	2122      	movs	r1, #34	; 0x22
 8003f10:	5099      	str	r1, [r3, r2]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003f12:	f3ef 8310 	mrs	r3, PRIMASK
 8003f16:	62bb      	str	r3, [r7, #40]	; 0x28
  return(result);
 8003f18:	6abb      	ldr	r3, [r7, #40]	; 0x28

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003f1a:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003f1c:	2301      	movs	r3, #1
 8003f1e:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003f20:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003f22:	f383 8810 	msr	PRIMASK, r3
}
 8003f26:	46c0      	nop			; (mov r8, r8)
 8003f28:	68fb      	ldr	r3, [r7, #12]
 8003f2a:	681b      	ldr	r3, [r3, #0]
 8003f2c:	689a      	ldr	r2, [r3, #8]
 8003f2e:	68fb      	ldr	r3, [r7, #12]
 8003f30:	681b      	ldr	r3, [r3, #0]
 8003f32:	2101      	movs	r1, #1
 8003f34:	430a      	orrs	r2, r1
 8003f36:	609a      	str	r2, [r3, #8]
 8003f38:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003f3a:	633b      	str	r3, [r7, #48]	; 0x30
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003f3c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003f3e:	f383 8810 	msr	PRIMASK, r3
}
 8003f42:	46c0      	nop			; (mov r8, r8)

  /* Set the Rx ISR function pointer according to the data word length */
  if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003f44:	68fb      	ldr	r3, [r7, #12]
 8003f46:	689a      	ldr	r2, [r3, #8]
 8003f48:	2380      	movs	r3, #128	; 0x80
 8003f4a:	015b      	lsls	r3, r3, #5
 8003f4c:	429a      	cmp	r2, r3
 8003f4e:	d107      	bne.n	8003f60 <UART_Start_Receive_IT+0x108>
 8003f50:	68fb      	ldr	r3, [r7, #12]
 8003f52:	691b      	ldr	r3, [r3, #16]
 8003f54:	2b00      	cmp	r3, #0
 8003f56:	d103      	bne.n	8003f60 <UART_Start_Receive_IT+0x108>
  {
    huart->RxISR = UART_RxISR_16BIT;
 8003f58:	68fb      	ldr	r3, [r7, #12]
 8003f5a:	4a22      	ldr	r2, [pc, #136]	; (8003fe4 <UART_Start_Receive_IT+0x18c>)
 8003f5c:	669a      	str	r2, [r3, #104]	; 0x68
 8003f5e:	e002      	b.n	8003f66 <UART_Start_Receive_IT+0x10e>
  }
  else
  {
    huart->RxISR = UART_RxISR_8BIT;
 8003f60:	68fb      	ldr	r3, [r7, #12]
 8003f62:	4a21      	ldr	r2, [pc, #132]	; (8003fe8 <UART_Start_Receive_IT+0x190>)
 8003f64:	669a      	str	r2, [r3, #104]	; 0x68
  }

  /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 8003f66:	68fb      	ldr	r3, [r7, #12]
 8003f68:	691b      	ldr	r3, [r3, #16]
 8003f6a:	2b00      	cmp	r3, #0
 8003f6c:	d019      	beq.n	8003fa2 <UART_Start_Receive_IT+0x14a>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003f6e:	f3ef 8310 	mrs	r3, PRIMASK
 8003f72:	61fb      	str	r3, [r7, #28]
  return(result);
 8003f74:	69fb      	ldr	r3, [r7, #28]
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE);
 8003f76:	637b      	str	r3, [r7, #52]	; 0x34
 8003f78:	2301      	movs	r3, #1
 8003f7a:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003f7c:	6a3b      	ldr	r3, [r7, #32]
 8003f7e:	f383 8810 	msr	PRIMASK, r3
}
 8003f82:	46c0      	nop			; (mov r8, r8)
 8003f84:	68fb      	ldr	r3, [r7, #12]
 8003f86:	681b      	ldr	r3, [r3, #0]
 8003f88:	681a      	ldr	r2, [r3, #0]
 8003f8a:	68fb      	ldr	r3, [r7, #12]
 8003f8c:	681b      	ldr	r3, [r3, #0]
 8003f8e:	2190      	movs	r1, #144	; 0x90
 8003f90:	0049      	lsls	r1, r1, #1
 8003f92:	430a      	orrs	r2, r1
 8003f94:	601a      	str	r2, [r3, #0]
 8003f96:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003f98:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003f9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f9c:	f383 8810 	msr	PRIMASK, r3
}
 8003fa0:	e018      	b.n	8003fd4 <UART_Start_Receive_IT+0x17c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003fa2:	f3ef 8310 	mrs	r3, PRIMASK
 8003fa6:	613b      	str	r3, [r7, #16]
  return(result);
 8003fa8:	693b      	ldr	r3, [r7, #16]
  }
  else
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE);
 8003faa:	63bb      	str	r3, [r7, #56]	; 0x38
 8003fac:	2301      	movs	r3, #1
 8003fae:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003fb0:	697b      	ldr	r3, [r7, #20]
 8003fb2:	f383 8810 	msr	PRIMASK, r3
}
 8003fb6:	46c0      	nop			; (mov r8, r8)
 8003fb8:	68fb      	ldr	r3, [r7, #12]
 8003fba:	681b      	ldr	r3, [r3, #0]
 8003fbc:	681a      	ldr	r2, [r3, #0]
 8003fbe:	68fb      	ldr	r3, [r7, #12]
 8003fc0:	681b      	ldr	r3, [r3, #0]
 8003fc2:	2120      	movs	r1, #32
 8003fc4:	430a      	orrs	r2, r1
 8003fc6:	601a      	str	r2, [r3, #0]
 8003fc8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003fca:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003fcc:	69bb      	ldr	r3, [r7, #24]
 8003fce:	f383 8810 	msr	PRIMASK, r3
}
 8003fd2:	46c0      	nop			; (mov r8, r8)
  }
  return HAL_OK;
 8003fd4:	2300      	movs	r3, #0
}
 8003fd6:	0018      	movs	r0, r3
 8003fd8:	46bd      	mov	sp, r7
 8003fda:	b010      	add	sp, #64	; 0x40
 8003fdc:	bd80      	pop	{r7, pc}
 8003fde:	46c0      	nop			; (mov r8, r8)
 8003fe0:	000001ff 	.word	0x000001ff
 8003fe4:	08004461 	.word	0x08004461
 8003fe8:	080042a9 	.word	0x080042a9

08003fec <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8003fec:	b580      	push	{r7, lr}
 8003fee:	b08e      	sub	sp, #56	; 0x38
 8003ff0:	af00      	add	r7, sp, #0
 8003ff2:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003ff4:	f3ef 8310 	mrs	r3, PRIMASK
 8003ff8:	617b      	str	r3, [r7, #20]
  return(result);
 8003ffa:	697b      	ldr	r3, [r7, #20]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003ffc:	637b      	str	r3, [r7, #52]	; 0x34
 8003ffe:	2301      	movs	r3, #1
 8004000:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004002:	69bb      	ldr	r3, [r7, #24]
 8004004:	f383 8810 	msr	PRIMASK, r3
}
 8004008:	46c0      	nop			; (mov r8, r8)
 800400a:	687b      	ldr	r3, [r7, #4]
 800400c:	681b      	ldr	r3, [r3, #0]
 800400e:	681a      	ldr	r2, [r3, #0]
 8004010:	687b      	ldr	r3, [r7, #4]
 8004012:	681b      	ldr	r3, [r3, #0]
 8004014:	4926      	ldr	r1, [pc, #152]	; (80040b0 <UART_EndRxTransfer+0xc4>)
 8004016:	400a      	ands	r2, r1
 8004018:	601a      	str	r2, [r3, #0]
 800401a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800401c:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800401e:	69fb      	ldr	r3, [r7, #28]
 8004020:	f383 8810 	msr	PRIMASK, r3
}
 8004024:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004026:	f3ef 8310 	mrs	r3, PRIMASK
 800402a:	623b      	str	r3, [r7, #32]
  return(result);
 800402c:	6a3b      	ldr	r3, [r7, #32]
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800402e:	633b      	str	r3, [r7, #48]	; 0x30
 8004030:	2301      	movs	r3, #1
 8004032:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004034:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004036:	f383 8810 	msr	PRIMASK, r3
}
 800403a:	46c0      	nop			; (mov r8, r8)
 800403c:	687b      	ldr	r3, [r7, #4]
 800403e:	681b      	ldr	r3, [r3, #0]
 8004040:	689a      	ldr	r2, [r3, #8]
 8004042:	687b      	ldr	r3, [r7, #4]
 8004044:	681b      	ldr	r3, [r3, #0]
 8004046:	2101      	movs	r1, #1
 8004048:	438a      	bics	r2, r1
 800404a:	609a      	str	r2, [r3, #8]
 800404c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800404e:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004050:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004052:	f383 8810 	msr	PRIMASK, r3
}
 8004056:	46c0      	nop			; (mov r8, r8)

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004058:	687b      	ldr	r3, [r7, #4]
 800405a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800405c:	2b01      	cmp	r3, #1
 800405e:	d118      	bne.n	8004092 <UART_EndRxTransfer+0xa6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004060:	f3ef 8310 	mrs	r3, PRIMASK
 8004064:	60bb      	str	r3, [r7, #8]
  return(result);
 8004066:	68bb      	ldr	r3, [r7, #8]
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004068:	62fb      	str	r3, [r7, #44]	; 0x2c
 800406a:	2301      	movs	r3, #1
 800406c:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800406e:	68fb      	ldr	r3, [r7, #12]
 8004070:	f383 8810 	msr	PRIMASK, r3
}
 8004074:	46c0      	nop			; (mov r8, r8)
 8004076:	687b      	ldr	r3, [r7, #4]
 8004078:	681b      	ldr	r3, [r3, #0]
 800407a:	681a      	ldr	r2, [r3, #0]
 800407c:	687b      	ldr	r3, [r7, #4]
 800407e:	681b      	ldr	r3, [r3, #0]
 8004080:	2110      	movs	r1, #16
 8004082:	438a      	bics	r2, r1
 8004084:	601a      	str	r2, [r3, #0]
 8004086:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004088:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800408a:	693b      	ldr	r3, [r7, #16]
 800408c:	f383 8810 	msr	PRIMASK, r3
}
 8004090:	46c0      	nop			; (mov r8, r8)
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8004092:	687b      	ldr	r3, [r7, #4]
 8004094:	2280      	movs	r2, #128	; 0x80
 8004096:	2120      	movs	r1, #32
 8004098:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800409a:	687b      	ldr	r3, [r7, #4]
 800409c:	2200      	movs	r2, #0
 800409e:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80040a0:	687b      	ldr	r3, [r7, #4]
 80040a2:	2200      	movs	r2, #0
 80040a4:	669a      	str	r2, [r3, #104]	; 0x68
}
 80040a6:	46c0      	nop			; (mov r8, r8)
 80040a8:	46bd      	mov	sp, r7
 80040aa:	b00e      	add	sp, #56	; 0x38
 80040ac:	bd80      	pop	{r7, pc}
 80040ae:	46c0      	nop			; (mov r8, r8)
 80040b0:	fffffedf 	.word	0xfffffedf

080040b4 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80040b4:	b580      	push	{r7, lr}
 80040b6:	b084      	sub	sp, #16
 80040b8:	af00      	add	r7, sp, #0
 80040ba:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80040bc:	687b      	ldr	r3, [r7, #4]
 80040be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80040c0:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 80040c2:	68fb      	ldr	r3, [r7, #12]
 80040c4:	225a      	movs	r2, #90	; 0x5a
 80040c6:	2100      	movs	r1, #0
 80040c8:	5299      	strh	r1, [r3, r2]
  huart->TxXferCount = 0U;
 80040ca:	68fb      	ldr	r3, [r7, #12]
 80040cc:	2252      	movs	r2, #82	; 0x52
 80040ce:	2100      	movs	r1, #0
 80040d0:	5299      	strh	r1, [r3, r2]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80040d2:	68fb      	ldr	r3, [r7, #12]
 80040d4:	0018      	movs	r0, r3
 80040d6:	f7ff fb5d 	bl	8003794 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80040da:	46c0      	nop			; (mov r8, r8)
 80040dc:	46bd      	mov	sp, r7
 80040de:	b004      	add	sp, #16
 80040e0:	bd80      	pop	{r7, pc}

080040e2 <UART_TxISR_8BIT>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_8BIT(UART_HandleTypeDef *huart)
{
 80040e2:	b580      	push	{r7, lr}
 80040e4:	b08a      	sub	sp, #40	; 0x28
 80040e6:	af00      	add	r7, sp, #0
 80040e8:	6078      	str	r0, [r7, #4]
  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80040ea:	687b      	ldr	r3, [r7, #4]
 80040ec:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80040ee:	2b21      	cmp	r3, #33	; 0x21
 80040f0:	d14d      	bne.n	800418e <UART_TxISR_8BIT+0xac>
  {
    if (huart->TxXferCount == 0U)
 80040f2:	687b      	ldr	r3, [r7, #4]
 80040f4:	2252      	movs	r2, #82	; 0x52
 80040f6:	5a9b      	ldrh	r3, [r3, r2]
 80040f8:	b29b      	uxth	r3, r3
 80040fa:	2b00      	cmp	r3, #0
 80040fc:	d132      	bne.n	8004164 <UART_TxISR_8BIT+0x82>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80040fe:	f3ef 8310 	mrs	r3, PRIMASK
 8004102:	60bb      	str	r3, [r7, #8]
  return(result);
 8004104:	68bb      	ldr	r3, [r7, #8]
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 8004106:	627b      	str	r3, [r7, #36]	; 0x24
 8004108:	2301      	movs	r3, #1
 800410a:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800410c:	68fb      	ldr	r3, [r7, #12]
 800410e:	f383 8810 	msr	PRIMASK, r3
}
 8004112:	46c0      	nop			; (mov r8, r8)
 8004114:	687b      	ldr	r3, [r7, #4]
 8004116:	681b      	ldr	r3, [r3, #0]
 8004118:	681a      	ldr	r2, [r3, #0]
 800411a:	687b      	ldr	r3, [r7, #4]
 800411c:	681b      	ldr	r3, [r3, #0]
 800411e:	2180      	movs	r1, #128	; 0x80
 8004120:	438a      	bics	r2, r1
 8004122:	601a      	str	r2, [r3, #0]
 8004124:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004126:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004128:	693b      	ldr	r3, [r7, #16]
 800412a:	f383 8810 	msr	PRIMASK, r3
}
 800412e:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004130:	f3ef 8310 	mrs	r3, PRIMASK
 8004134:	617b      	str	r3, [r7, #20]
  return(result);
 8004136:	697b      	ldr	r3, [r7, #20]

      /* Enable the UART Transmit Complete Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8004138:	623b      	str	r3, [r7, #32]
 800413a:	2301      	movs	r3, #1
 800413c:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800413e:	69bb      	ldr	r3, [r7, #24]
 8004140:	f383 8810 	msr	PRIMASK, r3
}
 8004144:	46c0      	nop			; (mov r8, r8)
 8004146:	687b      	ldr	r3, [r7, #4]
 8004148:	681b      	ldr	r3, [r3, #0]
 800414a:	681a      	ldr	r2, [r3, #0]
 800414c:	687b      	ldr	r3, [r7, #4]
 800414e:	681b      	ldr	r3, [r3, #0]
 8004150:	2140      	movs	r1, #64	; 0x40
 8004152:	430a      	orrs	r2, r1
 8004154:	601a      	str	r2, [r3, #0]
 8004156:	6a3b      	ldr	r3, [r7, #32]
 8004158:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800415a:	69fb      	ldr	r3, [r7, #28]
 800415c:	f383 8810 	msr	PRIMASK, r3
}
 8004160:	46c0      	nop			; (mov r8, r8)
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
      huart->pTxBuffPtr++;
      huart->TxXferCount--;
    }
  }
}
 8004162:	e014      	b.n	800418e <UART_TxISR_8BIT+0xac>
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
 8004164:	687b      	ldr	r3, [r7, #4]
 8004166:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004168:	781a      	ldrb	r2, [r3, #0]
 800416a:	687b      	ldr	r3, [r7, #4]
 800416c:	681b      	ldr	r3, [r3, #0]
 800416e:	b292      	uxth	r2, r2
 8004170:	851a      	strh	r2, [r3, #40]	; 0x28
      huart->pTxBuffPtr++;
 8004172:	687b      	ldr	r3, [r7, #4]
 8004174:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004176:	1c5a      	adds	r2, r3, #1
 8004178:	687b      	ldr	r3, [r7, #4]
 800417a:	64da      	str	r2, [r3, #76]	; 0x4c
      huart->TxXferCount--;
 800417c:	687b      	ldr	r3, [r7, #4]
 800417e:	2252      	movs	r2, #82	; 0x52
 8004180:	5a9b      	ldrh	r3, [r3, r2]
 8004182:	b29b      	uxth	r3, r3
 8004184:	3b01      	subs	r3, #1
 8004186:	b299      	uxth	r1, r3
 8004188:	687b      	ldr	r3, [r7, #4]
 800418a:	2252      	movs	r2, #82	; 0x52
 800418c:	5299      	strh	r1, [r3, r2]
}
 800418e:	46c0      	nop			; (mov r8, r8)
 8004190:	46bd      	mov	sp, r7
 8004192:	b00a      	add	sp, #40	; 0x28
 8004194:	bd80      	pop	{r7, pc}

08004196 <UART_TxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_16BIT(UART_HandleTypeDef *huart)
{
 8004196:	b580      	push	{r7, lr}
 8004198:	b08c      	sub	sp, #48	; 0x30
 800419a:	af00      	add	r7, sp, #0
 800419c:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800419e:	687b      	ldr	r3, [r7, #4]
 80041a0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80041a2:	2b21      	cmp	r3, #33	; 0x21
 80041a4:	d151      	bne.n	800424a <UART_TxISR_16BIT+0xb4>
  {
    if (huart->TxXferCount == 0U)
 80041a6:	687b      	ldr	r3, [r7, #4]
 80041a8:	2252      	movs	r2, #82	; 0x52
 80041aa:	5a9b      	ldrh	r3, [r3, r2]
 80041ac:	b29b      	uxth	r3, r3
 80041ae:	2b00      	cmp	r3, #0
 80041b0:	d132      	bne.n	8004218 <UART_TxISR_16BIT+0x82>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80041b2:	f3ef 8310 	mrs	r3, PRIMASK
 80041b6:	60fb      	str	r3, [r7, #12]
  return(result);
 80041b8:	68fb      	ldr	r3, [r7, #12]
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 80041ba:	62bb      	str	r3, [r7, #40]	; 0x28
 80041bc:	2301      	movs	r3, #1
 80041be:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80041c0:	693b      	ldr	r3, [r7, #16]
 80041c2:	f383 8810 	msr	PRIMASK, r3
}
 80041c6:	46c0      	nop			; (mov r8, r8)
 80041c8:	687b      	ldr	r3, [r7, #4]
 80041ca:	681b      	ldr	r3, [r3, #0]
 80041cc:	681a      	ldr	r2, [r3, #0]
 80041ce:	687b      	ldr	r3, [r7, #4]
 80041d0:	681b      	ldr	r3, [r3, #0]
 80041d2:	2180      	movs	r1, #128	; 0x80
 80041d4:	438a      	bics	r2, r1
 80041d6:	601a      	str	r2, [r3, #0]
 80041d8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80041da:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80041dc:	697b      	ldr	r3, [r7, #20]
 80041de:	f383 8810 	msr	PRIMASK, r3
}
 80041e2:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80041e4:	f3ef 8310 	mrs	r3, PRIMASK
 80041e8:	61bb      	str	r3, [r7, #24]
  return(result);
 80041ea:	69bb      	ldr	r3, [r7, #24]

      /* Enable the UART Transmit Complete Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80041ec:	627b      	str	r3, [r7, #36]	; 0x24
 80041ee:	2301      	movs	r3, #1
 80041f0:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80041f2:	69fb      	ldr	r3, [r7, #28]
 80041f4:	f383 8810 	msr	PRIMASK, r3
}
 80041f8:	46c0      	nop			; (mov r8, r8)
 80041fa:	687b      	ldr	r3, [r7, #4]
 80041fc:	681b      	ldr	r3, [r3, #0]
 80041fe:	681a      	ldr	r2, [r3, #0]
 8004200:	687b      	ldr	r3, [r7, #4]
 8004202:	681b      	ldr	r3, [r3, #0]
 8004204:	2140      	movs	r1, #64	; 0x40
 8004206:	430a      	orrs	r2, r1
 8004208:	601a      	str	r2, [r3, #0]
 800420a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800420c:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800420e:	6a3b      	ldr	r3, [r7, #32]
 8004210:	f383 8810 	msr	PRIMASK, r3
}
 8004214:	46c0      	nop			; (mov r8, r8)
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
      huart->pTxBuffPtr += 2U;
      huart->TxXferCount--;
    }
  }
}
 8004216:	e018      	b.n	800424a <UART_TxISR_16BIT+0xb4>
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8004218:	687b      	ldr	r3, [r7, #4]
 800421a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800421c:	62fb      	str	r3, [r7, #44]	; 0x2c
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
 800421e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004220:	881a      	ldrh	r2, [r3, #0]
 8004222:	687b      	ldr	r3, [r7, #4]
 8004224:	681b      	ldr	r3, [r3, #0]
 8004226:	05d2      	lsls	r2, r2, #23
 8004228:	0dd2      	lsrs	r2, r2, #23
 800422a:	b292      	uxth	r2, r2
 800422c:	851a      	strh	r2, [r3, #40]	; 0x28
      huart->pTxBuffPtr += 2U;
 800422e:	687b      	ldr	r3, [r7, #4]
 8004230:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004232:	1c9a      	adds	r2, r3, #2
 8004234:	687b      	ldr	r3, [r7, #4]
 8004236:	64da      	str	r2, [r3, #76]	; 0x4c
      huart->TxXferCount--;
 8004238:	687b      	ldr	r3, [r7, #4]
 800423a:	2252      	movs	r2, #82	; 0x52
 800423c:	5a9b      	ldrh	r3, [r3, r2]
 800423e:	b29b      	uxth	r3, r3
 8004240:	3b01      	subs	r3, #1
 8004242:	b299      	uxth	r1, r3
 8004244:	687b      	ldr	r3, [r7, #4]
 8004246:	2252      	movs	r2, #82	; 0x52
 8004248:	5299      	strh	r1, [r3, r2]
}
 800424a:	46c0      	nop			; (mov r8, r8)
 800424c:	46bd      	mov	sp, r7
 800424e:	b00c      	add	sp, #48	; 0x30
 8004250:	bd80      	pop	{r7, pc}

08004252 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8004252:	b580      	push	{r7, lr}
 8004254:	b086      	sub	sp, #24
 8004256:	af00      	add	r7, sp, #0
 8004258:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800425a:	f3ef 8310 	mrs	r3, PRIMASK
 800425e:	60bb      	str	r3, [r7, #8]
  return(result);
 8004260:	68bb      	ldr	r3, [r7, #8]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8004262:	617b      	str	r3, [r7, #20]
 8004264:	2301      	movs	r3, #1
 8004266:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004268:	68fb      	ldr	r3, [r7, #12]
 800426a:	f383 8810 	msr	PRIMASK, r3
}
 800426e:	46c0      	nop			; (mov r8, r8)
 8004270:	687b      	ldr	r3, [r7, #4]
 8004272:	681b      	ldr	r3, [r3, #0]
 8004274:	681a      	ldr	r2, [r3, #0]
 8004276:	687b      	ldr	r3, [r7, #4]
 8004278:	681b      	ldr	r3, [r3, #0]
 800427a:	2140      	movs	r1, #64	; 0x40
 800427c:	438a      	bics	r2, r1
 800427e:	601a      	str	r2, [r3, #0]
 8004280:	697b      	ldr	r3, [r7, #20]
 8004282:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004284:	693b      	ldr	r3, [r7, #16]
 8004286:	f383 8810 	msr	PRIMASK, r3
}
 800428a:	46c0      	nop			; (mov r8, r8)

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800428c:	687b      	ldr	r3, [r7, #4]
 800428e:	2220      	movs	r2, #32
 8004290:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8004292:	687b      	ldr	r3, [r7, #4]
 8004294:	2200      	movs	r2, #0
 8004296:	66da      	str	r2, [r3, #108]	; 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8004298:	687b      	ldr	r3, [r7, #4]
 800429a:	0018      	movs	r0, r3
 800429c:	f7ff fa72 	bl	8003784 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80042a0:	46c0      	nop			; (mov r8, r8)
 80042a2:	46bd      	mov	sp, r7
 80042a4:	b006      	add	sp, #24
 80042a6:	bd80      	pop	{r7, pc}

080042a8 <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 80042a8:	b580      	push	{r7, lr}
 80042aa:	b094      	sub	sp, #80	; 0x50
 80042ac:	af00      	add	r7, sp, #0
 80042ae:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 80042b0:	204e      	movs	r0, #78	; 0x4e
 80042b2:	183b      	adds	r3, r7, r0
 80042b4:	687a      	ldr	r2, [r7, #4]
 80042b6:	215c      	movs	r1, #92	; 0x5c
 80042b8:	5a52      	ldrh	r2, [r2, r1]
 80042ba:	801a      	strh	r2, [r3, #0]
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80042bc:	687b      	ldr	r3, [r7, #4]
 80042be:	2280      	movs	r2, #128	; 0x80
 80042c0:	589b      	ldr	r3, [r3, r2]
 80042c2:	2b22      	cmp	r3, #34	; 0x22
 80042c4:	d000      	beq.n	80042c8 <UART_RxISR_8BIT+0x20>
 80042c6:	e0ba      	b.n	800443e <UART_RxISR_8BIT+0x196>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 80042c8:	687b      	ldr	r3, [r7, #4]
 80042ca:	681a      	ldr	r2, [r3, #0]
 80042cc:	214c      	movs	r1, #76	; 0x4c
 80042ce:	187b      	adds	r3, r7, r1
 80042d0:	8c92      	ldrh	r2, [r2, #36]	; 0x24
 80042d2:	801a      	strh	r2, [r3, #0]
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 80042d4:	187b      	adds	r3, r7, r1
 80042d6:	881b      	ldrh	r3, [r3, #0]
 80042d8:	b2da      	uxtb	r2, r3
 80042da:	183b      	adds	r3, r7, r0
 80042dc:	881b      	ldrh	r3, [r3, #0]
 80042de:	b2d9      	uxtb	r1, r3
 80042e0:	687b      	ldr	r3, [r7, #4]
 80042e2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80042e4:	400a      	ands	r2, r1
 80042e6:	b2d2      	uxtb	r2, r2
 80042e8:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 80042ea:	687b      	ldr	r3, [r7, #4]
 80042ec:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80042ee:	1c5a      	adds	r2, r3, #1
 80042f0:	687b      	ldr	r3, [r7, #4]
 80042f2:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 80042f4:	687b      	ldr	r3, [r7, #4]
 80042f6:	225a      	movs	r2, #90	; 0x5a
 80042f8:	5a9b      	ldrh	r3, [r3, r2]
 80042fa:	b29b      	uxth	r3, r3
 80042fc:	3b01      	subs	r3, #1
 80042fe:	b299      	uxth	r1, r3
 8004300:	687b      	ldr	r3, [r7, #4]
 8004302:	225a      	movs	r2, #90	; 0x5a
 8004304:	5299      	strh	r1, [r3, r2]

    if (huart->RxXferCount == 0U)
 8004306:	687b      	ldr	r3, [r7, #4]
 8004308:	225a      	movs	r2, #90	; 0x5a
 800430a:	5a9b      	ldrh	r3, [r3, r2]
 800430c:	b29b      	uxth	r3, r3
 800430e:	2b00      	cmp	r3, #0
 8004310:	d000      	beq.n	8004314 <UART_RxISR_8BIT+0x6c>
 8004312:	e09c      	b.n	800444e <UART_RxISR_8BIT+0x1a6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004314:	f3ef 8310 	mrs	r3, PRIMASK
 8004318:	627b      	str	r3, [r7, #36]	; 0x24
  return(result);
 800431a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800431c:	64bb      	str	r3, [r7, #72]	; 0x48
 800431e:	2301      	movs	r3, #1
 8004320:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004322:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004324:	f383 8810 	msr	PRIMASK, r3
}
 8004328:	46c0      	nop			; (mov r8, r8)
 800432a:	687b      	ldr	r3, [r7, #4]
 800432c:	681b      	ldr	r3, [r3, #0]
 800432e:	681a      	ldr	r2, [r3, #0]
 8004330:	687b      	ldr	r3, [r7, #4]
 8004332:	681b      	ldr	r3, [r3, #0]
 8004334:	4948      	ldr	r1, [pc, #288]	; (8004458 <UART_RxISR_8BIT+0x1b0>)
 8004336:	400a      	ands	r2, r1
 8004338:	601a      	str	r2, [r3, #0]
 800433a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800433c:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800433e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004340:	f383 8810 	msr	PRIMASK, r3
}
 8004344:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004346:	f3ef 8310 	mrs	r3, PRIMASK
 800434a:	633b      	str	r3, [r7, #48]	; 0x30
  return(result);
 800434c:	6b3b      	ldr	r3, [r7, #48]	; 0x30

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800434e:	647b      	str	r3, [r7, #68]	; 0x44
 8004350:	2301      	movs	r3, #1
 8004352:	637b      	str	r3, [r7, #52]	; 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004354:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004356:	f383 8810 	msr	PRIMASK, r3
}
 800435a:	46c0      	nop			; (mov r8, r8)
 800435c:	687b      	ldr	r3, [r7, #4]
 800435e:	681b      	ldr	r3, [r3, #0]
 8004360:	689a      	ldr	r2, [r3, #8]
 8004362:	687b      	ldr	r3, [r7, #4]
 8004364:	681b      	ldr	r3, [r3, #0]
 8004366:	2101      	movs	r1, #1
 8004368:	438a      	bics	r2, r1
 800436a:	609a      	str	r2, [r3, #8]
 800436c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800436e:	63bb      	str	r3, [r7, #56]	; 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004370:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004372:	f383 8810 	msr	PRIMASK, r3
}
 8004376:	46c0      	nop			; (mov r8, r8)

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8004378:	687b      	ldr	r3, [r7, #4]
 800437a:	2280      	movs	r2, #128	; 0x80
 800437c:	2120      	movs	r1, #32
 800437e:	5099      	str	r1, [r3, r2]

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8004380:	687b      	ldr	r3, [r7, #4]
 8004382:	2200      	movs	r2, #0
 8004384:	669a      	str	r2, [r3, #104]	; 0x68

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004386:	687b      	ldr	r3, [r7, #4]
 8004388:	2200      	movs	r2, #0
 800438a:	665a      	str	r2, [r3, #100]	; 0x64

      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800438c:	687b      	ldr	r3, [r7, #4]
 800438e:	681b      	ldr	r3, [r3, #0]
 8004390:	685a      	ldr	r2, [r3, #4]
 8004392:	2380      	movs	r3, #128	; 0x80
 8004394:	041b      	lsls	r3, r3, #16
 8004396:	4013      	ands	r3, r2
 8004398:	d018      	beq.n	80043cc <UART_RxISR_8BIT+0x124>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800439a:	f3ef 8310 	mrs	r3, PRIMASK
 800439e:	61bb      	str	r3, [r7, #24]
  return(result);
 80043a0:	69bb      	ldr	r3, [r7, #24]
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 80043a2:	643b      	str	r3, [r7, #64]	; 0x40
 80043a4:	2301      	movs	r3, #1
 80043a6:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80043a8:	69fb      	ldr	r3, [r7, #28]
 80043aa:	f383 8810 	msr	PRIMASK, r3
}
 80043ae:	46c0      	nop			; (mov r8, r8)
 80043b0:	687b      	ldr	r3, [r7, #4]
 80043b2:	681b      	ldr	r3, [r3, #0]
 80043b4:	681a      	ldr	r2, [r3, #0]
 80043b6:	687b      	ldr	r3, [r7, #4]
 80043b8:	681b      	ldr	r3, [r3, #0]
 80043ba:	4928      	ldr	r1, [pc, #160]	; (800445c <UART_RxISR_8BIT+0x1b4>)
 80043bc:	400a      	ands	r2, r1
 80043be:	601a      	str	r2, [r3, #0]
 80043c0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80043c2:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80043c4:	6a3b      	ldr	r3, [r7, #32]
 80043c6:	f383 8810 	msr	PRIMASK, r3
}
 80043ca:	46c0      	nop			; (mov r8, r8)
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80043cc:	687b      	ldr	r3, [r7, #4]
 80043ce:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80043d0:	2b01      	cmp	r3, #1
 80043d2:	d12f      	bne.n	8004434 <UART_RxISR_8BIT+0x18c>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80043d4:	687b      	ldr	r3, [r7, #4]
 80043d6:	2200      	movs	r2, #0
 80043d8:	661a      	str	r2, [r3, #96]	; 0x60
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80043da:	f3ef 8310 	mrs	r3, PRIMASK
 80043de:	60fb      	str	r3, [r7, #12]
  return(result);
 80043e0:	68fb      	ldr	r3, [r7, #12]

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80043e2:	63fb      	str	r3, [r7, #60]	; 0x3c
 80043e4:	2301      	movs	r3, #1
 80043e6:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80043e8:	693b      	ldr	r3, [r7, #16]
 80043ea:	f383 8810 	msr	PRIMASK, r3
}
 80043ee:	46c0      	nop			; (mov r8, r8)
 80043f0:	687b      	ldr	r3, [r7, #4]
 80043f2:	681b      	ldr	r3, [r3, #0]
 80043f4:	681a      	ldr	r2, [r3, #0]
 80043f6:	687b      	ldr	r3, [r7, #4]
 80043f8:	681b      	ldr	r3, [r3, #0]
 80043fa:	2110      	movs	r1, #16
 80043fc:	438a      	bics	r2, r1
 80043fe:	601a      	str	r2, [r3, #0]
 8004400:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004402:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004404:	697b      	ldr	r3, [r7, #20]
 8004406:	f383 8810 	msr	PRIMASK, r3
}
 800440a:	46c0      	nop			; (mov r8, r8)

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800440c:	687b      	ldr	r3, [r7, #4]
 800440e:	681b      	ldr	r3, [r3, #0]
 8004410:	69db      	ldr	r3, [r3, #28]
 8004412:	2210      	movs	r2, #16
 8004414:	4013      	ands	r3, r2
 8004416:	2b10      	cmp	r3, #16
 8004418:	d103      	bne.n	8004422 <UART_RxISR_8BIT+0x17a>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800441a:	687b      	ldr	r3, [r7, #4]
 800441c:	681b      	ldr	r3, [r3, #0]
 800441e:	2210      	movs	r2, #16
 8004420:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8004422:	687b      	ldr	r3, [r7, #4]
 8004424:	2258      	movs	r2, #88	; 0x58
 8004426:	5a9a      	ldrh	r2, [r3, r2]
 8004428:	687b      	ldr	r3, [r7, #4]
 800442a:	0011      	movs	r1, r2
 800442c:	0018      	movs	r0, r3
 800442e:	f7ff f9b9 	bl	80037a4 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8004432:	e00c      	b.n	800444e <UART_RxISR_8BIT+0x1a6>
        HAL_UART_RxCpltCallback(huart);
 8004434:	687b      	ldr	r3, [r7, #4]
 8004436:	0018      	movs	r0, r3
 8004438:	f7fb ff7a 	bl	8000330 <HAL_UART_RxCpltCallback>
}
 800443c:	e007      	b.n	800444e <UART_RxISR_8BIT+0x1a6>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800443e:	687b      	ldr	r3, [r7, #4]
 8004440:	681b      	ldr	r3, [r3, #0]
 8004442:	699a      	ldr	r2, [r3, #24]
 8004444:	687b      	ldr	r3, [r7, #4]
 8004446:	681b      	ldr	r3, [r3, #0]
 8004448:	2108      	movs	r1, #8
 800444a:	430a      	orrs	r2, r1
 800444c:	619a      	str	r2, [r3, #24]
}
 800444e:	46c0      	nop			; (mov r8, r8)
 8004450:	46bd      	mov	sp, r7
 8004452:	b014      	add	sp, #80	; 0x50
 8004454:	bd80      	pop	{r7, pc}
 8004456:	46c0      	nop			; (mov r8, r8)
 8004458:	fffffedf 	.word	0xfffffedf
 800445c:	fbffffff 	.word	0xfbffffff

08004460 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 8004460:	b580      	push	{r7, lr}
 8004462:	b094      	sub	sp, #80	; 0x50
 8004464:	af00      	add	r7, sp, #0
 8004466:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 8004468:	204e      	movs	r0, #78	; 0x4e
 800446a:	183b      	adds	r3, r7, r0
 800446c:	687a      	ldr	r2, [r7, #4]
 800446e:	215c      	movs	r1, #92	; 0x5c
 8004470:	5a52      	ldrh	r2, [r2, r1]
 8004472:	801a      	strh	r2, [r3, #0]
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8004474:	687b      	ldr	r3, [r7, #4]
 8004476:	2280      	movs	r2, #128	; 0x80
 8004478:	589b      	ldr	r3, [r3, r2]
 800447a:	2b22      	cmp	r3, #34	; 0x22
 800447c:	d000      	beq.n	8004480 <UART_RxISR_16BIT+0x20>
 800447e:	e0ba      	b.n	80045f6 <UART_RxISR_16BIT+0x196>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8004480:	687b      	ldr	r3, [r7, #4]
 8004482:	681a      	ldr	r2, [r3, #0]
 8004484:	214c      	movs	r1, #76	; 0x4c
 8004486:	187b      	adds	r3, r7, r1
 8004488:	8c92      	ldrh	r2, [r2, #36]	; 0x24
 800448a:	801a      	strh	r2, [r3, #0]
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 800448c:	687b      	ldr	r3, [r7, #4]
 800448e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004490:	64bb      	str	r3, [r7, #72]	; 0x48
    *tmp = (uint16_t)(uhdata & uhMask);
 8004492:	187b      	adds	r3, r7, r1
 8004494:	183a      	adds	r2, r7, r0
 8004496:	881b      	ldrh	r3, [r3, #0]
 8004498:	8812      	ldrh	r2, [r2, #0]
 800449a:	4013      	ands	r3, r2
 800449c:	b29a      	uxth	r2, r3
 800449e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80044a0:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 80044a2:	687b      	ldr	r3, [r7, #4]
 80044a4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80044a6:	1c9a      	adds	r2, r3, #2
 80044a8:	687b      	ldr	r3, [r7, #4]
 80044aa:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 80044ac:	687b      	ldr	r3, [r7, #4]
 80044ae:	225a      	movs	r2, #90	; 0x5a
 80044b0:	5a9b      	ldrh	r3, [r3, r2]
 80044b2:	b29b      	uxth	r3, r3
 80044b4:	3b01      	subs	r3, #1
 80044b6:	b299      	uxth	r1, r3
 80044b8:	687b      	ldr	r3, [r7, #4]
 80044ba:	225a      	movs	r2, #90	; 0x5a
 80044bc:	5299      	strh	r1, [r3, r2]

    if (huart->RxXferCount == 0U)
 80044be:	687b      	ldr	r3, [r7, #4]
 80044c0:	225a      	movs	r2, #90	; 0x5a
 80044c2:	5a9b      	ldrh	r3, [r3, r2]
 80044c4:	b29b      	uxth	r3, r3
 80044c6:	2b00      	cmp	r3, #0
 80044c8:	d000      	beq.n	80044cc <UART_RxISR_16BIT+0x6c>
 80044ca:	e09c      	b.n	8004606 <UART_RxISR_16BIT+0x1a6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80044cc:	f3ef 8310 	mrs	r3, PRIMASK
 80044d0:	623b      	str	r3, [r7, #32]
  return(result);
 80044d2:	6a3b      	ldr	r3, [r7, #32]
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80044d4:	647b      	str	r3, [r7, #68]	; 0x44
 80044d6:	2301      	movs	r3, #1
 80044d8:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80044da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80044dc:	f383 8810 	msr	PRIMASK, r3
}
 80044e0:	46c0      	nop			; (mov r8, r8)
 80044e2:	687b      	ldr	r3, [r7, #4]
 80044e4:	681b      	ldr	r3, [r3, #0]
 80044e6:	681a      	ldr	r2, [r3, #0]
 80044e8:	687b      	ldr	r3, [r7, #4]
 80044ea:	681b      	ldr	r3, [r3, #0]
 80044ec:	4948      	ldr	r1, [pc, #288]	; (8004610 <UART_RxISR_16BIT+0x1b0>)
 80044ee:	400a      	ands	r2, r1
 80044f0:	601a      	str	r2, [r3, #0]
 80044f2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80044f4:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80044f6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80044f8:	f383 8810 	msr	PRIMASK, r3
}
 80044fc:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80044fe:	f3ef 8310 	mrs	r3, PRIMASK
 8004502:	62fb      	str	r3, [r7, #44]	; 0x2c
  return(result);
 8004504:	6afb      	ldr	r3, [r7, #44]	; 0x2c

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004506:	643b      	str	r3, [r7, #64]	; 0x40
 8004508:	2301      	movs	r3, #1
 800450a:	633b      	str	r3, [r7, #48]	; 0x30
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800450c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800450e:	f383 8810 	msr	PRIMASK, r3
}
 8004512:	46c0      	nop			; (mov r8, r8)
 8004514:	687b      	ldr	r3, [r7, #4]
 8004516:	681b      	ldr	r3, [r3, #0]
 8004518:	689a      	ldr	r2, [r3, #8]
 800451a:	687b      	ldr	r3, [r7, #4]
 800451c:	681b      	ldr	r3, [r3, #0]
 800451e:	2101      	movs	r1, #1
 8004520:	438a      	bics	r2, r1
 8004522:	609a      	str	r2, [r3, #8]
 8004524:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004526:	637b      	str	r3, [r7, #52]	; 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004528:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800452a:	f383 8810 	msr	PRIMASK, r3
}
 800452e:	46c0      	nop			; (mov r8, r8)

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8004530:	687b      	ldr	r3, [r7, #4]
 8004532:	2280      	movs	r2, #128	; 0x80
 8004534:	2120      	movs	r1, #32
 8004536:	5099      	str	r1, [r3, r2]

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8004538:	687b      	ldr	r3, [r7, #4]
 800453a:	2200      	movs	r2, #0
 800453c:	669a      	str	r2, [r3, #104]	; 0x68

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 800453e:	687b      	ldr	r3, [r7, #4]
 8004540:	2200      	movs	r2, #0
 8004542:	665a      	str	r2, [r3, #100]	; 0x64

      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8004544:	687b      	ldr	r3, [r7, #4]
 8004546:	681b      	ldr	r3, [r3, #0]
 8004548:	685a      	ldr	r2, [r3, #4]
 800454a:	2380      	movs	r3, #128	; 0x80
 800454c:	041b      	lsls	r3, r3, #16
 800454e:	4013      	ands	r3, r2
 8004550:	d018      	beq.n	8004584 <UART_RxISR_16BIT+0x124>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004552:	f3ef 8310 	mrs	r3, PRIMASK
 8004556:	617b      	str	r3, [r7, #20]
  return(result);
 8004558:	697b      	ldr	r3, [r7, #20]
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800455a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800455c:	2301      	movs	r3, #1
 800455e:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004560:	69bb      	ldr	r3, [r7, #24]
 8004562:	f383 8810 	msr	PRIMASK, r3
}
 8004566:	46c0      	nop			; (mov r8, r8)
 8004568:	687b      	ldr	r3, [r7, #4]
 800456a:	681b      	ldr	r3, [r3, #0]
 800456c:	681a      	ldr	r2, [r3, #0]
 800456e:	687b      	ldr	r3, [r7, #4]
 8004570:	681b      	ldr	r3, [r3, #0]
 8004572:	4928      	ldr	r1, [pc, #160]	; (8004614 <UART_RxISR_16BIT+0x1b4>)
 8004574:	400a      	ands	r2, r1
 8004576:	601a      	str	r2, [r3, #0]
 8004578:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800457a:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800457c:	69fb      	ldr	r3, [r7, #28]
 800457e:	f383 8810 	msr	PRIMASK, r3
}
 8004582:	46c0      	nop			; (mov r8, r8)
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004584:	687b      	ldr	r3, [r7, #4]
 8004586:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004588:	2b01      	cmp	r3, #1
 800458a:	d12f      	bne.n	80045ec <UART_RxISR_16BIT+0x18c>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800458c:	687b      	ldr	r3, [r7, #4]
 800458e:	2200      	movs	r2, #0
 8004590:	661a      	str	r2, [r3, #96]	; 0x60
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004592:	f3ef 8310 	mrs	r3, PRIMASK
 8004596:	60bb      	str	r3, [r7, #8]
  return(result);
 8004598:	68bb      	ldr	r3, [r7, #8]

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800459a:	63bb      	str	r3, [r7, #56]	; 0x38
 800459c:	2301      	movs	r3, #1
 800459e:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80045a0:	68fb      	ldr	r3, [r7, #12]
 80045a2:	f383 8810 	msr	PRIMASK, r3
}
 80045a6:	46c0      	nop			; (mov r8, r8)
 80045a8:	687b      	ldr	r3, [r7, #4]
 80045aa:	681b      	ldr	r3, [r3, #0]
 80045ac:	681a      	ldr	r2, [r3, #0]
 80045ae:	687b      	ldr	r3, [r7, #4]
 80045b0:	681b      	ldr	r3, [r3, #0]
 80045b2:	2110      	movs	r1, #16
 80045b4:	438a      	bics	r2, r1
 80045b6:	601a      	str	r2, [r3, #0]
 80045b8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80045ba:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80045bc:	693b      	ldr	r3, [r7, #16]
 80045be:	f383 8810 	msr	PRIMASK, r3
}
 80045c2:	46c0      	nop			; (mov r8, r8)

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 80045c4:	687b      	ldr	r3, [r7, #4]
 80045c6:	681b      	ldr	r3, [r3, #0]
 80045c8:	69db      	ldr	r3, [r3, #28]
 80045ca:	2210      	movs	r2, #16
 80045cc:	4013      	ands	r3, r2
 80045ce:	2b10      	cmp	r3, #16
 80045d0:	d103      	bne.n	80045da <UART_RxISR_16BIT+0x17a>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80045d2:	687b      	ldr	r3, [r7, #4]
 80045d4:	681b      	ldr	r3, [r3, #0]
 80045d6:	2210      	movs	r2, #16
 80045d8:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80045da:	687b      	ldr	r3, [r7, #4]
 80045dc:	2258      	movs	r2, #88	; 0x58
 80045de:	5a9a      	ldrh	r2, [r3, r2]
 80045e0:	687b      	ldr	r3, [r7, #4]
 80045e2:	0011      	movs	r1, r2
 80045e4:	0018      	movs	r0, r3
 80045e6:	f7ff f8dd 	bl	80037a4 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 80045ea:	e00c      	b.n	8004606 <UART_RxISR_16BIT+0x1a6>
        HAL_UART_RxCpltCallback(huart);
 80045ec:	687b      	ldr	r3, [r7, #4]
 80045ee:	0018      	movs	r0, r3
 80045f0:	f7fb fe9e 	bl	8000330 <HAL_UART_RxCpltCallback>
}
 80045f4:	e007      	b.n	8004606 <UART_RxISR_16BIT+0x1a6>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 80045f6:	687b      	ldr	r3, [r7, #4]
 80045f8:	681b      	ldr	r3, [r3, #0]
 80045fa:	699a      	ldr	r2, [r3, #24]
 80045fc:	687b      	ldr	r3, [r7, #4]
 80045fe:	681b      	ldr	r3, [r3, #0]
 8004600:	2108      	movs	r1, #8
 8004602:	430a      	orrs	r2, r1
 8004604:	619a      	str	r2, [r3, #24]
}
 8004606:	46c0      	nop			; (mov r8, r8)
 8004608:	46bd      	mov	sp, r7
 800460a:	b014      	add	sp, #80	; 0x50
 800460c:	bd80      	pop	{r7, pc}
 800460e:	46c0      	nop			; (mov r8, r8)
 8004610:	fffffedf 	.word	0xfffffedf
 8004614:	fbffffff 	.word	0xfbffffff

08004618 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8004618:	b580      	push	{r7, lr}
 800461a:	b082      	sub	sp, #8
 800461c:	af00      	add	r7, sp, #0
 800461e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8004620:	46c0      	nop			; (mov r8, r8)
 8004622:	46bd      	mov	sp, r7
 8004624:	b002      	add	sp, #8
 8004626:	bd80      	pop	{r7, pc}

08004628 <__libc_init_array>:
 8004628:	b570      	push	{r4, r5, r6, lr}
 800462a:	2600      	movs	r6, #0
 800462c:	4d0c      	ldr	r5, [pc, #48]	; (8004660 <__libc_init_array+0x38>)
 800462e:	4c0d      	ldr	r4, [pc, #52]	; (8004664 <__libc_init_array+0x3c>)
 8004630:	1b64      	subs	r4, r4, r5
 8004632:	10a4      	asrs	r4, r4, #2
 8004634:	42a6      	cmp	r6, r4
 8004636:	d109      	bne.n	800464c <__libc_init_array+0x24>
 8004638:	2600      	movs	r6, #0
 800463a:	f000 f821 	bl	8004680 <_init>
 800463e:	4d0a      	ldr	r5, [pc, #40]	; (8004668 <__libc_init_array+0x40>)
 8004640:	4c0a      	ldr	r4, [pc, #40]	; (800466c <__libc_init_array+0x44>)
 8004642:	1b64      	subs	r4, r4, r5
 8004644:	10a4      	asrs	r4, r4, #2
 8004646:	42a6      	cmp	r6, r4
 8004648:	d105      	bne.n	8004656 <__libc_init_array+0x2e>
 800464a:	bd70      	pop	{r4, r5, r6, pc}
 800464c:	00b3      	lsls	r3, r6, #2
 800464e:	58eb      	ldr	r3, [r5, r3]
 8004650:	4798      	blx	r3
 8004652:	3601      	adds	r6, #1
 8004654:	e7ee      	b.n	8004634 <__libc_init_array+0xc>
 8004656:	00b3      	lsls	r3, r6, #2
 8004658:	58eb      	ldr	r3, [r5, r3]
 800465a:	4798      	blx	r3
 800465c:	3601      	adds	r6, #1
 800465e:	e7f2      	b.n	8004646 <__libc_init_array+0x1e>
 8004660:	080046d0 	.word	0x080046d0
 8004664:	080046d0 	.word	0x080046d0
 8004668:	080046d0 	.word	0x080046d0
 800466c:	080046d4 	.word	0x080046d4

08004670 <memset>:
 8004670:	0003      	movs	r3, r0
 8004672:	1882      	adds	r2, r0, r2
 8004674:	4293      	cmp	r3, r2
 8004676:	d100      	bne.n	800467a <memset+0xa>
 8004678:	4770      	bx	lr
 800467a:	7019      	strb	r1, [r3, #0]
 800467c:	3301      	adds	r3, #1
 800467e:	e7f9      	b.n	8004674 <memset+0x4>

08004680 <_init>:
 8004680:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004682:	46c0      	nop			; (mov r8, r8)
 8004684:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004686:	bc08      	pop	{r3}
 8004688:	469e      	mov	lr, r3
 800468a:	4770      	bx	lr

0800468c <_fini>:
 800468c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800468e:	46c0      	nop			; (mov r8, r8)
 8004690:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004692:	bc08      	pop	{r3}
 8004694:	469e      	mov	lr, r3
 8004696:	4770      	bx	lr

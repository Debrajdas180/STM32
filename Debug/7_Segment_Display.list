
7_Segment_Display.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000043d8  080000c0  080000c0  000100c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000060  08004498  08004498  00014498  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080044f8  080044f8  000200a4  2**0
                  CONTENTS
  4 .ARM          00000000  080044f8  080044f8  000200a4  2**0
                  CONTENTS
  5 .preinit_array 00000000  080044f8  080044f8  000200a4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080044f8  080044f8  000144f8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080044fc  080044fc  000144fc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000000a4  20000000  08004500  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000010c  200000a4  080045a4  000200a4  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200001b0  080045a4  000201b0  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  000200a4  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000e7a5  00000000  00000000  000200cc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001f5c  00000000  00000000  0002e871  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000c90  00000000  00000000  000307d0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000bc8  00000000  00000000  00031460  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00019c27  00000000  00000000  00032028  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000f43d  00000000  00000000  0004bc4f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00097d5b  00000000  00000000  0005b08c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000f2de7  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002cd8  00000000  00000000  000f2e38  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	; (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	; (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	; (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	200000a4 	.word	0x200000a4
 80000e0:	00000000 	.word	0x00000000
 80000e4:	08004480 	.word	0x08004480

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	; (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	; (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	; (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			; (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	200000a8 	.word	0x200000a8
 8000104:	08004480 	.word	0x08004480

08000108 <strlen>:
 8000108:	2300      	movs	r3, #0
 800010a:	5cc2      	ldrb	r2, [r0, r3]
 800010c:	3301      	adds	r3, #1
 800010e:	2a00      	cmp	r2, #0
 8000110:	d1fb      	bne.n	800010a <strlen+0x2>
 8000112:	1e58      	subs	r0, r3, #1
 8000114:	4770      	bx	lr
	...

08000118 <__udivsi3>:
 8000118:	2200      	movs	r2, #0
 800011a:	0843      	lsrs	r3, r0, #1
 800011c:	428b      	cmp	r3, r1
 800011e:	d374      	bcc.n	800020a <__udivsi3+0xf2>
 8000120:	0903      	lsrs	r3, r0, #4
 8000122:	428b      	cmp	r3, r1
 8000124:	d35f      	bcc.n	80001e6 <__udivsi3+0xce>
 8000126:	0a03      	lsrs	r3, r0, #8
 8000128:	428b      	cmp	r3, r1
 800012a:	d344      	bcc.n	80001b6 <__udivsi3+0x9e>
 800012c:	0b03      	lsrs	r3, r0, #12
 800012e:	428b      	cmp	r3, r1
 8000130:	d328      	bcc.n	8000184 <__udivsi3+0x6c>
 8000132:	0c03      	lsrs	r3, r0, #16
 8000134:	428b      	cmp	r3, r1
 8000136:	d30d      	bcc.n	8000154 <__udivsi3+0x3c>
 8000138:	22ff      	movs	r2, #255	; 0xff
 800013a:	0209      	lsls	r1, r1, #8
 800013c:	ba12      	rev	r2, r2
 800013e:	0c03      	lsrs	r3, r0, #16
 8000140:	428b      	cmp	r3, r1
 8000142:	d302      	bcc.n	800014a <__udivsi3+0x32>
 8000144:	1212      	asrs	r2, r2, #8
 8000146:	0209      	lsls	r1, r1, #8
 8000148:	d065      	beq.n	8000216 <__udivsi3+0xfe>
 800014a:	0b03      	lsrs	r3, r0, #12
 800014c:	428b      	cmp	r3, r1
 800014e:	d319      	bcc.n	8000184 <__udivsi3+0x6c>
 8000150:	e000      	b.n	8000154 <__udivsi3+0x3c>
 8000152:	0a09      	lsrs	r1, r1, #8
 8000154:	0bc3      	lsrs	r3, r0, #15
 8000156:	428b      	cmp	r3, r1
 8000158:	d301      	bcc.n	800015e <__udivsi3+0x46>
 800015a:	03cb      	lsls	r3, r1, #15
 800015c:	1ac0      	subs	r0, r0, r3
 800015e:	4152      	adcs	r2, r2
 8000160:	0b83      	lsrs	r3, r0, #14
 8000162:	428b      	cmp	r3, r1
 8000164:	d301      	bcc.n	800016a <__udivsi3+0x52>
 8000166:	038b      	lsls	r3, r1, #14
 8000168:	1ac0      	subs	r0, r0, r3
 800016a:	4152      	adcs	r2, r2
 800016c:	0b43      	lsrs	r3, r0, #13
 800016e:	428b      	cmp	r3, r1
 8000170:	d301      	bcc.n	8000176 <__udivsi3+0x5e>
 8000172:	034b      	lsls	r3, r1, #13
 8000174:	1ac0      	subs	r0, r0, r3
 8000176:	4152      	adcs	r2, r2
 8000178:	0b03      	lsrs	r3, r0, #12
 800017a:	428b      	cmp	r3, r1
 800017c:	d301      	bcc.n	8000182 <__udivsi3+0x6a>
 800017e:	030b      	lsls	r3, r1, #12
 8000180:	1ac0      	subs	r0, r0, r3
 8000182:	4152      	adcs	r2, r2
 8000184:	0ac3      	lsrs	r3, r0, #11
 8000186:	428b      	cmp	r3, r1
 8000188:	d301      	bcc.n	800018e <__udivsi3+0x76>
 800018a:	02cb      	lsls	r3, r1, #11
 800018c:	1ac0      	subs	r0, r0, r3
 800018e:	4152      	adcs	r2, r2
 8000190:	0a83      	lsrs	r3, r0, #10
 8000192:	428b      	cmp	r3, r1
 8000194:	d301      	bcc.n	800019a <__udivsi3+0x82>
 8000196:	028b      	lsls	r3, r1, #10
 8000198:	1ac0      	subs	r0, r0, r3
 800019a:	4152      	adcs	r2, r2
 800019c:	0a43      	lsrs	r3, r0, #9
 800019e:	428b      	cmp	r3, r1
 80001a0:	d301      	bcc.n	80001a6 <__udivsi3+0x8e>
 80001a2:	024b      	lsls	r3, r1, #9
 80001a4:	1ac0      	subs	r0, r0, r3
 80001a6:	4152      	adcs	r2, r2
 80001a8:	0a03      	lsrs	r3, r0, #8
 80001aa:	428b      	cmp	r3, r1
 80001ac:	d301      	bcc.n	80001b2 <__udivsi3+0x9a>
 80001ae:	020b      	lsls	r3, r1, #8
 80001b0:	1ac0      	subs	r0, r0, r3
 80001b2:	4152      	adcs	r2, r2
 80001b4:	d2cd      	bcs.n	8000152 <__udivsi3+0x3a>
 80001b6:	09c3      	lsrs	r3, r0, #7
 80001b8:	428b      	cmp	r3, r1
 80001ba:	d301      	bcc.n	80001c0 <__udivsi3+0xa8>
 80001bc:	01cb      	lsls	r3, r1, #7
 80001be:	1ac0      	subs	r0, r0, r3
 80001c0:	4152      	adcs	r2, r2
 80001c2:	0983      	lsrs	r3, r0, #6
 80001c4:	428b      	cmp	r3, r1
 80001c6:	d301      	bcc.n	80001cc <__udivsi3+0xb4>
 80001c8:	018b      	lsls	r3, r1, #6
 80001ca:	1ac0      	subs	r0, r0, r3
 80001cc:	4152      	adcs	r2, r2
 80001ce:	0943      	lsrs	r3, r0, #5
 80001d0:	428b      	cmp	r3, r1
 80001d2:	d301      	bcc.n	80001d8 <__udivsi3+0xc0>
 80001d4:	014b      	lsls	r3, r1, #5
 80001d6:	1ac0      	subs	r0, r0, r3
 80001d8:	4152      	adcs	r2, r2
 80001da:	0903      	lsrs	r3, r0, #4
 80001dc:	428b      	cmp	r3, r1
 80001de:	d301      	bcc.n	80001e4 <__udivsi3+0xcc>
 80001e0:	010b      	lsls	r3, r1, #4
 80001e2:	1ac0      	subs	r0, r0, r3
 80001e4:	4152      	adcs	r2, r2
 80001e6:	08c3      	lsrs	r3, r0, #3
 80001e8:	428b      	cmp	r3, r1
 80001ea:	d301      	bcc.n	80001f0 <__udivsi3+0xd8>
 80001ec:	00cb      	lsls	r3, r1, #3
 80001ee:	1ac0      	subs	r0, r0, r3
 80001f0:	4152      	adcs	r2, r2
 80001f2:	0883      	lsrs	r3, r0, #2
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d301      	bcc.n	80001fc <__udivsi3+0xe4>
 80001f8:	008b      	lsls	r3, r1, #2
 80001fa:	1ac0      	subs	r0, r0, r3
 80001fc:	4152      	adcs	r2, r2
 80001fe:	0843      	lsrs	r3, r0, #1
 8000200:	428b      	cmp	r3, r1
 8000202:	d301      	bcc.n	8000208 <__udivsi3+0xf0>
 8000204:	004b      	lsls	r3, r1, #1
 8000206:	1ac0      	subs	r0, r0, r3
 8000208:	4152      	adcs	r2, r2
 800020a:	1a41      	subs	r1, r0, r1
 800020c:	d200      	bcs.n	8000210 <__udivsi3+0xf8>
 800020e:	4601      	mov	r1, r0
 8000210:	4152      	adcs	r2, r2
 8000212:	4610      	mov	r0, r2
 8000214:	4770      	bx	lr
 8000216:	e7ff      	b.n	8000218 <__udivsi3+0x100>
 8000218:	b501      	push	{r0, lr}
 800021a:	2000      	movs	r0, #0
 800021c:	f000 f806 	bl	800022c <__aeabi_idiv0>
 8000220:	bd02      	pop	{r1, pc}
 8000222:	46c0      	nop			; (mov r8, r8)

08000224 <__aeabi_uidivmod>:
 8000224:	2900      	cmp	r1, #0
 8000226:	d0f7      	beq.n	8000218 <__udivsi3+0x100>
 8000228:	e776      	b.n	8000118 <__udivsi3>
 800022a:	4770      	bx	lr

0800022c <__aeabi_idiv0>:
 800022c:	4770      	bx	lr
 800022e:	46c0      	nop			; (mov r8, r8)

08000230 <high_low>:
#define OE_pin GPIO_PIN_15 // edit the pin number as your require
#define OE_GPIO_port GPIOB // edit the port number as your require



void high_low(uint32_t arr[],int size){
 8000230:	b580      	push	{r7, lr}
 8000232:	b082      	sub	sp, #8
 8000234:	af00      	add	r7, sp, #0
 8000236:	6078      	str	r0, [r7, #4]
 8000238:	6039      	str	r1, [r7, #0]

static volatile int i , j  = 0;
    HAL_GPIO_WritePin(LE_GPIO_port, LE_pin, 0);
 800023a:	2380      	movs	r3, #128	; 0x80
 800023c:	00db      	lsls	r3, r3, #3
 800023e:	4825      	ldr	r0, [pc, #148]	; (80002d4 <high_low+0xa4>)
 8000240:	2200      	movs	r2, #0
 8000242:	0019      	movs	r1, r3
 8000244:	f000 ff0e 	bl	8001064 <HAL_GPIO_WritePin>
if (arr[j] & (uint32_t)1<<i)
 8000248:	4b23      	ldr	r3, [pc, #140]	; (80002d8 <high_low+0xa8>)
 800024a:	681b      	ldr	r3, [r3, #0]
 800024c:	009b      	lsls	r3, r3, #2
 800024e:	687a      	ldr	r2, [r7, #4]
 8000250:	18d3      	adds	r3, r2, r3
 8000252:	681a      	ldr	r2, [r3, #0]
 8000254:	4b21      	ldr	r3, [pc, #132]	; (80002dc <high_low+0xac>)
 8000256:	681b      	ldr	r3, [r3, #0]
 8000258:	40da      	lsrs	r2, r3
 800025a:	0013      	movs	r3, r2
 800025c:	2201      	movs	r2, #1
 800025e:	4013      	ands	r3, r2
 8000260:	d006      	beq.n	8000270 <high_low+0x40>
	HAL_GPIO_WritePin(SDA_GPIO_Port, SDA_Pin, 1);
 8000262:	4b1c      	ldr	r3, [pc, #112]	; (80002d4 <high_low+0xa4>)
 8000264:	2201      	movs	r2, #1
 8000266:	2102      	movs	r1, #2
 8000268:	0018      	movs	r0, r3
 800026a:	f000 fefb 	bl	8001064 <HAL_GPIO_WritePin>
 800026e:	e005      	b.n	800027c <high_low+0x4c>
else
	HAL_GPIO_WritePin(SDA_GPIO_Port, SDA_Pin, 0);
 8000270:	4b18      	ldr	r3, [pc, #96]	; (80002d4 <high_low+0xa4>)
 8000272:	2200      	movs	r2, #0
 8000274:	2102      	movs	r1, #2
 8000276:	0018      	movs	r0, r3
 8000278:	f000 fef4 	bl	8001064 <HAL_GPIO_WritePin>
i++;
 800027c:	4b17      	ldr	r3, [pc, #92]	; (80002dc <high_low+0xac>)
 800027e:	681b      	ldr	r3, [r3, #0]
 8000280:	1c5a      	adds	r2, r3, #1
 8000282:	4b16      	ldr	r3, [pc, #88]	; (80002dc <high_low+0xac>)
 8000284:	601a      	str	r2, [r3, #0]
if (i==32){
 8000286:	4b15      	ldr	r3, [pc, #84]	; (80002dc <high_low+0xac>)
 8000288:	681b      	ldr	r3, [r3, #0]
 800028a:	2b20      	cmp	r3, #32
 800028c:	d115      	bne.n	80002ba <high_low+0x8a>
	i = 0;
 800028e:	4b13      	ldr	r3, [pc, #76]	; (80002dc <high_low+0xac>)
 8000290:	2200      	movs	r2, #0
 8000292:	601a      	str	r2, [r3, #0]
	HAL_GPIO_WritePin(LE_GPIO_port, LE_pin, 1);
 8000294:	2380      	movs	r3, #128	; 0x80
 8000296:	00db      	lsls	r3, r3, #3
 8000298:	480e      	ldr	r0, [pc, #56]	; (80002d4 <high_low+0xa4>)
 800029a:	2201      	movs	r2, #1
 800029c:	0019      	movs	r1, r3
 800029e:	f000 fee1 	bl	8001064 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(OE_GPIO_port, OE_pin, 0);
 80002a2:	2380      	movs	r3, #128	; 0x80
 80002a4:	021b      	lsls	r3, r3, #8
 80002a6:	480b      	ldr	r0, [pc, #44]	; (80002d4 <high_low+0xa4>)
 80002a8:	2200      	movs	r2, #0
 80002aa:	0019      	movs	r1, r3
 80002ac:	f000 feda 	bl	8001064 <HAL_GPIO_WritePin>
	j++;
 80002b0:	4b09      	ldr	r3, [pc, #36]	; (80002d8 <high_low+0xa8>)
 80002b2:	681b      	ldr	r3, [r3, #0]
 80002b4:	1c5a      	adds	r2, r3, #1
 80002b6:	4b08      	ldr	r3, [pc, #32]	; (80002d8 <high_low+0xa8>)
 80002b8:	601a      	str	r2, [r3, #0]
}
if (j == size){
 80002ba:	4b07      	ldr	r3, [pc, #28]	; (80002d8 <high_low+0xa8>)
 80002bc:	681b      	ldr	r3, [r3, #0]
 80002be:	683a      	ldr	r2, [r7, #0]
 80002c0:	429a      	cmp	r2, r3
 80002c2:	d102      	bne.n	80002ca <high_low+0x9a>
	j = 0 ;
 80002c4:	4b04      	ldr	r3, [pc, #16]	; (80002d8 <high_low+0xa8>)
 80002c6:	2200      	movs	r2, #0
 80002c8:	601a      	str	r2, [r3, #0]
}
}
 80002ca:	46c0      	nop			; (mov r8, r8)
 80002cc:	46bd      	mov	sp, r7
 80002ce:	b002      	add	sp, #8
 80002d0:	bd80      	pop	{r7, pc}
 80002d2:	46c0      	nop			; (mov r8, r8)
 80002d4:	48000400 	.word	0x48000400
 80002d8:	200000c0 	.word	0x200000c0
 80002dc:	200000c4 	.word	0x200000c4

080002e0 <HAL_UART_RxCpltCallback>:
uint8_t rbuf [10];
size_t length = 0;
size_t g_receivedFlag=0;


void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart){
 80002e0:	b580      	push	{r7, lr}
 80002e2:	b082      	sub	sp, #8
 80002e4:	af00      	add	r7, sp, #0
 80002e6:	6078      	str	r0, [r7, #4]
	if(length<10 && (rbuf[length]!='\r' && rbuf[length]!='\n') ){
 80002e8:	4b18      	ldr	r3, [pc, #96]	; (800034c <HAL_UART_RxCpltCallback+0x6c>)
 80002ea:	681b      	ldr	r3, [r3, #0]
 80002ec:	2b09      	cmp	r3, #9
 80002ee:	d81a      	bhi.n	8000326 <HAL_UART_RxCpltCallback+0x46>
 80002f0:	4b16      	ldr	r3, [pc, #88]	; (800034c <HAL_UART_RxCpltCallback+0x6c>)
 80002f2:	681b      	ldr	r3, [r3, #0]
 80002f4:	4a16      	ldr	r2, [pc, #88]	; (8000350 <HAL_UART_RxCpltCallback+0x70>)
 80002f6:	5cd3      	ldrb	r3, [r2, r3]
 80002f8:	2b0d      	cmp	r3, #13
 80002fa:	d014      	beq.n	8000326 <HAL_UART_RxCpltCallback+0x46>
 80002fc:	4b13      	ldr	r3, [pc, #76]	; (800034c <HAL_UART_RxCpltCallback+0x6c>)
 80002fe:	681b      	ldr	r3, [r3, #0]
 8000300:	4a13      	ldr	r2, [pc, #76]	; (8000350 <HAL_UART_RxCpltCallback+0x70>)
 8000302:	5cd3      	ldrb	r3, [r2, r3]
 8000304:	2b0a      	cmp	r3, #10
 8000306:	d00e      	beq.n	8000326 <HAL_UART_RxCpltCallback+0x46>
		length++;
 8000308:	4b10      	ldr	r3, [pc, #64]	; (800034c <HAL_UART_RxCpltCallback+0x6c>)
 800030a:	681b      	ldr	r3, [r3, #0]
 800030c:	1c5a      	adds	r2, r3, #1
 800030e:	4b0f      	ldr	r3, [pc, #60]	; (800034c <HAL_UART_RxCpltCallback+0x6c>)
 8000310:	601a      	str	r2, [r3, #0]
		HAL_UART_Receive_IT(&huart2,rbuf+length,1);
 8000312:	4b0e      	ldr	r3, [pc, #56]	; (800034c <HAL_UART_RxCpltCallback+0x6c>)
 8000314:	681a      	ldr	r2, [r3, #0]
 8000316:	4b0e      	ldr	r3, [pc, #56]	; (8000350 <HAL_UART_RxCpltCallback+0x70>)
 8000318:	18d1      	adds	r1, r2, r3
 800031a:	4b0e      	ldr	r3, [pc, #56]	; (8000354 <HAL_UART_RxCpltCallback+0x74>)
 800031c:	2201      	movs	r2, #1
 800031e:	0018      	movs	r0, r3
 8000320:	f002 fdf8 	bl	8002f14 <HAL_UART_Receive_IT>
	}else if(rbuf[length]=='\r' || rbuf[length]=='\n'){
		g_receivedFlag=1;

	}
}
 8000324:	e00e      	b.n	8000344 <HAL_UART_RxCpltCallback+0x64>
	}else if(rbuf[length]=='\r' || rbuf[length]=='\n'){
 8000326:	4b09      	ldr	r3, [pc, #36]	; (800034c <HAL_UART_RxCpltCallback+0x6c>)
 8000328:	681b      	ldr	r3, [r3, #0]
 800032a:	4a09      	ldr	r2, [pc, #36]	; (8000350 <HAL_UART_RxCpltCallback+0x70>)
 800032c:	5cd3      	ldrb	r3, [r2, r3]
 800032e:	2b0d      	cmp	r3, #13
 8000330:	d005      	beq.n	800033e <HAL_UART_RxCpltCallback+0x5e>
 8000332:	4b06      	ldr	r3, [pc, #24]	; (800034c <HAL_UART_RxCpltCallback+0x6c>)
 8000334:	681b      	ldr	r3, [r3, #0]
 8000336:	4a06      	ldr	r2, [pc, #24]	; (8000350 <HAL_UART_RxCpltCallback+0x70>)
 8000338:	5cd3      	ldrb	r3, [r2, r3]
 800033a:	2b0a      	cmp	r3, #10
 800033c:	d102      	bne.n	8000344 <HAL_UART_RxCpltCallback+0x64>
		g_receivedFlag=1;
 800033e:	4b06      	ldr	r3, [pc, #24]	; (8000358 <HAL_UART_RxCpltCallback+0x78>)
 8000340:	2201      	movs	r2, #1
 8000342:	601a      	str	r2, [r3, #0]
}
 8000344:	46c0      	nop			; (mov r8, r8)
 8000346:	46bd      	mov	sp, r7
 8000348:	b002      	add	sp, #8
 800034a:	bd80      	pop	{r7, pc}
 800034c:	200001a4 	.word	0x200001a4
 8000350:	20000198 	.word	0x20000198
 8000354:	20000110 	.word	0x20000110
 8000358:	200001a8 	.word	0x200001a8

0800035c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800035c:	b580      	push	{r7, lr}
 800035e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000360:	f000 fb48 	bl	80009f4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000364:	f000 f852 	bl	800040c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000368:	f000 f98a 	bl	8000680 <MX_GPIO_Init>
  MX_TIM1_Init();
 800036c:	f000 f8a2 	bl	80004b4 <MX_TIM1_Init>
  MX_USART2_UART_Init();
 8000370:	f000 f956 	bl	8000620 <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */

  TIM1->CCR1 = 50 ;
 8000374:	4b1e      	ldr	r3, [pc, #120]	; (80003f0 <main+0x94>)
 8000376:	2232      	movs	r2, #50	; 0x32
 8000378:	635a      	str	r2, [r3, #52]	; 0x34
  HAL_TIM_PWM_Start_IT(&htim1, TIM_CHANNEL_1);
 800037a:	4b1e      	ldr	r3, [pc, #120]	; (80003f4 <main+0x98>)
 800037c:	2100      	movs	r1, #0
 800037e:	0018      	movs	r0, r3
 8000380:	f001 fd26 	bl	8001dd0 <HAL_TIM_PWM_Start_IT>

  HAL_UART_Transmit_IT(&huart2, tbuf, strlen((char*)tbuf));
 8000384:	4b1c      	ldr	r3, [pc, #112]	; (80003f8 <main+0x9c>)
 8000386:	0018      	movs	r0, r3
 8000388:	f7ff febe 	bl	8000108 <strlen>
 800038c:	0003      	movs	r3, r0
 800038e:	b29a      	uxth	r2, r3
 8000390:	4919      	ldr	r1, [pc, #100]	; (80003f8 <main+0x9c>)
 8000392:	4b1a      	ldr	r3, [pc, #104]	; (80003fc <main+0xa0>)
 8000394:	0018      	movs	r0, r3
 8000396:	f002 fd4d 	bl	8002e34 <HAL_UART_Transmit_IT>
  HAL_UART_Receive_IT(&huart2,rbuf, 1);
 800039a:	4919      	ldr	r1, [pc, #100]	; (8000400 <main+0xa4>)
 800039c:	4b17      	ldr	r3, [pc, #92]	; (80003fc <main+0xa0>)
 800039e:	2201      	movs	r2, #1
 80003a0:	0018      	movs	r0, r3
 80003a2:	f002 fdb7 	bl	8002f14 <HAL_UART_Receive_IT>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {

	  if(g_receivedFlag){
 80003a6:	4b17      	ldr	r3, [pc, #92]	; (8000404 <main+0xa8>)
 80003a8:	681b      	ldr	r3, [r3, #0]
 80003aa:	2b00      	cmp	r3, #0
 80003ac:	d0fb      	beq.n	80003a6 <main+0x4a>
			  HAL_UART_Transmit_IT(&huart2, rbuf, length);
 80003ae:	4b16      	ldr	r3, [pc, #88]	; (8000408 <main+0xac>)
 80003b0:	681b      	ldr	r3, [r3, #0]
 80003b2:	b29a      	uxth	r2, r3
 80003b4:	4912      	ldr	r1, [pc, #72]	; (8000400 <main+0xa4>)
 80003b6:	4b11      	ldr	r3, [pc, #68]	; (80003fc <main+0xa0>)
 80003b8:	0018      	movs	r0, r3
 80003ba:	f002 fd3b 	bl	8002e34 <HAL_UART_Transmit_IT>
			  g_receivedFlag=0;
 80003be:	4b11      	ldr	r3, [pc, #68]	; (8000404 <main+0xa8>)
 80003c0:	2200      	movs	r2, #0
 80003c2:	601a      	str	r2, [r3, #0]
			  length=0;
 80003c4:	4b10      	ldr	r3, [pc, #64]	; (8000408 <main+0xac>)
 80003c6:	2200      	movs	r2, #0
 80003c8:	601a      	str	r2, [r3, #0]
			  HAL_UART_Transmit_IT(&huart2, tbuf, strlen((char*)tbuf));
 80003ca:	4b0b      	ldr	r3, [pc, #44]	; (80003f8 <main+0x9c>)
 80003cc:	0018      	movs	r0, r3
 80003ce:	f7ff fe9b 	bl	8000108 <strlen>
 80003d2:	0003      	movs	r3, r0
 80003d4:	b29a      	uxth	r2, r3
 80003d6:	4908      	ldr	r1, [pc, #32]	; (80003f8 <main+0x9c>)
 80003d8:	4b08      	ldr	r3, [pc, #32]	; (80003fc <main+0xa0>)
 80003da:	0018      	movs	r0, r3
 80003dc:	f002 fd2a 	bl	8002e34 <HAL_UART_Transmit_IT>
			  HAL_UART_Receive_IT(&huart2,rbuf, 1);
 80003e0:	4907      	ldr	r1, [pc, #28]	; (8000400 <main+0xa4>)
 80003e2:	4b06      	ldr	r3, [pc, #24]	; (80003fc <main+0xa0>)
 80003e4:	2201      	movs	r2, #1
 80003e6:	0018      	movs	r0, r3
 80003e8:	f002 fd94 	bl	8002f14 <HAL_UART_Receive_IT>
	  if(g_receivedFlag){
 80003ec:	e7db      	b.n	80003a6 <main+0x4a>
 80003ee:	46c0      	nop			; (mov r8, r8)
 80003f0:	40012c00 	.word	0x40012c00
 80003f4:	200000c8 	.word	0x200000c8
 80003f8:	20000000 	.word	0x20000000
 80003fc:	20000110 	.word	0x20000110
 8000400:	20000198 	.word	0x20000198
 8000404:	200001a8 	.word	0x200001a8
 8000408:	200001a4 	.word	0x200001a4

0800040c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800040c:	b590      	push	{r4, r7, lr}
 800040e:	b099      	sub	sp, #100	; 0x64
 8000410:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000412:	242c      	movs	r4, #44	; 0x2c
 8000414:	193b      	adds	r3, r7, r4
 8000416:	0018      	movs	r0, r3
 8000418:	2334      	movs	r3, #52	; 0x34
 800041a:	001a      	movs	r2, r3
 800041c:	2100      	movs	r1, #0
 800041e:	f004 f827 	bl	8004470 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000422:	231c      	movs	r3, #28
 8000424:	18fb      	adds	r3, r7, r3
 8000426:	0018      	movs	r0, r3
 8000428:	2310      	movs	r3, #16
 800042a:	001a      	movs	r2, r3
 800042c:	2100      	movs	r1, #0
 800042e:	f004 f81f 	bl	8004470 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000432:	003b      	movs	r3, r7
 8000434:	0018      	movs	r0, r3
 8000436:	231c      	movs	r3, #28
 8000438:	001a      	movs	r2, r3
 800043a:	2100      	movs	r1, #0
 800043c:	f004 f818 	bl	8004470 <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI48;
 8000440:	193b      	adds	r3, r7, r4
 8000442:	2220      	movs	r2, #32
 8000444:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
 8000446:	193b      	adds	r3, r7, r4
 8000448:	2201      	movs	r2, #1
 800044a:	621a      	str	r2, [r3, #32]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 800044c:	193b      	adds	r3, r7, r4
 800044e:	2200      	movs	r2, #0
 8000450:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000452:	193b      	adds	r3, r7, r4
 8000454:	0018      	movs	r0, r3
 8000456:	f000 fe23 	bl	80010a0 <HAL_RCC_OscConfig>
 800045a:	1e03      	subs	r3, r0, #0
 800045c:	d001      	beq.n	8000462 <SystemClock_Config+0x56>
  {
    Error_Handler();
 800045e:	f000 f971 	bl	8000744 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000462:	211c      	movs	r1, #28
 8000464:	187b      	adds	r3, r7, r1
 8000466:	2207      	movs	r2, #7
 8000468:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI48;
 800046a:	187b      	adds	r3, r7, r1
 800046c:	2203      	movs	r2, #3
 800046e:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000470:	187b      	adds	r3, r7, r1
 8000472:	2200      	movs	r2, #0
 8000474:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000476:	187b      	adds	r3, r7, r1
 8000478:	2200      	movs	r2, #0
 800047a:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 800047c:	187b      	adds	r3, r7, r1
 800047e:	2101      	movs	r1, #1
 8000480:	0018      	movs	r0, r3
 8000482:	f001 f993 	bl	80017ac <HAL_RCC_ClockConfig>
 8000486:	1e03      	subs	r3, r0, #0
 8000488:	d001      	beq.n	800048e <SystemClock_Config+0x82>
  {
    Error_Handler();
 800048a:	f000 f95b 	bl	8000744 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 800048e:	003b      	movs	r3, r7
 8000490:	2202      	movs	r2, #2
 8000492:	601a      	str	r2, [r3, #0]
  PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8000494:	003b      	movs	r3, r7
 8000496:	2200      	movs	r2, #0
 8000498:	60da      	str	r2, [r3, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800049a:	003b      	movs	r3, r7
 800049c:	0018      	movs	r0, r3
 800049e:	f001 faf1 	bl	8001a84 <HAL_RCCEx_PeriphCLKConfig>
 80004a2:	1e03      	subs	r3, r0, #0
 80004a4:	d001      	beq.n	80004aa <SystemClock_Config+0x9e>
  {
    Error_Handler();
 80004a6:	f000 f94d 	bl	8000744 <Error_Handler>
  }
}
 80004aa:	46c0      	nop			; (mov r8, r8)
 80004ac:	46bd      	mov	sp, r7
 80004ae:	b019      	add	sp, #100	; 0x64
 80004b0:	bd90      	pop	{r4, r7, pc}
	...

080004b4 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 80004b4:	b580      	push	{r7, lr}
 80004b6:	b096      	sub	sp, #88	; 0x58
 80004b8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80004ba:	2348      	movs	r3, #72	; 0x48
 80004bc:	18fb      	adds	r3, r7, r3
 80004be:	0018      	movs	r0, r3
 80004c0:	2310      	movs	r3, #16
 80004c2:	001a      	movs	r2, r3
 80004c4:	2100      	movs	r1, #0
 80004c6:	f003 ffd3 	bl	8004470 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80004ca:	2340      	movs	r3, #64	; 0x40
 80004cc:	18fb      	adds	r3, r7, r3
 80004ce:	0018      	movs	r0, r3
 80004d0:	2308      	movs	r3, #8
 80004d2:	001a      	movs	r2, r3
 80004d4:	2100      	movs	r1, #0
 80004d6:	f003 ffcb 	bl	8004470 <memset>
  TIM_OC_InitTypeDef sConfigOC = {0};
 80004da:	2324      	movs	r3, #36	; 0x24
 80004dc:	18fb      	adds	r3, r7, r3
 80004de:	0018      	movs	r0, r3
 80004e0:	231c      	movs	r3, #28
 80004e2:	001a      	movs	r2, r3
 80004e4:	2100      	movs	r1, #0
 80004e6:	f003 ffc3 	bl	8004470 <memset>
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 80004ea:	1d3b      	adds	r3, r7, #4
 80004ec:	0018      	movs	r0, r3
 80004ee:	2320      	movs	r3, #32
 80004f0:	001a      	movs	r2, r3
 80004f2:	2100      	movs	r1, #0
 80004f4:	f003 ffbc 	bl	8004470 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 80004f8:	4b46      	ldr	r3, [pc, #280]	; (8000614 <MX_TIM1_Init+0x160>)
 80004fa:	4a47      	ldr	r2, [pc, #284]	; (8000618 <MX_TIM1_Init+0x164>)
 80004fc:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 10000;
 80004fe:	4b45      	ldr	r3, [pc, #276]	; (8000614 <MX_TIM1_Init+0x160>)
 8000500:	4a46      	ldr	r2, [pc, #280]	; (800061c <MX_TIM1_Init+0x168>)
 8000502:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000504:	4b43      	ldr	r3, [pc, #268]	; (8000614 <MX_TIM1_Init+0x160>)
 8000506:	2200      	movs	r2, #0
 8000508:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 150;
 800050a:	4b42      	ldr	r3, [pc, #264]	; (8000614 <MX_TIM1_Init+0x160>)
 800050c:	2296      	movs	r2, #150	; 0x96
 800050e:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000510:	4b40      	ldr	r3, [pc, #256]	; (8000614 <MX_TIM1_Init+0x160>)
 8000512:	2200      	movs	r2, #0
 8000514:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8000516:	4b3f      	ldr	r3, [pc, #252]	; (8000614 <MX_TIM1_Init+0x160>)
 8000518:	2200      	movs	r2, #0
 800051a:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 800051c:	4b3d      	ldr	r3, [pc, #244]	; (8000614 <MX_TIM1_Init+0x160>)
 800051e:	2280      	movs	r2, #128	; 0x80
 8000520:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8000522:	4b3c      	ldr	r3, [pc, #240]	; (8000614 <MX_TIM1_Init+0x160>)
 8000524:	0018      	movs	r0, r3
 8000526:	f001 fbab 	bl	8001c80 <HAL_TIM_Base_Init>
 800052a:	1e03      	subs	r3, r0, #0
 800052c:	d001      	beq.n	8000532 <MX_TIM1_Init+0x7e>
  {
    Error_Handler();
 800052e:	f000 f909 	bl	8000744 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000532:	2148      	movs	r1, #72	; 0x48
 8000534:	187b      	adds	r3, r7, r1
 8000536:	2280      	movs	r2, #128	; 0x80
 8000538:	0152      	lsls	r2, r2, #5
 800053a:	601a      	str	r2, [r3, #0]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 800053c:	187a      	adds	r2, r7, r1
 800053e:	4b35      	ldr	r3, [pc, #212]	; (8000614 <MX_TIM1_Init+0x160>)
 8000540:	0011      	movs	r1, r2
 8000542:	0018      	movs	r0, r3
 8000544:	f001 ff20 	bl	8002388 <HAL_TIM_ConfigClockSource>
 8000548:	1e03      	subs	r3, r0, #0
 800054a:	d001      	beq.n	8000550 <MX_TIM1_Init+0x9c>
  {
    Error_Handler();
 800054c:	f000 f8fa 	bl	8000744 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8000550:	4b30      	ldr	r3, [pc, #192]	; (8000614 <MX_TIM1_Init+0x160>)
 8000552:	0018      	movs	r0, r3
 8000554:	f001 fbe4 	bl	8001d20 <HAL_TIM_PWM_Init>
 8000558:	1e03      	subs	r3, r0, #0
 800055a:	d001      	beq.n	8000560 <MX_TIM1_Init+0xac>
  {
    Error_Handler();
 800055c:	f000 f8f2 	bl	8000744 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000560:	2140      	movs	r1, #64	; 0x40
 8000562:	187b      	adds	r3, r7, r1
 8000564:	2200      	movs	r2, #0
 8000566:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000568:	187b      	adds	r3, r7, r1
 800056a:	2200      	movs	r2, #0
 800056c:	605a      	str	r2, [r3, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 800056e:	187a      	adds	r2, r7, r1
 8000570:	4b28      	ldr	r3, [pc, #160]	; (8000614 <MX_TIM1_Init+0x160>)
 8000572:	0011      	movs	r1, r2
 8000574:	0018      	movs	r0, r3
 8000576:	f002 fb3d 	bl	8002bf4 <HAL_TIMEx_MasterConfigSynchronization>
 800057a:	1e03      	subs	r3, r0, #0
 800057c:	d001      	beq.n	8000582 <MX_TIM1_Init+0xce>
  {
    Error_Handler();
 800057e:	f000 f8e1 	bl	8000744 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000582:	2124      	movs	r1, #36	; 0x24
 8000584:	187b      	adds	r3, r7, r1
 8000586:	2260      	movs	r2, #96	; 0x60
 8000588:	601a      	str	r2, [r3, #0]
  sConfigOC.Pulse = 50;
 800058a:	187b      	adds	r3, r7, r1
 800058c:	2232      	movs	r2, #50	; 0x32
 800058e:	605a      	str	r2, [r3, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000590:	187b      	adds	r3, r7, r1
 8000592:	2200      	movs	r2, #0
 8000594:	609a      	str	r2, [r3, #8]
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8000596:	187b      	adds	r3, r7, r1
 8000598:	2200      	movs	r2, #0
 800059a:	60da      	str	r2, [r3, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800059c:	187b      	adds	r3, r7, r1
 800059e:	2200      	movs	r2, #0
 80005a0:	611a      	str	r2, [r3, #16]
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 80005a2:	187b      	adds	r3, r7, r1
 80005a4:	2200      	movs	r2, #0
 80005a6:	615a      	str	r2, [r3, #20]
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 80005a8:	187b      	adds	r3, r7, r1
 80005aa:	2200      	movs	r2, #0
 80005ac:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80005ae:	1879      	adds	r1, r7, r1
 80005b0:	4b18      	ldr	r3, [pc, #96]	; (8000614 <MX_TIM1_Init+0x160>)
 80005b2:	2200      	movs	r2, #0
 80005b4:	0018      	movs	r0, r3
 80005b6:	f001 fe21 	bl	80021fc <HAL_TIM_PWM_ConfigChannel>
 80005ba:	1e03      	subs	r3, r0, #0
 80005bc:	d001      	beq.n	80005c2 <MX_TIM1_Init+0x10e>
  {
    Error_Handler();
 80005be:	f000 f8c1 	bl	8000744 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 80005c2:	1d3b      	adds	r3, r7, #4
 80005c4:	2200      	movs	r2, #0
 80005c6:	601a      	str	r2, [r3, #0]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 80005c8:	1d3b      	adds	r3, r7, #4
 80005ca:	2200      	movs	r2, #0
 80005cc:	605a      	str	r2, [r3, #4]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 80005ce:	1d3b      	adds	r3, r7, #4
 80005d0:	2200      	movs	r2, #0
 80005d2:	609a      	str	r2, [r3, #8]
  sBreakDeadTimeConfig.DeadTime = 0;
 80005d4:	1d3b      	adds	r3, r7, #4
 80005d6:	2200      	movs	r2, #0
 80005d8:	60da      	str	r2, [r3, #12]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 80005da:	1d3b      	adds	r3, r7, #4
 80005dc:	2200      	movs	r2, #0
 80005de:	611a      	str	r2, [r3, #16]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 80005e0:	1d3b      	adds	r3, r7, #4
 80005e2:	2280      	movs	r2, #128	; 0x80
 80005e4:	0192      	lsls	r2, r2, #6
 80005e6:	615a      	str	r2, [r3, #20]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 80005e8:	1d3b      	adds	r3, r7, #4
 80005ea:	2200      	movs	r2, #0
 80005ec:	61da      	str	r2, [r3, #28]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 80005ee:	1d3a      	adds	r2, r7, #4
 80005f0:	4b08      	ldr	r3, [pc, #32]	; (8000614 <MX_TIM1_Init+0x160>)
 80005f2:	0011      	movs	r1, r2
 80005f4:	0018      	movs	r0, r3
 80005f6:	f002 fb5b 	bl	8002cb0 <HAL_TIMEx_ConfigBreakDeadTime>
 80005fa:	1e03      	subs	r3, r0, #0
 80005fc:	d001      	beq.n	8000602 <MX_TIM1_Init+0x14e>
  {
    Error_Handler();
 80005fe:	f000 f8a1 	bl	8000744 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8000602:	4b04      	ldr	r3, [pc, #16]	; (8000614 <MX_TIM1_Init+0x160>)
 8000604:	0018      	movs	r0, r3
 8000606:	f000 f8ef 	bl	80007e8 <HAL_TIM_MspPostInit>

}
 800060a:	46c0      	nop			; (mov r8, r8)
 800060c:	46bd      	mov	sp, r7
 800060e:	b016      	add	sp, #88	; 0x58
 8000610:	bd80      	pop	{r7, pc}
 8000612:	46c0      	nop			; (mov r8, r8)
 8000614:	200000c8 	.word	0x200000c8
 8000618:	40012c00 	.word	0x40012c00
 800061c:	00002710 	.word	0x00002710

08000620 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000620:	b580      	push	{r7, lr}
 8000622:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000624:	4b14      	ldr	r3, [pc, #80]	; (8000678 <MX_USART2_UART_Init+0x58>)
 8000626:	4a15      	ldr	r2, [pc, #84]	; (800067c <MX_USART2_UART_Init+0x5c>)
 8000628:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800062a:	4b13      	ldr	r3, [pc, #76]	; (8000678 <MX_USART2_UART_Init+0x58>)
 800062c:	22e1      	movs	r2, #225	; 0xe1
 800062e:	0252      	lsls	r2, r2, #9
 8000630:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000632:	4b11      	ldr	r3, [pc, #68]	; (8000678 <MX_USART2_UART_Init+0x58>)
 8000634:	2200      	movs	r2, #0
 8000636:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000638:	4b0f      	ldr	r3, [pc, #60]	; (8000678 <MX_USART2_UART_Init+0x58>)
 800063a:	2200      	movs	r2, #0
 800063c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800063e:	4b0e      	ldr	r3, [pc, #56]	; (8000678 <MX_USART2_UART_Init+0x58>)
 8000640:	2200      	movs	r2, #0
 8000642:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000644:	4b0c      	ldr	r3, [pc, #48]	; (8000678 <MX_USART2_UART_Init+0x58>)
 8000646:	220c      	movs	r2, #12
 8000648:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800064a:	4b0b      	ldr	r3, [pc, #44]	; (8000678 <MX_USART2_UART_Init+0x58>)
 800064c:	2200      	movs	r2, #0
 800064e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000650:	4b09      	ldr	r3, [pc, #36]	; (8000678 <MX_USART2_UART_Init+0x58>)
 8000652:	2200      	movs	r2, #0
 8000654:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000656:	4b08      	ldr	r3, [pc, #32]	; (8000678 <MX_USART2_UART_Init+0x58>)
 8000658:	2200      	movs	r2, #0
 800065a:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800065c:	4b06      	ldr	r3, [pc, #24]	; (8000678 <MX_USART2_UART_Init+0x58>)
 800065e:	2200      	movs	r2, #0
 8000660:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000662:	4b05      	ldr	r3, [pc, #20]	; (8000678 <MX_USART2_UART_Init+0x58>)
 8000664:	0018      	movs	r0, r3
 8000666:	f002 fb91 	bl	8002d8c <HAL_UART_Init>
 800066a:	1e03      	subs	r3, r0, #0
 800066c:	d001      	beq.n	8000672 <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 800066e:	f000 f869 	bl	8000744 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000672:	46c0      	nop			; (mov r8, r8)
 8000674:	46bd      	mov	sp, r7
 8000676:	bd80      	pop	{r7, pc}
 8000678:	20000110 	.word	0x20000110
 800067c:	40004400 	.word	0x40004400

08000680 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000680:	b590      	push	{r4, r7, lr}
 8000682:	b089      	sub	sp, #36	; 0x24
 8000684:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000686:	240c      	movs	r4, #12
 8000688:	193b      	adds	r3, r7, r4
 800068a:	0018      	movs	r0, r3
 800068c:	2314      	movs	r3, #20
 800068e:	001a      	movs	r2, r3
 8000690:	2100      	movs	r1, #0
 8000692:	f003 feed 	bl	8004470 <memset>
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000696:	4b29      	ldr	r3, [pc, #164]	; (800073c <MX_GPIO_Init+0xbc>)
 8000698:	695a      	ldr	r2, [r3, #20]
 800069a:	4b28      	ldr	r3, [pc, #160]	; (800073c <MX_GPIO_Init+0xbc>)
 800069c:	2180      	movs	r1, #128	; 0x80
 800069e:	0289      	lsls	r1, r1, #10
 80006a0:	430a      	orrs	r2, r1
 80006a2:	615a      	str	r2, [r3, #20]
 80006a4:	4b25      	ldr	r3, [pc, #148]	; (800073c <MX_GPIO_Init+0xbc>)
 80006a6:	695a      	ldr	r2, [r3, #20]
 80006a8:	2380      	movs	r3, #128	; 0x80
 80006aa:	029b      	lsls	r3, r3, #10
 80006ac:	4013      	ands	r3, r2
 80006ae:	60bb      	str	r3, [r7, #8]
 80006b0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80006b2:	4b22      	ldr	r3, [pc, #136]	; (800073c <MX_GPIO_Init+0xbc>)
 80006b4:	695a      	ldr	r2, [r3, #20]
 80006b6:	4b21      	ldr	r3, [pc, #132]	; (800073c <MX_GPIO_Init+0xbc>)
 80006b8:	2180      	movs	r1, #128	; 0x80
 80006ba:	02c9      	lsls	r1, r1, #11
 80006bc:	430a      	orrs	r2, r1
 80006be:	615a      	str	r2, [r3, #20]
 80006c0:	4b1e      	ldr	r3, [pc, #120]	; (800073c <MX_GPIO_Init+0xbc>)
 80006c2:	695a      	ldr	r2, [r3, #20]
 80006c4:	2380      	movs	r3, #128	; 0x80
 80006c6:	02db      	lsls	r3, r3, #11
 80006c8:	4013      	ands	r3, r2
 80006ca:	607b      	str	r3, [r7, #4]
 80006cc:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_1, GPIO_PIN_SET);
 80006ce:	4b1c      	ldr	r3, [pc, #112]	; (8000740 <MX_GPIO_Init+0xc0>)
 80006d0:	2201      	movs	r2, #1
 80006d2:	2102      	movs	r1, #2
 80006d4:	0018      	movs	r0, r3
 80006d6:	f000 fcc5 	bl	8001064 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_10|GPIO_PIN_15, GPIO_PIN_RESET);
 80006da:	2384      	movs	r3, #132	; 0x84
 80006dc:	021b      	lsls	r3, r3, #8
 80006de:	4818      	ldr	r0, [pc, #96]	; (8000740 <MX_GPIO_Init+0xc0>)
 80006e0:	2200      	movs	r2, #0
 80006e2:	0019      	movs	r1, r3
 80006e4:	f000 fcbe 	bl	8001064 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PB1 */
  GPIO_InitStruct.Pin = GPIO_PIN_1;
 80006e8:	193b      	adds	r3, r7, r4
 80006ea:	2202      	movs	r2, #2
 80006ec:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80006ee:	193b      	adds	r3, r7, r4
 80006f0:	2201      	movs	r2, #1
 80006f2:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006f4:	193b      	adds	r3, r7, r4
 80006f6:	2200      	movs	r2, #0
 80006f8:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80006fa:	193b      	adds	r3, r7, r4
 80006fc:	2203      	movs	r2, #3
 80006fe:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000700:	193b      	adds	r3, r7, r4
 8000702:	4a0f      	ldr	r2, [pc, #60]	; (8000740 <MX_GPIO_Init+0xc0>)
 8000704:	0019      	movs	r1, r3
 8000706:	0010      	movs	r0, r2
 8000708:	f000 fb34 	bl	8000d74 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB10 PB15 */
  GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_15;
 800070c:	0021      	movs	r1, r4
 800070e:	187b      	adds	r3, r7, r1
 8000710:	2284      	movs	r2, #132	; 0x84
 8000712:	0212      	lsls	r2, r2, #8
 8000714:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000716:	187b      	adds	r3, r7, r1
 8000718:	2201      	movs	r2, #1
 800071a:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800071c:	187b      	adds	r3, r7, r1
 800071e:	2200      	movs	r2, #0
 8000720:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000722:	187b      	adds	r3, r7, r1
 8000724:	2200      	movs	r2, #0
 8000726:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000728:	187b      	adds	r3, r7, r1
 800072a:	4a05      	ldr	r2, [pc, #20]	; (8000740 <MX_GPIO_Init+0xc0>)
 800072c:	0019      	movs	r1, r3
 800072e:	0010      	movs	r0, r2
 8000730:	f000 fb20 	bl	8000d74 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000734:	46c0      	nop			; (mov r8, r8)
 8000736:	46bd      	mov	sp, r7
 8000738:	b009      	add	sp, #36	; 0x24
 800073a:	bd90      	pop	{r4, r7, pc}
 800073c:	40021000 	.word	0x40021000
 8000740:	48000400 	.word	0x48000400

08000744 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000744:	b580      	push	{r7, lr}
 8000746:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000748:	b672      	cpsid	i
}
 800074a:	46c0      	nop			; (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800074c:	e7fe      	b.n	800074c <Error_Handler+0x8>
	...

08000750 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000750:	b580      	push	{r7, lr}
 8000752:	b082      	sub	sp, #8
 8000754:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000756:	4b0f      	ldr	r3, [pc, #60]	; (8000794 <HAL_MspInit+0x44>)
 8000758:	699a      	ldr	r2, [r3, #24]
 800075a:	4b0e      	ldr	r3, [pc, #56]	; (8000794 <HAL_MspInit+0x44>)
 800075c:	2101      	movs	r1, #1
 800075e:	430a      	orrs	r2, r1
 8000760:	619a      	str	r2, [r3, #24]
 8000762:	4b0c      	ldr	r3, [pc, #48]	; (8000794 <HAL_MspInit+0x44>)
 8000764:	699b      	ldr	r3, [r3, #24]
 8000766:	2201      	movs	r2, #1
 8000768:	4013      	ands	r3, r2
 800076a:	607b      	str	r3, [r7, #4]
 800076c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800076e:	4b09      	ldr	r3, [pc, #36]	; (8000794 <HAL_MspInit+0x44>)
 8000770:	69da      	ldr	r2, [r3, #28]
 8000772:	4b08      	ldr	r3, [pc, #32]	; (8000794 <HAL_MspInit+0x44>)
 8000774:	2180      	movs	r1, #128	; 0x80
 8000776:	0549      	lsls	r1, r1, #21
 8000778:	430a      	orrs	r2, r1
 800077a:	61da      	str	r2, [r3, #28]
 800077c:	4b05      	ldr	r3, [pc, #20]	; (8000794 <HAL_MspInit+0x44>)
 800077e:	69da      	ldr	r2, [r3, #28]
 8000780:	2380      	movs	r3, #128	; 0x80
 8000782:	055b      	lsls	r3, r3, #21
 8000784:	4013      	ands	r3, r2
 8000786:	603b      	str	r3, [r7, #0]
 8000788:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800078a:	46c0      	nop			; (mov r8, r8)
 800078c:	46bd      	mov	sp, r7
 800078e:	b002      	add	sp, #8
 8000790:	bd80      	pop	{r7, pc}
 8000792:	46c0      	nop			; (mov r8, r8)
 8000794:	40021000 	.word	0x40021000

08000798 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000798:	b580      	push	{r7, lr}
 800079a:	b084      	sub	sp, #16
 800079c:	af00      	add	r7, sp, #0
 800079e:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 80007a0:	687b      	ldr	r3, [r7, #4]
 80007a2:	681b      	ldr	r3, [r3, #0]
 80007a4:	4a0e      	ldr	r2, [pc, #56]	; (80007e0 <HAL_TIM_Base_MspInit+0x48>)
 80007a6:	4293      	cmp	r3, r2
 80007a8:	d115      	bne.n	80007d6 <HAL_TIM_Base_MspInit+0x3e>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80007aa:	4b0e      	ldr	r3, [pc, #56]	; (80007e4 <HAL_TIM_Base_MspInit+0x4c>)
 80007ac:	699a      	ldr	r2, [r3, #24]
 80007ae:	4b0d      	ldr	r3, [pc, #52]	; (80007e4 <HAL_TIM_Base_MspInit+0x4c>)
 80007b0:	2180      	movs	r1, #128	; 0x80
 80007b2:	0109      	lsls	r1, r1, #4
 80007b4:	430a      	orrs	r2, r1
 80007b6:	619a      	str	r2, [r3, #24]
 80007b8:	4b0a      	ldr	r3, [pc, #40]	; (80007e4 <HAL_TIM_Base_MspInit+0x4c>)
 80007ba:	699a      	ldr	r2, [r3, #24]
 80007bc:	2380      	movs	r3, #128	; 0x80
 80007be:	011b      	lsls	r3, r3, #4
 80007c0:	4013      	ands	r3, r2
 80007c2:	60fb      	str	r3, [r7, #12]
 80007c4:	68fb      	ldr	r3, [r7, #12]
    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_CC_IRQn, 0, 0);
 80007c6:	2200      	movs	r2, #0
 80007c8:	2100      	movs	r1, #0
 80007ca:	200e      	movs	r0, #14
 80007cc:	f000 fa22 	bl	8000c14 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_CC_IRQn);
 80007d0:	200e      	movs	r0, #14
 80007d2:	f000 fa34 	bl	8000c3e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 80007d6:	46c0      	nop			; (mov r8, r8)
 80007d8:	46bd      	mov	sp, r7
 80007da:	b004      	add	sp, #16
 80007dc:	bd80      	pop	{r7, pc}
 80007de:	46c0      	nop			; (mov r8, r8)
 80007e0:	40012c00 	.word	0x40012c00
 80007e4:	40021000 	.word	0x40021000

080007e8 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 80007e8:	b590      	push	{r4, r7, lr}
 80007ea:	b089      	sub	sp, #36	; 0x24
 80007ec:	af00      	add	r7, sp, #0
 80007ee:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80007f0:	240c      	movs	r4, #12
 80007f2:	193b      	adds	r3, r7, r4
 80007f4:	0018      	movs	r0, r3
 80007f6:	2314      	movs	r3, #20
 80007f8:	001a      	movs	r2, r3
 80007fa:	2100      	movs	r1, #0
 80007fc:	f003 fe38 	bl	8004470 <memset>
  if(htim->Instance==TIM1)
 8000800:	687b      	ldr	r3, [r7, #4]
 8000802:	681b      	ldr	r3, [r3, #0]
 8000804:	4a16      	ldr	r2, [pc, #88]	; (8000860 <HAL_TIM_MspPostInit+0x78>)
 8000806:	4293      	cmp	r3, r2
 8000808:	d125      	bne.n	8000856 <HAL_TIM_MspPostInit+0x6e>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800080a:	4b16      	ldr	r3, [pc, #88]	; (8000864 <HAL_TIM_MspPostInit+0x7c>)
 800080c:	695a      	ldr	r2, [r3, #20]
 800080e:	4b15      	ldr	r3, [pc, #84]	; (8000864 <HAL_TIM_MspPostInit+0x7c>)
 8000810:	2180      	movs	r1, #128	; 0x80
 8000812:	0289      	lsls	r1, r1, #10
 8000814:	430a      	orrs	r2, r1
 8000816:	615a      	str	r2, [r3, #20]
 8000818:	4b12      	ldr	r3, [pc, #72]	; (8000864 <HAL_TIM_MspPostInit+0x7c>)
 800081a:	695a      	ldr	r2, [r3, #20]
 800081c:	2380      	movs	r3, #128	; 0x80
 800081e:	029b      	lsls	r3, r3, #10
 8000820:	4013      	ands	r3, r2
 8000822:	60bb      	str	r3, [r7, #8]
 8000824:	68bb      	ldr	r3, [r7, #8]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8000826:	193b      	adds	r3, r7, r4
 8000828:	2280      	movs	r2, #128	; 0x80
 800082a:	0052      	lsls	r2, r2, #1
 800082c:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800082e:	0021      	movs	r1, r4
 8000830:	187b      	adds	r3, r7, r1
 8000832:	2202      	movs	r2, #2
 8000834:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000836:	187b      	adds	r3, r7, r1
 8000838:	2200      	movs	r2, #0
 800083a:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800083c:	187b      	adds	r3, r7, r1
 800083e:	2200      	movs	r2, #0
 8000840:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM1;
 8000842:	187b      	adds	r3, r7, r1
 8000844:	2202      	movs	r2, #2
 8000846:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000848:	187a      	adds	r2, r7, r1
 800084a:	2390      	movs	r3, #144	; 0x90
 800084c:	05db      	lsls	r3, r3, #23
 800084e:	0011      	movs	r1, r2
 8000850:	0018      	movs	r0, r3
 8000852:	f000 fa8f 	bl	8000d74 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 8000856:	46c0      	nop			; (mov r8, r8)
 8000858:	46bd      	mov	sp, r7
 800085a:	b009      	add	sp, #36	; 0x24
 800085c:	bd90      	pop	{r4, r7, pc}
 800085e:	46c0      	nop			; (mov r8, r8)
 8000860:	40012c00 	.word	0x40012c00
 8000864:	40021000 	.word	0x40021000

08000868 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000868:	b590      	push	{r4, r7, lr}
 800086a:	b08b      	sub	sp, #44	; 0x2c
 800086c:	af00      	add	r7, sp, #0
 800086e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000870:	2414      	movs	r4, #20
 8000872:	193b      	adds	r3, r7, r4
 8000874:	0018      	movs	r0, r3
 8000876:	2314      	movs	r3, #20
 8000878:	001a      	movs	r2, r3
 800087a:	2100      	movs	r1, #0
 800087c:	f003 fdf8 	bl	8004470 <memset>
  if(huart->Instance==USART2)
 8000880:	687b      	ldr	r3, [r7, #4]
 8000882:	681b      	ldr	r3, [r3, #0]
 8000884:	4a20      	ldr	r2, [pc, #128]	; (8000908 <HAL_UART_MspInit+0xa0>)
 8000886:	4293      	cmp	r3, r2
 8000888:	d13a      	bne.n	8000900 <HAL_UART_MspInit+0x98>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 800088a:	4b20      	ldr	r3, [pc, #128]	; (800090c <HAL_UART_MspInit+0xa4>)
 800088c:	69da      	ldr	r2, [r3, #28]
 800088e:	4b1f      	ldr	r3, [pc, #124]	; (800090c <HAL_UART_MspInit+0xa4>)
 8000890:	2180      	movs	r1, #128	; 0x80
 8000892:	0289      	lsls	r1, r1, #10
 8000894:	430a      	orrs	r2, r1
 8000896:	61da      	str	r2, [r3, #28]
 8000898:	4b1c      	ldr	r3, [pc, #112]	; (800090c <HAL_UART_MspInit+0xa4>)
 800089a:	69da      	ldr	r2, [r3, #28]
 800089c:	2380      	movs	r3, #128	; 0x80
 800089e:	029b      	lsls	r3, r3, #10
 80008a0:	4013      	ands	r3, r2
 80008a2:	613b      	str	r3, [r7, #16]
 80008a4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80008a6:	4b19      	ldr	r3, [pc, #100]	; (800090c <HAL_UART_MspInit+0xa4>)
 80008a8:	695a      	ldr	r2, [r3, #20]
 80008aa:	4b18      	ldr	r3, [pc, #96]	; (800090c <HAL_UART_MspInit+0xa4>)
 80008ac:	2180      	movs	r1, #128	; 0x80
 80008ae:	0289      	lsls	r1, r1, #10
 80008b0:	430a      	orrs	r2, r1
 80008b2:	615a      	str	r2, [r3, #20]
 80008b4:	4b15      	ldr	r3, [pc, #84]	; (800090c <HAL_UART_MspInit+0xa4>)
 80008b6:	695a      	ldr	r2, [r3, #20]
 80008b8:	2380      	movs	r3, #128	; 0x80
 80008ba:	029b      	lsls	r3, r3, #10
 80008bc:	4013      	ands	r3, r2
 80008be:	60fb      	str	r3, [r7, #12]
 80008c0:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 80008c2:	0021      	movs	r1, r4
 80008c4:	187b      	adds	r3, r7, r1
 80008c6:	220c      	movs	r2, #12
 80008c8:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80008ca:	187b      	adds	r3, r7, r1
 80008cc:	2202      	movs	r2, #2
 80008ce:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008d0:	187b      	adds	r3, r7, r1
 80008d2:	2200      	movs	r2, #0
 80008d4:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80008d6:	187b      	adds	r3, r7, r1
 80008d8:	2203      	movs	r2, #3
 80008da:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_USART2;
 80008dc:	187b      	adds	r3, r7, r1
 80008de:	2201      	movs	r2, #1
 80008e0:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80008e2:	187a      	adds	r2, r7, r1
 80008e4:	2390      	movs	r3, #144	; 0x90
 80008e6:	05db      	lsls	r3, r3, #23
 80008e8:	0011      	movs	r1, r2
 80008ea:	0018      	movs	r0, r3
 80008ec:	f000 fa42 	bl	8000d74 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 80008f0:	2200      	movs	r2, #0
 80008f2:	2100      	movs	r1, #0
 80008f4:	201c      	movs	r0, #28
 80008f6:	f000 f98d 	bl	8000c14 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 80008fa:	201c      	movs	r0, #28
 80008fc:	f000 f99f 	bl	8000c3e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000900:	46c0      	nop			; (mov r8, r8)
 8000902:	46bd      	mov	sp, r7
 8000904:	b00b      	add	sp, #44	; 0x2c
 8000906:	bd90      	pop	{r4, r7, pc}
 8000908:	40004400 	.word	0x40004400
 800090c:	40021000 	.word	0x40021000

08000910 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000910:	b580      	push	{r7, lr}
 8000912:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000914:	e7fe      	b.n	8000914 <NMI_Handler+0x4>

08000916 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000916:	b580      	push	{r7, lr}
 8000918:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800091a:	e7fe      	b.n	800091a <HardFault_Handler+0x4>

0800091c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800091c:	b580      	push	{r7, lr}
 800091e:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8000920:	46c0      	nop			; (mov r8, r8)
 8000922:	46bd      	mov	sp, r7
 8000924:	bd80      	pop	{r7, pc}

08000926 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000926:	b580      	push	{r7, lr}
 8000928:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800092a:	46c0      	nop			; (mov r8, r8)
 800092c:	46bd      	mov	sp, r7
 800092e:	bd80      	pop	{r7, pc}

08000930 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000930:	b580      	push	{r7, lr}
 8000932:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000934:	f000 f8a6 	bl	8000a84 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000938:	46c0      	nop			; (mov r8, r8)
 800093a:	46bd      	mov	sp, r7
 800093c:	bd80      	pop	{r7, pc}
	...

08000940 <TIM1_CC_IRQHandler>:

/**
  * @brief This function handles TIM1 capture compare interrupt.
  */
void TIM1_CC_IRQHandler(void)
{
 8000940:	b590      	push	{r4, r7, lr}
 8000942:	b08b      	sub	sp, #44	; 0x2c
 8000944:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_CC_IRQn 0 */
uint32_t var [] = { 0xffffc7e0 ,  //0
 8000946:	003b      	movs	r3, r7
 8000948:	4a0a      	ldr	r2, [pc, #40]	; (8000974 <TIM1_CC_IRQHandler+0x34>)
 800094a:	ca13      	ldmia	r2!, {r0, r1, r4}
 800094c:	c313      	stmia	r3!, {r0, r1, r4}
 800094e:	ca13      	ldmia	r2!, {r0, r1, r4}
 8000950:	c313      	stmia	r3!, {r0, r1, r4}
 8000952:	ca13      	ldmia	r2!, {r0, r1, r4}
 8000954:	c313      	stmia	r3!, {r0, r1, r4}
 8000956:	6812      	ldr	r2, [r2, #0]
 8000958:	601a      	str	r2, [r3, #0]
					0xfffe3fe0 , //6
					0xe00fc4e0 , //7
					0xffffffe0 , //8
					0xfc7fffe0 , //9
                   };
high_low(var, 10);
 800095a:	003b      	movs	r3, r7
 800095c:	210a      	movs	r1, #10
 800095e:	0018      	movs	r0, r3
 8000960:	f7ff fc66 	bl	8000230 <high_low>

  /* USER CODE END TIM1_CC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8000964:	4b04      	ldr	r3, [pc, #16]	; (8000978 <TIM1_CC_IRQHandler+0x38>)
 8000966:	0018      	movs	r0, r3
 8000968:	f001 fb32 	bl	8001fd0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_CC_IRQn 1 */

  /* USER CODE END TIM1_CC_IRQn 1 */
}
 800096c:	46c0      	nop			; (mov r8, r8)
 800096e:	46bd      	mov	sp, r7
 8000970:	b00b      	add	sp, #44	; 0x2c
 8000972:	bd90      	pop	{r4, r7, pc}
 8000974:	08004498 	.word	0x08004498
 8000978:	200000c8 	.word	0x200000c8

0800097c <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt / USART2 wake-up interrupt through EXTI line 26.
  */
void USART2_IRQHandler(void)
{
 800097c:	b580      	push	{r7, lr}
 800097e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8000980:	4b03      	ldr	r3, [pc, #12]	; (8000990 <USART2_IRQHandler+0x14>)
 8000982:	0018      	movs	r0, r3
 8000984:	f002 fb1e 	bl	8002fc4 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8000988:	46c0      	nop			; (mov r8, r8)
 800098a:	46bd      	mov	sp, r7
 800098c:	bd80      	pop	{r7, pc}
 800098e:	46c0      	nop			; (mov r8, r8)
 8000990:	20000110 	.word	0x20000110

08000994 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000994:	b580      	push	{r7, lr}
 8000996:	af00      	add	r7, sp, #0
                         before branch to main program. This call is made inside
                         the "startup_stm32f0xx.s" file.
                         User can setups the default system clock (System clock source, PLL Multiplier
                         and Divider factors, AHB/APBx prescalers and Flash settings).
   */
}
 8000998:	46c0      	nop			; (mov r8, r8)
 800099a:	46bd      	mov	sp, r7
 800099c:	bd80      	pop	{r7, pc}
	...

080009a0 <Reset_Handler>:
 80009a0:	480d      	ldr	r0, [pc, #52]	; (80009d8 <LoopForever+0x2>)
 80009a2:	4685      	mov	sp, r0
 80009a4:	f7ff fff6 	bl	8000994 <SystemInit>
 80009a8:	480c      	ldr	r0, [pc, #48]	; (80009dc <LoopForever+0x6>)
 80009aa:	490d      	ldr	r1, [pc, #52]	; (80009e0 <LoopForever+0xa>)
 80009ac:	4a0d      	ldr	r2, [pc, #52]	; (80009e4 <LoopForever+0xe>)
 80009ae:	2300      	movs	r3, #0
 80009b0:	e002      	b.n	80009b8 <LoopCopyDataInit>

080009b2 <CopyDataInit>:
 80009b2:	58d4      	ldr	r4, [r2, r3]
 80009b4:	50c4      	str	r4, [r0, r3]
 80009b6:	3304      	adds	r3, #4

080009b8 <LoopCopyDataInit>:
 80009b8:	18c4      	adds	r4, r0, r3
 80009ba:	428c      	cmp	r4, r1
 80009bc:	d3f9      	bcc.n	80009b2 <CopyDataInit>
 80009be:	4a0a      	ldr	r2, [pc, #40]	; (80009e8 <LoopForever+0x12>)
 80009c0:	4c0a      	ldr	r4, [pc, #40]	; (80009ec <LoopForever+0x16>)
 80009c2:	2300      	movs	r3, #0
 80009c4:	e001      	b.n	80009ca <LoopFillZerobss>

080009c6 <FillZerobss>:
 80009c6:	6013      	str	r3, [r2, #0]
 80009c8:	3204      	adds	r2, #4

080009ca <LoopFillZerobss>:
 80009ca:	42a2      	cmp	r2, r4
 80009cc:	d3fb      	bcc.n	80009c6 <FillZerobss>
 80009ce:	f003 fd2b 	bl	8004428 <__libc_init_array>
 80009d2:	f7ff fcc3 	bl	800035c <main>

080009d6 <LoopForever>:
 80009d6:	e7fe      	b.n	80009d6 <LoopForever>
 80009d8:	20004000 	.word	0x20004000
 80009dc:	20000000 	.word	0x20000000
 80009e0:	200000a4 	.word	0x200000a4
 80009e4:	08004500 	.word	0x08004500
 80009e8:	200000a4 	.word	0x200000a4
 80009ec:	200001b0 	.word	0x200001b0

080009f0 <ADC1_COMP_IRQHandler>:
 80009f0:	e7fe      	b.n	80009f0 <ADC1_COMP_IRQHandler>
	...

080009f4 <HAL_Init>:
  *       In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80009f4:	b580      	push	{r7, lr}
 80009f6:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */ 
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80009f8:	4b07      	ldr	r3, [pc, #28]	; (8000a18 <HAL_Init+0x24>)
 80009fa:	681a      	ldr	r2, [r3, #0]
 80009fc:	4b06      	ldr	r3, [pc, #24]	; (8000a18 <HAL_Init+0x24>)
 80009fe:	2110      	movs	r1, #16
 8000a00:	430a      	orrs	r2, r1
 8000a02:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */

  HAL_InitTick(TICK_INT_PRIORITY);
 8000a04:	2003      	movs	r0, #3
 8000a06:	f000 f809 	bl	8000a1c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000a0a:	f7ff fea1 	bl	8000750 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000a0e:	2300      	movs	r3, #0
}
 8000a10:	0018      	movs	r0, r3
 8000a12:	46bd      	mov	sp, r7
 8000a14:	bd80      	pop	{r7, pc}
 8000a16:	46c0      	nop			; (mov r8, r8)
 8000a18:	40022000 	.word	0x40022000

08000a1c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000a1c:	b590      	push	{r4, r7, lr}
 8000a1e:	b083      	sub	sp, #12
 8000a20:	af00      	add	r7, sp, #0
 8000a22:	6078      	str	r0, [r7, #4]
  /*Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000a24:	4b14      	ldr	r3, [pc, #80]	; (8000a78 <HAL_InitTick+0x5c>)
 8000a26:	681c      	ldr	r4, [r3, #0]
 8000a28:	4b14      	ldr	r3, [pc, #80]	; (8000a7c <HAL_InitTick+0x60>)
 8000a2a:	781b      	ldrb	r3, [r3, #0]
 8000a2c:	0019      	movs	r1, r3
 8000a2e:	23fa      	movs	r3, #250	; 0xfa
 8000a30:	0098      	lsls	r0, r3, #2
 8000a32:	f7ff fb71 	bl	8000118 <__udivsi3>
 8000a36:	0003      	movs	r3, r0
 8000a38:	0019      	movs	r1, r3
 8000a3a:	0020      	movs	r0, r4
 8000a3c:	f7ff fb6c 	bl	8000118 <__udivsi3>
 8000a40:	0003      	movs	r3, r0
 8000a42:	0018      	movs	r0, r3
 8000a44:	f000 f90b 	bl	8000c5e <HAL_SYSTICK_Config>
 8000a48:	1e03      	subs	r3, r0, #0
 8000a4a:	d001      	beq.n	8000a50 <HAL_InitTick+0x34>
  {
    return HAL_ERROR;
 8000a4c:	2301      	movs	r3, #1
 8000a4e:	e00f      	b.n	8000a70 <HAL_InitTick+0x54>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000a50:	687b      	ldr	r3, [r7, #4]
 8000a52:	2b03      	cmp	r3, #3
 8000a54:	d80b      	bhi.n	8000a6e <HAL_InitTick+0x52>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000a56:	6879      	ldr	r1, [r7, #4]
 8000a58:	2301      	movs	r3, #1
 8000a5a:	425b      	negs	r3, r3
 8000a5c:	2200      	movs	r2, #0
 8000a5e:	0018      	movs	r0, r3
 8000a60:	f000 f8d8 	bl	8000c14 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000a64:	4b06      	ldr	r3, [pc, #24]	; (8000a80 <HAL_InitTick+0x64>)
 8000a66:	687a      	ldr	r2, [r7, #4]
 8000a68:	601a      	str	r2, [r3, #0]
  {
    return HAL_ERROR;
  }

   /* Return function status */
  return HAL_OK;
 8000a6a:	2300      	movs	r3, #0
 8000a6c:	e000      	b.n	8000a70 <HAL_InitTick+0x54>
    return HAL_ERROR;
 8000a6e:	2301      	movs	r3, #1
}
 8000a70:	0018      	movs	r0, r3
 8000a72:	46bd      	mov	sp, r7
 8000a74:	b003      	add	sp, #12
 8000a76:	bd90      	pop	{r4, r7, pc}
 8000a78:	20000098 	.word	0x20000098
 8000a7c:	200000a0 	.word	0x200000a0
 8000a80:	2000009c 	.word	0x2000009c

08000a84 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000a84:	b580      	push	{r7, lr}
 8000a86:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000a88:	4b05      	ldr	r3, [pc, #20]	; (8000aa0 <HAL_IncTick+0x1c>)
 8000a8a:	781b      	ldrb	r3, [r3, #0]
 8000a8c:	001a      	movs	r2, r3
 8000a8e:	4b05      	ldr	r3, [pc, #20]	; (8000aa4 <HAL_IncTick+0x20>)
 8000a90:	681b      	ldr	r3, [r3, #0]
 8000a92:	18d2      	adds	r2, r2, r3
 8000a94:	4b03      	ldr	r3, [pc, #12]	; (8000aa4 <HAL_IncTick+0x20>)
 8000a96:	601a      	str	r2, [r3, #0]
}
 8000a98:	46c0      	nop			; (mov r8, r8)
 8000a9a:	46bd      	mov	sp, r7
 8000a9c:	bd80      	pop	{r7, pc}
 8000a9e:	46c0      	nop			; (mov r8, r8)
 8000aa0:	200000a0 	.word	0x200000a0
 8000aa4:	200001ac 	.word	0x200001ac

08000aa8 <HAL_GetTick>:
  * @note   This function is declared as __weak  to be overwritten  in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000aa8:	b580      	push	{r7, lr}
 8000aaa:	af00      	add	r7, sp, #0
  return uwTick;
 8000aac:	4b02      	ldr	r3, [pc, #8]	; (8000ab8 <HAL_GetTick+0x10>)
 8000aae:	681b      	ldr	r3, [r3, #0]
}
 8000ab0:	0018      	movs	r0, r3
 8000ab2:	46bd      	mov	sp, r7
 8000ab4:	bd80      	pop	{r7, pc}
 8000ab6:	46c0      	nop			; (mov r8, r8)
 8000ab8:	200001ac 	.word	0x200001ac

08000abc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000abc:	b580      	push	{r7, lr}
 8000abe:	b082      	sub	sp, #8
 8000ac0:	af00      	add	r7, sp, #0
 8000ac2:	0002      	movs	r2, r0
 8000ac4:	1dfb      	adds	r3, r7, #7
 8000ac6:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8000ac8:	1dfb      	adds	r3, r7, #7
 8000aca:	781b      	ldrb	r3, [r3, #0]
 8000acc:	2b7f      	cmp	r3, #127	; 0x7f
 8000ace:	d809      	bhi.n	8000ae4 <__NVIC_EnableIRQ+0x28>
  {
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000ad0:	1dfb      	adds	r3, r7, #7
 8000ad2:	781b      	ldrb	r3, [r3, #0]
 8000ad4:	001a      	movs	r2, r3
 8000ad6:	231f      	movs	r3, #31
 8000ad8:	401a      	ands	r2, r3
 8000ada:	4b04      	ldr	r3, [pc, #16]	; (8000aec <__NVIC_EnableIRQ+0x30>)
 8000adc:	2101      	movs	r1, #1
 8000ade:	4091      	lsls	r1, r2
 8000ae0:	000a      	movs	r2, r1
 8000ae2:	601a      	str	r2, [r3, #0]
  }
}
 8000ae4:	46c0      	nop			; (mov r8, r8)
 8000ae6:	46bd      	mov	sp, r7
 8000ae8:	b002      	add	sp, #8
 8000aea:	bd80      	pop	{r7, pc}
 8000aec:	e000e100 	.word	0xe000e100

08000af0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000af0:	b590      	push	{r4, r7, lr}
 8000af2:	b083      	sub	sp, #12
 8000af4:	af00      	add	r7, sp, #0
 8000af6:	0002      	movs	r2, r0
 8000af8:	6039      	str	r1, [r7, #0]
 8000afa:	1dfb      	adds	r3, r7, #7
 8000afc:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8000afe:	1dfb      	adds	r3, r7, #7
 8000b00:	781b      	ldrb	r3, [r3, #0]
 8000b02:	2b7f      	cmp	r3, #127	; 0x7f
 8000b04:	d828      	bhi.n	8000b58 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000b06:	4a2f      	ldr	r2, [pc, #188]	; (8000bc4 <__NVIC_SetPriority+0xd4>)
 8000b08:	1dfb      	adds	r3, r7, #7
 8000b0a:	781b      	ldrb	r3, [r3, #0]
 8000b0c:	b25b      	sxtb	r3, r3
 8000b0e:	089b      	lsrs	r3, r3, #2
 8000b10:	33c0      	adds	r3, #192	; 0xc0
 8000b12:	009b      	lsls	r3, r3, #2
 8000b14:	589b      	ldr	r3, [r3, r2]
 8000b16:	1dfa      	adds	r2, r7, #7
 8000b18:	7812      	ldrb	r2, [r2, #0]
 8000b1a:	0011      	movs	r1, r2
 8000b1c:	2203      	movs	r2, #3
 8000b1e:	400a      	ands	r2, r1
 8000b20:	00d2      	lsls	r2, r2, #3
 8000b22:	21ff      	movs	r1, #255	; 0xff
 8000b24:	4091      	lsls	r1, r2
 8000b26:	000a      	movs	r2, r1
 8000b28:	43d2      	mvns	r2, r2
 8000b2a:	401a      	ands	r2, r3
 8000b2c:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8000b2e:	683b      	ldr	r3, [r7, #0]
 8000b30:	019b      	lsls	r3, r3, #6
 8000b32:	22ff      	movs	r2, #255	; 0xff
 8000b34:	401a      	ands	r2, r3
 8000b36:	1dfb      	adds	r3, r7, #7
 8000b38:	781b      	ldrb	r3, [r3, #0]
 8000b3a:	0018      	movs	r0, r3
 8000b3c:	2303      	movs	r3, #3
 8000b3e:	4003      	ands	r3, r0
 8000b40:	00db      	lsls	r3, r3, #3
 8000b42:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000b44:	481f      	ldr	r0, [pc, #124]	; (8000bc4 <__NVIC_SetPriority+0xd4>)
 8000b46:	1dfb      	adds	r3, r7, #7
 8000b48:	781b      	ldrb	r3, [r3, #0]
 8000b4a:	b25b      	sxtb	r3, r3
 8000b4c:	089b      	lsrs	r3, r3, #2
 8000b4e:	430a      	orrs	r2, r1
 8000b50:	33c0      	adds	r3, #192	; 0xc0
 8000b52:	009b      	lsls	r3, r3, #2
 8000b54:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 8000b56:	e031      	b.n	8000bbc <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000b58:	4a1b      	ldr	r2, [pc, #108]	; (8000bc8 <__NVIC_SetPriority+0xd8>)
 8000b5a:	1dfb      	adds	r3, r7, #7
 8000b5c:	781b      	ldrb	r3, [r3, #0]
 8000b5e:	0019      	movs	r1, r3
 8000b60:	230f      	movs	r3, #15
 8000b62:	400b      	ands	r3, r1
 8000b64:	3b08      	subs	r3, #8
 8000b66:	089b      	lsrs	r3, r3, #2
 8000b68:	3306      	adds	r3, #6
 8000b6a:	009b      	lsls	r3, r3, #2
 8000b6c:	18d3      	adds	r3, r2, r3
 8000b6e:	3304      	adds	r3, #4
 8000b70:	681b      	ldr	r3, [r3, #0]
 8000b72:	1dfa      	adds	r2, r7, #7
 8000b74:	7812      	ldrb	r2, [r2, #0]
 8000b76:	0011      	movs	r1, r2
 8000b78:	2203      	movs	r2, #3
 8000b7a:	400a      	ands	r2, r1
 8000b7c:	00d2      	lsls	r2, r2, #3
 8000b7e:	21ff      	movs	r1, #255	; 0xff
 8000b80:	4091      	lsls	r1, r2
 8000b82:	000a      	movs	r2, r1
 8000b84:	43d2      	mvns	r2, r2
 8000b86:	401a      	ands	r2, r3
 8000b88:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8000b8a:	683b      	ldr	r3, [r7, #0]
 8000b8c:	019b      	lsls	r3, r3, #6
 8000b8e:	22ff      	movs	r2, #255	; 0xff
 8000b90:	401a      	ands	r2, r3
 8000b92:	1dfb      	adds	r3, r7, #7
 8000b94:	781b      	ldrb	r3, [r3, #0]
 8000b96:	0018      	movs	r0, r3
 8000b98:	2303      	movs	r3, #3
 8000b9a:	4003      	ands	r3, r0
 8000b9c:	00db      	lsls	r3, r3, #3
 8000b9e:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000ba0:	4809      	ldr	r0, [pc, #36]	; (8000bc8 <__NVIC_SetPriority+0xd8>)
 8000ba2:	1dfb      	adds	r3, r7, #7
 8000ba4:	781b      	ldrb	r3, [r3, #0]
 8000ba6:	001c      	movs	r4, r3
 8000ba8:	230f      	movs	r3, #15
 8000baa:	4023      	ands	r3, r4
 8000bac:	3b08      	subs	r3, #8
 8000bae:	089b      	lsrs	r3, r3, #2
 8000bb0:	430a      	orrs	r2, r1
 8000bb2:	3306      	adds	r3, #6
 8000bb4:	009b      	lsls	r3, r3, #2
 8000bb6:	18c3      	adds	r3, r0, r3
 8000bb8:	3304      	adds	r3, #4
 8000bba:	601a      	str	r2, [r3, #0]
}
 8000bbc:	46c0      	nop			; (mov r8, r8)
 8000bbe:	46bd      	mov	sp, r7
 8000bc0:	b003      	add	sp, #12
 8000bc2:	bd90      	pop	{r4, r7, pc}
 8000bc4:	e000e100 	.word	0xe000e100
 8000bc8:	e000ed00 	.word	0xe000ed00

08000bcc <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000bcc:	b580      	push	{r7, lr}
 8000bce:	b082      	sub	sp, #8
 8000bd0:	af00      	add	r7, sp, #0
 8000bd2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000bd4:	687b      	ldr	r3, [r7, #4]
 8000bd6:	1e5a      	subs	r2, r3, #1
 8000bd8:	2380      	movs	r3, #128	; 0x80
 8000bda:	045b      	lsls	r3, r3, #17
 8000bdc:	429a      	cmp	r2, r3
 8000bde:	d301      	bcc.n	8000be4 <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000be0:	2301      	movs	r3, #1
 8000be2:	e010      	b.n	8000c06 <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000be4:	4b0a      	ldr	r3, [pc, #40]	; (8000c10 <SysTick_Config+0x44>)
 8000be6:	687a      	ldr	r2, [r7, #4]
 8000be8:	3a01      	subs	r2, #1
 8000bea:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000bec:	2301      	movs	r3, #1
 8000bee:	425b      	negs	r3, r3
 8000bf0:	2103      	movs	r1, #3
 8000bf2:	0018      	movs	r0, r3
 8000bf4:	f7ff ff7c 	bl	8000af0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000bf8:	4b05      	ldr	r3, [pc, #20]	; (8000c10 <SysTick_Config+0x44>)
 8000bfa:	2200      	movs	r2, #0
 8000bfc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000bfe:	4b04      	ldr	r3, [pc, #16]	; (8000c10 <SysTick_Config+0x44>)
 8000c00:	2207      	movs	r2, #7
 8000c02:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000c04:	2300      	movs	r3, #0
}
 8000c06:	0018      	movs	r0, r3
 8000c08:	46bd      	mov	sp, r7
 8000c0a:	b002      	add	sp, #8
 8000c0c:	bd80      	pop	{r7, pc}
 8000c0e:	46c0      	nop			; (mov r8, r8)
 8000c10:	e000e010 	.word	0xe000e010

08000c14 <HAL_NVIC_SetPriority>:
  *         with stm32f0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0 based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000c14:	b580      	push	{r7, lr}
 8000c16:	b084      	sub	sp, #16
 8000c18:	af00      	add	r7, sp, #0
 8000c1a:	60b9      	str	r1, [r7, #8]
 8000c1c:	607a      	str	r2, [r7, #4]
 8000c1e:	210f      	movs	r1, #15
 8000c20:	187b      	adds	r3, r7, r1
 8000c22:	1c02      	adds	r2, r0, #0
 8000c24:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 8000c26:	68ba      	ldr	r2, [r7, #8]
 8000c28:	187b      	adds	r3, r7, r1
 8000c2a:	781b      	ldrb	r3, [r3, #0]
 8000c2c:	b25b      	sxtb	r3, r3
 8000c2e:	0011      	movs	r1, r2
 8000c30:	0018      	movs	r0, r3
 8000c32:	f7ff ff5d 	bl	8000af0 <__NVIC_SetPriority>
}
 8000c36:	46c0      	nop			; (mov r8, r8)
 8000c38:	46bd      	mov	sp, r7
 8000c3a:	b004      	add	sp, #16
 8000c3c:	bd80      	pop	{r7, pc}

08000c3e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f0xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000c3e:	b580      	push	{r7, lr}
 8000c40:	b082      	sub	sp, #8
 8000c42:	af00      	add	r7, sp, #0
 8000c44:	0002      	movs	r2, r0
 8000c46:	1dfb      	adds	r3, r7, #7
 8000c48:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000c4a:	1dfb      	adds	r3, r7, #7
 8000c4c:	781b      	ldrb	r3, [r3, #0]
 8000c4e:	b25b      	sxtb	r3, r3
 8000c50:	0018      	movs	r0, r3
 8000c52:	f7ff ff33 	bl	8000abc <__NVIC_EnableIRQ>
}
 8000c56:	46c0      	nop			; (mov r8, r8)
 8000c58:	46bd      	mov	sp, r7
 8000c5a:	b002      	add	sp, #8
 8000c5c:	bd80      	pop	{r7, pc}

08000c5e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000c5e:	b580      	push	{r7, lr}
 8000c60:	b082      	sub	sp, #8
 8000c62:	af00      	add	r7, sp, #0
 8000c64:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000c66:	687b      	ldr	r3, [r7, #4]
 8000c68:	0018      	movs	r0, r3
 8000c6a:	f7ff ffaf 	bl	8000bcc <SysTick_Config>
 8000c6e:	0003      	movs	r3, r0
}
 8000c70:	0018      	movs	r0, r3
 8000c72:	46bd      	mov	sp, r7
 8000c74:	b002      	add	sp, #8
 8000c76:	bd80      	pop	{r7, pc}

08000c78 <HAL_DMA_Abort>:
  * @param  hdma  pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8000c78:	b580      	push	{r7, lr}
 8000c7a:	b082      	sub	sp, #8
 8000c7c:	af00      	add	r7, sp, #0
 8000c7e:	6078      	str	r0, [r7, #4]
  if (hdma->State != HAL_DMA_STATE_BUSY)
 8000c80:	687b      	ldr	r3, [r7, #4]
 8000c82:	2221      	movs	r2, #33	; 0x21
 8000c84:	5c9b      	ldrb	r3, [r3, r2]
 8000c86:	b2db      	uxtb	r3, r3
 8000c88:	2b02      	cmp	r3, #2
 8000c8a:	d008      	beq.n	8000c9e <HAL_DMA_Abort+0x26>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000c8c:	687b      	ldr	r3, [r7, #4]
 8000c8e:	2204      	movs	r2, #4
 8000c90:	639a      	str	r2, [r3, #56]	; 0x38

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000c92:	687b      	ldr	r3, [r7, #4]
 8000c94:	2220      	movs	r2, #32
 8000c96:	2100      	movs	r1, #0
 8000c98:	5499      	strb	r1, [r3, r2]

    return HAL_ERROR;
 8000c9a:	2301      	movs	r3, #1
 8000c9c:	e020      	b.n	8000ce0 <HAL_DMA_Abort+0x68>
  }
  else
  {
    /* Disable DMA IT */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8000c9e:	687b      	ldr	r3, [r7, #4]
 8000ca0:	681b      	ldr	r3, [r3, #0]
 8000ca2:	681a      	ldr	r2, [r3, #0]
 8000ca4:	687b      	ldr	r3, [r7, #4]
 8000ca6:	681b      	ldr	r3, [r3, #0]
 8000ca8:	210e      	movs	r1, #14
 8000caa:	438a      	bics	r2, r1
 8000cac:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 8000cae:	687b      	ldr	r3, [r7, #4]
 8000cb0:	681b      	ldr	r3, [r3, #0]
 8000cb2:	681a      	ldr	r2, [r3, #0]
 8000cb4:	687b      	ldr	r3, [r7, #4]
 8000cb6:	681b      	ldr	r3, [r3, #0]
 8000cb8:	2101      	movs	r1, #1
 8000cba:	438a      	bics	r2, r1
 8000cbc:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_FLAG_GL1 << hdma->ChannelIndex);
 8000cbe:	687b      	ldr	r3, [r7, #4]
 8000cc0:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000cc2:	687b      	ldr	r3, [r7, #4]
 8000cc4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000cc6:	2101      	movs	r1, #1
 8000cc8:	4091      	lsls	r1, r2
 8000cca:	000a      	movs	r2, r1
 8000ccc:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8000cce:	687b      	ldr	r3, [r7, #4]
 8000cd0:	2221      	movs	r2, #33	; 0x21
 8000cd2:	2101      	movs	r1, #1
 8000cd4:	5499      	strb	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);
 8000cd6:	687b      	ldr	r3, [r7, #4]
 8000cd8:	2220      	movs	r2, #32
 8000cda:	2100      	movs	r1, #0
 8000cdc:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8000cde:	2300      	movs	r3, #0
}
 8000ce0:	0018      	movs	r0, r3
 8000ce2:	46bd      	mov	sp, r7
 8000ce4:	b002      	add	sp, #8
 8000ce6:	bd80      	pop	{r7, pc}

08000ce8 <HAL_DMA_Abort_IT>:
  * @param  hdma  pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8000ce8:	b580      	push	{r7, lr}
 8000cea:	b084      	sub	sp, #16
 8000cec:	af00      	add	r7, sp, #0
 8000cee:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8000cf0:	210f      	movs	r1, #15
 8000cf2:	187b      	adds	r3, r7, r1
 8000cf4:	2200      	movs	r2, #0
 8000cf6:	701a      	strb	r2, [r3, #0]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 8000cf8:	687b      	ldr	r3, [r7, #4]
 8000cfa:	2221      	movs	r2, #33	; 0x21
 8000cfc:	5c9b      	ldrb	r3, [r3, r2]
 8000cfe:	b2db      	uxtb	r3, r3
 8000d00:	2b02      	cmp	r3, #2
 8000d02:	d006      	beq.n	8000d12 <HAL_DMA_Abort_IT+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000d04:	687b      	ldr	r3, [r7, #4]
 8000d06:	2204      	movs	r2, #4
 8000d08:	639a      	str	r2, [r3, #56]	; 0x38

    status = HAL_ERROR;
 8000d0a:	187b      	adds	r3, r7, r1
 8000d0c:	2201      	movs	r2, #1
 8000d0e:	701a      	strb	r2, [r3, #0]
 8000d10:	e028      	b.n	8000d64 <HAL_DMA_Abort_IT+0x7c>
  }
  else
  {

    /* Disable DMA IT */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8000d12:	687b      	ldr	r3, [r7, #4]
 8000d14:	681b      	ldr	r3, [r3, #0]
 8000d16:	681a      	ldr	r2, [r3, #0]
 8000d18:	687b      	ldr	r3, [r7, #4]
 8000d1a:	681b      	ldr	r3, [r3, #0]
 8000d1c:	210e      	movs	r1, #14
 8000d1e:	438a      	bics	r2, r1
 8000d20:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 8000d22:	687b      	ldr	r3, [r7, #4]
 8000d24:	681b      	ldr	r3, [r3, #0]
 8000d26:	681a      	ldr	r2, [r3, #0]
 8000d28:	687b      	ldr	r3, [r7, #4]
 8000d2a:	681b      	ldr	r3, [r3, #0]
 8000d2c:	2101      	movs	r1, #1
 8000d2e:	438a      	bics	r2, r1
 8000d30:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 8000d32:	687b      	ldr	r3, [r7, #4]
 8000d34:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000d36:	687b      	ldr	r3, [r7, #4]
 8000d38:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000d3a:	2101      	movs	r1, #1
 8000d3c:	4091      	lsls	r1, r2
 8000d3e:	000a      	movs	r2, r1
 8000d40:	605a      	str	r2, [r3, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8000d42:	687b      	ldr	r3, [r7, #4]
 8000d44:	2221      	movs	r2, #33	; 0x21
 8000d46:	2101      	movs	r1, #1
 8000d48:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000d4a:	687b      	ldr	r3, [r7, #4]
 8000d4c:	2220      	movs	r2, #32
 8000d4e:	2100      	movs	r1, #0
 8000d50:	5499      	strb	r1, [r3, r2]

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 8000d52:	687b      	ldr	r3, [r7, #4]
 8000d54:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000d56:	2b00      	cmp	r3, #0
 8000d58:	d004      	beq.n	8000d64 <HAL_DMA_Abort_IT+0x7c>
    {
      hdma->XferAbortCallback(hdma);
 8000d5a:	687b      	ldr	r3, [r7, #4]
 8000d5c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000d5e:	687a      	ldr	r2, [r7, #4]
 8000d60:	0010      	movs	r0, r2
 8000d62:	4798      	blx	r3
    }
  }
  return status;
 8000d64:	230f      	movs	r3, #15
 8000d66:	18fb      	adds	r3, r7, r3
 8000d68:	781b      	ldrb	r3, [r3, #0]
}
 8000d6a:	0018      	movs	r0, r3
 8000d6c:	46bd      	mov	sp, r7
 8000d6e:	b004      	add	sp, #16
 8000d70:	bd80      	pop	{r7, pc}
	...

08000d74 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000d74:	b580      	push	{r7, lr}
 8000d76:	b086      	sub	sp, #24
 8000d78:	af00      	add	r7, sp, #0
 8000d7a:	6078      	str	r0, [r7, #4]
 8000d7c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000d7e:	2300      	movs	r3, #0
 8000d80:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000d82:	e155      	b.n	8001030 <HAL_GPIO_Init+0x2bc>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8000d84:	683b      	ldr	r3, [r7, #0]
 8000d86:	681b      	ldr	r3, [r3, #0]
 8000d88:	2101      	movs	r1, #1
 8000d8a:	697a      	ldr	r2, [r7, #20]
 8000d8c:	4091      	lsls	r1, r2
 8000d8e:	000a      	movs	r2, r1
 8000d90:	4013      	ands	r3, r2
 8000d92:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8000d94:	68fb      	ldr	r3, [r7, #12]
 8000d96:	2b00      	cmp	r3, #0
 8000d98:	d100      	bne.n	8000d9c <HAL_GPIO_Init+0x28>
 8000d9a:	e146      	b.n	800102a <HAL_GPIO_Init+0x2b6>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8000d9c:	683b      	ldr	r3, [r7, #0]
 8000d9e:	685b      	ldr	r3, [r3, #4]
 8000da0:	2203      	movs	r2, #3
 8000da2:	4013      	ands	r3, r2
 8000da4:	2b01      	cmp	r3, #1
 8000da6:	d005      	beq.n	8000db4 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8000da8:	683b      	ldr	r3, [r7, #0]
 8000daa:	685b      	ldr	r3, [r3, #4]
 8000dac:	2203      	movs	r2, #3
 8000dae:	4013      	ands	r3, r2
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8000db0:	2b02      	cmp	r3, #2
 8000db2:	d130      	bne.n	8000e16 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000db4:	687b      	ldr	r3, [r7, #4]
 8000db6:	689b      	ldr	r3, [r3, #8]
 8000db8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8000dba:	697b      	ldr	r3, [r7, #20]
 8000dbc:	005b      	lsls	r3, r3, #1
 8000dbe:	2203      	movs	r2, #3
 8000dc0:	409a      	lsls	r2, r3
 8000dc2:	0013      	movs	r3, r2
 8000dc4:	43da      	mvns	r2, r3
 8000dc6:	693b      	ldr	r3, [r7, #16]
 8000dc8:	4013      	ands	r3, r2
 8000dca:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8000dcc:	683b      	ldr	r3, [r7, #0]
 8000dce:	68da      	ldr	r2, [r3, #12]
 8000dd0:	697b      	ldr	r3, [r7, #20]
 8000dd2:	005b      	lsls	r3, r3, #1
 8000dd4:	409a      	lsls	r2, r3
 8000dd6:	0013      	movs	r3, r2
 8000dd8:	693a      	ldr	r2, [r7, #16]
 8000dda:	4313      	orrs	r3, r2
 8000ddc:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8000dde:	687b      	ldr	r3, [r7, #4]
 8000de0:	693a      	ldr	r2, [r7, #16]
 8000de2:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000de4:	687b      	ldr	r3, [r7, #4]
 8000de6:	685b      	ldr	r3, [r3, #4]
 8000de8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000dea:	2201      	movs	r2, #1
 8000dec:	697b      	ldr	r3, [r7, #20]
 8000dee:	409a      	lsls	r2, r3
 8000df0:	0013      	movs	r3, r2
 8000df2:	43da      	mvns	r2, r3
 8000df4:	693b      	ldr	r3, [r7, #16]
 8000df6:	4013      	ands	r3, r2
 8000df8:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000dfa:	683b      	ldr	r3, [r7, #0]
 8000dfc:	685b      	ldr	r3, [r3, #4]
 8000dfe:	091b      	lsrs	r3, r3, #4
 8000e00:	2201      	movs	r2, #1
 8000e02:	401a      	ands	r2, r3
 8000e04:	697b      	ldr	r3, [r7, #20]
 8000e06:	409a      	lsls	r2, r3
 8000e08:	0013      	movs	r3, r2
 8000e0a:	693a      	ldr	r2, [r7, #16]
 8000e0c:	4313      	orrs	r3, r2
 8000e0e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8000e10:	687b      	ldr	r3, [r7, #4]
 8000e12:	693a      	ldr	r2, [r7, #16]
 8000e14:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000e16:	683b      	ldr	r3, [r7, #0]
 8000e18:	685b      	ldr	r3, [r3, #4]
 8000e1a:	2203      	movs	r2, #3
 8000e1c:	4013      	ands	r3, r2
 8000e1e:	2b03      	cmp	r3, #3
 8000e20:	d017      	beq.n	8000e52 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8000e22:	687b      	ldr	r3, [r7, #4]
 8000e24:	68db      	ldr	r3, [r3, #12]
 8000e26:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8000e28:	697b      	ldr	r3, [r7, #20]
 8000e2a:	005b      	lsls	r3, r3, #1
 8000e2c:	2203      	movs	r2, #3
 8000e2e:	409a      	lsls	r2, r3
 8000e30:	0013      	movs	r3, r2
 8000e32:	43da      	mvns	r2, r3
 8000e34:	693b      	ldr	r3, [r7, #16]
 8000e36:	4013      	ands	r3, r2
 8000e38:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8000e3a:	683b      	ldr	r3, [r7, #0]
 8000e3c:	689a      	ldr	r2, [r3, #8]
 8000e3e:	697b      	ldr	r3, [r7, #20]
 8000e40:	005b      	lsls	r3, r3, #1
 8000e42:	409a      	lsls	r2, r3
 8000e44:	0013      	movs	r3, r2
 8000e46:	693a      	ldr	r2, [r7, #16]
 8000e48:	4313      	orrs	r3, r2
 8000e4a:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8000e4c:	687b      	ldr	r3, [r7, #4]
 8000e4e:	693a      	ldr	r2, [r7, #16]
 8000e50:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000e52:	683b      	ldr	r3, [r7, #0]
 8000e54:	685b      	ldr	r3, [r3, #4]
 8000e56:	2203      	movs	r2, #3
 8000e58:	4013      	ands	r3, r2
 8000e5a:	2b02      	cmp	r3, #2
 8000e5c:	d123      	bne.n	8000ea6 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8000e5e:	697b      	ldr	r3, [r7, #20]
 8000e60:	08da      	lsrs	r2, r3, #3
 8000e62:	687b      	ldr	r3, [r7, #4]
 8000e64:	3208      	adds	r2, #8
 8000e66:	0092      	lsls	r2, r2, #2
 8000e68:	58d3      	ldr	r3, [r2, r3]
 8000e6a:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8000e6c:	697b      	ldr	r3, [r7, #20]
 8000e6e:	2207      	movs	r2, #7
 8000e70:	4013      	ands	r3, r2
 8000e72:	009b      	lsls	r3, r3, #2
 8000e74:	220f      	movs	r2, #15
 8000e76:	409a      	lsls	r2, r3
 8000e78:	0013      	movs	r3, r2
 8000e7a:	43da      	mvns	r2, r3
 8000e7c:	693b      	ldr	r3, [r7, #16]
 8000e7e:	4013      	ands	r3, r2
 8000e80:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8000e82:	683b      	ldr	r3, [r7, #0]
 8000e84:	691a      	ldr	r2, [r3, #16]
 8000e86:	697b      	ldr	r3, [r7, #20]
 8000e88:	2107      	movs	r1, #7
 8000e8a:	400b      	ands	r3, r1
 8000e8c:	009b      	lsls	r3, r3, #2
 8000e8e:	409a      	lsls	r2, r3
 8000e90:	0013      	movs	r3, r2
 8000e92:	693a      	ldr	r2, [r7, #16]
 8000e94:	4313      	orrs	r3, r2
 8000e96:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8000e98:	697b      	ldr	r3, [r7, #20]
 8000e9a:	08da      	lsrs	r2, r3, #3
 8000e9c:	687b      	ldr	r3, [r7, #4]
 8000e9e:	3208      	adds	r2, #8
 8000ea0:	0092      	lsls	r2, r2, #2
 8000ea2:	6939      	ldr	r1, [r7, #16]
 8000ea4:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000ea6:	687b      	ldr	r3, [r7, #4]
 8000ea8:	681b      	ldr	r3, [r3, #0]
 8000eaa:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8000eac:	697b      	ldr	r3, [r7, #20]
 8000eae:	005b      	lsls	r3, r3, #1
 8000eb0:	2203      	movs	r2, #3
 8000eb2:	409a      	lsls	r2, r3
 8000eb4:	0013      	movs	r3, r2
 8000eb6:	43da      	mvns	r2, r3
 8000eb8:	693b      	ldr	r3, [r7, #16]
 8000eba:	4013      	ands	r3, r2
 8000ebc:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8000ebe:	683b      	ldr	r3, [r7, #0]
 8000ec0:	685b      	ldr	r3, [r3, #4]
 8000ec2:	2203      	movs	r2, #3
 8000ec4:	401a      	ands	r2, r3
 8000ec6:	697b      	ldr	r3, [r7, #20]
 8000ec8:	005b      	lsls	r3, r3, #1
 8000eca:	409a      	lsls	r2, r3
 8000ecc:	0013      	movs	r3, r2
 8000ece:	693a      	ldr	r2, [r7, #16]
 8000ed0:	4313      	orrs	r3, r2
 8000ed2:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8000ed4:	687b      	ldr	r3, [r7, #4]
 8000ed6:	693a      	ldr	r2, [r7, #16]
 8000ed8:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8000eda:	683b      	ldr	r3, [r7, #0]
 8000edc:	685a      	ldr	r2, [r3, #4]
 8000ede:	23c0      	movs	r3, #192	; 0xc0
 8000ee0:	029b      	lsls	r3, r3, #10
 8000ee2:	4013      	ands	r3, r2
 8000ee4:	d100      	bne.n	8000ee8 <HAL_GPIO_Init+0x174>
 8000ee6:	e0a0      	b.n	800102a <HAL_GPIO_Init+0x2b6>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000ee8:	4b57      	ldr	r3, [pc, #348]	; (8001048 <HAL_GPIO_Init+0x2d4>)
 8000eea:	699a      	ldr	r2, [r3, #24]
 8000eec:	4b56      	ldr	r3, [pc, #344]	; (8001048 <HAL_GPIO_Init+0x2d4>)
 8000eee:	2101      	movs	r1, #1
 8000ef0:	430a      	orrs	r2, r1
 8000ef2:	619a      	str	r2, [r3, #24]
 8000ef4:	4b54      	ldr	r3, [pc, #336]	; (8001048 <HAL_GPIO_Init+0x2d4>)
 8000ef6:	699b      	ldr	r3, [r3, #24]
 8000ef8:	2201      	movs	r2, #1
 8000efa:	4013      	ands	r3, r2
 8000efc:	60bb      	str	r3, [r7, #8]
 8000efe:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8000f00:	4a52      	ldr	r2, [pc, #328]	; (800104c <HAL_GPIO_Init+0x2d8>)
 8000f02:	697b      	ldr	r3, [r7, #20]
 8000f04:	089b      	lsrs	r3, r3, #2
 8000f06:	3302      	adds	r3, #2
 8000f08:	009b      	lsls	r3, r3, #2
 8000f0a:	589b      	ldr	r3, [r3, r2]
 8000f0c:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8000f0e:	697b      	ldr	r3, [r7, #20]
 8000f10:	2203      	movs	r2, #3
 8000f12:	4013      	ands	r3, r2
 8000f14:	009b      	lsls	r3, r3, #2
 8000f16:	220f      	movs	r2, #15
 8000f18:	409a      	lsls	r2, r3
 8000f1a:	0013      	movs	r3, r2
 8000f1c:	43da      	mvns	r2, r3
 8000f1e:	693b      	ldr	r3, [r7, #16]
 8000f20:	4013      	ands	r3, r2
 8000f22:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8000f24:	687a      	ldr	r2, [r7, #4]
 8000f26:	2390      	movs	r3, #144	; 0x90
 8000f28:	05db      	lsls	r3, r3, #23
 8000f2a:	429a      	cmp	r2, r3
 8000f2c:	d019      	beq.n	8000f62 <HAL_GPIO_Init+0x1ee>
 8000f2e:	687b      	ldr	r3, [r7, #4]
 8000f30:	4a47      	ldr	r2, [pc, #284]	; (8001050 <HAL_GPIO_Init+0x2dc>)
 8000f32:	4293      	cmp	r3, r2
 8000f34:	d013      	beq.n	8000f5e <HAL_GPIO_Init+0x1ea>
 8000f36:	687b      	ldr	r3, [r7, #4]
 8000f38:	4a46      	ldr	r2, [pc, #280]	; (8001054 <HAL_GPIO_Init+0x2e0>)
 8000f3a:	4293      	cmp	r3, r2
 8000f3c:	d00d      	beq.n	8000f5a <HAL_GPIO_Init+0x1e6>
 8000f3e:	687b      	ldr	r3, [r7, #4]
 8000f40:	4a45      	ldr	r2, [pc, #276]	; (8001058 <HAL_GPIO_Init+0x2e4>)
 8000f42:	4293      	cmp	r3, r2
 8000f44:	d007      	beq.n	8000f56 <HAL_GPIO_Init+0x1e2>
 8000f46:	687b      	ldr	r3, [r7, #4]
 8000f48:	4a44      	ldr	r2, [pc, #272]	; (800105c <HAL_GPIO_Init+0x2e8>)
 8000f4a:	4293      	cmp	r3, r2
 8000f4c:	d101      	bne.n	8000f52 <HAL_GPIO_Init+0x1de>
 8000f4e:	2304      	movs	r3, #4
 8000f50:	e008      	b.n	8000f64 <HAL_GPIO_Init+0x1f0>
 8000f52:	2305      	movs	r3, #5
 8000f54:	e006      	b.n	8000f64 <HAL_GPIO_Init+0x1f0>
 8000f56:	2303      	movs	r3, #3
 8000f58:	e004      	b.n	8000f64 <HAL_GPIO_Init+0x1f0>
 8000f5a:	2302      	movs	r3, #2
 8000f5c:	e002      	b.n	8000f64 <HAL_GPIO_Init+0x1f0>
 8000f5e:	2301      	movs	r3, #1
 8000f60:	e000      	b.n	8000f64 <HAL_GPIO_Init+0x1f0>
 8000f62:	2300      	movs	r3, #0
 8000f64:	697a      	ldr	r2, [r7, #20]
 8000f66:	2103      	movs	r1, #3
 8000f68:	400a      	ands	r2, r1
 8000f6a:	0092      	lsls	r2, r2, #2
 8000f6c:	4093      	lsls	r3, r2
 8000f6e:	693a      	ldr	r2, [r7, #16]
 8000f70:	4313      	orrs	r3, r2
 8000f72:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8000f74:	4935      	ldr	r1, [pc, #212]	; (800104c <HAL_GPIO_Init+0x2d8>)
 8000f76:	697b      	ldr	r3, [r7, #20]
 8000f78:	089b      	lsrs	r3, r3, #2
 8000f7a:	3302      	adds	r3, #2
 8000f7c:	009b      	lsls	r3, r3, #2
 8000f7e:	693a      	ldr	r2, [r7, #16]
 8000f80:	505a      	str	r2, [r3, r1]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8000f82:	4b37      	ldr	r3, [pc, #220]	; (8001060 <HAL_GPIO_Init+0x2ec>)
 8000f84:	689b      	ldr	r3, [r3, #8]
 8000f86:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000f88:	68fb      	ldr	r3, [r7, #12]
 8000f8a:	43da      	mvns	r2, r3
 8000f8c:	693b      	ldr	r3, [r7, #16]
 8000f8e:	4013      	ands	r3, r2
 8000f90:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8000f92:	683b      	ldr	r3, [r7, #0]
 8000f94:	685a      	ldr	r2, [r3, #4]
 8000f96:	2380      	movs	r3, #128	; 0x80
 8000f98:	035b      	lsls	r3, r3, #13
 8000f9a:	4013      	ands	r3, r2
 8000f9c:	d003      	beq.n	8000fa6 <HAL_GPIO_Init+0x232>
        {
          temp |= iocurrent;
 8000f9e:	693a      	ldr	r2, [r7, #16]
 8000fa0:	68fb      	ldr	r3, [r7, #12]
 8000fa2:	4313      	orrs	r3, r2
 8000fa4:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8000fa6:	4b2e      	ldr	r3, [pc, #184]	; (8001060 <HAL_GPIO_Init+0x2ec>)
 8000fa8:	693a      	ldr	r2, [r7, #16]
 8000faa:	609a      	str	r2, [r3, #8]

        temp = EXTI->FTSR;
 8000fac:	4b2c      	ldr	r3, [pc, #176]	; (8001060 <HAL_GPIO_Init+0x2ec>)
 8000fae:	68db      	ldr	r3, [r3, #12]
 8000fb0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000fb2:	68fb      	ldr	r3, [r7, #12]
 8000fb4:	43da      	mvns	r2, r3
 8000fb6:	693b      	ldr	r3, [r7, #16]
 8000fb8:	4013      	ands	r3, r2
 8000fba:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8000fbc:	683b      	ldr	r3, [r7, #0]
 8000fbe:	685a      	ldr	r2, [r3, #4]
 8000fc0:	2380      	movs	r3, #128	; 0x80
 8000fc2:	039b      	lsls	r3, r3, #14
 8000fc4:	4013      	ands	r3, r2
 8000fc6:	d003      	beq.n	8000fd0 <HAL_GPIO_Init+0x25c>
        {
          temp |= iocurrent;
 8000fc8:	693a      	ldr	r2, [r7, #16]
 8000fca:	68fb      	ldr	r3, [r7, #12]
 8000fcc:	4313      	orrs	r3, r2
 8000fce:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8000fd0:	4b23      	ldr	r3, [pc, #140]	; (8001060 <HAL_GPIO_Init+0x2ec>)
 8000fd2:	693a      	ldr	r2, [r7, #16]
 8000fd4:	60da      	str	r2, [r3, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR;
 8000fd6:	4b22      	ldr	r3, [pc, #136]	; (8001060 <HAL_GPIO_Init+0x2ec>)
 8000fd8:	685b      	ldr	r3, [r3, #4]
 8000fda:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000fdc:	68fb      	ldr	r3, [r7, #12]
 8000fde:	43da      	mvns	r2, r3
 8000fe0:	693b      	ldr	r3, [r7, #16]
 8000fe2:	4013      	ands	r3, r2
 8000fe4:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8000fe6:	683b      	ldr	r3, [r7, #0]
 8000fe8:	685a      	ldr	r2, [r3, #4]
 8000fea:	2380      	movs	r3, #128	; 0x80
 8000fec:	029b      	lsls	r3, r3, #10
 8000fee:	4013      	ands	r3, r2
 8000ff0:	d003      	beq.n	8000ffa <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 8000ff2:	693a      	ldr	r2, [r7, #16]
 8000ff4:	68fb      	ldr	r3, [r7, #12]
 8000ff6:	4313      	orrs	r3, r2
 8000ff8:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8000ffa:	4b19      	ldr	r3, [pc, #100]	; (8001060 <HAL_GPIO_Init+0x2ec>)
 8000ffc:	693a      	ldr	r2, [r7, #16]
 8000ffe:	605a      	str	r2, [r3, #4]

        temp = EXTI->IMR;
 8001000:	4b17      	ldr	r3, [pc, #92]	; (8001060 <HAL_GPIO_Init+0x2ec>)
 8001002:	681b      	ldr	r3, [r3, #0]
 8001004:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001006:	68fb      	ldr	r3, [r7, #12]
 8001008:	43da      	mvns	r2, r3
 800100a:	693b      	ldr	r3, [r7, #16]
 800100c:	4013      	ands	r3, r2
 800100e:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8001010:	683b      	ldr	r3, [r7, #0]
 8001012:	685a      	ldr	r2, [r3, #4]
 8001014:	2380      	movs	r3, #128	; 0x80
 8001016:	025b      	lsls	r3, r3, #9
 8001018:	4013      	ands	r3, r2
 800101a:	d003      	beq.n	8001024 <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 800101c:	693a      	ldr	r2, [r7, #16]
 800101e:	68fb      	ldr	r3, [r7, #12]
 8001020:	4313      	orrs	r3, r2
 8001022:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8001024:	4b0e      	ldr	r3, [pc, #56]	; (8001060 <HAL_GPIO_Init+0x2ec>)
 8001026:	693a      	ldr	r2, [r7, #16]
 8001028:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 800102a:	697b      	ldr	r3, [r7, #20]
 800102c:	3301      	adds	r3, #1
 800102e:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001030:	683b      	ldr	r3, [r7, #0]
 8001032:	681a      	ldr	r2, [r3, #0]
 8001034:	697b      	ldr	r3, [r7, #20]
 8001036:	40da      	lsrs	r2, r3
 8001038:	1e13      	subs	r3, r2, #0
 800103a:	d000      	beq.n	800103e <HAL_GPIO_Init+0x2ca>
 800103c:	e6a2      	b.n	8000d84 <HAL_GPIO_Init+0x10>
  } 
}
 800103e:	46c0      	nop			; (mov r8, r8)
 8001040:	46c0      	nop			; (mov r8, r8)
 8001042:	46bd      	mov	sp, r7
 8001044:	b006      	add	sp, #24
 8001046:	bd80      	pop	{r7, pc}
 8001048:	40021000 	.word	0x40021000
 800104c:	40010000 	.word	0x40010000
 8001050:	48000400 	.word	0x48000400
 8001054:	48000800 	.word	0x48000800
 8001058:	48000c00 	.word	0x48000c00
 800105c:	48001000 	.word	0x48001000
 8001060:	40010400 	.word	0x40010400

08001064 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001064:	b580      	push	{r7, lr}
 8001066:	b082      	sub	sp, #8
 8001068:	af00      	add	r7, sp, #0
 800106a:	6078      	str	r0, [r7, #4]
 800106c:	0008      	movs	r0, r1
 800106e:	0011      	movs	r1, r2
 8001070:	1cbb      	adds	r3, r7, #2
 8001072:	1c02      	adds	r2, r0, #0
 8001074:	801a      	strh	r2, [r3, #0]
 8001076:	1c7b      	adds	r3, r7, #1
 8001078:	1c0a      	adds	r2, r1, #0
 800107a:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800107c:	1c7b      	adds	r3, r7, #1
 800107e:	781b      	ldrb	r3, [r3, #0]
 8001080:	2b00      	cmp	r3, #0
 8001082:	d004      	beq.n	800108e <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001084:	1cbb      	adds	r3, r7, #2
 8001086:	881a      	ldrh	r2, [r3, #0]
 8001088:	687b      	ldr	r3, [r7, #4]
 800108a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 800108c:	e003      	b.n	8001096 <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800108e:	1cbb      	adds	r3, r7, #2
 8001090:	881a      	ldrh	r2, [r3, #0]
 8001092:	687b      	ldr	r3, [r7, #4]
 8001094:	629a      	str	r2, [r3, #40]	; 0x28
}
 8001096:	46c0      	nop			; (mov r8, r8)
 8001098:	46bd      	mov	sp, r7
 800109a:	b002      	add	sp, #8
 800109c:	bd80      	pop	{r7, pc}
	...

080010a0 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80010a0:	b580      	push	{r7, lr}
 80010a2:	b088      	sub	sp, #32
 80010a4:	af00      	add	r7, sp, #0
 80010a6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  uint32_t pll_config2;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80010a8:	687b      	ldr	r3, [r7, #4]
 80010aa:	2b00      	cmp	r3, #0
 80010ac:	d102      	bne.n	80010b4 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 80010ae:	2301      	movs	r3, #1
 80010b0:	f000 fb76 	bl	80017a0 <HAL_RCC_OscConfig+0x700>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80010b4:	687b      	ldr	r3, [r7, #4]
 80010b6:	681b      	ldr	r3, [r3, #0]
 80010b8:	2201      	movs	r2, #1
 80010ba:	4013      	ands	r3, r2
 80010bc:	d100      	bne.n	80010c0 <HAL_RCC_OscConfig+0x20>
 80010be:	e08e      	b.n	80011de <HAL_RCC_OscConfig+0x13e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 80010c0:	4bc5      	ldr	r3, [pc, #788]	; (80013d8 <HAL_RCC_OscConfig+0x338>)
 80010c2:	685b      	ldr	r3, [r3, #4]
 80010c4:	220c      	movs	r2, #12
 80010c6:	4013      	ands	r3, r2
 80010c8:	2b04      	cmp	r3, #4
 80010ca:	d00e      	beq.n	80010ea <HAL_RCC_OscConfig+0x4a>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80010cc:	4bc2      	ldr	r3, [pc, #776]	; (80013d8 <HAL_RCC_OscConfig+0x338>)
 80010ce:	685b      	ldr	r3, [r3, #4]
 80010d0:	220c      	movs	r2, #12
 80010d2:	4013      	ands	r3, r2
 80010d4:	2b08      	cmp	r3, #8
 80010d6:	d117      	bne.n	8001108 <HAL_RCC_OscConfig+0x68>
 80010d8:	4bbf      	ldr	r3, [pc, #764]	; (80013d8 <HAL_RCC_OscConfig+0x338>)
 80010da:	685a      	ldr	r2, [r3, #4]
 80010dc:	23c0      	movs	r3, #192	; 0xc0
 80010de:	025b      	lsls	r3, r3, #9
 80010e0:	401a      	ands	r2, r3
 80010e2:	2380      	movs	r3, #128	; 0x80
 80010e4:	025b      	lsls	r3, r3, #9
 80010e6:	429a      	cmp	r2, r3
 80010e8:	d10e      	bne.n	8001108 <HAL_RCC_OscConfig+0x68>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80010ea:	4bbb      	ldr	r3, [pc, #748]	; (80013d8 <HAL_RCC_OscConfig+0x338>)
 80010ec:	681a      	ldr	r2, [r3, #0]
 80010ee:	2380      	movs	r3, #128	; 0x80
 80010f0:	029b      	lsls	r3, r3, #10
 80010f2:	4013      	ands	r3, r2
 80010f4:	d100      	bne.n	80010f8 <HAL_RCC_OscConfig+0x58>
 80010f6:	e071      	b.n	80011dc <HAL_RCC_OscConfig+0x13c>
 80010f8:	687b      	ldr	r3, [r7, #4]
 80010fa:	685b      	ldr	r3, [r3, #4]
 80010fc:	2b00      	cmp	r3, #0
 80010fe:	d000      	beq.n	8001102 <HAL_RCC_OscConfig+0x62>
 8001100:	e06c      	b.n	80011dc <HAL_RCC_OscConfig+0x13c>
      {
        return HAL_ERROR;
 8001102:	2301      	movs	r3, #1
 8001104:	f000 fb4c 	bl	80017a0 <HAL_RCC_OscConfig+0x700>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001108:	687b      	ldr	r3, [r7, #4]
 800110a:	685b      	ldr	r3, [r3, #4]
 800110c:	2b01      	cmp	r3, #1
 800110e:	d107      	bne.n	8001120 <HAL_RCC_OscConfig+0x80>
 8001110:	4bb1      	ldr	r3, [pc, #708]	; (80013d8 <HAL_RCC_OscConfig+0x338>)
 8001112:	681a      	ldr	r2, [r3, #0]
 8001114:	4bb0      	ldr	r3, [pc, #704]	; (80013d8 <HAL_RCC_OscConfig+0x338>)
 8001116:	2180      	movs	r1, #128	; 0x80
 8001118:	0249      	lsls	r1, r1, #9
 800111a:	430a      	orrs	r2, r1
 800111c:	601a      	str	r2, [r3, #0]
 800111e:	e02f      	b.n	8001180 <HAL_RCC_OscConfig+0xe0>
 8001120:	687b      	ldr	r3, [r7, #4]
 8001122:	685b      	ldr	r3, [r3, #4]
 8001124:	2b00      	cmp	r3, #0
 8001126:	d10c      	bne.n	8001142 <HAL_RCC_OscConfig+0xa2>
 8001128:	4bab      	ldr	r3, [pc, #684]	; (80013d8 <HAL_RCC_OscConfig+0x338>)
 800112a:	681a      	ldr	r2, [r3, #0]
 800112c:	4baa      	ldr	r3, [pc, #680]	; (80013d8 <HAL_RCC_OscConfig+0x338>)
 800112e:	49ab      	ldr	r1, [pc, #684]	; (80013dc <HAL_RCC_OscConfig+0x33c>)
 8001130:	400a      	ands	r2, r1
 8001132:	601a      	str	r2, [r3, #0]
 8001134:	4ba8      	ldr	r3, [pc, #672]	; (80013d8 <HAL_RCC_OscConfig+0x338>)
 8001136:	681a      	ldr	r2, [r3, #0]
 8001138:	4ba7      	ldr	r3, [pc, #668]	; (80013d8 <HAL_RCC_OscConfig+0x338>)
 800113a:	49a9      	ldr	r1, [pc, #676]	; (80013e0 <HAL_RCC_OscConfig+0x340>)
 800113c:	400a      	ands	r2, r1
 800113e:	601a      	str	r2, [r3, #0]
 8001140:	e01e      	b.n	8001180 <HAL_RCC_OscConfig+0xe0>
 8001142:	687b      	ldr	r3, [r7, #4]
 8001144:	685b      	ldr	r3, [r3, #4]
 8001146:	2b05      	cmp	r3, #5
 8001148:	d10e      	bne.n	8001168 <HAL_RCC_OscConfig+0xc8>
 800114a:	4ba3      	ldr	r3, [pc, #652]	; (80013d8 <HAL_RCC_OscConfig+0x338>)
 800114c:	681a      	ldr	r2, [r3, #0]
 800114e:	4ba2      	ldr	r3, [pc, #648]	; (80013d8 <HAL_RCC_OscConfig+0x338>)
 8001150:	2180      	movs	r1, #128	; 0x80
 8001152:	02c9      	lsls	r1, r1, #11
 8001154:	430a      	orrs	r2, r1
 8001156:	601a      	str	r2, [r3, #0]
 8001158:	4b9f      	ldr	r3, [pc, #636]	; (80013d8 <HAL_RCC_OscConfig+0x338>)
 800115a:	681a      	ldr	r2, [r3, #0]
 800115c:	4b9e      	ldr	r3, [pc, #632]	; (80013d8 <HAL_RCC_OscConfig+0x338>)
 800115e:	2180      	movs	r1, #128	; 0x80
 8001160:	0249      	lsls	r1, r1, #9
 8001162:	430a      	orrs	r2, r1
 8001164:	601a      	str	r2, [r3, #0]
 8001166:	e00b      	b.n	8001180 <HAL_RCC_OscConfig+0xe0>
 8001168:	4b9b      	ldr	r3, [pc, #620]	; (80013d8 <HAL_RCC_OscConfig+0x338>)
 800116a:	681a      	ldr	r2, [r3, #0]
 800116c:	4b9a      	ldr	r3, [pc, #616]	; (80013d8 <HAL_RCC_OscConfig+0x338>)
 800116e:	499b      	ldr	r1, [pc, #620]	; (80013dc <HAL_RCC_OscConfig+0x33c>)
 8001170:	400a      	ands	r2, r1
 8001172:	601a      	str	r2, [r3, #0]
 8001174:	4b98      	ldr	r3, [pc, #608]	; (80013d8 <HAL_RCC_OscConfig+0x338>)
 8001176:	681a      	ldr	r2, [r3, #0]
 8001178:	4b97      	ldr	r3, [pc, #604]	; (80013d8 <HAL_RCC_OscConfig+0x338>)
 800117a:	4999      	ldr	r1, [pc, #612]	; (80013e0 <HAL_RCC_OscConfig+0x340>)
 800117c:	400a      	ands	r2, r1
 800117e:	601a      	str	r2, [r3, #0]
      

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001180:	687b      	ldr	r3, [r7, #4]
 8001182:	685b      	ldr	r3, [r3, #4]
 8001184:	2b00      	cmp	r3, #0
 8001186:	d014      	beq.n	80011b2 <HAL_RCC_OscConfig+0x112>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001188:	f7ff fc8e 	bl	8000aa8 <HAL_GetTick>
 800118c:	0003      	movs	r3, r0
 800118e:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001190:	e008      	b.n	80011a4 <HAL_RCC_OscConfig+0x104>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001192:	f7ff fc89 	bl	8000aa8 <HAL_GetTick>
 8001196:	0002      	movs	r2, r0
 8001198:	69bb      	ldr	r3, [r7, #24]
 800119a:	1ad3      	subs	r3, r2, r3
 800119c:	2b64      	cmp	r3, #100	; 0x64
 800119e:	d901      	bls.n	80011a4 <HAL_RCC_OscConfig+0x104>
          {
            return HAL_TIMEOUT;
 80011a0:	2303      	movs	r3, #3
 80011a2:	e2fd      	b.n	80017a0 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80011a4:	4b8c      	ldr	r3, [pc, #560]	; (80013d8 <HAL_RCC_OscConfig+0x338>)
 80011a6:	681a      	ldr	r2, [r3, #0]
 80011a8:	2380      	movs	r3, #128	; 0x80
 80011aa:	029b      	lsls	r3, r3, #10
 80011ac:	4013      	ands	r3, r2
 80011ae:	d0f0      	beq.n	8001192 <HAL_RCC_OscConfig+0xf2>
 80011b0:	e015      	b.n	80011de <HAL_RCC_OscConfig+0x13e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80011b2:	f7ff fc79 	bl	8000aa8 <HAL_GetTick>
 80011b6:	0003      	movs	r3, r0
 80011b8:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80011ba:	e008      	b.n	80011ce <HAL_RCC_OscConfig+0x12e>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80011bc:	f7ff fc74 	bl	8000aa8 <HAL_GetTick>
 80011c0:	0002      	movs	r2, r0
 80011c2:	69bb      	ldr	r3, [r7, #24]
 80011c4:	1ad3      	subs	r3, r2, r3
 80011c6:	2b64      	cmp	r3, #100	; 0x64
 80011c8:	d901      	bls.n	80011ce <HAL_RCC_OscConfig+0x12e>
          {
            return HAL_TIMEOUT;
 80011ca:	2303      	movs	r3, #3
 80011cc:	e2e8      	b.n	80017a0 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80011ce:	4b82      	ldr	r3, [pc, #520]	; (80013d8 <HAL_RCC_OscConfig+0x338>)
 80011d0:	681a      	ldr	r2, [r3, #0]
 80011d2:	2380      	movs	r3, #128	; 0x80
 80011d4:	029b      	lsls	r3, r3, #10
 80011d6:	4013      	ands	r3, r2
 80011d8:	d1f0      	bne.n	80011bc <HAL_RCC_OscConfig+0x11c>
 80011da:	e000      	b.n	80011de <HAL_RCC_OscConfig+0x13e>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80011dc:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80011de:	687b      	ldr	r3, [r7, #4]
 80011e0:	681b      	ldr	r3, [r3, #0]
 80011e2:	2202      	movs	r2, #2
 80011e4:	4013      	ands	r3, r2
 80011e6:	d100      	bne.n	80011ea <HAL_RCC_OscConfig+0x14a>
 80011e8:	e06c      	b.n	80012c4 <HAL_RCC_OscConfig+0x224>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 80011ea:	4b7b      	ldr	r3, [pc, #492]	; (80013d8 <HAL_RCC_OscConfig+0x338>)
 80011ec:	685b      	ldr	r3, [r3, #4]
 80011ee:	220c      	movs	r2, #12
 80011f0:	4013      	ands	r3, r2
 80011f2:	d00e      	beq.n	8001212 <HAL_RCC_OscConfig+0x172>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 80011f4:	4b78      	ldr	r3, [pc, #480]	; (80013d8 <HAL_RCC_OscConfig+0x338>)
 80011f6:	685b      	ldr	r3, [r3, #4]
 80011f8:	220c      	movs	r2, #12
 80011fa:	4013      	ands	r3, r2
 80011fc:	2b08      	cmp	r3, #8
 80011fe:	d11f      	bne.n	8001240 <HAL_RCC_OscConfig+0x1a0>
 8001200:	4b75      	ldr	r3, [pc, #468]	; (80013d8 <HAL_RCC_OscConfig+0x338>)
 8001202:	685a      	ldr	r2, [r3, #4]
 8001204:	23c0      	movs	r3, #192	; 0xc0
 8001206:	025b      	lsls	r3, r3, #9
 8001208:	401a      	ands	r2, r3
 800120a:	2380      	movs	r3, #128	; 0x80
 800120c:	021b      	lsls	r3, r3, #8
 800120e:	429a      	cmp	r2, r3
 8001210:	d116      	bne.n	8001240 <HAL_RCC_OscConfig+0x1a0>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001212:	4b71      	ldr	r3, [pc, #452]	; (80013d8 <HAL_RCC_OscConfig+0x338>)
 8001214:	681b      	ldr	r3, [r3, #0]
 8001216:	2202      	movs	r2, #2
 8001218:	4013      	ands	r3, r2
 800121a:	d005      	beq.n	8001228 <HAL_RCC_OscConfig+0x188>
 800121c:	687b      	ldr	r3, [r7, #4]
 800121e:	68db      	ldr	r3, [r3, #12]
 8001220:	2b01      	cmp	r3, #1
 8001222:	d001      	beq.n	8001228 <HAL_RCC_OscConfig+0x188>
      {
        return HAL_ERROR;
 8001224:	2301      	movs	r3, #1
 8001226:	e2bb      	b.n	80017a0 <HAL_RCC_OscConfig+0x700>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001228:	4b6b      	ldr	r3, [pc, #428]	; (80013d8 <HAL_RCC_OscConfig+0x338>)
 800122a:	681b      	ldr	r3, [r3, #0]
 800122c:	22f8      	movs	r2, #248	; 0xf8
 800122e:	4393      	bics	r3, r2
 8001230:	0019      	movs	r1, r3
 8001232:	687b      	ldr	r3, [r7, #4]
 8001234:	691b      	ldr	r3, [r3, #16]
 8001236:	00da      	lsls	r2, r3, #3
 8001238:	4b67      	ldr	r3, [pc, #412]	; (80013d8 <HAL_RCC_OscConfig+0x338>)
 800123a:	430a      	orrs	r2, r1
 800123c:	601a      	str	r2, [r3, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800123e:	e041      	b.n	80012c4 <HAL_RCC_OscConfig+0x224>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001240:	687b      	ldr	r3, [r7, #4]
 8001242:	68db      	ldr	r3, [r3, #12]
 8001244:	2b00      	cmp	r3, #0
 8001246:	d024      	beq.n	8001292 <HAL_RCC_OscConfig+0x1f2>
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001248:	4b63      	ldr	r3, [pc, #396]	; (80013d8 <HAL_RCC_OscConfig+0x338>)
 800124a:	681a      	ldr	r2, [r3, #0]
 800124c:	4b62      	ldr	r3, [pc, #392]	; (80013d8 <HAL_RCC_OscConfig+0x338>)
 800124e:	2101      	movs	r1, #1
 8001250:	430a      	orrs	r2, r1
 8001252:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001254:	f7ff fc28 	bl	8000aa8 <HAL_GetTick>
 8001258:	0003      	movs	r3, r0
 800125a:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800125c:	e008      	b.n	8001270 <HAL_RCC_OscConfig+0x1d0>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800125e:	f7ff fc23 	bl	8000aa8 <HAL_GetTick>
 8001262:	0002      	movs	r2, r0
 8001264:	69bb      	ldr	r3, [r7, #24]
 8001266:	1ad3      	subs	r3, r2, r3
 8001268:	2b02      	cmp	r3, #2
 800126a:	d901      	bls.n	8001270 <HAL_RCC_OscConfig+0x1d0>
          {
            return HAL_TIMEOUT;
 800126c:	2303      	movs	r3, #3
 800126e:	e297      	b.n	80017a0 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001270:	4b59      	ldr	r3, [pc, #356]	; (80013d8 <HAL_RCC_OscConfig+0x338>)
 8001272:	681b      	ldr	r3, [r3, #0]
 8001274:	2202      	movs	r2, #2
 8001276:	4013      	ands	r3, r2
 8001278:	d0f1      	beq.n	800125e <HAL_RCC_OscConfig+0x1be>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800127a:	4b57      	ldr	r3, [pc, #348]	; (80013d8 <HAL_RCC_OscConfig+0x338>)
 800127c:	681b      	ldr	r3, [r3, #0]
 800127e:	22f8      	movs	r2, #248	; 0xf8
 8001280:	4393      	bics	r3, r2
 8001282:	0019      	movs	r1, r3
 8001284:	687b      	ldr	r3, [r7, #4]
 8001286:	691b      	ldr	r3, [r3, #16]
 8001288:	00da      	lsls	r2, r3, #3
 800128a:	4b53      	ldr	r3, [pc, #332]	; (80013d8 <HAL_RCC_OscConfig+0x338>)
 800128c:	430a      	orrs	r2, r1
 800128e:	601a      	str	r2, [r3, #0]
 8001290:	e018      	b.n	80012c4 <HAL_RCC_OscConfig+0x224>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001292:	4b51      	ldr	r3, [pc, #324]	; (80013d8 <HAL_RCC_OscConfig+0x338>)
 8001294:	681a      	ldr	r2, [r3, #0]
 8001296:	4b50      	ldr	r3, [pc, #320]	; (80013d8 <HAL_RCC_OscConfig+0x338>)
 8001298:	2101      	movs	r1, #1
 800129a:	438a      	bics	r2, r1
 800129c:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800129e:	f7ff fc03 	bl	8000aa8 <HAL_GetTick>
 80012a2:	0003      	movs	r3, r0
 80012a4:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80012a6:	e008      	b.n	80012ba <HAL_RCC_OscConfig+0x21a>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80012a8:	f7ff fbfe 	bl	8000aa8 <HAL_GetTick>
 80012ac:	0002      	movs	r2, r0
 80012ae:	69bb      	ldr	r3, [r7, #24]
 80012b0:	1ad3      	subs	r3, r2, r3
 80012b2:	2b02      	cmp	r3, #2
 80012b4:	d901      	bls.n	80012ba <HAL_RCC_OscConfig+0x21a>
          {
            return HAL_TIMEOUT;
 80012b6:	2303      	movs	r3, #3
 80012b8:	e272      	b.n	80017a0 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80012ba:	4b47      	ldr	r3, [pc, #284]	; (80013d8 <HAL_RCC_OscConfig+0x338>)
 80012bc:	681b      	ldr	r3, [r3, #0]
 80012be:	2202      	movs	r2, #2
 80012c0:	4013      	ands	r3, r2
 80012c2:	d1f1      	bne.n	80012a8 <HAL_RCC_OscConfig+0x208>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80012c4:	687b      	ldr	r3, [r7, #4]
 80012c6:	681b      	ldr	r3, [r3, #0]
 80012c8:	2208      	movs	r2, #8
 80012ca:	4013      	ands	r3, r2
 80012cc:	d036      	beq.n	800133c <HAL_RCC_OscConfig+0x29c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80012ce:	687b      	ldr	r3, [r7, #4]
 80012d0:	69db      	ldr	r3, [r3, #28]
 80012d2:	2b00      	cmp	r3, #0
 80012d4:	d019      	beq.n	800130a <HAL_RCC_OscConfig+0x26a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80012d6:	4b40      	ldr	r3, [pc, #256]	; (80013d8 <HAL_RCC_OscConfig+0x338>)
 80012d8:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80012da:	4b3f      	ldr	r3, [pc, #252]	; (80013d8 <HAL_RCC_OscConfig+0x338>)
 80012dc:	2101      	movs	r1, #1
 80012de:	430a      	orrs	r2, r1
 80012e0:	625a      	str	r2, [r3, #36]	; 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80012e2:	f7ff fbe1 	bl	8000aa8 <HAL_GetTick>
 80012e6:	0003      	movs	r3, r0
 80012e8:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80012ea:	e008      	b.n	80012fe <HAL_RCC_OscConfig+0x25e>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80012ec:	f7ff fbdc 	bl	8000aa8 <HAL_GetTick>
 80012f0:	0002      	movs	r2, r0
 80012f2:	69bb      	ldr	r3, [r7, #24]
 80012f4:	1ad3      	subs	r3, r2, r3
 80012f6:	2b02      	cmp	r3, #2
 80012f8:	d901      	bls.n	80012fe <HAL_RCC_OscConfig+0x25e>
        {
          return HAL_TIMEOUT;
 80012fa:	2303      	movs	r3, #3
 80012fc:	e250      	b.n	80017a0 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80012fe:	4b36      	ldr	r3, [pc, #216]	; (80013d8 <HAL_RCC_OscConfig+0x338>)
 8001300:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001302:	2202      	movs	r2, #2
 8001304:	4013      	ands	r3, r2
 8001306:	d0f1      	beq.n	80012ec <HAL_RCC_OscConfig+0x24c>
 8001308:	e018      	b.n	800133c <HAL_RCC_OscConfig+0x29c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800130a:	4b33      	ldr	r3, [pc, #204]	; (80013d8 <HAL_RCC_OscConfig+0x338>)
 800130c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800130e:	4b32      	ldr	r3, [pc, #200]	; (80013d8 <HAL_RCC_OscConfig+0x338>)
 8001310:	2101      	movs	r1, #1
 8001312:	438a      	bics	r2, r1
 8001314:	625a      	str	r2, [r3, #36]	; 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001316:	f7ff fbc7 	bl	8000aa8 <HAL_GetTick>
 800131a:	0003      	movs	r3, r0
 800131c:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800131e:	e008      	b.n	8001332 <HAL_RCC_OscConfig+0x292>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001320:	f7ff fbc2 	bl	8000aa8 <HAL_GetTick>
 8001324:	0002      	movs	r2, r0
 8001326:	69bb      	ldr	r3, [r7, #24]
 8001328:	1ad3      	subs	r3, r2, r3
 800132a:	2b02      	cmp	r3, #2
 800132c:	d901      	bls.n	8001332 <HAL_RCC_OscConfig+0x292>
        {
          return HAL_TIMEOUT;
 800132e:	2303      	movs	r3, #3
 8001330:	e236      	b.n	80017a0 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001332:	4b29      	ldr	r3, [pc, #164]	; (80013d8 <HAL_RCC_OscConfig+0x338>)
 8001334:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001336:	2202      	movs	r2, #2
 8001338:	4013      	ands	r3, r2
 800133a:	d1f1      	bne.n	8001320 <HAL_RCC_OscConfig+0x280>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800133c:	687b      	ldr	r3, [r7, #4]
 800133e:	681b      	ldr	r3, [r3, #0]
 8001340:	2204      	movs	r2, #4
 8001342:	4013      	ands	r3, r2
 8001344:	d100      	bne.n	8001348 <HAL_RCC_OscConfig+0x2a8>
 8001346:	e0b5      	b.n	80014b4 <HAL_RCC_OscConfig+0x414>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001348:	201f      	movs	r0, #31
 800134a:	183b      	adds	r3, r7, r0
 800134c:	2200      	movs	r2, #0
 800134e:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001350:	4b21      	ldr	r3, [pc, #132]	; (80013d8 <HAL_RCC_OscConfig+0x338>)
 8001352:	69da      	ldr	r2, [r3, #28]
 8001354:	2380      	movs	r3, #128	; 0x80
 8001356:	055b      	lsls	r3, r3, #21
 8001358:	4013      	ands	r3, r2
 800135a:	d110      	bne.n	800137e <HAL_RCC_OscConfig+0x2de>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800135c:	4b1e      	ldr	r3, [pc, #120]	; (80013d8 <HAL_RCC_OscConfig+0x338>)
 800135e:	69da      	ldr	r2, [r3, #28]
 8001360:	4b1d      	ldr	r3, [pc, #116]	; (80013d8 <HAL_RCC_OscConfig+0x338>)
 8001362:	2180      	movs	r1, #128	; 0x80
 8001364:	0549      	lsls	r1, r1, #21
 8001366:	430a      	orrs	r2, r1
 8001368:	61da      	str	r2, [r3, #28]
 800136a:	4b1b      	ldr	r3, [pc, #108]	; (80013d8 <HAL_RCC_OscConfig+0x338>)
 800136c:	69da      	ldr	r2, [r3, #28]
 800136e:	2380      	movs	r3, #128	; 0x80
 8001370:	055b      	lsls	r3, r3, #21
 8001372:	4013      	ands	r3, r2
 8001374:	60fb      	str	r3, [r7, #12]
 8001376:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8001378:	183b      	adds	r3, r7, r0
 800137a:	2201      	movs	r2, #1
 800137c:	701a      	strb	r2, [r3, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800137e:	4b19      	ldr	r3, [pc, #100]	; (80013e4 <HAL_RCC_OscConfig+0x344>)
 8001380:	681a      	ldr	r2, [r3, #0]
 8001382:	2380      	movs	r3, #128	; 0x80
 8001384:	005b      	lsls	r3, r3, #1
 8001386:	4013      	ands	r3, r2
 8001388:	d11a      	bne.n	80013c0 <HAL_RCC_OscConfig+0x320>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800138a:	4b16      	ldr	r3, [pc, #88]	; (80013e4 <HAL_RCC_OscConfig+0x344>)
 800138c:	681a      	ldr	r2, [r3, #0]
 800138e:	4b15      	ldr	r3, [pc, #84]	; (80013e4 <HAL_RCC_OscConfig+0x344>)
 8001390:	2180      	movs	r1, #128	; 0x80
 8001392:	0049      	lsls	r1, r1, #1
 8001394:	430a      	orrs	r2, r1
 8001396:	601a      	str	r2, [r3, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001398:	f7ff fb86 	bl	8000aa8 <HAL_GetTick>
 800139c:	0003      	movs	r3, r0
 800139e:	61bb      	str	r3, [r7, #24]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80013a0:	e008      	b.n	80013b4 <HAL_RCC_OscConfig+0x314>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80013a2:	f7ff fb81 	bl	8000aa8 <HAL_GetTick>
 80013a6:	0002      	movs	r2, r0
 80013a8:	69bb      	ldr	r3, [r7, #24]
 80013aa:	1ad3      	subs	r3, r2, r3
 80013ac:	2b64      	cmp	r3, #100	; 0x64
 80013ae:	d901      	bls.n	80013b4 <HAL_RCC_OscConfig+0x314>
        {
          return HAL_TIMEOUT;
 80013b0:	2303      	movs	r3, #3
 80013b2:	e1f5      	b.n	80017a0 <HAL_RCC_OscConfig+0x700>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80013b4:	4b0b      	ldr	r3, [pc, #44]	; (80013e4 <HAL_RCC_OscConfig+0x344>)
 80013b6:	681a      	ldr	r2, [r3, #0]
 80013b8:	2380      	movs	r3, #128	; 0x80
 80013ba:	005b      	lsls	r3, r3, #1
 80013bc:	4013      	ands	r3, r2
 80013be:	d0f0      	beq.n	80013a2 <HAL_RCC_OscConfig+0x302>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80013c0:	687b      	ldr	r3, [r7, #4]
 80013c2:	689b      	ldr	r3, [r3, #8]
 80013c4:	2b01      	cmp	r3, #1
 80013c6:	d10f      	bne.n	80013e8 <HAL_RCC_OscConfig+0x348>
 80013c8:	4b03      	ldr	r3, [pc, #12]	; (80013d8 <HAL_RCC_OscConfig+0x338>)
 80013ca:	6a1a      	ldr	r2, [r3, #32]
 80013cc:	4b02      	ldr	r3, [pc, #8]	; (80013d8 <HAL_RCC_OscConfig+0x338>)
 80013ce:	2101      	movs	r1, #1
 80013d0:	430a      	orrs	r2, r1
 80013d2:	621a      	str	r2, [r3, #32]
 80013d4:	e036      	b.n	8001444 <HAL_RCC_OscConfig+0x3a4>
 80013d6:	46c0      	nop			; (mov r8, r8)
 80013d8:	40021000 	.word	0x40021000
 80013dc:	fffeffff 	.word	0xfffeffff
 80013e0:	fffbffff 	.word	0xfffbffff
 80013e4:	40007000 	.word	0x40007000
 80013e8:	687b      	ldr	r3, [r7, #4]
 80013ea:	689b      	ldr	r3, [r3, #8]
 80013ec:	2b00      	cmp	r3, #0
 80013ee:	d10c      	bne.n	800140a <HAL_RCC_OscConfig+0x36a>
 80013f0:	4bca      	ldr	r3, [pc, #808]	; (800171c <HAL_RCC_OscConfig+0x67c>)
 80013f2:	6a1a      	ldr	r2, [r3, #32]
 80013f4:	4bc9      	ldr	r3, [pc, #804]	; (800171c <HAL_RCC_OscConfig+0x67c>)
 80013f6:	2101      	movs	r1, #1
 80013f8:	438a      	bics	r2, r1
 80013fa:	621a      	str	r2, [r3, #32]
 80013fc:	4bc7      	ldr	r3, [pc, #796]	; (800171c <HAL_RCC_OscConfig+0x67c>)
 80013fe:	6a1a      	ldr	r2, [r3, #32]
 8001400:	4bc6      	ldr	r3, [pc, #792]	; (800171c <HAL_RCC_OscConfig+0x67c>)
 8001402:	2104      	movs	r1, #4
 8001404:	438a      	bics	r2, r1
 8001406:	621a      	str	r2, [r3, #32]
 8001408:	e01c      	b.n	8001444 <HAL_RCC_OscConfig+0x3a4>
 800140a:	687b      	ldr	r3, [r7, #4]
 800140c:	689b      	ldr	r3, [r3, #8]
 800140e:	2b05      	cmp	r3, #5
 8001410:	d10c      	bne.n	800142c <HAL_RCC_OscConfig+0x38c>
 8001412:	4bc2      	ldr	r3, [pc, #776]	; (800171c <HAL_RCC_OscConfig+0x67c>)
 8001414:	6a1a      	ldr	r2, [r3, #32]
 8001416:	4bc1      	ldr	r3, [pc, #772]	; (800171c <HAL_RCC_OscConfig+0x67c>)
 8001418:	2104      	movs	r1, #4
 800141a:	430a      	orrs	r2, r1
 800141c:	621a      	str	r2, [r3, #32]
 800141e:	4bbf      	ldr	r3, [pc, #764]	; (800171c <HAL_RCC_OscConfig+0x67c>)
 8001420:	6a1a      	ldr	r2, [r3, #32]
 8001422:	4bbe      	ldr	r3, [pc, #760]	; (800171c <HAL_RCC_OscConfig+0x67c>)
 8001424:	2101      	movs	r1, #1
 8001426:	430a      	orrs	r2, r1
 8001428:	621a      	str	r2, [r3, #32]
 800142a:	e00b      	b.n	8001444 <HAL_RCC_OscConfig+0x3a4>
 800142c:	4bbb      	ldr	r3, [pc, #748]	; (800171c <HAL_RCC_OscConfig+0x67c>)
 800142e:	6a1a      	ldr	r2, [r3, #32]
 8001430:	4bba      	ldr	r3, [pc, #744]	; (800171c <HAL_RCC_OscConfig+0x67c>)
 8001432:	2101      	movs	r1, #1
 8001434:	438a      	bics	r2, r1
 8001436:	621a      	str	r2, [r3, #32]
 8001438:	4bb8      	ldr	r3, [pc, #736]	; (800171c <HAL_RCC_OscConfig+0x67c>)
 800143a:	6a1a      	ldr	r2, [r3, #32]
 800143c:	4bb7      	ldr	r3, [pc, #732]	; (800171c <HAL_RCC_OscConfig+0x67c>)
 800143e:	2104      	movs	r1, #4
 8001440:	438a      	bics	r2, r1
 8001442:	621a      	str	r2, [r3, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001444:	687b      	ldr	r3, [r7, #4]
 8001446:	689b      	ldr	r3, [r3, #8]
 8001448:	2b00      	cmp	r3, #0
 800144a:	d014      	beq.n	8001476 <HAL_RCC_OscConfig+0x3d6>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800144c:	f7ff fb2c 	bl	8000aa8 <HAL_GetTick>
 8001450:	0003      	movs	r3, r0
 8001452:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001454:	e009      	b.n	800146a <HAL_RCC_OscConfig+0x3ca>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001456:	f7ff fb27 	bl	8000aa8 <HAL_GetTick>
 800145a:	0002      	movs	r2, r0
 800145c:	69bb      	ldr	r3, [r7, #24]
 800145e:	1ad3      	subs	r3, r2, r3
 8001460:	4aaf      	ldr	r2, [pc, #700]	; (8001720 <HAL_RCC_OscConfig+0x680>)
 8001462:	4293      	cmp	r3, r2
 8001464:	d901      	bls.n	800146a <HAL_RCC_OscConfig+0x3ca>
        {
          return HAL_TIMEOUT;
 8001466:	2303      	movs	r3, #3
 8001468:	e19a      	b.n	80017a0 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800146a:	4bac      	ldr	r3, [pc, #688]	; (800171c <HAL_RCC_OscConfig+0x67c>)
 800146c:	6a1b      	ldr	r3, [r3, #32]
 800146e:	2202      	movs	r2, #2
 8001470:	4013      	ands	r3, r2
 8001472:	d0f0      	beq.n	8001456 <HAL_RCC_OscConfig+0x3b6>
 8001474:	e013      	b.n	800149e <HAL_RCC_OscConfig+0x3fe>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001476:	f7ff fb17 	bl	8000aa8 <HAL_GetTick>
 800147a:	0003      	movs	r3, r0
 800147c:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800147e:	e009      	b.n	8001494 <HAL_RCC_OscConfig+0x3f4>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001480:	f7ff fb12 	bl	8000aa8 <HAL_GetTick>
 8001484:	0002      	movs	r2, r0
 8001486:	69bb      	ldr	r3, [r7, #24]
 8001488:	1ad3      	subs	r3, r2, r3
 800148a:	4aa5      	ldr	r2, [pc, #660]	; (8001720 <HAL_RCC_OscConfig+0x680>)
 800148c:	4293      	cmp	r3, r2
 800148e:	d901      	bls.n	8001494 <HAL_RCC_OscConfig+0x3f4>
        {
          return HAL_TIMEOUT;
 8001490:	2303      	movs	r3, #3
 8001492:	e185      	b.n	80017a0 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001494:	4ba1      	ldr	r3, [pc, #644]	; (800171c <HAL_RCC_OscConfig+0x67c>)
 8001496:	6a1b      	ldr	r3, [r3, #32]
 8001498:	2202      	movs	r2, #2
 800149a:	4013      	ands	r3, r2
 800149c:	d1f0      	bne.n	8001480 <HAL_RCC_OscConfig+0x3e0>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 800149e:	231f      	movs	r3, #31
 80014a0:	18fb      	adds	r3, r7, r3
 80014a2:	781b      	ldrb	r3, [r3, #0]
 80014a4:	2b01      	cmp	r3, #1
 80014a6:	d105      	bne.n	80014b4 <HAL_RCC_OscConfig+0x414>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80014a8:	4b9c      	ldr	r3, [pc, #624]	; (800171c <HAL_RCC_OscConfig+0x67c>)
 80014aa:	69da      	ldr	r2, [r3, #28]
 80014ac:	4b9b      	ldr	r3, [pc, #620]	; (800171c <HAL_RCC_OscConfig+0x67c>)
 80014ae:	499d      	ldr	r1, [pc, #628]	; (8001724 <HAL_RCC_OscConfig+0x684>)
 80014b0:	400a      	ands	r2, r1
 80014b2:	61da      	str	r2, [r3, #28]
    }
  }

  /*----------------------------- HSI14 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI14) == RCC_OSCILLATORTYPE_HSI14)
 80014b4:	687b      	ldr	r3, [r7, #4]
 80014b6:	681b      	ldr	r3, [r3, #0]
 80014b8:	2210      	movs	r2, #16
 80014ba:	4013      	ands	r3, r2
 80014bc:	d063      	beq.n	8001586 <HAL_RCC_OscConfig+0x4e6>
    /* Check the parameters */
    assert_param(IS_RCC_HSI14(RCC_OscInitStruct->HSI14State));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSI14CalibrationValue));

    /* Check the HSI14 State */
    if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ON)
 80014be:	687b      	ldr	r3, [r7, #4]
 80014c0:	695b      	ldr	r3, [r3, #20]
 80014c2:	2b01      	cmp	r3, #1
 80014c4:	d12a      	bne.n	800151c <HAL_RCC_OscConfig+0x47c>
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 80014c6:	4b95      	ldr	r3, [pc, #596]	; (800171c <HAL_RCC_OscConfig+0x67c>)
 80014c8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80014ca:	4b94      	ldr	r3, [pc, #592]	; (800171c <HAL_RCC_OscConfig+0x67c>)
 80014cc:	2104      	movs	r1, #4
 80014ce:	430a      	orrs	r2, r1
 80014d0:	635a      	str	r2, [r3, #52]	; 0x34

      /* Enable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_ENABLE();
 80014d2:	4b92      	ldr	r3, [pc, #584]	; (800171c <HAL_RCC_OscConfig+0x67c>)
 80014d4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80014d6:	4b91      	ldr	r3, [pc, #580]	; (800171c <HAL_RCC_OscConfig+0x67c>)
 80014d8:	2101      	movs	r1, #1
 80014da:	430a      	orrs	r2, r1
 80014dc:	635a      	str	r2, [r3, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80014de:	f7ff fae3 	bl	8000aa8 <HAL_GetTick>
 80014e2:	0003      	movs	r3, r0
 80014e4:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 80014e6:	e008      	b.n	80014fa <HAL_RCC_OscConfig+0x45a>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 80014e8:	f7ff fade 	bl	8000aa8 <HAL_GetTick>
 80014ec:	0002      	movs	r2, r0
 80014ee:	69bb      	ldr	r3, [r7, #24]
 80014f0:	1ad3      	subs	r3, r2, r3
 80014f2:	2b02      	cmp	r3, #2
 80014f4:	d901      	bls.n	80014fa <HAL_RCC_OscConfig+0x45a>
        {
          return HAL_TIMEOUT;
 80014f6:	2303      	movs	r3, #3
 80014f8:	e152      	b.n	80017a0 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 80014fa:	4b88      	ldr	r3, [pc, #544]	; (800171c <HAL_RCC_OscConfig+0x67c>)
 80014fc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80014fe:	2202      	movs	r2, #2
 8001500:	4013      	ands	r3, r2
 8001502:	d0f1      	beq.n	80014e8 <HAL_RCC_OscConfig+0x448>
        }      
      } 

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 8001504:	4b85      	ldr	r3, [pc, #532]	; (800171c <HAL_RCC_OscConfig+0x67c>)
 8001506:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001508:	22f8      	movs	r2, #248	; 0xf8
 800150a:	4393      	bics	r3, r2
 800150c:	0019      	movs	r1, r3
 800150e:	687b      	ldr	r3, [r7, #4]
 8001510:	699b      	ldr	r3, [r3, #24]
 8001512:	00da      	lsls	r2, r3, #3
 8001514:	4b81      	ldr	r3, [pc, #516]	; (800171c <HAL_RCC_OscConfig+0x67c>)
 8001516:	430a      	orrs	r2, r1
 8001518:	635a      	str	r2, [r3, #52]	; 0x34
 800151a:	e034      	b.n	8001586 <HAL_RCC_OscConfig+0x4e6>
    }
    else if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ADC_CONTROL)
 800151c:	687b      	ldr	r3, [r7, #4]
 800151e:	695b      	ldr	r3, [r3, #20]
 8001520:	3305      	adds	r3, #5
 8001522:	d111      	bne.n	8001548 <HAL_RCC_OscConfig+0x4a8>
    {
      /* Enable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_ENABLE();
 8001524:	4b7d      	ldr	r3, [pc, #500]	; (800171c <HAL_RCC_OscConfig+0x67c>)
 8001526:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001528:	4b7c      	ldr	r3, [pc, #496]	; (800171c <HAL_RCC_OscConfig+0x67c>)
 800152a:	2104      	movs	r1, #4
 800152c:	438a      	bics	r2, r1
 800152e:	635a      	str	r2, [r3, #52]	; 0x34

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 8001530:	4b7a      	ldr	r3, [pc, #488]	; (800171c <HAL_RCC_OscConfig+0x67c>)
 8001532:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001534:	22f8      	movs	r2, #248	; 0xf8
 8001536:	4393      	bics	r3, r2
 8001538:	0019      	movs	r1, r3
 800153a:	687b      	ldr	r3, [r7, #4]
 800153c:	699b      	ldr	r3, [r3, #24]
 800153e:	00da      	lsls	r2, r3, #3
 8001540:	4b76      	ldr	r3, [pc, #472]	; (800171c <HAL_RCC_OscConfig+0x67c>)
 8001542:	430a      	orrs	r2, r1
 8001544:	635a      	str	r2, [r3, #52]	; 0x34
 8001546:	e01e      	b.n	8001586 <HAL_RCC_OscConfig+0x4e6>
    }
    else
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 8001548:	4b74      	ldr	r3, [pc, #464]	; (800171c <HAL_RCC_OscConfig+0x67c>)
 800154a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800154c:	4b73      	ldr	r3, [pc, #460]	; (800171c <HAL_RCC_OscConfig+0x67c>)
 800154e:	2104      	movs	r1, #4
 8001550:	430a      	orrs	r2, r1
 8001552:	635a      	str	r2, [r3, #52]	; 0x34

      /* Disable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_DISABLE();
 8001554:	4b71      	ldr	r3, [pc, #452]	; (800171c <HAL_RCC_OscConfig+0x67c>)
 8001556:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001558:	4b70      	ldr	r3, [pc, #448]	; (800171c <HAL_RCC_OscConfig+0x67c>)
 800155a:	2101      	movs	r1, #1
 800155c:	438a      	bics	r2, r1
 800155e:	635a      	str	r2, [r3, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001560:	f7ff faa2 	bl	8000aa8 <HAL_GetTick>
 8001564:	0003      	movs	r3, r0
 8001566:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 8001568:	e008      	b.n	800157c <HAL_RCC_OscConfig+0x4dc>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 800156a:	f7ff fa9d 	bl	8000aa8 <HAL_GetTick>
 800156e:	0002      	movs	r2, r0
 8001570:	69bb      	ldr	r3, [r7, #24]
 8001572:	1ad3      	subs	r3, r2, r3
 8001574:	2b02      	cmp	r3, #2
 8001576:	d901      	bls.n	800157c <HAL_RCC_OscConfig+0x4dc>
        {
          return HAL_TIMEOUT;
 8001578:	2303      	movs	r3, #3
 800157a:	e111      	b.n	80017a0 <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 800157c:	4b67      	ldr	r3, [pc, #412]	; (800171c <HAL_RCC_OscConfig+0x67c>)
 800157e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001580:	2202      	movs	r2, #2
 8001582:	4013      	ands	r3, r2
 8001584:	d1f1      	bne.n	800156a <HAL_RCC_OscConfig+0x4ca>
    }
  }

#if defined(RCC_HSI48_SUPPORT)
  /*----------------------------- HSI48 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8001586:	687b      	ldr	r3, [r7, #4]
 8001588:	681b      	ldr	r3, [r3, #0]
 800158a:	2220      	movs	r2, #32
 800158c:	4013      	ands	r3, r2
 800158e:	d05c      	beq.n	800164a <HAL_RCC_OscConfig+0x5aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* When the HSI48 is used as system clock it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI48) ||
 8001590:	4b62      	ldr	r3, [pc, #392]	; (800171c <HAL_RCC_OscConfig+0x67c>)
 8001592:	685b      	ldr	r3, [r3, #4]
 8001594:	220c      	movs	r2, #12
 8001596:	4013      	ands	r3, r2
 8001598:	2b0c      	cmp	r3, #12
 800159a:	d00e      	beq.n	80015ba <HAL_RCC_OscConfig+0x51a>
       ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI48)))
 800159c:	4b5f      	ldr	r3, [pc, #380]	; (800171c <HAL_RCC_OscConfig+0x67c>)
 800159e:	685b      	ldr	r3, [r3, #4]
 80015a0:	220c      	movs	r2, #12
 80015a2:	4013      	ands	r3, r2
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI48) ||
 80015a4:	2b08      	cmp	r3, #8
 80015a6:	d114      	bne.n	80015d2 <HAL_RCC_OscConfig+0x532>
       ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI48)))
 80015a8:	4b5c      	ldr	r3, [pc, #368]	; (800171c <HAL_RCC_OscConfig+0x67c>)
 80015aa:	685a      	ldr	r2, [r3, #4]
 80015ac:	23c0      	movs	r3, #192	; 0xc0
 80015ae:	025b      	lsls	r3, r3, #9
 80015b0:	401a      	ands	r2, r3
 80015b2:	23c0      	movs	r3, #192	; 0xc0
 80015b4:	025b      	lsls	r3, r3, #9
 80015b6:	429a      	cmp	r2, r3
 80015b8:	d10b      	bne.n	80015d2 <HAL_RCC_OscConfig+0x532>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET) && (RCC_OscInitStruct->HSI48State != RCC_HSI48_ON))
 80015ba:	4b58      	ldr	r3, [pc, #352]	; (800171c <HAL_RCC_OscConfig+0x67c>)
 80015bc:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80015be:	2380      	movs	r3, #128	; 0x80
 80015c0:	029b      	lsls	r3, r3, #10
 80015c2:	4013      	ands	r3, r2
 80015c4:	d040      	beq.n	8001648 <HAL_RCC_OscConfig+0x5a8>
 80015c6:	687b      	ldr	r3, [r7, #4]
 80015c8:	6a1b      	ldr	r3, [r3, #32]
 80015ca:	2b01      	cmp	r3, #1
 80015cc:	d03c      	beq.n	8001648 <HAL_RCC_OscConfig+0x5a8>
      {
        return HAL_ERROR;
 80015ce:	2301      	movs	r3, #1
 80015d0:	e0e6      	b.n	80017a0 <HAL_RCC_OscConfig+0x700>
      }
    }
    else
    {
      /* Check the HSI48 State */
      if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 80015d2:	687b      	ldr	r3, [r7, #4]
 80015d4:	6a1b      	ldr	r3, [r3, #32]
 80015d6:	2b00      	cmp	r3, #0
 80015d8:	d01b      	beq.n	8001612 <HAL_RCC_OscConfig+0x572>
      {
        /* Enable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_ENABLE();
 80015da:	4b50      	ldr	r3, [pc, #320]	; (800171c <HAL_RCC_OscConfig+0x67c>)
 80015dc:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80015de:	4b4f      	ldr	r3, [pc, #316]	; (800171c <HAL_RCC_OscConfig+0x67c>)
 80015e0:	2180      	movs	r1, #128	; 0x80
 80015e2:	0249      	lsls	r1, r1, #9
 80015e4:	430a      	orrs	r2, r1
 80015e6:	635a      	str	r2, [r3, #52]	; 0x34

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80015e8:	f7ff fa5e 	bl	8000aa8 <HAL_GetTick>
 80015ec:	0003      	movs	r3, r0
 80015ee:	61bb      	str	r3, [r7, #24]
      
        /* Wait till HSI48 is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == RESET)
 80015f0:	e008      	b.n	8001604 <HAL_RCC_OscConfig+0x564>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80015f2:	f7ff fa59 	bl	8000aa8 <HAL_GetTick>
 80015f6:	0002      	movs	r2, r0
 80015f8:	69bb      	ldr	r3, [r7, #24]
 80015fa:	1ad3      	subs	r3, r2, r3
 80015fc:	2b02      	cmp	r3, #2
 80015fe:	d901      	bls.n	8001604 <HAL_RCC_OscConfig+0x564>
          {
            return HAL_TIMEOUT;
 8001600:	2303      	movs	r3, #3
 8001602:	e0cd      	b.n	80017a0 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == RESET)
 8001604:	4b45      	ldr	r3, [pc, #276]	; (800171c <HAL_RCC_OscConfig+0x67c>)
 8001606:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001608:	2380      	movs	r3, #128	; 0x80
 800160a:	029b      	lsls	r3, r3, #10
 800160c:	4013      	ands	r3, r2
 800160e:	d0f0      	beq.n	80015f2 <HAL_RCC_OscConfig+0x552>
 8001610:	e01b      	b.n	800164a <HAL_RCC_OscConfig+0x5aa>
        } 
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_DISABLE();
 8001612:	4b42      	ldr	r3, [pc, #264]	; (800171c <HAL_RCC_OscConfig+0x67c>)
 8001614:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001616:	4b41      	ldr	r3, [pc, #260]	; (800171c <HAL_RCC_OscConfig+0x67c>)
 8001618:	4943      	ldr	r1, [pc, #268]	; (8001728 <HAL_RCC_OscConfig+0x688>)
 800161a:	400a      	ands	r2, r1
 800161c:	635a      	str	r2, [r3, #52]	; 0x34

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800161e:	f7ff fa43 	bl	8000aa8 <HAL_GetTick>
 8001622:	0003      	movs	r3, r0
 8001624:	61bb      	str	r3, [r7, #24]
      
        /* Wait till HSI48 is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET)
 8001626:	e008      	b.n	800163a <HAL_RCC_OscConfig+0x59a>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001628:	f7ff fa3e 	bl	8000aa8 <HAL_GetTick>
 800162c:	0002      	movs	r2, r0
 800162e:	69bb      	ldr	r3, [r7, #24]
 8001630:	1ad3      	subs	r3, r2, r3
 8001632:	2b02      	cmp	r3, #2
 8001634:	d901      	bls.n	800163a <HAL_RCC_OscConfig+0x59a>
          {
            return HAL_TIMEOUT;
 8001636:	2303      	movs	r3, #3
 8001638:	e0b2      	b.n	80017a0 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET)
 800163a:	4b38      	ldr	r3, [pc, #224]	; (800171c <HAL_RCC_OscConfig+0x67c>)
 800163c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800163e:	2380      	movs	r3, #128	; 0x80
 8001640:	029b      	lsls	r3, r3, #10
 8001642:	4013      	ands	r3, r2
 8001644:	d1f0      	bne.n	8001628 <HAL_RCC_OscConfig+0x588>
 8001646:	e000      	b.n	800164a <HAL_RCC_OscConfig+0x5aa>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET) && (RCC_OscInitStruct->HSI48State != RCC_HSI48_ON))
 8001648:	46c0      	nop			; (mov r8, r8)
#endif /* RCC_HSI48_SUPPORT */
       
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800164a:	687b      	ldr	r3, [r7, #4]
 800164c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800164e:	2b00      	cmp	r3, #0
 8001650:	d100      	bne.n	8001654 <HAL_RCC_OscConfig+0x5b4>
 8001652:	e0a4      	b.n	800179e <HAL_RCC_OscConfig+0x6fe>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001654:	4b31      	ldr	r3, [pc, #196]	; (800171c <HAL_RCC_OscConfig+0x67c>)
 8001656:	685b      	ldr	r3, [r3, #4]
 8001658:	220c      	movs	r2, #12
 800165a:	4013      	ands	r3, r2
 800165c:	2b08      	cmp	r3, #8
 800165e:	d100      	bne.n	8001662 <HAL_RCC_OscConfig+0x5c2>
 8001660:	e078      	b.n	8001754 <HAL_RCC_OscConfig+0x6b4>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001662:	687b      	ldr	r3, [r7, #4]
 8001664:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001666:	2b02      	cmp	r3, #2
 8001668:	d14c      	bne.n	8001704 <HAL_RCC_OscConfig+0x664>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800166a:	4b2c      	ldr	r3, [pc, #176]	; (800171c <HAL_RCC_OscConfig+0x67c>)
 800166c:	681a      	ldr	r2, [r3, #0]
 800166e:	4b2b      	ldr	r3, [pc, #172]	; (800171c <HAL_RCC_OscConfig+0x67c>)
 8001670:	492e      	ldr	r1, [pc, #184]	; (800172c <HAL_RCC_OscConfig+0x68c>)
 8001672:	400a      	ands	r2, r1
 8001674:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001676:	f7ff fa17 	bl	8000aa8 <HAL_GetTick>
 800167a:	0003      	movs	r3, r0
 800167c:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800167e:	e008      	b.n	8001692 <HAL_RCC_OscConfig+0x5f2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001680:	f7ff fa12 	bl	8000aa8 <HAL_GetTick>
 8001684:	0002      	movs	r2, r0
 8001686:	69bb      	ldr	r3, [r7, #24]
 8001688:	1ad3      	subs	r3, r2, r3
 800168a:	2b02      	cmp	r3, #2
 800168c:	d901      	bls.n	8001692 <HAL_RCC_OscConfig+0x5f2>
          {
            return HAL_TIMEOUT;
 800168e:	2303      	movs	r3, #3
 8001690:	e086      	b.n	80017a0 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001692:	4b22      	ldr	r3, [pc, #136]	; (800171c <HAL_RCC_OscConfig+0x67c>)
 8001694:	681a      	ldr	r2, [r3, #0]
 8001696:	2380      	movs	r3, #128	; 0x80
 8001698:	049b      	lsls	r3, r3, #18
 800169a:	4013      	ands	r3, r2
 800169c:	d1f0      	bne.n	8001680 <HAL_RCC_OscConfig+0x5e0>
          }
        }

        /* Configure the main PLL clock source, predivider and multiplication factor. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800169e:	4b1f      	ldr	r3, [pc, #124]	; (800171c <HAL_RCC_OscConfig+0x67c>)
 80016a0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80016a2:	220f      	movs	r2, #15
 80016a4:	4393      	bics	r3, r2
 80016a6:	0019      	movs	r1, r3
 80016a8:	687b      	ldr	r3, [r7, #4]
 80016aa:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80016ac:	4b1b      	ldr	r3, [pc, #108]	; (800171c <HAL_RCC_OscConfig+0x67c>)
 80016ae:	430a      	orrs	r2, r1
 80016b0:	62da      	str	r2, [r3, #44]	; 0x2c
 80016b2:	4b1a      	ldr	r3, [pc, #104]	; (800171c <HAL_RCC_OscConfig+0x67c>)
 80016b4:	685b      	ldr	r3, [r3, #4]
 80016b6:	4a1e      	ldr	r2, [pc, #120]	; (8001730 <HAL_RCC_OscConfig+0x690>)
 80016b8:	4013      	ands	r3, r2
 80016ba:	0019      	movs	r1, r3
 80016bc:	687b      	ldr	r3, [r7, #4]
 80016be:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80016c0:	687b      	ldr	r3, [r7, #4]
 80016c2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80016c4:	431a      	orrs	r2, r3
 80016c6:	4b15      	ldr	r3, [pc, #84]	; (800171c <HAL_RCC_OscConfig+0x67c>)
 80016c8:	430a      	orrs	r2, r1
 80016ca:	605a      	str	r2, [r3, #4]
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80016cc:	4b13      	ldr	r3, [pc, #76]	; (800171c <HAL_RCC_OscConfig+0x67c>)
 80016ce:	681a      	ldr	r2, [r3, #0]
 80016d0:	4b12      	ldr	r3, [pc, #72]	; (800171c <HAL_RCC_OscConfig+0x67c>)
 80016d2:	2180      	movs	r1, #128	; 0x80
 80016d4:	0449      	lsls	r1, r1, #17
 80016d6:	430a      	orrs	r2, r1
 80016d8:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80016da:	f7ff f9e5 	bl	8000aa8 <HAL_GetTick>
 80016de:	0003      	movs	r3, r0
 80016e0:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80016e2:	e008      	b.n	80016f6 <HAL_RCC_OscConfig+0x656>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80016e4:	f7ff f9e0 	bl	8000aa8 <HAL_GetTick>
 80016e8:	0002      	movs	r2, r0
 80016ea:	69bb      	ldr	r3, [r7, #24]
 80016ec:	1ad3      	subs	r3, r2, r3
 80016ee:	2b02      	cmp	r3, #2
 80016f0:	d901      	bls.n	80016f6 <HAL_RCC_OscConfig+0x656>
          {
            return HAL_TIMEOUT;
 80016f2:	2303      	movs	r3, #3
 80016f4:	e054      	b.n	80017a0 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80016f6:	4b09      	ldr	r3, [pc, #36]	; (800171c <HAL_RCC_OscConfig+0x67c>)
 80016f8:	681a      	ldr	r2, [r3, #0]
 80016fa:	2380      	movs	r3, #128	; 0x80
 80016fc:	049b      	lsls	r3, r3, #18
 80016fe:	4013      	ands	r3, r2
 8001700:	d0f0      	beq.n	80016e4 <HAL_RCC_OscConfig+0x644>
 8001702:	e04c      	b.n	800179e <HAL_RCC_OscConfig+0x6fe>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001704:	4b05      	ldr	r3, [pc, #20]	; (800171c <HAL_RCC_OscConfig+0x67c>)
 8001706:	681a      	ldr	r2, [r3, #0]
 8001708:	4b04      	ldr	r3, [pc, #16]	; (800171c <HAL_RCC_OscConfig+0x67c>)
 800170a:	4908      	ldr	r1, [pc, #32]	; (800172c <HAL_RCC_OscConfig+0x68c>)
 800170c:	400a      	ands	r2, r1
 800170e:	601a      	str	r2, [r3, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001710:	f7ff f9ca 	bl	8000aa8 <HAL_GetTick>
 8001714:	0003      	movs	r3, r0
 8001716:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001718:	e015      	b.n	8001746 <HAL_RCC_OscConfig+0x6a6>
 800171a:	46c0      	nop			; (mov r8, r8)
 800171c:	40021000 	.word	0x40021000
 8001720:	00001388 	.word	0x00001388
 8001724:	efffffff 	.word	0xefffffff
 8001728:	fffeffff 	.word	0xfffeffff
 800172c:	feffffff 	.word	0xfeffffff
 8001730:	ffc27fff 	.word	0xffc27fff
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001734:	f7ff f9b8 	bl	8000aa8 <HAL_GetTick>
 8001738:	0002      	movs	r2, r0
 800173a:	69bb      	ldr	r3, [r7, #24]
 800173c:	1ad3      	subs	r3, r2, r3
 800173e:	2b02      	cmp	r3, #2
 8001740:	d901      	bls.n	8001746 <HAL_RCC_OscConfig+0x6a6>
          {
            return HAL_TIMEOUT;
 8001742:	2303      	movs	r3, #3
 8001744:	e02c      	b.n	80017a0 <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001746:	4b18      	ldr	r3, [pc, #96]	; (80017a8 <HAL_RCC_OscConfig+0x708>)
 8001748:	681a      	ldr	r2, [r3, #0]
 800174a:	2380      	movs	r3, #128	; 0x80
 800174c:	049b      	lsls	r3, r3, #18
 800174e:	4013      	ands	r3, r2
 8001750:	d1f0      	bne.n	8001734 <HAL_RCC_OscConfig+0x694>
 8001752:	e024      	b.n	800179e <HAL_RCC_OscConfig+0x6fe>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001754:	687b      	ldr	r3, [r7, #4]
 8001756:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001758:	2b01      	cmp	r3, #1
 800175a:	d101      	bne.n	8001760 <HAL_RCC_OscConfig+0x6c0>
      {
        return HAL_ERROR;
 800175c:	2301      	movs	r3, #1
 800175e:	e01f      	b.n	80017a0 <HAL_RCC_OscConfig+0x700>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config  = RCC->CFGR;
 8001760:	4b11      	ldr	r3, [pc, #68]	; (80017a8 <HAL_RCC_OscConfig+0x708>)
 8001762:	685b      	ldr	r3, [r3, #4]
 8001764:	617b      	str	r3, [r7, #20]
        pll_config2 = RCC->CFGR2;
 8001766:	4b10      	ldr	r3, [pc, #64]	; (80017a8 <HAL_RCC_OscConfig+0x708>)
 8001768:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800176a:	613b      	str	r3, [r7, #16]
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800176c:	697a      	ldr	r2, [r7, #20]
 800176e:	23c0      	movs	r3, #192	; 0xc0
 8001770:	025b      	lsls	r3, r3, #9
 8001772:	401a      	ands	r2, r3
 8001774:	687b      	ldr	r3, [r7, #4]
 8001776:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001778:	429a      	cmp	r2, r3
 800177a:	d10e      	bne.n	800179a <HAL_RCC_OscConfig+0x6fa>
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 800177c:	693b      	ldr	r3, [r7, #16]
 800177e:	220f      	movs	r2, #15
 8001780:	401a      	ands	r2, r3
 8001782:	687b      	ldr	r3, [r7, #4]
 8001784:	6b1b      	ldr	r3, [r3, #48]	; 0x30
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001786:	429a      	cmp	r2, r3
 8001788:	d107      	bne.n	800179a <HAL_RCC_OscConfig+0x6fa>
           (READ_BIT(pll_config,  RCC_CFGR_PLLMUL)  != RCC_OscInitStruct->PLL.PLLMUL))
 800178a:	697a      	ldr	r2, [r7, #20]
 800178c:	23f0      	movs	r3, #240	; 0xf0
 800178e:	039b      	lsls	r3, r3, #14
 8001790:	401a      	ands	r2, r3
 8001792:	687b      	ldr	r3, [r7, #4]
 8001794:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 8001796:	429a      	cmp	r2, r3
 8001798:	d001      	beq.n	800179e <HAL_RCC_OscConfig+0x6fe>
        {
          return HAL_ERROR;
 800179a:	2301      	movs	r3, #1
 800179c:	e000      	b.n	80017a0 <HAL_RCC_OscConfig+0x700>
        }
      }
    }
  }

  return HAL_OK;
 800179e:	2300      	movs	r3, #0
}
 80017a0:	0018      	movs	r0, r3
 80017a2:	46bd      	mov	sp, r7
 80017a4:	b008      	add	sp, #32
 80017a6:	bd80      	pop	{r7, pc}
 80017a8:	40021000 	.word	0x40021000

080017ac <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80017ac:	b580      	push	{r7, lr}
 80017ae:	b084      	sub	sp, #16
 80017b0:	af00      	add	r7, sp, #0
 80017b2:	6078      	str	r0, [r7, #4]
 80017b4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80017b6:	687b      	ldr	r3, [r7, #4]
 80017b8:	2b00      	cmp	r3, #0
 80017ba:	d101      	bne.n	80017c0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80017bc:	2301      	movs	r3, #1
 80017be:	e0bf      	b.n	8001940 <HAL_RCC_ClockConfig+0x194>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80017c0:	4b61      	ldr	r3, [pc, #388]	; (8001948 <HAL_RCC_ClockConfig+0x19c>)
 80017c2:	681b      	ldr	r3, [r3, #0]
 80017c4:	2201      	movs	r2, #1
 80017c6:	4013      	ands	r3, r2
 80017c8:	683a      	ldr	r2, [r7, #0]
 80017ca:	429a      	cmp	r2, r3
 80017cc:	d911      	bls.n	80017f2 <HAL_RCC_ClockConfig+0x46>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80017ce:	4b5e      	ldr	r3, [pc, #376]	; (8001948 <HAL_RCC_ClockConfig+0x19c>)
 80017d0:	681b      	ldr	r3, [r3, #0]
 80017d2:	2201      	movs	r2, #1
 80017d4:	4393      	bics	r3, r2
 80017d6:	0019      	movs	r1, r3
 80017d8:	4b5b      	ldr	r3, [pc, #364]	; (8001948 <HAL_RCC_ClockConfig+0x19c>)
 80017da:	683a      	ldr	r2, [r7, #0]
 80017dc:	430a      	orrs	r2, r1
 80017de:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80017e0:	4b59      	ldr	r3, [pc, #356]	; (8001948 <HAL_RCC_ClockConfig+0x19c>)
 80017e2:	681b      	ldr	r3, [r3, #0]
 80017e4:	2201      	movs	r2, #1
 80017e6:	4013      	ands	r3, r2
 80017e8:	683a      	ldr	r2, [r7, #0]
 80017ea:	429a      	cmp	r2, r3
 80017ec:	d001      	beq.n	80017f2 <HAL_RCC_ClockConfig+0x46>
    {
      return HAL_ERROR;
 80017ee:	2301      	movs	r3, #1
 80017f0:	e0a6      	b.n	8001940 <HAL_RCC_ClockConfig+0x194>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80017f2:	687b      	ldr	r3, [r7, #4]
 80017f4:	681b      	ldr	r3, [r3, #0]
 80017f6:	2202      	movs	r2, #2
 80017f8:	4013      	ands	r3, r2
 80017fa:	d015      	beq.n	8001828 <HAL_RCC_ClockConfig+0x7c>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80017fc:	687b      	ldr	r3, [r7, #4]
 80017fe:	681b      	ldr	r3, [r3, #0]
 8001800:	2204      	movs	r2, #4
 8001802:	4013      	ands	r3, r2
 8001804:	d006      	beq.n	8001814 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 8001806:	4b51      	ldr	r3, [pc, #324]	; (800194c <HAL_RCC_ClockConfig+0x1a0>)
 8001808:	685a      	ldr	r2, [r3, #4]
 800180a:	4b50      	ldr	r3, [pc, #320]	; (800194c <HAL_RCC_ClockConfig+0x1a0>)
 800180c:	21e0      	movs	r1, #224	; 0xe0
 800180e:	00c9      	lsls	r1, r1, #3
 8001810:	430a      	orrs	r2, r1
 8001812:	605a      	str	r2, [r3, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001814:	4b4d      	ldr	r3, [pc, #308]	; (800194c <HAL_RCC_ClockConfig+0x1a0>)
 8001816:	685b      	ldr	r3, [r3, #4]
 8001818:	22f0      	movs	r2, #240	; 0xf0
 800181a:	4393      	bics	r3, r2
 800181c:	0019      	movs	r1, r3
 800181e:	687b      	ldr	r3, [r7, #4]
 8001820:	689a      	ldr	r2, [r3, #8]
 8001822:	4b4a      	ldr	r3, [pc, #296]	; (800194c <HAL_RCC_ClockConfig+0x1a0>)
 8001824:	430a      	orrs	r2, r1
 8001826:	605a      	str	r2, [r3, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001828:	687b      	ldr	r3, [r7, #4]
 800182a:	681b      	ldr	r3, [r3, #0]
 800182c:	2201      	movs	r2, #1
 800182e:	4013      	ands	r3, r2
 8001830:	d04c      	beq.n	80018cc <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001832:	687b      	ldr	r3, [r7, #4]
 8001834:	685b      	ldr	r3, [r3, #4]
 8001836:	2b01      	cmp	r3, #1
 8001838:	d107      	bne.n	800184a <HAL_RCC_ClockConfig+0x9e>
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800183a:	4b44      	ldr	r3, [pc, #272]	; (800194c <HAL_RCC_ClockConfig+0x1a0>)
 800183c:	681a      	ldr	r2, [r3, #0]
 800183e:	2380      	movs	r3, #128	; 0x80
 8001840:	029b      	lsls	r3, r3, #10
 8001842:	4013      	ands	r3, r2
 8001844:	d120      	bne.n	8001888 <HAL_RCC_ClockConfig+0xdc>
      {
        return HAL_ERROR;
 8001846:	2301      	movs	r3, #1
 8001848:	e07a      	b.n	8001940 <HAL_RCC_ClockConfig+0x194>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800184a:	687b      	ldr	r3, [r7, #4]
 800184c:	685b      	ldr	r3, [r3, #4]
 800184e:	2b02      	cmp	r3, #2
 8001850:	d107      	bne.n	8001862 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001852:	4b3e      	ldr	r3, [pc, #248]	; (800194c <HAL_RCC_ClockConfig+0x1a0>)
 8001854:	681a      	ldr	r2, [r3, #0]
 8001856:	2380      	movs	r3, #128	; 0x80
 8001858:	049b      	lsls	r3, r3, #18
 800185a:	4013      	ands	r3, r2
 800185c:	d114      	bne.n	8001888 <HAL_RCC_ClockConfig+0xdc>
      {
        return HAL_ERROR;
 800185e:	2301      	movs	r3, #1
 8001860:	e06e      	b.n	8001940 <HAL_RCC_ClockConfig+0x194>
      }
    }
#if defined(RCC_CFGR_SWS_HSI48)
    /* HSI48 is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI48)
 8001862:	687b      	ldr	r3, [r7, #4]
 8001864:	685b      	ldr	r3, [r3, #4]
 8001866:	2b03      	cmp	r3, #3
 8001868:	d107      	bne.n	800187a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the HSI48 ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == RESET)
 800186a:	4b38      	ldr	r3, [pc, #224]	; (800194c <HAL_RCC_ClockConfig+0x1a0>)
 800186c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800186e:	2380      	movs	r3, #128	; 0x80
 8001870:	029b      	lsls	r3, r3, #10
 8001872:	4013      	ands	r3, r2
 8001874:	d108      	bne.n	8001888 <HAL_RCC_ClockConfig+0xdc>
      {
        return HAL_ERROR;
 8001876:	2301      	movs	r3, #1
 8001878:	e062      	b.n	8001940 <HAL_RCC_ClockConfig+0x194>
#endif /* RCC_CFGR_SWS_HSI48 */
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800187a:	4b34      	ldr	r3, [pc, #208]	; (800194c <HAL_RCC_ClockConfig+0x1a0>)
 800187c:	681b      	ldr	r3, [r3, #0]
 800187e:	2202      	movs	r2, #2
 8001880:	4013      	ands	r3, r2
 8001882:	d101      	bne.n	8001888 <HAL_RCC_ClockConfig+0xdc>
      {
        return HAL_ERROR;
 8001884:	2301      	movs	r3, #1
 8001886:	e05b      	b.n	8001940 <HAL_RCC_ClockConfig+0x194>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001888:	4b30      	ldr	r3, [pc, #192]	; (800194c <HAL_RCC_ClockConfig+0x1a0>)
 800188a:	685b      	ldr	r3, [r3, #4]
 800188c:	2203      	movs	r2, #3
 800188e:	4393      	bics	r3, r2
 8001890:	0019      	movs	r1, r3
 8001892:	687b      	ldr	r3, [r7, #4]
 8001894:	685a      	ldr	r2, [r3, #4]
 8001896:	4b2d      	ldr	r3, [pc, #180]	; (800194c <HAL_RCC_ClockConfig+0x1a0>)
 8001898:	430a      	orrs	r2, r1
 800189a:	605a      	str	r2, [r3, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800189c:	f7ff f904 	bl	8000aa8 <HAL_GetTick>
 80018a0:	0003      	movs	r3, r0
 80018a2:	60fb      	str	r3, [r7, #12]
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80018a4:	e009      	b.n	80018ba <HAL_RCC_ClockConfig+0x10e>
    {
      if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80018a6:	f7ff f8ff 	bl	8000aa8 <HAL_GetTick>
 80018aa:	0002      	movs	r2, r0
 80018ac:	68fb      	ldr	r3, [r7, #12]
 80018ae:	1ad3      	subs	r3, r2, r3
 80018b0:	4a27      	ldr	r2, [pc, #156]	; (8001950 <HAL_RCC_ClockConfig+0x1a4>)
 80018b2:	4293      	cmp	r3, r2
 80018b4:	d901      	bls.n	80018ba <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80018b6:	2303      	movs	r3, #3
 80018b8:	e042      	b.n	8001940 <HAL_RCC_ClockConfig+0x194>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80018ba:	4b24      	ldr	r3, [pc, #144]	; (800194c <HAL_RCC_ClockConfig+0x1a0>)
 80018bc:	685b      	ldr	r3, [r3, #4]
 80018be:	220c      	movs	r2, #12
 80018c0:	401a      	ands	r2, r3
 80018c2:	687b      	ldr	r3, [r7, #4]
 80018c4:	685b      	ldr	r3, [r3, #4]
 80018c6:	009b      	lsls	r3, r3, #2
 80018c8:	429a      	cmp	r2, r3
 80018ca:	d1ec      	bne.n	80018a6 <HAL_RCC_ClockConfig+0xfa>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80018cc:	4b1e      	ldr	r3, [pc, #120]	; (8001948 <HAL_RCC_ClockConfig+0x19c>)
 80018ce:	681b      	ldr	r3, [r3, #0]
 80018d0:	2201      	movs	r2, #1
 80018d2:	4013      	ands	r3, r2
 80018d4:	683a      	ldr	r2, [r7, #0]
 80018d6:	429a      	cmp	r2, r3
 80018d8:	d211      	bcs.n	80018fe <HAL_RCC_ClockConfig+0x152>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80018da:	4b1b      	ldr	r3, [pc, #108]	; (8001948 <HAL_RCC_ClockConfig+0x19c>)
 80018dc:	681b      	ldr	r3, [r3, #0]
 80018de:	2201      	movs	r2, #1
 80018e0:	4393      	bics	r3, r2
 80018e2:	0019      	movs	r1, r3
 80018e4:	4b18      	ldr	r3, [pc, #96]	; (8001948 <HAL_RCC_ClockConfig+0x19c>)
 80018e6:	683a      	ldr	r2, [r7, #0]
 80018e8:	430a      	orrs	r2, r1
 80018ea:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80018ec:	4b16      	ldr	r3, [pc, #88]	; (8001948 <HAL_RCC_ClockConfig+0x19c>)
 80018ee:	681b      	ldr	r3, [r3, #0]
 80018f0:	2201      	movs	r2, #1
 80018f2:	4013      	ands	r3, r2
 80018f4:	683a      	ldr	r2, [r7, #0]
 80018f6:	429a      	cmp	r2, r3
 80018f8:	d001      	beq.n	80018fe <HAL_RCC_ClockConfig+0x152>
    {
      return HAL_ERROR;
 80018fa:	2301      	movs	r3, #1
 80018fc:	e020      	b.n	8001940 <HAL_RCC_ClockConfig+0x194>
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80018fe:	687b      	ldr	r3, [r7, #4]
 8001900:	681b      	ldr	r3, [r3, #0]
 8001902:	2204      	movs	r2, #4
 8001904:	4013      	ands	r3, r2
 8001906:	d009      	beq.n	800191c <HAL_RCC_ClockConfig+0x170>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 8001908:	4b10      	ldr	r3, [pc, #64]	; (800194c <HAL_RCC_ClockConfig+0x1a0>)
 800190a:	685b      	ldr	r3, [r3, #4]
 800190c:	4a11      	ldr	r2, [pc, #68]	; (8001954 <HAL_RCC_ClockConfig+0x1a8>)
 800190e:	4013      	ands	r3, r2
 8001910:	0019      	movs	r1, r3
 8001912:	687b      	ldr	r3, [r7, #4]
 8001914:	68da      	ldr	r2, [r3, #12]
 8001916:	4b0d      	ldr	r3, [pc, #52]	; (800194c <HAL_RCC_ClockConfig+0x1a0>)
 8001918:	430a      	orrs	r2, r1
 800191a:	605a      	str	r2, [r3, #4]
  }
  
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 800191c:	f000 f820 	bl	8001960 <HAL_RCC_GetSysClockFreq>
 8001920:	0001      	movs	r1, r0
 8001922:	4b0a      	ldr	r3, [pc, #40]	; (800194c <HAL_RCC_ClockConfig+0x1a0>)
 8001924:	685b      	ldr	r3, [r3, #4]
 8001926:	091b      	lsrs	r3, r3, #4
 8001928:	220f      	movs	r2, #15
 800192a:	4013      	ands	r3, r2
 800192c:	4a0a      	ldr	r2, [pc, #40]	; (8001958 <HAL_RCC_ClockConfig+0x1ac>)
 800192e:	5cd3      	ldrb	r3, [r2, r3]
 8001930:	000a      	movs	r2, r1
 8001932:	40da      	lsrs	r2, r3
 8001934:	4b09      	ldr	r3, [pc, #36]	; (800195c <HAL_RCC_ClockConfig+0x1b0>)
 8001936:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (TICK_INT_PRIORITY);
 8001938:	2003      	movs	r0, #3
 800193a:	f7ff f86f 	bl	8000a1c <HAL_InitTick>
  
  return HAL_OK;
 800193e:	2300      	movs	r3, #0
}
 8001940:	0018      	movs	r0, r3
 8001942:	46bd      	mov	sp, r7
 8001944:	b004      	add	sp, #16
 8001946:	bd80      	pop	{r7, pc}
 8001948:	40022000 	.word	0x40022000
 800194c:	40021000 	.word	0x40021000
 8001950:	00001388 	.word	0x00001388
 8001954:	fffff8ff 	.word	0xfffff8ff
 8001958:	080044c0 	.word	0x080044c0
 800195c:	20000098 	.word	0x20000098

08001960 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001960:	b580      	push	{r7, lr}
 8001962:	b086      	sub	sp, #24
 8001964:	af00      	add	r7, sp, #0
  static const uint8_t aPLLMULFactorTable[16U] = { 2U,  3U,  4U,  5U,  6U,  7U,  8U,  9U,
                                                   10U, 11U, 12U, 13U, 14U, 15U, 16U, 16U};
  static const uint8_t aPredivFactorTable[16U] = { 1U, 2U,  3U,  4U,  5U,  6U,  7U,  8U,
                                                   9U,10U, 11U, 12U, 13U, 14U, 15U, 16U};

  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8001966:	2300      	movs	r3, #0
 8001968:	60fb      	str	r3, [r7, #12]
 800196a:	2300      	movs	r3, #0
 800196c:	60bb      	str	r3, [r7, #8]
 800196e:	2300      	movs	r3, #0
 8001970:	617b      	str	r3, [r7, #20]
 8001972:	2300      	movs	r3, #0
 8001974:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8001976:	2300      	movs	r3, #0
 8001978:	613b      	str	r3, [r7, #16]
  
  tmpreg = RCC->CFGR;
 800197a:	4b2d      	ldr	r3, [pc, #180]	; (8001a30 <HAL_RCC_GetSysClockFreq+0xd0>)
 800197c:	685b      	ldr	r3, [r3, #4]
 800197e:	60fb      	str	r3, [r7, #12]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8001980:	68fb      	ldr	r3, [r7, #12]
 8001982:	220c      	movs	r2, #12
 8001984:	4013      	ands	r3, r2
 8001986:	2b0c      	cmp	r3, #12
 8001988:	d046      	beq.n	8001a18 <HAL_RCC_GetSysClockFreq+0xb8>
 800198a:	d848      	bhi.n	8001a1e <HAL_RCC_GetSysClockFreq+0xbe>
 800198c:	2b04      	cmp	r3, #4
 800198e:	d002      	beq.n	8001996 <HAL_RCC_GetSysClockFreq+0x36>
 8001990:	2b08      	cmp	r3, #8
 8001992:	d003      	beq.n	800199c <HAL_RCC_GetSysClockFreq+0x3c>
 8001994:	e043      	b.n	8001a1e <HAL_RCC_GetSysClockFreq+0xbe>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8001996:	4b27      	ldr	r3, [pc, #156]	; (8001a34 <HAL_RCC_GetSysClockFreq+0xd4>)
 8001998:	613b      	str	r3, [r7, #16]
      break;
 800199a:	e043      	b.n	8001a24 <HAL_RCC_GetSysClockFreq+0xc4>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_BITNUMBER];
 800199c:	68fb      	ldr	r3, [r7, #12]
 800199e:	0c9b      	lsrs	r3, r3, #18
 80019a0:	220f      	movs	r2, #15
 80019a2:	4013      	ands	r3, r2
 80019a4:	4a24      	ldr	r2, [pc, #144]	; (8001a38 <HAL_RCC_GetSysClockFreq+0xd8>)
 80019a6:	5cd3      	ldrb	r3, [r2, r3]
 80019a8:	607b      	str	r3, [r7, #4]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> RCC_CFGR2_PREDIV_BITNUMBER];
 80019aa:	4b21      	ldr	r3, [pc, #132]	; (8001a30 <HAL_RCC_GetSysClockFreq+0xd0>)
 80019ac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80019ae:	220f      	movs	r2, #15
 80019b0:	4013      	ands	r3, r2
 80019b2:	4a22      	ldr	r2, [pc, #136]	; (8001a3c <HAL_RCC_GetSysClockFreq+0xdc>)
 80019b4:	5cd3      	ldrb	r3, [r2, r3]
 80019b6:	60bb      	str	r3, [r7, #8]
      if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 80019b8:	68fa      	ldr	r2, [r7, #12]
 80019ba:	23c0      	movs	r3, #192	; 0xc0
 80019bc:	025b      	lsls	r3, r3, #9
 80019be:	401a      	ands	r2, r3
 80019c0:	2380      	movs	r3, #128	; 0x80
 80019c2:	025b      	lsls	r3, r3, #9
 80019c4:	429a      	cmp	r2, r3
 80019c6:	d109      	bne.n	80019dc <HAL_RCC_GetSysClockFreq+0x7c>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 80019c8:	68b9      	ldr	r1, [r7, #8]
 80019ca:	481a      	ldr	r0, [pc, #104]	; (8001a34 <HAL_RCC_GetSysClockFreq+0xd4>)
 80019cc:	f7fe fba4 	bl	8000118 <__udivsi3>
 80019d0:	0003      	movs	r3, r0
 80019d2:	001a      	movs	r2, r3
 80019d4:	687b      	ldr	r3, [r7, #4]
 80019d6:	4353      	muls	r3, r2
 80019d8:	617b      	str	r3, [r7, #20]
 80019da:	e01a      	b.n	8001a12 <HAL_RCC_GetSysClockFreq+0xb2>
      }
#if defined(RCC_CFGR_PLLSRC_HSI48_PREDIV)
      else if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSI48)
 80019dc:	68fa      	ldr	r2, [r7, #12]
 80019de:	23c0      	movs	r3, #192	; 0xc0
 80019e0:	025b      	lsls	r3, r3, #9
 80019e2:	401a      	ands	r2, r3
 80019e4:	23c0      	movs	r3, #192	; 0xc0
 80019e6:	025b      	lsls	r3, r3, #9
 80019e8:	429a      	cmp	r2, r3
 80019ea:	d109      	bne.n	8001a00 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        /* HSI48 used as PLL clock source : PLLCLK = HSI48/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI48_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 80019ec:	68b9      	ldr	r1, [r7, #8]
 80019ee:	4814      	ldr	r0, [pc, #80]	; (8001a40 <HAL_RCC_GetSysClockFreq+0xe0>)
 80019f0:	f7fe fb92 	bl	8000118 <__udivsi3>
 80019f4:	0003      	movs	r3, r0
 80019f6:	001a      	movs	r2, r3
 80019f8:	687b      	ldr	r3, [r7, #4]
 80019fa:	4353      	muls	r3, r2
 80019fc:	617b      	str	r3, [r7, #20]
 80019fe:	e008      	b.n	8001a12 <HAL_RCC_GetSysClockFreq+0xb2>
#endif /* RCC_CFGR_PLLSRC_HSI48_PREDIV */
      else
      {
#if  (defined(STM32F042x6) || defined(STM32F048xx) || defined(STM32F070x6) || defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx) || defined(STM32F070xB) || defined(STM32F091xC) || defined(STM32F098xx) || defined(STM32F030xC))
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8001a00:	68b9      	ldr	r1, [r7, #8]
 8001a02:	480c      	ldr	r0, [pc, #48]	; (8001a34 <HAL_RCC_GetSysClockFreq+0xd4>)
 8001a04:	f7fe fb88 	bl	8000118 <__udivsi3>
 8001a08:	0003      	movs	r3, r0
 8001a0a:	001a      	movs	r2, r3
 8001a0c:	687b      	ldr	r3, [r7, #4]
 8001a0e:	4353      	muls	r3, r2
 8001a10:	617b      	str	r3, [r7, #20]
#else
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
#endif
      }
      sysclockfreq = pllclk;
 8001a12:	697b      	ldr	r3, [r7, #20]
 8001a14:	613b      	str	r3, [r7, #16]
      break;
 8001a16:	e005      	b.n	8001a24 <HAL_RCC_GetSysClockFreq+0xc4>
    }
#if defined(RCC_CFGR_SWS_HSI48)
    case RCC_SYSCLKSOURCE_STATUS_HSI48:    /* HSI48 used as system clock source */
    {
      sysclockfreq = HSI48_VALUE;
 8001a18:	4b09      	ldr	r3, [pc, #36]	; (8001a40 <HAL_RCC_GetSysClockFreq+0xe0>)
 8001a1a:	613b      	str	r3, [r7, #16]
      break;
 8001a1c:	e002      	b.n	8001a24 <HAL_RCC_GetSysClockFreq+0xc4>
    }
#endif /* RCC_CFGR_SWS_HSI48 */
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8001a1e:	4b05      	ldr	r3, [pc, #20]	; (8001a34 <HAL_RCC_GetSysClockFreq+0xd4>)
 8001a20:	613b      	str	r3, [r7, #16]
      break;
 8001a22:	46c0      	nop			; (mov r8, r8)
    }
  }
  return sysclockfreq;
 8001a24:	693b      	ldr	r3, [r7, #16]
}
 8001a26:	0018      	movs	r0, r3
 8001a28:	46bd      	mov	sp, r7
 8001a2a:	b006      	add	sp, #24
 8001a2c:	bd80      	pop	{r7, pc}
 8001a2e:	46c0      	nop			; (mov r8, r8)
 8001a30:	40021000 	.word	0x40021000
 8001a34:	007a1200 	.word	0x007a1200
 8001a38:	080044d8 	.word	0x080044d8
 8001a3c:	080044e8 	.word	0x080044e8
 8001a40:	02dc6c00 	.word	0x02dc6c00

08001a44 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001a44:	b580      	push	{r7, lr}
 8001a46:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001a48:	4b02      	ldr	r3, [pc, #8]	; (8001a54 <HAL_RCC_GetHCLKFreq+0x10>)
 8001a4a:	681b      	ldr	r3, [r3, #0]
}
 8001a4c:	0018      	movs	r0, r3
 8001a4e:	46bd      	mov	sp, r7
 8001a50:	bd80      	pop	{r7, pc}
 8001a52:	46c0      	nop			; (mov r8, r8)
 8001a54:	20000098 	.word	0x20000098

08001a58 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001a58:	b580      	push	{r7, lr}
 8001a5a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE) >> RCC_CFGR_PPRE_BITNUMBER]);
 8001a5c:	f7ff fff2 	bl	8001a44 <HAL_RCC_GetHCLKFreq>
 8001a60:	0001      	movs	r1, r0
 8001a62:	4b06      	ldr	r3, [pc, #24]	; (8001a7c <HAL_RCC_GetPCLK1Freq+0x24>)
 8001a64:	685b      	ldr	r3, [r3, #4]
 8001a66:	0a1b      	lsrs	r3, r3, #8
 8001a68:	2207      	movs	r2, #7
 8001a6a:	4013      	ands	r3, r2
 8001a6c:	4a04      	ldr	r2, [pc, #16]	; (8001a80 <HAL_RCC_GetPCLK1Freq+0x28>)
 8001a6e:	5cd3      	ldrb	r3, [r2, r3]
 8001a70:	40d9      	lsrs	r1, r3
 8001a72:	000b      	movs	r3, r1
}    
 8001a74:	0018      	movs	r0, r3
 8001a76:	46bd      	mov	sp, r7
 8001a78:	bd80      	pop	{r7, pc}
 8001a7a:	46c0      	nop			; (mov r8, r8)
 8001a7c:	40021000 	.word	0x40021000
 8001a80:	080044d0 	.word	0x080044d0

08001a84 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8001a84:	b580      	push	{r7, lr}
 8001a86:	b086      	sub	sp, #24
 8001a88:	af00      	add	r7, sp, #0
 8001a8a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8001a8c:	2300      	movs	r3, #0
 8001a8e:	613b      	str	r3, [r7, #16]
  uint32_t temp_reg = 0U;
 8001a90:	2300      	movs	r3, #0
 8001a92:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8001a94:	687b      	ldr	r3, [r7, #4]
 8001a96:	681a      	ldr	r2, [r3, #0]
 8001a98:	2380      	movs	r3, #128	; 0x80
 8001a9a:	025b      	lsls	r3, r3, #9
 8001a9c:	4013      	ands	r3, r2
 8001a9e:	d100      	bne.n	8001aa2 <HAL_RCCEx_PeriphCLKConfig+0x1e>
 8001aa0:	e08e      	b.n	8001bc0 <HAL_RCCEx_PeriphCLKConfig+0x13c>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));
    
    FlagStatus       pwrclkchanged = RESET;
 8001aa2:	2017      	movs	r0, #23
 8001aa4:	183b      	adds	r3, r7, r0
 8001aa6:	2200      	movs	r2, #0
 8001aa8:	701a      	strb	r2, [r3, #0]

    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001aaa:	4b6e      	ldr	r3, [pc, #440]	; (8001c64 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8001aac:	69da      	ldr	r2, [r3, #28]
 8001aae:	2380      	movs	r3, #128	; 0x80
 8001ab0:	055b      	lsls	r3, r3, #21
 8001ab2:	4013      	ands	r3, r2
 8001ab4:	d110      	bne.n	8001ad8 <HAL_RCCEx_PeriphCLKConfig+0x54>
    {
    __HAL_RCC_PWR_CLK_ENABLE();
 8001ab6:	4b6b      	ldr	r3, [pc, #428]	; (8001c64 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8001ab8:	69da      	ldr	r2, [r3, #28]
 8001aba:	4b6a      	ldr	r3, [pc, #424]	; (8001c64 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8001abc:	2180      	movs	r1, #128	; 0x80
 8001abe:	0549      	lsls	r1, r1, #21
 8001ac0:	430a      	orrs	r2, r1
 8001ac2:	61da      	str	r2, [r3, #28]
 8001ac4:	4b67      	ldr	r3, [pc, #412]	; (8001c64 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8001ac6:	69da      	ldr	r2, [r3, #28]
 8001ac8:	2380      	movs	r3, #128	; 0x80
 8001aca:	055b      	lsls	r3, r3, #21
 8001acc:	4013      	ands	r3, r2
 8001ace:	60bb      	str	r3, [r7, #8]
 8001ad0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001ad2:	183b      	adds	r3, r7, r0
 8001ad4:	2201      	movs	r2, #1
 8001ad6:	701a      	strb	r2, [r3, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001ad8:	4b63      	ldr	r3, [pc, #396]	; (8001c68 <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 8001ada:	681a      	ldr	r2, [r3, #0]
 8001adc:	2380      	movs	r3, #128	; 0x80
 8001ade:	005b      	lsls	r3, r3, #1
 8001ae0:	4013      	ands	r3, r2
 8001ae2:	d11a      	bne.n	8001b1a <HAL_RCCEx_PeriphCLKConfig+0x96>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001ae4:	4b60      	ldr	r3, [pc, #384]	; (8001c68 <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 8001ae6:	681a      	ldr	r2, [r3, #0]
 8001ae8:	4b5f      	ldr	r3, [pc, #380]	; (8001c68 <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 8001aea:	2180      	movs	r1, #128	; 0x80
 8001aec:	0049      	lsls	r1, r1, #1
 8001aee:	430a      	orrs	r2, r1
 8001af0:	601a      	str	r2, [r3, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001af2:	f7fe ffd9 	bl	8000aa8 <HAL_GetTick>
 8001af6:	0003      	movs	r3, r0
 8001af8:	613b      	str	r3, [r7, #16]
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001afa:	e008      	b.n	8001b0e <HAL_RCCEx_PeriphCLKConfig+0x8a>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001afc:	f7fe ffd4 	bl	8000aa8 <HAL_GetTick>
 8001b00:	0002      	movs	r2, r0
 8001b02:	693b      	ldr	r3, [r7, #16]
 8001b04:	1ad3      	subs	r3, r2, r3
 8001b06:	2b64      	cmp	r3, #100	; 0x64
 8001b08:	d901      	bls.n	8001b0e <HAL_RCCEx_PeriphCLKConfig+0x8a>
        {
          return HAL_TIMEOUT;
 8001b0a:	2303      	movs	r3, #3
 8001b0c:	e0a6      	b.n	8001c5c <HAL_RCCEx_PeriphCLKConfig+0x1d8>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001b0e:	4b56      	ldr	r3, [pc, #344]	; (8001c68 <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 8001b10:	681a      	ldr	r2, [r3, #0]
 8001b12:	2380      	movs	r3, #128	; 0x80
 8001b14:	005b      	lsls	r3, r3, #1
 8001b16:	4013      	ands	r3, r2
 8001b18:	d0f0      	beq.n	8001afc <HAL_RCCEx_PeriphCLKConfig+0x78>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8001b1a:	4b52      	ldr	r3, [pc, #328]	; (8001c64 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8001b1c:	6a1a      	ldr	r2, [r3, #32]
 8001b1e:	23c0      	movs	r3, #192	; 0xc0
 8001b20:	009b      	lsls	r3, r3, #2
 8001b22:	4013      	ands	r3, r2
 8001b24:	60fb      	str	r3, [r7, #12]
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8001b26:	68fb      	ldr	r3, [r7, #12]
 8001b28:	2b00      	cmp	r3, #0
 8001b2a:	d034      	beq.n	8001b96 <HAL_RCCEx_PeriphCLKConfig+0x112>
 8001b2c:	687b      	ldr	r3, [r7, #4]
 8001b2e:	685a      	ldr	r2, [r3, #4]
 8001b30:	23c0      	movs	r3, #192	; 0xc0
 8001b32:	009b      	lsls	r3, r3, #2
 8001b34:	4013      	ands	r3, r2
 8001b36:	68fa      	ldr	r2, [r7, #12]
 8001b38:	429a      	cmp	r2, r3
 8001b3a:	d02c      	beq.n	8001b96 <HAL_RCCEx_PeriphCLKConfig+0x112>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8001b3c:	4b49      	ldr	r3, [pc, #292]	; (8001c64 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8001b3e:	6a1b      	ldr	r3, [r3, #32]
 8001b40:	4a4a      	ldr	r2, [pc, #296]	; (8001c6c <HAL_RCCEx_PeriphCLKConfig+0x1e8>)
 8001b42:	4013      	ands	r3, r2
 8001b44:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8001b46:	4b47      	ldr	r3, [pc, #284]	; (8001c64 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8001b48:	6a1a      	ldr	r2, [r3, #32]
 8001b4a:	4b46      	ldr	r3, [pc, #280]	; (8001c64 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8001b4c:	2180      	movs	r1, #128	; 0x80
 8001b4e:	0249      	lsls	r1, r1, #9
 8001b50:	430a      	orrs	r2, r1
 8001b52:	621a      	str	r2, [r3, #32]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8001b54:	4b43      	ldr	r3, [pc, #268]	; (8001c64 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8001b56:	6a1a      	ldr	r2, [r3, #32]
 8001b58:	4b42      	ldr	r3, [pc, #264]	; (8001c64 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8001b5a:	4945      	ldr	r1, [pc, #276]	; (8001c70 <HAL_RCCEx_PeriphCLKConfig+0x1ec>)
 8001b5c:	400a      	ands	r2, r1
 8001b5e:	621a      	str	r2, [r3, #32]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8001b60:	4b40      	ldr	r3, [pc, #256]	; (8001c64 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8001b62:	68fa      	ldr	r2, [r7, #12]
 8001b64:	621a      	str	r2, [r3, #32]
      
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8001b66:	68fb      	ldr	r3, [r7, #12]
 8001b68:	2201      	movs	r2, #1
 8001b6a:	4013      	ands	r3, r2
 8001b6c:	d013      	beq.n	8001b96 <HAL_RCCEx_PeriphCLKConfig+0x112>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001b6e:	f7fe ff9b 	bl	8000aa8 <HAL_GetTick>
 8001b72:	0003      	movs	r3, r0
 8001b74:	613b      	str	r3, [r7, #16]
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001b76:	e009      	b.n	8001b8c <HAL_RCCEx_PeriphCLKConfig+0x108>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001b78:	f7fe ff96 	bl	8000aa8 <HAL_GetTick>
 8001b7c:	0002      	movs	r2, r0
 8001b7e:	693b      	ldr	r3, [r7, #16]
 8001b80:	1ad3      	subs	r3, r2, r3
 8001b82:	4a3c      	ldr	r2, [pc, #240]	; (8001c74 <HAL_RCCEx_PeriphCLKConfig+0x1f0>)
 8001b84:	4293      	cmp	r3, r2
 8001b86:	d901      	bls.n	8001b8c <HAL_RCCEx_PeriphCLKConfig+0x108>
          {
            return HAL_TIMEOUT;
 8001b88:	2303      	movs	r3, #3
 8001b8a:	e067      	b.n	8001c5c <HAL_RCCEx_PeriphCLKConfig+0x1d8>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001b8c:	4b35      	ldr	r3, [pc, #212]	; (8001c64 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8001b8e:	6a1b      	ldr	r3, [r3, #32]
 8001b90:	2202      	movs	r2, #2
 8001b92:	4013      	ands	r3, r2
 8001b94:	d0f0      	beq.n	8001b78 <HAL_RCCEx_PeriphCLKConfig+0xf4>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8001b96:	4b33      	ldr	r3, [pc, #204]	; (8001c64 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8001b98:	6a1b      	ldr	r3, [r3, #32]
 8001b9a:	4a34      	ldr	r2, [pc, #208]	; (8001c6c <HAL_RCCEx_PeriphCLKConfig+0x1e8>)
 8001b9c:	4013      	ands	r3, r2
 8001b9e:	0019      	movs	r1, r3
 8001ba0:	687b      	ldr	r3, [r7, #4]
 8001ba2:	685a      	ldr	r2, [r3, #4]
 8001ba4:	4b2f      	ldr	r3, [pc, #188]	; (8001c64 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8001ba6:	430a      	orrs	r2, r1
 8001ba8:	621a      	str	r2, [r3, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8001baa:	2317      	movs	r3, #23
 8001bac:	18fb      	adds	r3, r7, r3
 8001bae:	781b      	ldrb	r3, [r3, #0]
 8001bb0:	2b01      	cmp	r3, #1
 8001bb2:	d105      	bne.n	8001bc0 <HAL_RCCEx_PeriphCLKConfig+0x13c>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001bb4:	4b2b      	ldr	r3, [pc, #172]	; (8001c64 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8001bb6:	69da      	ldr	r2, [r3, #28]
 8001bb8:	4b2a      	ldr	r3, [pc, #168]	; (8001c64 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8001bba:	492f      	ldr	r1, [pc, #188]	; (8001c78 <HAL_RCCEx_PeriphCLKConfig+0x1f4>)
 8001bbc:	400a      	ands	r2, r1
 8001bbe:	61da      	str	r2, [r3, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8001bc0:	687b      	ldr	r3, [r7, #4]
 8001bc2:	681b      	ldr	r3, [r3, #0]
 8001bc4:	2201      	movs	r2, #1
 8001bc6:	4013      	ands	r3, r2
 8001bc8:	d009      	beq.n	8001bde <HAL_RCCEx_PeriphCLKConfig+0x15a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8001bca:	4b26      	ldr	r3, [pc, #152]	; (8001c64 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8001bcc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001bce:	2203      	movs	r2, #3
 8001bd0:	4393      	bics	r3, r2
 8001bd2:	0019      	movs	r1, r3
 8001bd4:	687b      	ldr	r3, [r7, #4]
 8001bd6:	689a      	ldr	r2, [r3, #8]
 8001bd8:	4b22      	ldr	r3, [pc, #136]	; (8001c64 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8001bda:	430a      	orrs	r2, r1
 8001bdc:	631a      	str	r2, [r3, #48]	; 0x30
  }
  
#if defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx)\
 || defined(STM32F091xC) || defined(STM32F098xx)
  /*----------------------------- USART2 Configuration --------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8001bde:	687b      	ldr	r3, [r7, #4]
 8001be0:	681b      	ldr	r3, [r3, #0]
 8001be2:	2202      	movs	r2, #2
 8001be4:	4013      	ands	r3, r2
 8001be6:	d009      	beq.n	8001bfc <HAL_RCCEx_PeriphCLKConfig+0x178>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));
    
    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8001be8:	4b1e      	ldr	r3, [pc, #120]	; (8001c64 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8001bea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001bec:	4a23      	ldr	r2, [pc, #140]	; (8001c7c <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8001bee:	4013      	ands	r3, r2
 8001bf0:	0019      	movs	r1, r3
 8001bf2:	687b      	ldr	r3, [r7, #4]
 8001bf4:	68da      	ldr	r2, [r3, #12]
 8001bf6:	4b1b      	ldr	r3, [pc, #108]	; (8001c64 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8001bf8:	430a      	orrs	r2, r1
 8001bfa:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
  }
#endif /* STM32F091xC || STM32F098xx */  

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8001bfc:	687b      	ldr	r3, [r7, #4]
 8001bfe:	681b      	ldr	r3, [r3, #0]
 8001c00:	2220      	movs	r2, #32
 8001c02:	4013      	ands	r3, r2
 8001c04:	d009      	beq.n	8001c1a <HAL_RCCEx_PeriphCLKConfig+0x196>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8001c06:	4b17      	ldr	r3, [pc, #92]	; (8001c64 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8001c08:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c0a:	2210      	movs	r2, #16
 8001c0c:	4393      	bics	r3, r2
 8001c0e:	0019      	movs	r1, r3
 8001c10:	687b      	ldr	r3, [r7, #4]
 8001c12:	691a      	ldr	r2, [r3, #16]
 8001c14:	4b13      	ldr	r3, [pc, #76]	; (8001c64 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8001c16:	430a      	orrs	r2, r1
 8001c18:	631a      	str	r2, [r3, #48]	; 0x30
  }

#if defined(STM32F042x6) || defined(STM32F048xx) || defined(STM32F072xB) || defined(STM32F078xx) || defined(STM32F070xB) || defined(STM32F070x6)
  /*------------------------------ USB Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8001c1a:	687b      	ldr	r3, [r7, #4]
 8001c1c:	681a      	ldr	r2, [r3, #0]
 8001c1e:	2380      	movs	r3, #128	; 0x80
 8001c20:	029b      	lsls	r3, r3, #10
 8001c22:	4013      	ands	r3, r2
 8001c24:	d009      	beq.n	8001c3a <HAL_RCCEx_PeriphCLKConfig+0x1b6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    
    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8001c26:	4b0f      	ldr	r3, [pc, #60]	; (8001c64 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8001c28:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c2a:	2280      	movs	r2, #128	; 0x80
 8001c2c:	4393      	bics	r3, r2
 8001c2e:	0019      	movs	r1, r3
 8001c30:	687b      	ldr	r3, [r7, #4]
 8001c32:	699a      	ldr	r2, [r3, #24]
 8001c34:	4b0b      	ldr	r3, [pc, #44]	; (8001c64 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8001c36:	430a      	orrs	r2, r1
 8001c38:	631a      	str	r2, [r3, #48]	; 0x30
#if defined(STM32F042x6) || defined(STM32F048xx)\
 || defined(STM32F051x8) || defined(STM32F058xx)\
 || defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx)\
 || defined(STM32F091xC) || defined(STM32F098xx)
  /*------------------------------ CEC clock Configuration -------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8001c3a:	687b      	ldr	r3, [r7, #4]
 8001c3c:	681a      	ldr	r2, [r3, #0]
 8001c3e:	2380      	movs	r3, #128	; 0x80
 8001c40:	00db      	lsls	r3, r3, #3
 8001c42:	4013      	ands	r3, r2
 8001c44:	d009      	beq.n	8001c5a <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8001c46:	4b07      	ldr	r3, [pc, #28]	; (8001c64 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8001c48:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c4a:	2240      	movs	r2, #64	; 0x40
 8001c4c:	4393      	bics	r3, r2
 8001c4e:	0019      	movs	r1, r3
 8001c50:	687b      	ldr	r3, [r7, #4]
 8001c52:	695a      	ldr	r2, [r3, #20]
 8001c54:	4b03      	ldr	r3, [pc, #12]	; (8001c64 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8001c56:	430a      	orrs	r2, r1
 8001c58:	631a      	str	r2, [r3, #48]	; 0x30
#endif /* STM32F042x6 || STM32F048xx ||                */
       /* STM32F051x8 || STM32F058xx ||                */
       /* STM32F071xB || STM32F072xB || STM32F078xx || */
       /* STM32F091xC || STM32F098xx */
  
  return HAL_OK;
 8001c5a:	2300      	movs	r3, #0
}
 8001c5c:	0018      	movs	r0, r3
 8001c5e:	46bd      	mov	sp, r7
 8001c60:	b006      	add	sp, #24
 8001c62:	bd80      	pop	{r7, pc}
 8001c64:	40021000 	.word	0x40021000
 8001c68:	40007000 	.word	0x40007000
 8001c6c:	fffffcff 	.word	0xfffffcff
 8001c70:	fffeffff 	.word	0xfffeffff
 8001c74:	00001388 	.word	0x00001388
 8001c78:	efffffff 	.word	0xefffffff
 8001c7c:	fffcffff 	.word	0xfffcffff

08001c80 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8001c80:	b580      	push	{r7, lr}
 8001c82:	b082      	sub	sp, #8
 8001c84:	af00      	add	r7, sp, #0
 8001c86:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001c88:	687b      	ldr	r3, [r7, #4]
 8001c8a:	2b00      	cmp	r3, #0
 8001c8c:	d101      	bne.n	8001c92 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8001c8e:	2301      	movs	r3, #1
 8001c90:	e042      	b.n	8001d18 <HAL_TIM_Base_Init+0x98>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001c92:	687b      	ldr	r3, [r7, #4]
 8001c94:	223d      	movs	r2, #61	; 0x3d
 8001c96:	5c9b      	ldrb	r3, [r3, r2]
 8001c98:	b2db      	uxtb	r3, r3
 8001c9a:	2b00      	cmp	r3, #0
 8001c9c:	d107      	bne.n	8001cae <HAL_TIM_Base_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001c9e:	687b      	ldr	r3, [r7, #4]
 8001ca0:	223c      	movs	r2, #60	; 0x3c
 8001ca2:	2100      	movs	r1, #0
 8001ca4:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8001ca6:	687b      	ldr	r3, [r7, #4]
 8001ca8:	0018      	movs	r0, r3
 8001caa:	f7fe fd75 	bl	8000798 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001cae:	687b      	ldr	r3, [r7, #4]
 8001cb0:	223d      	movs	r2, #61	; 0x3d
 8001cb2:	2102      	movs	r1, #2
 8001cb4:	5499      	strb	r1, [r3, r2]

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001cb6:	687b      	ldr	r3, [r7, #4]
 8001cb8:	681a      	ldr	r2, [r3, #0]
 8001cba:	687b      	ldr	r3, [r7, #4]
 8001cbc:	3304      	adds	r3, #4
 8001cbe:	0019      	movs	r1, r3
 8001cc0:	0010      	movs	r0, r2
 8001cc2:	f000 fc5d 	bl	8002580 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8001cc6:	687b      	ldr	r3, [r7, #4]
 8001cc8:	2246      	movs	r2, #70	; 0x46
 8001cca:	2101      	movs	r1, #1
 8001ccc:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001cce:	687b      	ldr	r3, [r7, #4]
 8001cd0:	223e      	movs	r2, #62	; 0x3e
 8001cd2:	2101      	movs	r1, #1
 8001cd4:	5499      	strb	r1, [r3, r2]
 8001cd6:	687b      	ldr	r3, [r7, #4]
 8001cd8:	223f      	movs	r2, #63	; 0x3f
 8001cda:	2101      	movs	r1, #1
 8001cdc:	5499      	strb	r1, [r3, r2]
 8001cde:	687b      	ldr	r3, [r7, #4]
 8001ce0:	2240      	movs	r2, #64	; 0x40
 8001ce2:	2101      	movs	r1, #1
 8001ce4:	5499      	strb	r1, [r3, r2]
 8001ce6:	687b      	ldr	r3, [r7, #4]
 8001ce8:	2241      	movs	r2, #65	; 0x41
 8001cea:	2101      	movs	r1, #1
 8001cec:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001cee:	687b      	ldr	r3, [r7, #4]
 8001cf0:	2242      	movs	r2, #66	; 0x42
 8001cf2:	2101      	movs	r1, #1
 8001cf4:	5499      	strb	r1, [r3, r2]
 8001cf6:	687b      	ldr	r3, [r7, #4]
 8001cf8:	2243      	movs	r2, #67	; 0x43
 8001cfa:	2101      	movs	r1, #1
 8001cfc:	5499      	strb	r1, [r3, r2]
 8001cfe:	687b      	ldr	r3, [r7, #4]
 8001d00:	2244      	movs	r2, #68	; 0x44
 8001d02:	2101      	movs	r1, #1
 8001d04:	5499      	strb	r1, [r3, r2]
 8001d06:	687b      	ldr	r3, [r7, #4]
 8001d08:	2245      	movs	r2, #69	; 0x45
 8001d0a:	2101      	movs	r1, #1
 8001d0c:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001d0e:	687b      	ldr	r3, [r7, #4]
 8001d10:	223d      	movs	r2, #61	; 0x3d
 8001d12:	2101      	movs	r1, #1
 8001d14:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8001d16:	2300      	movs	r3, #0
}
 8001d18:	0018      	movs	r0, r3
 8001d1a:	46bd      	mov	sp, r7
 8001d1c:	b002      	add	sp, #8
 8001d1e:	bd80      	pop	{r7, pc}

08001d20 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8001d20:	b580      	push	{r7, lr}
 8001d22:	b082      	sub	sp, #8
 8001d24:	af00      	add	r7, sp, #0
 8001d26:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001d28:	687b      	ldr	r3, [r7, #4]
 8001d2a:	2b00      	cmp	r3, #0
 8001d2c:	d101      	bne.n	8001d32 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8001d2e:	2301      	movs	r3, #1
 8001d30:	e042      	b.n	8001db8 <HAL_TIM_PWM_Init+0x98>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001d32:	687b      	ldr	r3, [r7, #4]
 8001d34:	223d      	movs	r2, #61	; 0x3d
 8001d36:	5c9b      	ldrb	r3, [r3, r2]
 8001d38:	b2db      	uxtb	r3, r3
 8001d3a:	2b00      	cmp	r3, #0
 8001d3c:	d107      	bne.n	8001d4e <HAL_TIM_PWM_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001d3e:	687b      	ldr	r3, [r7, #4]
 8001d40:	223c      	movs	r2, #60	; 0x3c
 8001d42:	2100      	movs	r1, #0
 8001d44:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8001d46:	687b      	ldr	r3, [r7, #4]
 8001d48:	0018      	movs	r0, r3
 8001d4a:	f000 f839 	bl	8001dc0 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001d4e:	687b      	ldr	r3, [r7, #4]
 8001d50:	223d      	movs	r2, #61	; 0x3d
 8001d52:	2102      	movs	r1, #2
 8001d54:	5499      	strb	r1, [r3, r2]

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001d56:	687b      	ldr	r3, [r7, #4]
 8001d58:	681a      	ldr	r2, [r3, #0]
 8001d5a:	687b      	ldr	r3, [r7, #4]
 8001d5c:	3304      	adds	r3, #4
 8001d5e:	0019      	movs	r1, r3
 8001d60:	0010      	movs	r0, r2
 8001d62:	f000 fc0d 	bl	8002580 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8001d66:	687b      	ldr	r3, [r7, #4]
 8001d68:	2246      	movs	r2, #70	; 0x46
 8001d6a:	2101      	movs	r1, #1
 8001d6c:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001d6e:	687b      	ldr	r3, [r7, #4]
 8001d70:	223e      	movs	r2, #62	; 0x3e
 8001d72:	2101      	movs	r1, #1
 8001d74:	5499      	strb	r1, [r3, r2]
 8001d76:	687b      	ldr	r3, [r7, #4]
 8001d78:	223f      	movs	r2, #63	; 0x3f
 8001d7a:	2101      	movs	r1, #1
 8001d7c:	5499      	strb	r1, [r3, r2]
 8001d7e:	687b      	ldr	r3, [r7, #4]
 8001d80:	2240      	movs	r2, #64	; 0x40
 8001d82:	2101      	movs	r1, #1
 8001d84:	5499      	strb	r1, [r3, r2]
 8001d86:	687b      	ldr	r3, [r7, #4]
 8001d88:	2241      	movs	r2, #65	; 0x41
 8001d8a:	2101      	movs	r1, #1
 8001d8c:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001d8e:	687b      	ldr	r3, [r7, #4]
 8001d90:	2242      	movs	r2, #66	; 0x42
 8001d92:	2101      	movs	r1, #1
 8001d94:	5499      	strb	r1, [r3, r2]
 8001d96:	687b      	ldr	r3, [r7, #4]
 8001d98:	2243      	movs	r2, #67	; 0x43
 8001d9a:	2101      	movs	r1, #1
 8001d9c:	5499      	strb	r1, [r3, r2]
 8001d9e:	687b      	ldr	r3, [r7, #4]
 8001da0:	2244      	movs	r2, #68	; 0x44
 8001da2:	2101      	movs	r1, #1
 8001da4:	5499      	strb	r1, [r3, r2]
 8001da6:	687b      	ldr	r3, [r7, #4]
 8001da8:	2245      	movs	r2, #69	; 0x45
 8001daa:	2101      	movs	r1, #1
 8001dac:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001dae:	687b      	ldr	r3, [r7, #4]
 8001db0:	223d      	movs	r2, #61	; 0x3d
 8001db2:	2101      	movs	r1, #1
 8001db4:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8001db6:	2300      	movs	r3, #0
}
 8001db8:	0018      	movs	r0, r3
 8001dba:	46bd      	mov	sp, r7
 8001dbc:	b002      	add	sp, #8
 8001dbe:	bd80      	pop	{r7, pc}

08001dc0 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8001dc0:	b580      	push	{r7, lr}
 8001dc2:	b082      	sub	sp, #8
 8001dc4:	af00      	add	r7, sp, #0
 8001dc6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8001dc8:	46c0      	nop			; (mov r8, r8)
 8001dca:	46bd      	mov	sp, r7
 8001dcc:	b002      	add	sp, #8
 8001dce:	bd80      	pop	{r7, pc}

08001dd0 <HAL_TIM_PWM_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8001dd0:	b580      	push	{r7, lr}
 8001dd2:	b084      	sub	sp, #16
 8001dd4:	af00      	add	r7, sp, #0
 8001dd6:	6078      	str	r0, [r7, #4]
 8001dd8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8001dda:	230f      	movs	r3, #15
 8001ddc:	18fb      	adds	r3, r7, r3
 8001dde:	2200      	movs	r2, #0
 8001de0:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8001de2:	683b      	ldr	r3, [r7, #0]
 8001de4:	2b00      	cmp	r3, #0
 8001de6:	d108      	bne.n	8001dfa <HAL_TIM_PWM_Start_IT+0x2a>
 8001de8:	687b      	ldr	r3, [r7, #4]
 8001dea:	223e      	movs	r2, #62	; 0x3e
 8001dec:	5c9b      	ldrb	r3, [r3, r2]
 8001dee:	b2db      	uxtb	r3, r3
 8001df0:	3b01      	subs	r3, #1
 8001df2:	1e5a      	subs	r2, r3, #1
 8001df4:	4193      	sbcs	r3, r2
 8001df6:	b2db      	uxtb	r3, r3
 8001df8:	e01f      	b.n	8001e3a <HAL_TIM_PWM_Start_IT+0x6a>
 8001dfa:	683b      	ldr	r3, [r7, #0]
 8001dfc:	2b04      	cmp	r3, #4
 8001dfe:	d108      	bne.n	8001e12 <HAL_TIM_PWM_Start_IT+0x42>
 8001e00:	687b      	ldr	r3, [r7, #4]
 8001e02:	223f      	movs	r2, #63	; 0x3f
 8001e04:	5c9b      	ldrb	r3, [r3, r2]
 8001e06:	b2db      	uxtb	r3, r3
 8001e08:	3b01      	subs	r3, #1
 8001e0a:	1e5a      	subs	r2, r3, #1
 8001e0c:	4193      	sbcs	r3, r2
 8001e0e:	b2db      	uxtb	r3, r3
 8001e10:	e013      	b.n	8001e3a <HAL_TIM_PWM_Start_IT+0x6a>
 8001e12:	683b      	ldr	r3, [r7, #0]
 8001e14:	2b08      	cmp	r3, #8
 8001e16:	d108      	bne.n	8001e2a <HAL_TIM_PWM_Start_IT+0x5a>
 8001e18:	687b      	ldr	r3, [r7, #4]
 8001e1a:	2240      	movs	r2, #64	; 0x40
 8001e1c:	5c9b      	ldrb	r3, [r3, r2]
 8001e1e:	b2db      	uxtb	r3, r3
 8001e20:	3b01      	subs	r3, #1
 8001e22:	1e5a      	subs	r2, r3, #1
 8001e24:	4193      	sbcs	r3, r2
 8001e26:	b2db      	uxtb	r3, r3
 8001e28:	e007      	b.n	8001e3a <HAL_TIM_PWM_Start_IT+0x6a>
 8001e2a:	687b      	ldr	r3, [r7, #4]
 8001e2c:	2241      	movs	r2, #65	; 0x41
 8001e2e:	5c9b      	ldrb	r3, [r3, r2]
 8001e30:	b2db      	uxtb	r3, r3
 8001e32:	3b01      	subs	r3, #1
 8001e34:	1e5a      	subs	r2, r3, #1
 8001e36:	4193      	sbcs	r3, r2
 8001e38:	b2db      	uxtb	r3, r3
 8001e3a:	2b00      	cmp	r3, #0
 8001e3c:	d001      	beq.n	8001e42 <HAL_TIM_PWM_Start_IT+0x72>
  {
    return HAL_ERROR;
 8001e3e:	2301      	movs	r3, #1
 8001e40:	e0b7      	b.n	8001fb2 <HAL_TIM_PWM_Start_IT+0x1e2>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8001e42:	683b      	ldr	r3, [r7, #0]
 8001e44:	2b00      	cmp	r3, #0
 8001e46:	d104      	bne.n	8001e52 <HAL_TIM_PWM_Start_IT+0x82>
 8001e48:	687b      	ldr	r3, [r7, #4]
 8001e4a:	223e      	movs	r2, #62	; 0x3e
 8001e4c:	2102      	movs	r1, #2
 8001e4e:	5499      	strb	r1, [r3, r2]
 8001e50:	e013      	b.n	8001e7a <HAL_TIM_PWM_Start_IT+0xaa>
 8001e52:	683b      	ldr	r3, [r7, #0]
 8001e54:	2b04      	cmp	r3, #4
 8001e56:	d104      	bne.n	8001e62 <HAL_TIM_PWM_Start_IT+0x92>
 8001e58:	687b      	ldr	r3, [r7, #4]
 8001e5a:	223f      	movs	r2, #63	; 0x3f
 8001e5c:	2102      	movs	r1, #2
 8001e5e:	5499      	strb	r1, [r3, r2]
 8001e60:	e00b      	b.n	8001e7a <HAL_TIM_PWM_Start_IT+0xaa>
 8001e62:	683b      	ldr	r3, [r7, #0]
 8001e64:	2b08      	cmp	r3, #8
 8001e66:	d104      	bne.n	8001e72 <HAL_TIM_PWM_Start_IT+0xa2>
 8001e68:	687b      	ldr	r3, [r7, #4]
 8001e6a:	2240      	movs	r2, #64	; 0x40
 8001e6c:	2102      	movs	r1, #2
 8001e6e:	5499      	strb	r1, [r3, r2]
 8001e70:	e003      	b.n	8001e7a <HAL_TIM_PWM_Start_IT+0xaa>
 8001e72:	687b      	ldr	r3, [r7, #4]
 8001e74:	2241      	movs	r2, #65	; 0x41
 8001e76:	2102      	movs	r1, #2
 8001e78:	5499      	strb	r1, [r3, r2]

  switch (Channel)
 8001e7a:	683b      	ldr	r3, [r7, #0]
 8001e7c:	2b0c      	cmp	r3, #12
 8001e7e:	d02a      	beq.n	8001ed6 <HAL_TIM_PWM_Start_IT+0x106>
 8001e80:	683b      	ldr	r3, [r7, #0]
 8001e82:	2b0c      	cmp	r3, #12
 8001e84:	d830      	bhi.n	8001ee8 <HAL_TIM_PWM_Start_IT+0x118>
 8001e86:	683b      	ldr	r3, [r7, #0]
 8001e88:	2b08      	cmp	r3, #8
 8001e8a:	d01b      	beq.n	8001ec4 <HAL_TIM_PWM_Start_IT+0xf4>
 8001e8c:	683b      	ldr	r3, [r7, #0]
 8001e8e:	2b08      	cmp	r3, #8
 8001e90:	d82a      	bhi.n	8001ee8 <HAL_TIM_PWM_Start_IT+0x118>
 8001e92:	683b      	ldr	r3, [r7, #0]
 8001e94:	2b00      	cmp	r3, #0
 8001e96:	d003      	beq.n	8001ea0 <HAL_TIM_PWM_Start_IT+0xd0>
 8001e98:	683b      	ldr	r3, [r7, #0]
 8001e9a:	2b04      	cmp	r3, #4
 8001e9c:	d009      	beq.n	8001eb2 <HAL_TIM_PWM_Start_IT+0xe2>
 8001e9e:	e023      	b.n	8001ee8 <HAL_TIM_PWM_Start_IT+0x118>
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8001ea0:	687b      	ldr	r3, [r7, #4]
 8001ea2:	681b      	ldr	r3, [r3, #0]
 8001ea4:	68da      	ldr	r2, [r3, #12]
 8001ea6:	687b      	ldr	r3, [r7, #4]
 8001ea8:	681b      	ldr	r3, [r3, #0]
 8001eaa:	2102      	movs	r1, #2
 8001eac:	430a      	orrs	r2, r1
 8001eae:	60da      	str	r2, [r3, #12]
      break;
 8001eb0:	e01f      	b.n	8001ef2 <HAL_TIM_PWM_Start_IT+0x122>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 8001eb2:	687b      	ldr	r3, [r7, #4]
 8001eb4:	681b      	ldr	r3, [r3, #0]
 8001eb6:	68da      	ldr	r2, [r3, #12]
 8001eb8:	687b      	ldr	r3, [r7, #4]
 8001eba:	681b      	ldr	r3, [r3, #0]
 8001ebc:	2104      	movs	r1, #4
 8001ebe:	430a      	orrs	r2, r1
 8001ec0:	60da      	str	r2, [r3, #12]
      break;
 8001ec2:	e016      	b.n	8001ef2 <HAL_TIM_PWM_Start_IT+0x122>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 8001ec4:	687b      	ldr	r3, [r7, #4]
 8001ec6:	681b      	ldr	r3, [r3, #0]
 8001ec8:	68da      	ldr	r2, [r3, #12]
 8001eca:	687b      	ldr	r3, [r7, #4]
 8001ecc:	681b      	ldr	r3, [r3, #0]
 8001ece:	2108      	movs	r1, #8
 8001ed0:	430a      	orrs	r2, r1
 8001ed2:	60da      	str	r2, [r3, #12]
      break;
 8001ed4:	e00d      	b.n	8001ef2 <HAL_TIM_PWM_Start_IT+0x122>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 8001ed6:	687b      	ldr	r3, [r7, #4]
 8001ed8:	681b      	ldr	r3, [r3, #0]
 8001eda:	68da      	ldr	r2, [r3, #12]
 8001edc:	687b      	ldr	r3, [r7, #4]
 8001ede:	681b      	ldr	r3, [r3, #0]
 8001ee0:	2110      	movs	r1, #16
 8001ee2:	430a      	orrs	r2, r1
 8001ee4:	60da      	str	r2, [r3, #12]
      break;
 8001ee6:	e004      	b.n	8001ef2 <HAL_TIM_PWM_Start_IT+0x122>
    }

    default:
      status = HAL_ERROR;
 8001ee8:	230f      	movs	r3, #15
 8001eea:	18fb      	adds	r3, r7, r3
 8001eec:	2201      	movs	r2, #1
 8001eee:	701a      	strb	r2, [r3, #0]
      break;
 8001ef0:	46c0      	nop			; (mov r8, r8)
  }

  if (status == HAL_OK)
 8001ef2:	230f      	movs	r3, #15
 8001ef4:	18fb      	adds	r3, r7, r3
 8001ef6:	781b      	ldrb	r3, [r3, #0]
 8001ef8:	2b00      	cmp	r3, #0
 8001efa:	d157      	bne.n	8001fac <HAL_TIM_PWM_Start_IT+0x1dc>
  {
    /* Enable the Capture compare channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8001efc:	687b      	ldr	r3, [r7, #4]
 8001efe:	681b      	ldr	r3, [r3, #0]
 8001f00:	6839      	ldr	r1, [r7, #0]
 8001f02:	2201      	movs	r2, #1
 8001f04:	0018      	movs	r0, r3
 8001f06:	f000 fe51 	bl	8002bac <TIM_CCxChannelCmd>

    if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8001f0a:	687b      	ldr	r3, [r7, #4]
 8001f0c:	681b      	ldr	r3, [r3, #0]
 8001f0e:	4a2b      	ldr	r2, [pc, #172]	; (8001fbc <HAL_TIM_PWM_Start_IT+0x1ec>)
 8001f10:	4293      	cmp	r3, r2
 8001f12:	d00e      	beq.n	8001f32 <HAL_TIM_PWM_Start_IT+0x162>
 8001f14:	687b      	ldr	r3, [r7, #4]
 8001f16:	681b      	ldr	r3, [r3, #0]
 8001f18:	4a29      	ldr	r2, [pc, #164]	; (8001fc0 <HAL_TIM_PWM_Start_IT+0x1f0>)
 8001f1a:	4293      	cmp	r3, r2
 8001f1c:	d009      	beq.n	8001f32 <HAL_TIM_PWM_Start_IT+0x162>
 8001f1e:	687b      	ldr	r3, [r7, #4]
 8001f20:	681b      	ldr	r3, [r3, #0]
 8001f22:	4a28      	ldr	r2, [pc, #160]	; (8001fc4 <HAL_TIM_PWM_Start_IT+0x1f4>)
 8001f24:	4293      	cmp	r3, r2
 8001f26:	d004      	beq.n	8001f32 <HAL_TIM_PWM_Start_IT+0x162>
 8001f28:	687b      	ldr	r3, [r7, #4]
 8001f2a:	681b      	ldr	r3, [r3, #0]
 8001f2c:	4a26      	ldr	r2, [pc, #152]	; (8001fc8 <HAL_TIM_PWM_Start_IT+0x1f8>)
 8001f2e:	4293      	cmp	r3, r2
 8001f30:	d101      	bne.n	8001f36 <HAL_TIM_PWM_Start_IT+0x166>
 8001f32:	2301      	movs	r3, #1
 8001f34:	e000      	b.n	8001f38 <HAL_TIM_PWM_Start_IT+0x168>
 8001f36:	2300      	movs	r3, #0
 8001f38:	2b00      	cmp	r3, #0
 8001f3a:	d008      	beq.n	8001f4e <HAL_TIM_PWM_Start_IT+0x17e>
    {
      /* Enable the main output */
      __HAL_TIM_MOE_ENABLE(htim);
 8001f3c:	687b      	ldr	r3, [r7, #4]
 8001f3e:	681b      	ldr	r3, [r3, #0]
 8001f40:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8001f42:	687b      	ldr	r3, [r7, #4]
 8001f44:	681b      	ldr	r3, [r3, #0]
 8001f46:	2180      	movs	r1, #128	; 0x80
 8001f48:	0209      	lsls	r1, r1, #8
 8001f4a:	430a      	orrs	r2, r1
 8001f4c:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8001f4e:	687b      	ldr	r3, [r7, #4]
 8001f50:	681b      	ldr	r3, [r3, #0]
 8001f52:	4a1a      	ldr	r2, [pc, #104]	; (8001fbc <HAL_TIM_PWM_Start_IT+0x1ec>)
 8001f54:	4293      	cmp	r3, r2
 8001f56:	d00f      	beq.n	8001f78 <HAL_TIM_PWM_Start_IT+0x1a8>
 8001f58:	687b      	ldr	r3, [r7, #4]
 8001f5a:	681a      	ldr	r2, [r3, #0]
 8001f5c:	2380      	movs	r3, #128	; 0x80
 8001f5e:	05db      	lsls	r3, r3, #23
 8001f60:	429a      	cmp	r2, r3
 8001f62:	d009      	beq.n	8001f78 <HAL_TIM_PWM_Start_IT+0x1a8>
 8001f64:	687b      	ldr	r3, [r7, #4]
 8001f66:	681b      	ldr	r3, [r3, #0]
 8001f68:	4a18      	ldr	r2, [pc, #96]	; (8001fcc <HAL_TIM_PWM_Start_IT+0x1fc>)
 8001f6a:	4293      	cmp	r3, r2
 8001f6c:	d004      	beq.n	8001f78 <HAL_TIM_PWM_Start_IT+0x1a8>
 8001f6e:	687b      	ldr	r3, [r7, #4]
 8001f70:	681b      	ldr	r3, [r3, #0]
 8001f72:	4a13      	ldr	r2, [pc, #76]	; (8001fc0 <HAL_TIM_PWM_Start_IT+0x1f0>)
 8001f74:	4293      	cmp	r3, r2
 8001f76:	d111      	bne.n	8001f9c <HAL_TIM_PWM_Start_IT+0x1cc>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8001f78:	687b      	ldr	r3, [r7, #4]
 8001f7a:	681b      	ldr	r3, [r3, #0]
 8001f7c:	689b      	ldr	r3, [r3, #8]
 8001f7e:	2207      	movs	r2, #7
 8001f80:	4013      	ands	r3, r2
 8001f82:	60bb      	str	r3, [r7, #8]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001f84:	68bb      	ldr	r3, [r7, #8]
 8001f86:	2b06      	cmp	r3, #6
 8001f88:	d010      	beq.n	8001fac <HAL_TIM_PWM_Start_IT+0x1dc>
      {
        __HAL_TIM_ENABLE(htim);
 8001f8a:	687b      	ldr	r3, [r7, #4]
 8001f8c:	681b      	ldr	r3, [r3, #0]
 8001f8e:	681a      	ldr	r2, [r3, #0]
 8001f90:	687b      	ldr	r3, [r7, #4]
 8001f92:	681b      	ldr	r3, [r3, #0]
 8001f94:	2101      	movs	r1, #1
 8001f96:	430a      	orrs	r2, r1
 8001f98:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001f9a:	e007      	b.n	8001fac <HAL_TIM_PWM_Start_IT+0x1dc>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 8001f9c:	687b      	ldr	r3, [r7, #4]
 8001f9e:	681b      	ldr	r3, [r3, #0]
 8001fa0:	681a      	ldr	r2, [r3, #0]
 8001fa2:	687b      	ldr	r3, [r7, #4]
 8001fa4:	681b      	ldr	r3, [r3, #0]
 8001fa6:	2101      	movs	r1, #1
 8001fa8:	430a      	orrs	r2, r1
 8001faa:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return status;
 8001fac:	230f      	movs	r3, #15
 8001fae:	18fb      	adds	r3, r7, r3
 8001fb0:	781b      	ldrb	r3, [r3, #0]
}
 8001fb2:	0018      	movs	r0, r3
 8001fb4:	46bd      	mov	sp, r7
 8001fb6:	b004      	add	sp, #16
 8001fb8:	bd80      	pop	{r7, pc}
 8001fba:	46c0      	nop			; (mov r8, r8)
 8001fbc:	40012c00 	.word	0x40012c00
 8001fc0:	40014000 	.word	0x40014000
 8001fc4:	40014400 	.word	0x40014400
 8001fc8:	40014800 	.word	0x40014800
 8001fcc:	40000400 	.word	0x40000400

08001fd0 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8001fd0:	b580      	push	{r7, lr}
 8001fd2:	b082      	sub	sp, #8
 8001fd4:	af00      	add	r7, sp, #0
 8001fd6:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8001fd8:	687b      	ldr	r3, [r7, #4]
 8001fda:	681b      	ldr	r3, [r3, #0]
 8001fdc:	691b      	ldr	r3, [r3, #16]
 8001fde:	2202      	movs	r2, #2
 8001fe0:	4013      	ands	r3, r2
 8001fe2:	2b02      	cmp	r3, #2
 8001fe4:	d124      	bne.n	8002030 <HAL_TIM_IRQHandler+0x60>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8001fe6:	687b      	ldr	r3, [r7, #4]
 8001fe8:	681b      	ldr	r3, [r3, #0]
 8001fea:	68db      	ldr	r3, [r3, #12]
 8001fec:	2202      	movs	r2, #2
 8001fee:	4013      	ands	r3, r2
 8001ff0:	2b02      	cmp	r3, #2
 8001ff2:	d11d      	bne.n	8002030 <HAL_TIM_IRQHandler+0x60>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8001ff4:	687b      	ldr	r3, [r7, #4]
 8001ff6:	681b      	ldr	r3, [r3, #0]
 8001ff8:	2203      	movs	r2, #3
 8001ffa:	4252      	negs	r2, r2
 8001ffc:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8001ffe:	687b      	ldr	r3, [r7, #4]
 8002000:	2201      	movs	r2, #1
 8002002:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002004:	687b      	ldr	r3, [r7, #4]
 8002006:	681b      	ldr	r3, [r3, #0]
 8002008:	699b      	ldr	r3, [r3, #24]
 800200a:	2203      	movs	r2, #3
 800200c:	4013      	ands	r3, r2
 800200e:	d004      	beq.n	800201a <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8002010:	687b      	ldr	r3, [r7, #4]
 8002012:	0018      	movs	r0, r3
 8002014:	f000 fa9c 	bl	8002550 <HAL_TIM_IC_CaptureCallback>
 8002018:	e007      	b.n	800202a <HAL_TIM_IRQHandler+0x5a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800201a:	687b      	ldr	r3, [r7, #4]
 800201c:	0018      	movs	r0, r3
 800201e:	f000 fa8f 	bl	8002540 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002022:	687b      	ldr	r3, [r7, #4]
 8002024:	0018      	movs	r0, r3
 8002026:	f000 fa9b 	bl	8002560 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800202a:	687b      	ldr	r3, [r7, #4]
 800202c:	2200      	movs	r2, #0
 800202e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8002030:	687b      	ldr	r3, [r7, #4]
 8002032:	681b      	ldr	r3, [r3, #0]
 8002034:	691b      	ldr	r3, [r3, #16]
 8002036:	2204      	movs	r2, #4
 8002038:	4013      	ands	r3, r2
 800203a:	2b04      	cmp	r3, #4
 800203c:	d125      	bne.n	800208a <HAL_TIM_IRQHandler+0xba>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800203e:	687b      	ldr	r3, [r7, #4]
 8002040:	681b      	ldr	r3, [r3, #0]
 8002042:	68db      	ldr	r3, [r3, #12]
 8002044:	2204      	movs	r2, #4
 8002046:	4013      	ands	r3, r2
 8002048:	2b04      	cmp	r3, #4
 800204a:	d11e      	bne.n	800208a <HAL_TIM_IRQHandler+0xba>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800204c:	687b      	ldr	r3, [r7, #4]
 800204e:	681b      	ldr	r3, [r3, #0]
 8002050:	2205      	movs	r2, #5
 8002052:	4252      	negs	r2, r2
 8002054:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002056:	687b      	ldr	r3, [r7, #4]
 8002058:	2202      	movs	r2, #2
 800205a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800205c:	687b      	ldr	r3, [r7, #4]
 800205e:	681b      	ldr	r3, [r3, #0]
 8002060:	699a      	ldr	r2, [r3, #24]
 8002062:	23c0      	movs	r3, #192	; 0xc0
 8002064:	009b      	lsls	r3, r3, #2
 8002066:	4013      	ands	r3, r2
 8002068:	d004      	beq.n	8002074 <HAL_TIM_IRQHandler+0xa4>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800206a:	687b      	ldr	r3, [r7, #4]
 800206c:	0018      	movs	r0, r3
 800206e:	f000 fa6f 	bl	8002550 <HAL_TIM_IC_CaptureCallback>
 8002072:	e007      	b.n	8002084 <HAL_TIM_IRQHandler+0xb4>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002074:	687b      	ldr	r3, [r7, #4]
 8002076:	0018      	movs	r0, r3
 8002078:	f000 fa62 	bl	8002540 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800207c:	687b      	ldr	r3, [r7, #4]
 800207e:	0018      	movs	r0, r3
 8002080:	f000 fa6e 	bl	8002560 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002084:	687b      	ldr	r3, [r7, #4]
 8002086:	2200      	movs	r2, #0
 8002088:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800208a:	687b      	ldr	r3, [r7, #4]
 800208c:	681b      	ldr	r3, [r3, #0]
 800208e:	691b      	ldr	r3, [r3, #16]
 8002090:	2208      	movs	r2, #8
 8002092:	4013      	ands	r3, r2
 8002094:	2b08      	cmp	r3, #8
 8002096:	d124      	bne.n	80020e2 <HAL_TIM_IRQHandler+0x112>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8002098:	687b      	ldr	r3, [r7, #4]
 800209a:	681b      	ldr	r3, [r3, #0]
 800209c:	68db      	ldr	r3, [r3, #12]
 800209e:	2208      	movs	r2, #8
 80020a0:	4013      	ands	r3, r2
 80020a2:	2b08      	cmp	r3, #8
 80020a4:	d11d      	bne.n	80020e2 <HAL_TIM_IRQHandler+0x112>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80020a6:	687b      	ldr	r3, [r7, #4]
 80020a8:	681b      	ldr	r3, [r3, #0]
 80020aa:	2209      	movs	r2, #9
 80020ac:	4252      	negs	r2, r2
 80020ae:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80020b0:	687b      	ldr	r3, [r7, #4]
 80020b2:	2204      	movs	r2, #4
 80020b4:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80020b6:	687b      	ldr	r3, [r7, #4]
 80020b8:	681b      	ldr	r3, [r3, #0]
 80020ba:	69db      	ldr	r3, [r3, #28]
 80020bc:	2203      	movs	r2, #3
 80020be:	4013      	ands	r3, r2
 80020c0:	d004      	beq.n	80020cc <HAL_TIM_IRQHandler+0xfc>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80020c2:	687b      	ldr	r3, [r7, #4]
 80020c4:	0018      	movs	r0, r3
 80020c6:	f000 fa43 	bl	8002550 <HAL_TIM_IC_CaptureCallback>
 80020ca:	e007      	b.n	80020dc <HAL_TIM_IRQHandler+0x10c>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80020cc:	687b      	ldr	r3, [r7, #4]
 80020ce:	0018      	movs	r0, r3
 80020d0:	f000 fa36 	bl	8002540 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80020d4:	687b      	ldr	r3, [r7, #4]
 80020d6:	0018      	movs	r0, r3
 80020d8:	f000 fa42 	bl	8002560 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80020dc:	687b      	ldr	r3, [r7, #4]
 80020de:	2200      	movs	r2, #0
 80020e0:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80020e2:	687b      	ldr	r3, [r7, #4]
 80020e4:	681b      	ldr	r3, [r3, #0]
 80020e6:	691b      	ldr	r3, [r3, #16]
 80020e8:	2210      	movs	r2, #16
 80020ea:	4013      	ands	r3, r2
 80020ec:	2b10      	cmp	r3, #16
 80020ee:	d125      	bne.n	800213c <HAL_TIM_IRQHandler+0x16c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80020f0:	687b      	ldr	r3, [r7, #4]
 80020f2:	681b      	ldr	r3, [r3, #0]
 80020f4:	68db      	ldr	r3, [r3, #12]
 80020f6:	2210      	movs	r2, #16
 80020f8:	4013      	ands	r3, r2
 80020fa:	2b10      	cmp	r3, #16
 80020fc:	d11e      	bne.n	800213c <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80020fe:	687b      	ldr	r3, [r7, #4]
 8002100:	681b      	ldr	r3, [r3, #0]
 8002102:	2211      	movs	r2, #17
 8002104:	4252      	negs	r2, r2
 8002106:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002108:	687b      	ldr	r3, [r7, #4]
 800210a:	2208      	movs	r2, #8
 800210c:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800210e:	687b      	ldr	r3, [r7, #4]
 8002110:	681b      	ldr	r3, [r3, #0]
 8002112:	69da      	ldr	r2, [r3, #28]
 8002114:	23c0      	movs	r3, #192	; 0xc0
 8002116:	009b      	lsls	r3, r3, #2
 8002118:	4013      	ands	r3, r2
 800211a:	d004      	beq.n	8002126 <HAL_TIM_IRQHandler+0x156>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800211c:	687b      	ldr	r3, [r7, #4]
 800211e:	0018      	movs	r0, r3
 8002120:	f000 fa16 	bl	8002550 <HAL_TIM_IC_CaptureCallback>
 8002124:	e007      	b.n	8002136 <HAL_TIM_IRQHandler+0x166>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002126:	687b      	ldr	r3, [r7, #4]
 8002128:	0018      	movs	r0, r3
 800212a:	f000 fa09 	bl	8002540 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800212e:	687b      	ldr	r3, [r7, #4]
 8002130:	0018      	movs	r0, r3
 8002132:	f000 fa15 	bl	8002560 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002136:	687b      	ldr	r3, [r7, #4]
 8002138:	2200      	movs	r2, #0
 800213a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800213c:	687b      	ldr	r3, [r7, #4]
 800213e:	681b      	ldr	r3, [r3, #0]
 8002140:	691b      	ldr	r3, [r3, #16]
 8002142:	2201      	movs	r2, #1
 8002144:	4013      	ands	r3, r2
 8002146:	2b01      	cmp	r3, #1
 8002148:	d10f      	bne.n	800216a <HAL_TIM_IRQHandler+0x19a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800214a:	687b      	ldr	r3, [r7, #4]
 800214c:	681b      	ldr	r3, [r3, #0]
 800214e:	68db      	ldr	r3, [r3, #12]
 8002150:	2201      	movs	r2, #1
 8002152:	4013      	ands	r3, r2
 8002154:	2b01      	cmp	r3, #1
 8002156:	d108      	bne.n	800216a <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8002158:	687b      	ldr	r3, [r7, #4]
 800215a:	681b      	ldr	r3, [r3, #0]
 800215c:	2202      	movs	r2, #2
 800215e:	4252      	negs	r2, r2
 8002160:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8002162:	687b      	ldr	r3, [r7, #4]
 8002164:	0018      	movs	r0, r3
 8002166:	f000 f9e3 	bl	8002530 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800216a:	687b      	ldr	r3, [r7, #4]
 800216c:	681b      	ldr	r3, [r3, #0]
 800216e:	691b      	ldr	r3, [r3, #16]
 8002170:	2280      	movs	r2, #128	; 0x80
 8002172:	4013      	ands	r3, r2
 8002174:	2b80      	cmp	r3, #128	; 0x80
 8002176:	d10f      	bne.n	8002198 <HAL_TIM_IRQHandler+0x1c8>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8002178:	687b      	ldr	r3, [r7, #4]
 800217a:	681b      	ldr	r3, [r3, #0]
 800217c:	68db      	ldr	r3, [r3, #12]
 800217e:	2280      	movs	r2, #128	; 0x80
 8002180:	4013      	ands	r3, r2
 8002182:	2b80      	cmp	r3, #128	; 0x80
 8002184:	d108      	bne.n	8002198 <HAL_TIM_IRQHandler+0x1c8>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8002186:	687b      	ldr	r3, [r7, #4]
 8002188:	681b      	ldr	r3, [r3, #0]
 800218a:	2281      	movs	r2, #129	; 0x81
 800218c:	4252      	negs	r2, r2
 800218e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8002190:	687b      	ldr	r3, [r7, #4]
 8002192:	0018      	movs	r0, r3
 8002194:	f000 fdf2 	bl	8002d7c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8002198:	687b      	ldr	r3, [r7, #4]
 800219a:	681b      	ldr	r3, [r3, #0]
 800219c:	691b      	ldr	r3, [r3, #16]
 800219e:	2240      	movs	r2, #64	; 0x40
 80021a0:	4013      	ands	r3, r2
 80021a2:	2b40      	cmp	r3, #64	; 0x40
 80021a4:	d10f      	bne.n	80021c6 <HAL_TIM_IRQHandler+0x1f6>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80021a6:	687b      	ldr	r3, [r7, #4]
 80021a8:	681b      	ldr	r3, [r3, #0]
 80021aa:	68db      	ldr	r3, [r3, #12]
 80021ac:	2240      	movs	r2, #64	; 0x40
 80021ae:	4013      	ands	r3, r2
 80021b0:	2b40      	cmp	r3, #64	; 0x40
 80021b2:	d108      	bne.n	80021c6 <HAL_TIM_IRQHandler+0x1f6>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80021b4:	687b      	ldr	r3, [r7, #4]
 80021b6:	681b      	ldr	r3, [r3, #0]
 80021b8:	2241      	movs	r2, #65	; 0x41
 80021ba:	4252      	negs	r2, r2
 80021bc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80021be:	687b      	ldr	r3, [r7, #4]
 80021c0:	0018      	movs	r0, r3
 80021c2:	f000 f9d5 	bl	8002570 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80021c6:	687b      	ldr	r3, [r7, #4]
 80021c8:	681b      	ldr	r3, [r3, #0]
 80021ca:	691b      	ldr	r3, [r3, #16]
 80021cc:	2220      	movs	r2, #32
 80021ce:	4013      	ands	r3, r2
 80021d0:	2b20      	cmp	r3, #32
 80021d2:	d10f      	bne.n	80021f4 <HAL_TIM_IRQHandler+0x224>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80021d4:	687b      	ldr	r3, [r7, #4]
 80021d6:	681b      	ldr	r3, [r3, #0]
 80021d8:	68db      	ldr	r3, [r3, #12]
 80021da:	2220      	movs	r2, #32
 80021dc:	4013      	ands	r3, r2
 80021de:	2b20      	cmp	r3, #32
 80021e0:	d108      	bne.n	80021f4 <HAL_TIM_IRQHandler+0x224>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80021e2:	687b      	ldr	r3, [r7, #4]
 80021e4:	681b      	ldr	r3, [r3, #0]
 80021e6:	2221      	movs	r2, #33	; 0x21
 80021e8:	4252      	negs	r2, r2
 80021ea:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80021ec:	687b      	ldr	r3, [r7, #4]
 80021ee:	0018      	movs	r0, r3
 80021f0:	f000 fdbc 	bl	8002d6c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80021f4:	46c0      	nop			; (mov r8, r8)
 80021f6:	46bd      	mov	sp, r7
 80021f8:	b002      	add	sp, #8
 80021fa:	bd80      	pop	{r7, pc}

080021fc <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80021fc:	b580      	push	{r7, lr}
 80021fe:	b086      	sub	sp, #24
 8002200:	af00      	add	r7, sp, #0
 8002202:	60f8      	str	r0, [r7, #12]
 8002204:	60b9      	str	r1, [r7, #8]
 8002206:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002208:	2317      	movs	r3, #23
 800220a:	18fb      	adds	r3, r7, r3
 800220c:	2200      	movs	r2, #0
 800220e:	701a      	strb	r2, [r3, #0]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8002210:	68fb      	ldr	r3, [r7, #12]
 8002212:	223c      	movs	r2, #60	; 0x3c
 8002214:	5c9b      	ldrb	r3, [r3, r2]
 8002216:	2b01      	cmp	r3, #1
 8002218:	d101      	bne.n	800221e <HAL_TIM_PWM_ConfigChannel+0x22>
 800221a:	2302      	movs	r3, #2
 800221c:	e0ad      	b.n	800237a <HAL_TIM_PWM_ConfigChannel+0x17e>
 800221e:	68fb      	ldr	r3, [r7, #12]
 8002220:	223c      	movs	r2, #60	; 0x3c
 8002222:	2101      	movs	r1, #1
 8002224:	5499      	strb	r1, [r3, r2]

  switch (Channel)
 8002226:	687b      	ldr	r3, [r7, #4]
 8002228:	2b0c      	cmp	r3, #12
 800222a:	d100      	bne.n	800222e <HAL_TIM_PWM_ConfigChannel+0x32>
 800222c:	e076      	b.n	800231c <HAL_TIM_PWM_ConfigChannel+0x120>
 800222e:	687b      	ldr	r3, [r7, #4]
 8002230:	2b0c      	cmp	r3, #12
 8002232:	d900      	bls.n	8002236 <HAL_TIM_PWM_ConfigChannel+0x3a>
 8002234:	e095      	b.n	8002362 <HAL_TIM_PWM_ConfigChannel+0x166>
 8002236:	687b      	ldr	r3, [r7, #4]
 8002238:	2b08      	cmp	r3, #8
 800223a:	d04e      	beq.n	80022da <HAL_TIM_PWM_ConfigChannel+0xde>
 800223c:	687b      	ldr	r3, [r7, #4]
 800223e:	2b08      	cmp	r3, #8
 8002240:	d900      	bls.n	8002244 <HAL_TIM_PWM_ConfigChannel+0x48>
 8002242:	e08e      	b.n	8002362 <HAL_TIM_PWM_ConfigChannel+0x166>
 8002244:	687b      	ldr	r3, [r7, #4]
 8002246:	2b00      	cmp	r3, #0
 8002248:	d003      	beq.n	8002252 <HAL_TIM_PWM_ConfigChannel+0x56>
 800224a:	687b      	ldr	r3, [r7, #4]
 800224c:	2b04      	cmp	r3, #4
 800224e:	d021      	beq.n	8002294 <HAL_TIM_PWM_ConfigChannel+0x98>
 8002250:	e087      	b.n	8002362 <HAL_TIM_PWM_ConfigChannel+0x166>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8002252:	68fb      	ldr	r3, [r7, #12]
 8002254:	681b      	ldr	r3, [r3, #0]
 8002256:	68ba      	ldr	r2, [r7, #8]
 8002258:	0011      	movs	r1, r2
 800225a:	0018      	movs	r0, r3
 800225c:	f000 fa10 	bl	8002680 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8002260:	68fb      	ldr	r3, [r7, #12]
 8002262:	681b      	ldr	r3, [r3, #0]
 8002264:	699a      	ldr	r2, [r3, #24]
 8002266:	68fb      	ldr	r3, [r7, #12]
 8002268:	681b      	ldr	r3, [r3, #0]
 800226a:	2108      	movs	r1, #8
 800226c:	430a      	orrs	r2, r1
 800226e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8002270:	68fb      	ldr	r3, [r7, #12]
 8002272:	681b      	ldr	r3, [r3, #0]
 8002274:	699a      	ldr	r2, [r3, #24]
 8002276:	68fb      	ldr	r3, [r7, #12]
 8002278:	681b      	ldr	r3, [r3, #0]
 800227a:	2104      	movs	r1, #4
 800227c:	438a      	bics	r2, r1
 800227e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8002280:	68fb      	ldr	r3, [r7, #12]
 8002282:	681b      	ldr	r3, [r3, #0]
 8002284:	6999      	ldr	r1, [r3, #24]
 8002286:	68bb      	ldr	r3, [r7, #8]
 8002288:	691a      	ldr	r2, [r3, #16]
 800228a:	68fb      	ldr	r3, [r7, #12]
 800228c:	681b      	ldr	r3, [r3, #0]
 800228e:	430a      	orrs	r2, r1
 8002290:	619a      	str	r2, [r3, #24]
      break;
 8002292:	e06b      	b.n	800236c <HAL_TIM_PWM_ConfigChannel+0x170>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8002294:	68fb      	ldr	r3, [r7, #12]
 8002296:	681b      	ldr	r3, [r3, #0]
 8002298:	68ba      	ldr	r2, [r7, #8]
 800229a:	0011      	movs	r1, r2
 800229c:	0018      	movs	r0, r3
 800229e:	f000 fa77 	bl	8002790 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80022a2:	68fb      	ldr	r3, [r7, #12]
 80022a4:	681b      	ldr	r3, [r3, #0]
 80022a6:	699a      	ldr	r2, [r3, #24]
 80022a8:	68fb      	ldr	r3, [r7, #12]
 80022aa:	681b      	ldr	r3, [r3, #0]
 80022ac:	2180      	movs	r1, #128	; 0x80
 80022ae:	0109      	lsls	r1, r1, #4
 80022b0:	430a      	orrs	r2, r1
 80022b2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80022b4:	68fb      	ldr	r3, [r7, #12]
 80022b6:	681b      	ldr	r3, [r3, #0]
 80022b8:	699a      	ldr	r2, [r3, #24]
 80022ba:	68fb      	ldr	r3, [r7, #12]
 80022bc:	681b      	ldr	r3, [r3, #0]
 80022be:	4931      	ldr	r1, [pc, #196]	; (8002384 <HAL_TIM_PWM_ConfigChannel+0x188>)
 80022c0:	400a      	ands	r2, r1
 80022c2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80022c4:	68fb      	ldr	r3, [r7, #12]
 80022c6:	681b      	ldr	r3, [r3, #0]
 80022c8:	6999      	ldr	r1, [r3, #24]
 80022ca:	68bb      	ldr	r3, [r7, #8]
 80022cc:	691b      	ldr	r3, [r3, #16]
 80022ce:	021a      	lsls	r2, r3, #8
 80022d0:	68fb      	ldr	r3, [r7, #12]
 80022d2:	681b      	ldr	r3, [r3, #0]
 80022d4:	430a      	orrs	r2, r1
 80022d6:	619a      	str	r2, [r3, #24]
      break;
 80022d8:	e048      	b.n	800236c <HAL_TIM_PWM_ConfigChannel+0x170>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80022da:	68fb      	ldr	r3, [r7, #12]
 80022dc:	681b      	ldr	r3, [r3, #0]
 80022de:	68ba      	ldr	r2, [r7, #8]
 80022e0:	0011      	movs	r1, r2
 80022e2:	0018      	movs	r0, r3
 80022e4:	f000 fad8 	bl	8002898 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80022e8:	68fb      	ldr	r3, [r7, #12]
 80022ea:	681b      	ldr	r3, [r3, #0]
 80022ec:	69da      	ldr	r2, [r3, #28]
 80022ee:	68fb      	ldr	r3, [r7, #12]
 80022f0:	681b      	ldr	r3, [r3, #0]
 80022f2:	2108      	movs	r1, #8
 80022f4:	430a      	orrs	r2, r1
 80022f6:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80022f8:	68fb      	ldr	r3, [r7, #12]
 80022fa:	681b      	ldr	r3, [r3, #0]
 80022fc:	69da      	ldr	r2, [r3, #28]
 80022fe:	68fb      	ldr	r3, [r7, #12]
 8002300:	681b      	ldr	r3, [r3, #0]
 8002302:	2104      	movs	r1, #4
 8002304:	438a      	bics	r2, r1
 8002306:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8002308:	68fb      	ldr	r3, [r7, #12]
 800230a:	681b      	ldr	r3, [r3, #0]
 800230c:	69d9      	ldr	r1, [r3, #28]
 800230e:	68bb      	ldr	r3, [r7, #8]
 8002310:	691a      	ldr	r2, [r3, #16]
 8002312:	68fb      	ldr	r3, [r7, #12]
 8002314:	681b      	ldr	r3, [r3, #0]
 8002316:	430a      	orrs	r2, r1
 8002318:	61da      	str	r2, [r3, #28]
      break;
 800231a:	e027      	b.n	800236c <HAL_TIM_PWM_ConfigChannel+0x170>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800231c:	68fb      	ldr	r3, [r7, #12]
 800231e:	681b      	ldr	r3, [r3, #0]
 8002320:	68ba      	ldr	r2, [r7, #8]
 8002322:	0011      	movs	r1, r2
 8002324:	0018      	movs	r0, r3
 8002326:	f000 fb3d 	bl	80029a4 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800232a:	68fb      	ldr	r3, [r7, #12]
 800232c:	681b      	ldr	r3, [r3, #0]
 800232e:	69da      	ldr	r2, [r3, #28]
 8002330:	68fb      	ldr	r3, [r7, #12]
 8002332:	681b      	ldr	r3, [r3, #0]
 8002334:	2180      	movs	r1, #128	; 0x80
 8002336:	0109      	lsls	r1, r1, #4
 8002338:	430a      	orrs	r2, r1
 800233a:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800233c:	68fb      	ldr	r3, [r7, #12]
 800233e:	681b      	ldr	r3, [r3, #0]
 8002340:	69da      	ldr	r2, [r3, #28]
 8002342:	68fb      	ldr	r3, [r7, #12]
 8002344:	681b      	ldr	r3, [r3, #0]
 8002346:	490f      	ldr	r1, [pc, #60]	; (8002384 <HAL_TIM_PWM_ConfigChannel+0x188>)
 8002348:	400a      	ands	r2, r1
 800234a:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800234c:	68fb      	ldr	r3, [r7, #12]
 800234e:	681b      	ldr	r3, [r3, #0]
 8002350:	69d9      	ldr	r1, [r3, #28]
 8002352:	68bb      	ldr	r3, [r7, #8]
 8002354:	691b      	ldr	r3, [r3, #16]
 8002356:	021a      	lsls	r2, r3, #8
 8002358:	68fb      	ldr	r3, [r7, #12]
 800235a:	681b      	ldr	r3, [r3, #0]
 800235c:	430a      	orrs	r2, r1
 800235e:	61da      	str	r2, [r3, #28]
      break;
 8002360:	e004      	b.n	800236c <HAL_TIM_PWM_ConfigChannel+0x170>
    }

    default:
      status = HAL_ERROR;
 8002362:	2317      	movs	r3, #23
 8002364:	18fb      	adds	r3, r7, r3
 8002366:	2201      	movs	r2, #1
 8002368:	701a      	strb	r2, [r3, #0]
      break;
 800236a:	46c0      	nop			; (mov r8, r8)
  }

  __HAL_UNLOCK(htim);
 800236c:	68fb      	ldr	r3, [r7, #12]
 800236e:	223c      	movs	r2, #60	; 0x3c
 8002370:	2100      	movs	r1, #0
 8002372:	5499      	strb	r1, [r3, r2]

  return status;
 8002374:	2317      	movs	r3, #23
 8002376:	18fb      	adds	r3, r7, r3
 8002378:	781b      	ldrb	r3, [r3, #0]
}
 800237a:	0018      	movs	r0, r3
 800237c:	46bd      	mov	sp, r7
 800237e:	b006      	add	sp, #24
 8002380:	bd80      	pop	{r7, pc}
 8002382:	46c0      	nop			; (mov r8, r8)
 8002384:	fffffbff 	.word	0xfffffbff

08002388 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8002388:	b580      	push	{r7, lr}
 800238a:	b084      	sub	sp, #16
 800238c:	af00      	add	r7, sp, #0
 800238e:	6078      	str	r0, [r7, #4]
 8002390:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002392:	230f      	movs	r3, #15
 8002394:	18fb      	adds	r3, r7, r3
 8002396:	2200      	movs	r2, #0
 8002398:	701a      	strb	r2, [r3, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800239a:	687b      	ldr	r3, [r7, #4]
 800239c:	223c      	movs	r2, #60	; 0x3c
 800239e:	5c9b      	ldrb	r3, [r3, r2]
 80023a0:	2b01      	cmp	r3, #1
 80023a2:	d101      	bne.n	80023a8 <HAL_TIM_ConfigClockSource+0x20>
 80023a4:	2302      	movs	r3, #2
 80023a6:	e0bc      	b.n	8002522 <HAL_TIM_ConfigClockSource+0x19a>
 80023a8:	687b      	ldr	r3, [r7, #4]
 80023aa:	223c      	movs	r2, #60	; 0x3c
 80023ac:	2101      	movs	r1, #1
 80023ae:	5499      	strb	r1, [r3, r2]

  htim->State = HAL_TIM_STATE_BUSY;
 80023b0:	687b      	ldr	r3, [r7, #4]
 80023b2:	223d      	movs	r2, #61	; 0x3d
 80023b4:	2102      	movs	r1, #2
 80023b6:	5499      	strb	r1, [r3, r2]

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80023b8:	687b      	ldr	r3, [r7, #4]
 80023ba:	681b      	ldr	r3, [r3, #0]
 80023bc:	689b      	ldr	r3, [r3, #8]
 80023be:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80023c0:	68bb      	ldr	r3, [r7, #8]
 80023c2:	2277      	movs	r2, #119	; 0x77
 80023c4:	4393      	bics	r3, r2
 80023c6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80023c8:	68bb      	ldr	r3, [r7, #8]
 80023ca:	4a58      	ldr	r2, [pc, #352]	; (800252c <HAL_TIM_ConfigClockSource+0x1a4>)
 80023cc:	4013      	ands	r3, r2
 80023ce:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80023d0:	687b      	ldr	r3, [r7, #4]
 80023d2:	681b      	ldr	r3, [r3, #0]
 80023d4:	68ba      	ldr	r2, [r7, #8]
 80023d6:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80023d8:	683b      	ldr	r3, [r7, #0]
 80023da:	681b      	ldr	r3, [r3, #0]
 80023dc:	2280      	movs	r2, #128	; 0x80
 80023de:	0192      	lsls	r2, r2, #6
 80023e0:	4293      	cmp	r3, r2
 80023e2:	d040      	beq.n	8002466 <HAL_TIM_ConfigClockSource+0xde>
 80023e4:	2280      	movs	r2, #128	; 0x80
 80023e6:	0192      	lsls	r2, r2, #6
 80023e8:	4293      	cmp	r3, r2
 80023ea:	d900      	bls.n	80023ee <HAL_TIM_ConfigClockSource+0x66>
 80023ec:	e088      	b.n	8002500 <HAL_TIM_ConfigClockSource+0x178>
 80023ee:	2280      	movs	r2, #128	; 0x80
 80023f0:	0152      	lsls	r2, r2, #5
 80023f2:	4293      	cmp	r3, r2
 80023f4:	d100      	bne.n	80023f8 <HAL_TIM_ConfigClockSource+0x70>
 80023f6:	e088      	b.n	800250a <HAL_TIM_ConfigClockSource+0x182>
 80023f8:	2280      	movs	r2, #128	; 0x80
 80023fa:	0152      	lsls	r2, r2, #5
 80023fc:	4293      	cmp	r3, r2
 80023fe:	d900      	bls.n	8002402 <HAL_TIM_ConfigClockSource+0x7a>
 8002400:	e07e      	b.n	8002500 <HAL_TIM_ConfigClockSource+0x178>
 8002402:	2b70      	cmp	r3, #112	; 0x70
 8002404:	d018      	beq.n	8002438 <HAL_TIM_ConfigClockSource+0xb0>
 8002406:	d900      	bls.n	800240a <HAL_TIM_ConfigClockSource+0x82>
 8002408:	e07a      	b.n	8002500 <HAL_TIM_ConfigClockSource+0x178>
 800240a:	2b60      	cmp	r3, #96	; 0x60
 800240c:	d04f      	beq.n	80024ae <HAL_TIM_ConfigClockSource+0x126>
 800240e:	d900      	bls.n	8002412 <HAL_TIM_ConfigClockSource+0x8a>
 8002410:	e076      	b.n	8002500 <HAL_TIM_ConfigClockSource+0x178>
 8002412:	2b50      	cmp	r3, #80	; 0x50
 8002414:	d03b      	beq.n	800248e <HAL_TIM_ConfigClockSource+0x106>
 8002416:	d900      	bls.n	800241a <HAL_TIM_ConfigClockSource+0x92>
 8002418:	e072      	b.n	8002500 <HAL_TIM_ConfigClockSource+0x178>
 800241a:	2b40      	cmp	r3, #64	; 0x40
 800241c:	d057      	beq.n	80024ce <HAL_TIM_ConfigClockSource+0x146>
 800241e:	d900      	bls.n	8002422 <HAL_TIM_ConfigClockSource+0x9a>
 8002420:	e06e      	b.n	8002500 <HAL_TIM_ConfigClockSource+0x178>
 8002422:	2b30      	cmp	r3, #48	; 0x30
 8002424:	d063      	beq.n	80024ee <HAL_TIM_ConfigClockSource+0x166>
 8002426:	d86b      	bhi.n	8002500 <HAL_TIM_ConfigClockSource+0x178>
 8002428:	2b20      	cmp	r3, #32
 800242a:	d060      	beq.n	80024ee <HAL_TIM_ConfigClockSource+0x166>
 800242c:	d868      	bhi.n	8002500 <HAL_TIM_ConfigClockSource+0x178>
 800242e:	2b00      	cmp	r3, #0
 8002430:	d05d      	beq.n	80024ee <HAL_TIM_ConfigClockSource+0x166>
 8002432:	2b10      	cmp	r3, #16
 8002434:	d05b      	beq.n	80024ee <HAL_TIM_ConfigClockSource+0x166>
 8002436:	e063      	b.n	8002500 <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8002438:	687b      	ldr	r3, [r7, #4]
 800243a:	6818      	ldr	r0, [r3, #0]
 800243c:	683b      	ldr	r3, [r7, #0]
 800243e:	6899      	ldr	r1, [r3, #8]
 8002440:	683b      	ldr	r3, [r7, #0]
 8002442:	685a      	ldr	r2, [r3, #4]
 8002444:	683b      	ldr	r3, [r7, #0]
 8002446:	68db      	ldr	r3, [r3, #12]
 8002448:	f000 fb90 	bl	8002b6c <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800244c:	687b      	ldr	r3, [r7, #4]
 800244e:	681b      	ldr	r3, [r3, #0]
 8002450:	689b      	ldr	r3, [r3, #8]
 8002452:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8002454:	68bb      	ldr	r3, [r7, #8]
 8002456:	2277      	movs	r2, #119	; 0x77
 8002458:	4313      	orrs	r3, r2
 800245a:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800245c:	687b      	ldr	r3, [r7, #4]
 800245e:	681b      	ldr	r3, [r3, #0]
 8002460:	68ba      	ldr	r2, [r7, #8]
 8002462:	609a      	str	r2, [r3, #8]
      break;
 8002464:	e052      	b.n	800250c <HAL_TIM_ConfigClockSource+0x184>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8002466:	687b      	ldr	r3, [r7, #4]
 8002468:	6818      	ldr	r0, [r3, #0]
 800246a:	683b      	ldr	r3, [r7, #0]
 800246c:	6899      	ldr	r1, [r3, #8]
 800246e:	683b      	ldr	r3, [r7, #0]
 8002470:	685a      	ldr	r2, [r3, #4]
 8002472:	683b      	ldr	r3, [r7, #0]
 8002474:	68db      	ldr	r3, [r3, #12]
 8002476:	f000 fb79 	bl	8002b6c <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800247a:	687b      	ldr	r3, [r7, #4]
 800247c:	681b      	ldr	r3, [r3, #0]
 800247e:	689a      	ldr	r2, [r3, #8]
 8002480:	687b      	ldr	r3, [r7, #4]
 8002482:	681b      	ldr	r3, [r3, #0]
 8002484:	2180      	movs	r1, #128	; 0x80
 8002486:	01c9      	lsls	r1, r1, #7
 8002488:	430a      	orrs	r2, r1
 800248a:	609a      	str	r2, [r3, #8]
      break;
 800248c:	e03e      	b.n	800250c <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800248e:	687b      	ldr	r3, [r7, #4]
 8002490:	6818      	ldr	r0, [r3, #0]
 8002492:	683b      	ldr	r3, [r7, #0]
 8002494:	6859      	ldr	r1, [r3, #4]
 8002496:	683b      	ldr	r3, [r7, #0]
 8002498:	68db      	ldr	r3, [r3, #12]
 800249a:	001a      	movs	r2, r3
 800249c:	f000 faec 	bl	8002a78 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80024a0:	687b      	ldr	r3, [r7, #4]
 80024a2:	681b      	ldr	r3, [r3, #0]
 80024a4:	2150      	movs	r1, #80	; 0x50
 80024a6:	0018      	movs	r0, r3
 80024a8:	f000 fb46 	bl	8002b38 <TIM_ITRx_SetConfig>
      break;
 80024ac:	e02e      	b.n	800250c <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80024ae:	687b      	ldr	r3, [r7, #4]
 80024b0:	6818      	ldr	r0, [r3, #0]
 80024b2:	683b      	ldr	r3, [r7, #0]
 80024b4:	6859      	ldr	r1, [r3, #4]
 80024b6:	683b      	ldr	r3, [r7, #0]
 80024b8:	68db      	ldr	r3, [r3, #12]
 80024ba:	001a      	movs	r2, r3
 80024bc:	f000 fb0a 	bl	8002ad4 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80024c0:	687b      	ldr	r3, [r7, #4]
 80024c2:	681b      	ldr	r3, [r3, #0]
 80024c4:	2160      	movs	r1, #96	; 0x60
 80024c6:	0018      	movs	r0, r3
 80024c8:	f000 fb36 	bl	8002b38 <TIM_ITRx_SetConfig>
      break;
 80024cc:	e01e      	b.n	800250c <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80024ce:	687b      	ldr	r3, [r7, #4]
 80024d0:	6818      	ldr	r0, [r3, #0]
 80024d2:	683b      	ldr	r3, [r7, #0]
 80024d4:	6859      	ldr	r1, [r3, #4]
 80024d6:	683b      	ldr	r3, [r7, #0]
 80024d8:	68db      	ldr	r3, [r3, #12]
 80024da:	001a      	movs	r2, r3
 80024dc:	f000 facc 	bl	8002a78 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80024e0:	687b      	ldr	r3, [r7, #4]
 80024e2:	681b      	ldr	r3, [r3, #0]
 80024e4:	2140      	movs	r1, #64	; 0x40
 80024e6:	0018      	movs	r0, r3
 80024e8:	f000 fb26 	bl	8002b38 <TIM_ITRx_SetConfig>
      break;
 80024ec:	e00e      	b.n	800250c <HAL_TIM_ConfigClockSource+0x184>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80024ee:	687b      	ldr	r3, [r7, #4]
 80024f0:	681a      	ldr	r2, [r3, #0]
 80024f2:	683b      	ldr	r3, [r7, #0]
 80024f4:	681b      	ldr	r3, [r3, #0]
 80024f6:	0019      	movs	r1, r3
 80024f8:	0010      	movs	r0, r2
 80024fa:	f000 fb1d 	bl	8002b38 <TIM_ITRx_SetConfig>
      break;
 80024fe:	e005      	b.n	800250c <HAL_TIM_ConfigClockSource+0x184>
    }

    default:
      status = HAL_ERROR;
 8002500:	230f      	movs	r3, #15
 8002502:	18fb      	adds	r3, r7, r3
 8002504:	2201      	movs	r2, #1
 8002506:	701a      	strb	r2, [r3, #0]
      break;
 8002508:	e000      	b.n	800250c <HAL_TIM_ConfigClockSource+0x184>
      break;
 800250a:	46c0      	nop			; (mov r8, r8)
  }
  htim->State = HAL_TIM_STATE_READY;
 800250c:	687b      	ldr	r3, [r7, #4]
 800250e:	223d      	movs	r2, #61	; 0x3d
 8002510:	2101      	movs	r1, #1
 8002512:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 8002514:	687b      	ldr	r3, [r7, #4]
 8002516:	223c      	movs	r2, #60	; 0x3c
 8002518:	2100      	movs	r1, #0
 800251a:	5499      	strb	r1, [r3, r2]

  return status;
 800251c:	230f      	movs	r3, #15
 800251e:	18fb      	adds	r3, r7, r3
 8002520:	781b      	ldrb	r3, [r3, #0]
}
 8002522:	0018      	movs	r0, r3
 8002524:	46bd      	mov	sp, r7
 8002526:	b004      	add	sp, #16
 8002528:	bd80      	pop	{r7, pc}
 800252a:	46c0      	nop			; (mov r8, r8)
 800252c:	ffff00ff 	.word	0xffff00ff

08002530 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002530:	b580      	push	{r7, lr}
 8002532:	b082      	sub	sp, #8
 8002534:	af00      	add	r7, sp, #0
 8002536:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8002538:	46c0      	nop			; (mov r8, r8)
 800253a:	46bd      	mov	sp, r7
 800253c:	b002      	add	sp, #8
 800253e:	bd80      	pop	{r7, pc}

08002540 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002540:	b580      	push	{r7, lr}
 8002542:	b082      	sub	sp, #8
 8002544:	af00      	add	r7, sp, #0
 8002546:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8002548:	46c0      	nop			; (mov r8, r8)
 800254a:	46bd      	mov	sp, r7
 800254c:	b002      	add	sp, #8
 800254e:	bd80      	pop	{r7, pc}

08002550 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8002550:	b580      	push	{r7, lr}
 8002552:	b082      	sub	sp, #8
 8002554:	af00      	add	r7, sp, #0
 8002556:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8002558:	46c0      	nop			; (mov r8, r8)
 800255a:	46bd      	mov	sp, r7
 800255c:	b002      	add	sp, #8
 800255e:	bd80      	pop	{r7, pc}

08002560 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8002560:	b580      	push	{r7, lr}
 8002562:	b082      	sub	sp, #8
 8002564:	af00      	add	r7, sp, #0
 8002566:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8002568:	46c0      	nop			; (mov r8, r8)
 800256a:	46bd      	mov	sp, r7
 800256c:	b002      	add	sp, #8
 800256e:	bd80      	pop	{r7, pc}

08002570 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8002570:	b580      	push	{r7, lr}
 8002572:	b082      	sub	sp, #8
 8002574:	af00      	add	r7, sp, #0
 8002576:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8002578:	46c0      	nop			; (mov r8, r8)
 800257a:	46bd      	mov	sp, r7
 800257c:	b002      	add	sp, #8
 800257e:	bd80      	pop	{r7, pc}

08002580 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8002580:	b580      	push	{r7, lr}
 8002582:	b084      	sub	sp, #16
 8002584:	af00      	add	r7, sp, #0
 8002586:	6078      	str	r0, [r7, #4]
 8002588:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800258a:	687b      	ldr	r3, [r7, #4]
 800258c:	681b      	ldr	r3, [r3, #0]
 800258e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002590:	687b      	ldr	r3, [r7, #4]
 8002592:	4a34      	ldr	r2, [pc, #208]	; (8002664 <TIM_Base_SetConfig+0xe4>)
 8002594:	4293      	cmp	r3, r2
 8002596:	d008      	beq.n	80025aa <TIM_Base_SetConfig+0x2a>
 8002598:	687a      	ldr	r2, [r7, #4]
 800259a:	2380      	movs	r3, #128	; 0x80
 800259c:	05db      	lsls	r3, r3, #23
 800259e:	429a      	cmp	r2, r3
 80025a0:	d003      	beq.n	80025aa <TIM_Base_SetConfig+0x2a>
 80025a2:	687b      	ldr	r3, [r7, #4]
 80025a4:	4a30      	ldr	r2, [pc, #192]	; (8002668 <TIM_Base_SetConfig+0xe8>)
 80025a6:	4293      	cmp	r3, r2
 80025a8:	d108      	bne.n	80025bc <TIM_Base_SetConfig+0x3c>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80025aa:	68fb      	ldr	r3, [r7, #12]
 80025ac:	2270      	movs	r2, #112	; 0x70
 80025ae:	4393      	bics	r3, r2
 80025b0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80025b2:	683b      	ldr	r3, [r7, #0]
 80025b4:	685b      	ldr	r3, [r3, #4]
 80025b6:	68fa      	ldr	r2, [r7, #12]
 80025b8:	4313      	orrs	r3, r2
 80025ba:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80025bc:	687b      	ldr	r3, [r7, #4]
 80025be:	4a29      	ldr	r2, [pc, #164]	; (8002664 <TIM_Base_SetConfig+0xe4>)
 80025c0:	4293      	cmp	r3, r2
 80025c2:	d018      	beq.n	80025f6 <TIM_Base_SetConfig+0x76>
 80025c4:	687a      	ldr	r2, [r7, #4]
 80025c6:	2380      	movs	r3, #128	; 0x80
 80025c8:	05db      	lsls	r3, r3, #23
 80025ca:	429a      	cmp	r2, r3
 80025cc:	d013      	beq.n	80025f6 <TIM_Base_SetConfig+0x76>
 80025ce:	687b      	ldr	r3, [r7, #4]
 80025d0:	4a25      	ldr	r2, [pc, #148]	; (8002668 <TIM_Base_SetConfig+0xe8>)
 80025d2:	4293      	cmp	r3, r2
 80025d4:	d00f      	beq.n	80025f6 <TIM_Base_SetConfig+0x76>
 80025d6:	687b      	ldr	r3, [r7, #4]
 80025d8:	4a24      	ldr	r2, [pc, #144]	; (800266c <TIM_Base_SetConfig+0xec>)
 80025da:	4293      	cmp	r3, r2
 80025dc:	d00b      	beq.n	80025f6 <TIM_Base_SetConfig+0x76>
 80025de:	687b      	ldr	r3, [r7, #4]
 80025e0:	4a23      	ldr	r2, [pc, #140]	; (8002670 <TIM_Base_SetConfig+0xf0>)
 80025e2:	4293      	cmp	r3, r2
 80025e4:	d007      	beq.n	80025f6 <TIM_Base_SetConfig+0x76>
 80025e6:	687b      	ldr	r3, [r7, #4]
 80025e8:	4a22      	ldr	r2, [pc, #136]	; (8002674 <TIM_Base_SetConfig+0xf4>)
 80025ea:	4293      	cmp	r3, r2
 80025ec:	d003      	beq.n	80025f6 <TIM_Base_SetConfig+0x76>
 80025ee:	687b      	ldr	r3, [r7, #4]
 80025f0:	4a21      	ldr	r2, [pc, #132]	; (8002678 <TIM_Base_SetConfig+0xf8>)
 80025f2:	4293      	cmp	r3, r2
 80025f4:	d108      	bne.n	8002608 <TIM_Base_SetConfig+0x88>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80025f6:	68fb      	ldr	r3, [r7, #12]
 80025f8:	4a20      	ldr	r2, [pc, #128]	; (800267c <TIM_Base_SetConfig+0xfc>)
 80025fa:	4013      	ands	r3, r2
 80025fc:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80025fe:	683b      	ldr	r3, [r7, #0]
 8002600:	68db      	ldr	r3, [r3, #12]
 8002602:	68fa      	ldr	r2, [r7, #12]
 8002604:	4313      	orrs	r3, r2
 8002606:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002608:	68fb      	ldr	r3, [r7, #12]
 800260a:	2280      	movs	r2, #128	; 0x80
 800260c:	4393      	bics	r3, r2
 800260e:	001a      	movs	r2, r3
 8002610:	683b      	ldr	r3, [r7, #0]
 8002612:	695b      	ldr	r3, [r3, #20]
 8002614:	4313      	orrs	r3, r2
 8002616:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002618:	687b      	ldr	r3, [r7, #4]
 800261a:	68fa      	ldr	r2, [r7, #12]
 800261c:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800261e:	683b      	ldr	r3, [r7, #0]
 8002620:	689a      	ldr	r2, [r3, #8]
 8002622:	687b      	ldr	r3, [r7, #4]
 8002624:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002626:	683b      	ldr	r3, [r7, #0]
 8002628:	681a      	ldr	r2, [r3, #0]
 800262a:	687b      	ldr	r3, [r7, #4]
 800262c:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800262e:	687b      	ldr	r3, [r7, #4]
 8002630:	4a0c      	ldr	r2, [pc, #48]	; (8002664 <TIM_Base_SetConfig+0xe4>)
 8002632:	4293      	cmp	r3, r2
 8002634:	d00b      	beq.n	800264e <TIM_Base_SetConfig+0xce>
 8002636:	687b      	ldr	r3, [r7, #4]
 8002638:	4a0d      	ldr	r2, [pc, #52]	; (8002670 <TIM_Base_SetConfig+0xf0>)
 800263a:	4293      	cmp	r3, r2
 800263c:	d007      	beq.n	800264e <TIM_Base_SetConfig+0xce>
 800263e:	687b      	ldr	r3, [r7, #4]
 8002640:	4a0c      	ldr	r2, [pc, #48]	; (8002674 <TIM_Base_SetConfig+0xf4>)
 8002642:	4293      	cmp	r3, r2
 8002644:	d003      	beq.n	800264e <TIM_Base_SetConfig+0xce>
 8002646:	687b      	ldr	r3, [r7, #4]
 8002648:	4a0b      	ldr	r2, [pc, #44]	; (8002678 <TIM_Base_SetConfig+0xf8>)
 800264a:	4293      	cmp	r3, r2
 800264c:	d103      	bne.n	8002656 <TIM_Base_SetConfig+0xd6>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800264e:	683b      	ldr	r3, [r7, #0]
 8002650:	691a      	ldr	r2, [r3, #16]
 8002652:	687b      	ldr	r3, [r7, #4]
 8002654:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002656:	687b      	ldr	r3, [r7, #4]
 8002658:	2201      	movs	r2, #1
 800265a:	615a      	str	r2, [r3, #20]
}
 800265c:	46c0      	nop			; (mov r8, r8)
 800265e:	46bd      	mov	sp, r7
 8002660:	b004      	add	sp, #16
 8002662:	bd80      	pop	{r7, pc}
 8002664:	40012c00 	.word	0x40012c00
 8002668:	40000400 	.word	0x40000400
 800266c:	40002000 	.word	0x40002000
 8002670:	40014000 	.word	0x40014000
 8002674:	40014400 	.word	0x40014400
 8002678:	40014800 	.word	0x40014800
 800267c:	fffffcff 	.word	0xfffffcff

08002680 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8002680:	b580      	push	{r7, lr}
 8002682:	b086      	sub	sp, #24
 8002684:	af00      	add	r7, sp, #0
 8002686:	6078      	str	r0, [r7, #4]
 8002688:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800268a:	687b      	ldr	r3, [r7, #4]
 800268c:	6a1b      	ldr	r3, [r3, #32]
 800268e:	2201      	movs	r2, #1
 8002690:	4393      	bics	r3, r2
 8002692:	001a      	movs	r2, r3
 8002694:	687b      	ldr	r3, [r7, #4]
 8002696:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002698:	687b      	ldr	r3, [r7, #4]
 800269a:	6a1b      	ldr	r3, [r3, #32]
 800269c:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800269e:	687b      	ldr	r3, [r7, #4]
 80026a0:	685b      	ldr	r3, [r3, #4]
 80026a2:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80026a4:	687b      	ldr	r3, [r7, #4]
 80026a6:	699b      	ldr	r3, [r3, #24]
 80026a8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80026aa:	68fb      	ldr	r3, [r7, #12]
 80026ac:	2270      	movs	r2, #112	; 0x70
 80026ae:	4393      	bics	r3, r2
 80026b0:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80026b2:	68fb      	ldr	r3, [r7, #12]
 80026b4:	2203      	movs	r2, #3
 80026b6:	4393      	bics	r3, r2
 80026b8:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80026ba:	683b      	ldr	r3, [r7, #0]
 80026bc:	681b      	ldr	r3, [r3, #0]
 80026be:	68fa      	ldr	r2, [r7, #12]
 80026c0:	4313      	orrs	r3, r2
 80026c2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80026c4:	697b      	ldr	r3, [r7, #20]
 80026c6:	2202      	movs	r2, #2
 80026c8:	4393      	bics	r3, r2
 80026ca:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80026cc:	683b      	ldr	r3, [r7, #0]
 80026ce:	689b      	ldr	r3, [r3, #8]
 80026d0:	697a      	ldr	r2, [r7, #20]
 80026d2:	4313      	orrs	r3, r2
 80026d4:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80026d6:	687b      	ldr	r3, [r7, #4]
 80026d8:	4a27      	ldr	r2, [pc, #156]	; (8002778 <TIM_OC1_SetConfig+0xf8>)
 80026da:	4293      	cmp	r3, r2
 80026dc:	d00b      	beq.n	80026f6 <TIM_OC1_SetConfig+0x76>
 80026de:	687b      	ldr	r3, [r7, #4]
 80026e0:	4a26      	ldr	r2, [pc, #152]	; (800277c <TIM_OC1_SetConfig+0xfc>)
 80026e2:	4293      	cmp	r3, r2
 80026e4:	d007      	beq.n	80026f6 <TIM_OC1_SetConfig+0x76>
 80026e6:	687b      	ldr	r3, [r7, #4]
 80026e8:	4a25      	ldr	r2, [pc, #148]	; (8002780 <TIM_OC1_SetConfig+0x100>)
 80026ea:	4293      	cmp	r3, r2
 80026ec:	d003      	beq.n	80026f6 <TIM_OC1_SetConfig+0x76>
 80026ee:	687b      	ldr	r3, [r7, #4]
 80026f0:	4a24      	ldr	r2, [pc, #144]	; (8002784 <TIM_OC1_SetConfig+0x104>)
 80026f2:	4293      	cmp	r3, r2
 80026f4:	d10c      	bne.n	8002710 <TIM_OC1_SetConfig+0x90>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80026f6:	697b      	ldr	r3, [r7, #20]
 80026f8:	2208      	movs	r2, #8
 80026fa:	4393      	bics	r3, r2
 80026fc:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80026fe:	683b      	ldr	r3, [r7, #0]
 8002700:	68db      	ldr	r3, [r3, #12]
 8002702:	697a      	ldr	r2, [r7, #20]
 8002704:	4313      	orrs	r3, r2
 8002706:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8002708:	697b      	ldr	r3, [r7, #20]
 800270a:	2204      	movs	r2, #4
 800270c:	4393      	bics	r3, r2
 800270e:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002710:	687b      	ldr	r3, [r7, #4]
 8002712:	4a19      	ldr	r2, [pc, #100]	; (8002778 <TIM_OC1_SetConfig+0xf8>)
 8002714:	4293      	cmp	r3, r2
 8002716:	d00b      	beq.n	8002730 <TIM_OC1_SetConfig+0xb0>
 8002718:	687b      	ldr	r3, [r7, #4]
 800271a:	4a18      	ldr	r2, [pc, #96]	; (800277c <TIM_OC1_SetConfig+0xfc>)
 800271c:	4293      	cmp	r3, r2
 800271e:	d007      	beq.n	8002730 <TIM_OC1_SetConfig+0xb0>
 8002720:	687b      	ldr	r3, [r7, #4]
 8002722:	4a17      	ldr	r2, [pc, #92]	; (8002780 <TIM_OC1_SetConfig+0x100>)
 8002724:	4293      	cmp	r3, r2
 8002726:	d003      	beq.n	8002730 <TIM_OC1_SetConfig+0xb0>
 8002728:	687b      	ldr	r3, [r7, #4]
 800272a:	4a16      	ldr	r2, [pc, #88]	; (8002784 <TIM_OC1_SetConfig+0x104>)
 800272c:	4293      	cmp	r3, r2
 800272e:	d111      	bne.n	8002754 <TIM_OC1_SetConfig+0xd4>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8002730:	693b      	ldr	r3, [r7, #16]
 8002732:	4a15      	ldr	r2, [pc, #84]	; (8002788 <TIM_OC1_SetConfig+0x108>)
 8002734:	4013      	ands	r3, r2
 8002736:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8002738:	693b      	ldr	r3, [r7, #16]
 800273a:	4a14      	ldr	r2, [pc, #80]	; (800278c <TIM_OC1_SetConfig+0x10c>)
 800273c:	4013      	ands	r3, r2
 800273e:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8002740:	683b      	ldr	r3, [r7, #0]
 8002742:	695b      	ldr	r3, [r3, #20]
 8002744:	693a      	ldr	r2, [r7, #16]
 8002746:	4313      	orrs	r3, r2
 8002748:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800274a:	683b      	ldr	r3, [r7, #0]
 800274c:	699b      	ldr	r3, [r3, #24]
 800274e:	693a      	ldr	r2, [r7, #16]
 8002750:	4313      	orrs	r3, r2
 8002752:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002754:	687b      	ldr	r3, [r7, #4]
 8002756:	693a      	ldr	r2, [r7, #16]
 8002758:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800275a:	687b      	ldr	r3, [r7, #4]
 800275c:	68fa      	ldr	r2, [r7, #12]
 800275e:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8002760:	683b      	ldr	r3, [r7, #0]
 8002762:	685a      	ldr	r2, [r3, #4]
 8002764:	687b      	ldr	r3, [r7, #4]
 8002766:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002768:	687b      	ldr	r3, [r7, #4]
 800276a:	697a      	ldr	r2, [r7, #20]
 800276c:	621a      	str	r2, [r3, #32]
}
 800276e:	46c0      	nop			; (mov r8, r8)
 8002770:	46bd      	mov	sp, r7
 8002772:	b006      	add	sp, #24
 8002774:	bd80      	pop	{r7, pc}
 8002776:	46c0      	nop			; (mov r8, r8)
 8002778:	40012c00 	.word	0x40012c00
 800277c:	40014000 	.word	0x40014000
 8002780:	40014400 	.word	0x40014400
 8002784:	40014800 	.word	0x40014800
 8002788:	fffffeff 	.word	0xfffffeff
 800278c:	fffffdff 	.word	0xfffffdff

08002790 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8002790:	b580      	push	{r7, lr}
 8002792:	b086      	sub	sp, #24
 8002794:	af00      	add	r7, sp, #0
 8002796:	6078      	str	r0, [r7, #4]
 8002798:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800279a:	687b      	ldr	r3, [r7, #4]
 800279c:	6a1b      	ldr	r3, [r3, #32]
 800279e:	2210      	movs	r2, #16
 80027a0:	4393      	bics	r3, r2
 80027a2:	001a      	movs	r2, r3
 80027a4:	687b      	ldr	r3, [r7, #4]
 80027a6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80027a8:	687b      	ldr	r3, [r7, #4]
 80027aa:	6a1b      	ldr	r3, [r3, #32]
 80027ac:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80027ae:	687b      	ldr	r3, [r7, #4]
 80027b0:	685b      	ldr	r3, [r3, #4]
 80027b2:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80027b4:	687b      	ldr	r3, [r7, #4]
 80027b6:	699b      	ldr	r3, [r3, #24]
 80027b8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80027ba:	68fb      	ldr	r3, [r7, #12]
 80027bc:	4a2e      	ldr	r2, [pc, #184]	; (8002878 <TIM_OC2_SetConfig+0xe8>)
 80027be:	4013      	ands	r3, r2
 80027c0:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80027c2:	68fb      	ldr	r3, [r7, #12]
 80027c4:	4a2d      	ldr	r2, [pc, #180]	; (800287c <TIM_OC2_SetConfig+0xec>)
 80027c6:	4013      	ands	r3, r2
 80027c8:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80027ca:	683b      	ldr	r3, [r7, #0]
 80027cc:	681b      	ldr	r3, [r3, #0]
 80027ce:	021b      	lsls	r3, r3, #8
 80027d0:	68fa      	ldr	r2, [r7, #12]
 80027d2:	4313      	orrs	r3, r2
 80027d4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80027d6:	697b      	ldr	r3, [r7, #20]
 80027d8:	2220      	movs	r2, #32
 80027da:	4393      	bics	r3, r2
 80027dc:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80027de:	683b      	ldr	r3, [r7, #0]
 80027e0:	689b      	ldr	r3, [r3, #8]
 80027e2:	011b      	lsls	r3, r3, #4
 80027e4:	697a      	ldr	r2, [r7, #20]
 80027e6:	4313      	orrs	r3, r2
 80027e8:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80027ea:	687b      	ldr	r3, [r7, #4]
 80027ec:	4a24      	ldr	r2, [pc, #144]	; (8002880 <TIM_OC2_SetConfig+0xf0>)
 80027ee:	4293      	cmp	r3, r2
 80027f0:	d10d      	bne.n	800280e <TIM_OC2_SetConfig+0x7e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80027f2:	697b      	ldr	r3, [r7, #20]
 80027f4:	2280      	movs	r2, #128	; 0x80
 80027f6:	4393      	bics	r3, r2
 80027f8:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80027fa:	683b      	ldr	r3, [r7, #0]
 80027fc:	68db      	ldr	r3, [r3, #12]
 80027fe:	011b      	lsls	r3, r3, #4
 8002800:	697a      	ldr	r2, [r7, #20]
 8002802:	4313      	orrs	r3, r2
 8002804:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8002806:	697b      	ldr	r3, [r7, #20]
 8002808:	2240      	movs	r2, #64	; 0x40
 800280a:	4393      	bics	r3, r2
 800280c:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800280e:	687b      	ldr	r3, [r7, #4]
 8002810:	4a1b      	ldr	r2, [pc, #108]	; (8002880 <TIM_OC2_SetConfig+0xf0>)
 8002812:	4293      	cmp	r3, r2
 8002814:	d00b      	beq.n	800282e <TIM_OC2_SetConfig+0x9e>
 8002816:	687b      	ldr	r3, [r7, #4]
 8002818:	4a1a      	ldr	r2, [pc, #104]	; (8002884 <TIM_OC2_SetConfig+0xf4>)
 800281a:	4293      	cmp	r3, r2
 800281c:	d007      	beq.n	800282e <TIM_OC2_SetConfig+0x9e>
 800281e:	687b      	ldr	r3, [r7, #4]
 8002820:	4a19      	ldr	r2, [pc, #100]	; (8002888 <TIM_OC2_SetConfig+0xf8>)
 8002822:	4293      	cmp	r3, r2
 8002824:	d003      	beq.n	800282e <TIM_OC2_SetConfig+0x9e>
 8002826:	687b      	ldr	r3, [r7, #4]
 8002828:	4a18      	ldr	r2, [pc, #96]	; (800288c <TIM_OC2_SetConfig+0xfc>)
 800282a:	4293      	cmp	r3, r2
 800282c:	d113      	bne.n	8002856 <TIM_OC2_SetConfig+0xc6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800282e:	693b      	ldr	r3, [r7, #16]
 8002830:	4a17      	ldr	r2, [pc, #92]	; (8002890 <TIM_OC2_SetConfig+0x100>)
 8002832:	4013      	ands	r3, r2
 8002834:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8002836:	693b      	ldr	r3, [r7, #16]
 8002838:	4a16      	ldr	r2, [pc, #88]	; (8002894 <TIM_OC2_SetConfig+0x104>)
 800283a:	4013      	ands	r3, r2
 800283c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800283e:	683b      	ldr	r3, [r7, #0]
 8002840:	695b      	ldr	r3, [r3, #20]
 8002842:	009b      	lsls	r3, r3, #2
 8002844:	693a      	ldr	r2, [r7, #16]
 8002846:	4313      	orrs	r3, r2
 8002848:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800284a:	683b      	ldr	r3, [r7, #0]
 800284c:	699b      	ldr	r3, [r3, #24]
 800284e:	009b      	lsls	r3, r3, #2
 8002850:	693a      	ldr	r2, [r7, #16]
 8002852:	4313      	orrs	r3, r2
 8002854:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002856:	687b      	ldr	r3, [r7, #4]
 8002858:	693a      	ldr	r2, [r7, #16]
 800285a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800285c:	687b      	ldr	r3, [r7, #4]
 800285e:	68fa      	ldr	r2, [r7, #12]
 8002860:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8002862:	683b      	ldr	r3, [r7, #0]
 8002864:	685a      	ldr	r2, [r3, #4]
 8002866:	687b      	ldr	r3, [r7, #4]
 8002868:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800286a:	687b      	ldr	r3, [r7, #4]
 800286c:	697a      	ldr	r2, [r7, #20]
 800286e:	621a      	str	r2, [r3, #32]
}
 8002870:	46c0      	nop			; (mov r8, r8)
 8002872:	46bd      	mov	sp, r7
 8002874:	b006      	add	sp, #24
 8002876:	bd80      	pop	{r7, pc}
 8002878:	ffff8fff 	.word	0xffff8fff
 800287c:	fffffcff 	.word	0xfffffcff
 8002880:	40012c00 	.word	0x40012c00
 8002884:	40014000 	.word	0x40014000
 8002888:	40014400 	.word	0x40014400
 800288c:	40014800 	.word	0x40014800
 8002890:	fffffbff 	.word	0xfffffbff
 8002894:	fffff7ff 	.word	0xfffff7ff

08002898 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8002898:	b580      	push	{r7, lr}
 800289a:	b086      	sub	sp, #24
 800289c:	af00      	add	r7, sp, #0
 800289e:	6078      	str	r0, [r7, #4]
 80028a0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80028a2:	687b      	ldr	r3, [r7, #4]
 80028a4:	6a1b      	ldr	r3, [r3, #32]
 80028a6:	4a35      	ldr	r2, [pc, #212]	; (800297c <TIM_OC3_SetConfig+0xe4>)
 80028a8:	401a      	ands	r2, r3
 80028aa:	687b      	ldr	r3, [r7, #4]
 80028ac:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80028ae:	687b      	ldr	r3, [r7, #4]
 80028b0:	6a1b      	ldr	r3, [r3, #32]
 80028b2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80028b4:	687b      	ldr	r3, [r7, #4]
 80028b6:	685b      	ldr	r3, [r3, #4]
 80028b8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80028ba:	687b      	ldr	r3, [r7, #4]
 80028bc:	69db      	ldr	r3, [r3, #28]
 80028be:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80028c0:	68fb      	ldr	r3, [r7, #12]
 80028c2:	2270      	movs	r2, #112	; 0x70
 80028c4:	4393      	bics	r3, r2
 80028c6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80028c8:	68fb      	ldr	r3, [r7, #12]
 80028ca:	2203      	movs	r2, #3
 80028cc:	4393      	bics	r3, r2
 80028ce:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80028d0:	683b      	ldr	r3, [r7, #0]
 80028d2:	681b      	ldr	r3, [r3, #0]
 80028d4:	68fa      	ldr	r2, [r7, #12]
 80028d6:	4313      	orrs	r3, r2
 80028d8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80028da:	697b      	ldr	r3, [r7, #20]
 80028dc:	4a28      	ldr	r2, [pc, #160]	; (8002980 <TIM_OC3_SetConfig+0xe8>)
 80028de:	4013      	ands	r3, r2
 80028e0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80028e2:	683b      	ldr	r3, [r7, #0]
 80028e4:	689b      	ldr	r3, [r3, #8]
 80028e6:	021b      	lsls	r3, r3, #8
 80028e8:	697a      	ldr	r2, [r7, #20]
 80028ea:	4313      	orrs	r3, r2
 80028ec:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80028ee:	687b      	ldr	r3, [r7, #4]
 80028f0:	4a24      	ldr	r2, [pc, #144]	; (8002984 <TIM_OC3_SetConfig+0xec>)
 80028f2:	4293      	cmp	r3, r2
 80028f4:	d10d      	bne.n	8002912 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80028f6:	697b      	ldr	r3, [r7, #20]
 80028f8:	4a23      	ldr	r2, [pc, #140]	; (8002988 <TIM_OC3_SetConfig+0xf0>)
 80028fa:	4013      	ands	r3, r2
 80028fc:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80028fe:	683b      	ldr	r3, [r7, #0]
 8002900:	68db      	ldr	r3, [r3, #12]
 8002902:	021b      	lsls	r3, r3, #8
 8002904:	697a      	ldr	r2, [r7, #20]
 8002906:	4313      	orrs	r3, r2
 8002908:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800290a:	697b      	ldr	r3, [r7, #20]
 800290c:	4a1f      	ldr	r2, [pc, #124]	; (800298c <TIM_OC3_SetConfig+0xf4>)
 800290e:	4013      	ands	r3, r2
 8002910:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002912:	687b      	ldr	r3, [r7, #4]
 8002914:	4a1b      	ldr	r2, [pc, #108]	; (8002984 <TIM_OC3_SetConfig+0xec>)
 8002916:	4293      	cmp	r3, r2
 8002918:	d00b      	beq.n	8002932 <TIM_OC3_SetConfig+0x9a>
 800291a:	687b      	ldr	r3, [r7, #4]
 800291c:	4a1c      	ldr	r2, [pc, #112]	; (8002990 <TIM_OC3_SetConfig+0xf8>)
 800291e:	4293      	cmp	r3, r2
 8002920:	d007      	beq.n	8002932 <TIM_OC3_SetConfig+0x9a>
 8002922:	687b      	ldr	r3, [r7, #4]
 8002924:	4a1b      	ldr	r2, [pc, #108]	; (8002994 <TIM_OC3_SetConfig+0xfc>)
 8002926:	4293      	cmp	r3, r2
 8002928:	d003      	beq.n	8002932 <TIM_OC3_SetConfig+0x9a>
 800292a:	687b      	ldr	r3, [r7, #4]
 800292c:	4a1a      	ldr	r2, [pc, #104]	; (8002998 <TIM_OC3_SetConfig+0x100>)
 800292e:	4293      	cmp	r3, r2
 8002930:	d113      	bne.n	800295a <TIM_OC3_SetConfig+0xc2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8002932:	693b      	ldr	r3, [r7, #16]
 8002934:	4a19      	ldr	r2, [pc, #100]	; (800299c <TIM_OC3_SetConfig+0x104>)
 8002936:	4013      	ands	r3, r2
 8002938:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800293a:	693b      	ldr	r3, [r7, #16]
 800293c:	4a18      	ldr	r2, [pc, #96]	; (80029a0 <TIM_OC3_SetConfig+0x108>)
 800293e:	4013      	ands	r3, r2
 8002940:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8002942:	683b      	ldr	r3, [r7, #0]
 8002944:	695b      	ldr	r3, [r3, #20]
 8002946:	011b      	lsls	r3, r3, #4
 8002948:	693a      	ldr	r2, [r7, #16]
 800294a:	4313      	orrs	r3, r2
 800294c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800294e:	683b      	ldr	r3, [r7, #0]
 8002950:	699b      	ldr	r3, [r3, #24]
 8002952:	011b      	lsls	r3, r3, #4
 8002954:	693a      	ldr	r2, [r7, #16]
 8002956:	4313      	orrs	r3, r2
 8002958:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800295a:	687b      	ldr	r3, [r7, #4]
 800295c:	693a      	ldr	r2, [r7, #16]
 800295e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8002960:	687b      	ldr	r3, [r7, #4]
 8002962:	68fa      	ldr	r2, [r7, #12]
 8002964:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8002966:	683b      	ldr	r3, [r7, #0]
 8002968:	685a      	ldr	r2, [r3, #4]
 800296a:	687b      	ldr	r3, [r7, #4]
 800296c:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800296e:	687b      	ldr	r3, [r7, #4]
 8002970:	697a      	ldr	r2, [r7, #20]
 8002972:	621a      	str	r2, [r3, #32]
}
 8002974:	46c0      	nop			; (mov r8, r8)
 8002976:	46bd      	mov	sp, r7
 8002978:	b006      	add	sp, #24
 800297a:	bd80      	pop	{r7, pc}
 800297c:	fffffeff 	.word	0xfffffeff
 8002980:	fffffdff 	.word	0xfffffdff
 8002984:	40012c00 	.word	0x40012c00
 8002988:	fffff7ff 	.word	0xfffff7ff
 800298c:	fffffbff 	.word	0xfffffbff
 8002990:	40014000 	.word	0x40014000
 8002994:	40014400 	.word	0x40014400
 8002998:	40014800 	.word	0x40014800
 800299c:	ffffefff 	.word	0xffffefff
 80029a0:	ffffdfff 	.word	0xffffdfff

080029a4 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80029a4:	b580      	push	{r7, lr}
 80029a6:	b086      	sub	sp, #24
 80029a8:	af00      	add	r7, sp, #0
 80029aa:	6078      	str	r0, [r7, #4]
 80029ac:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80029ae:	687b      	ldr	r3, [r7, #4]
 80029b0:	6a1b      	ldr	r3, [r3, #32]
 80029b2:	4a28      	ldr	r2, [pc, #160]	; (8002a54 <TIM_OC4_SetConfig+0xb0>)
 80029b4:	401a      	ands	r2, r3
 80029b6:	687b      	ldr	r3, [r7, #4]
 80029b8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80029ba:	687b      	ldr	r3, [r7, #4]
 80029bc:	6a1b      	ldr	r3, [r3, #32]
 80029be:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80029c0:	687b      	ldr	r3, [r7, #4]
 80029c2:	685b      	ldr	r3, [r3, #4]
 80029c4:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80029c6:	687b      	ldr	r3, [r7, #4]
 80029c8:	69db      	ldr	r3, [r3, #28]
 80029ca:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80029cc:	68fb      	ldr	r3, [r7, #12]
 80029ce:	4a22      	ldr	r2, [pc, #136]	; (8002a58 <TIM_OC4_SetConfig+0xb4>)
 80029d0:	4013      	ands	r3, r2
 80029d2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80029d4:	68fb      	ldr	r3, [r7, #12]
 80029d6:	4a21      	ldr	r2, [pc, #132]	; (8002a5c <TIM_OC4_SetConfig+0xb8>)
 80029d8:	4013      	ands	r3, r2
 80029da:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80029dc:	683b      	ldr	r3, [r7, #0]
 80029de:	681b      	ldr	r3, [r3, #0]
 80029e0:	021b      	lsls	r3, r3, #8
 80029e2:	68fa      	ldr	r2, [r7, #12]
 80029e4:	4313      	orrs	r3, r2
 80029e6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80029e8:	693b      	ldr	r3, [r7, #16]
 80029ea:	4a1d      	ldr	r2, [pc, #116]	; (8002a60 <TIM_OC4_SetConfig+0xbc>)
 80029ec:	4013      	ands	r3, r2
 80029ee:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80029f0:	683b      	ldr	r3, [r7, #0]
 80029f2:	689b      	ldr	r3, [r3, #8]
 80029f4:	031b      	lsls	r3, r3, #12
 80029f6:	693a      	ldr	r2, [r7, #16]
 80029f8:	4313      	orrs	r3, r2
 80029fa:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80029fc:	687b      	ldr	r3, [r7, #4]
 80029fe:	4a19      	ldr	r2, [pc, #100]	; (8002a64 <TIM_OC4_SetConfig+0xc0>)
 8002a00:	4293      	cmp	r3, r2
 8002a02:	d00b      	beq.n	8002a1c <TIM_OC4_SetConfig+0x78>
 8002a04:	687b      	ldr	r3, [r7, #4]
 8002a06:	4a18      	ldr	r2, [pc, #96]	; (8002a68 <TIM_OC4_SetConfig+0xc4>)
 8002a08:	4293      	cmp	r3, r2
 8002a0a:	d007      	beq.n	8002a1c <TIM_OC4_SetConfig+0x78>
 8002a0c:	687b      	ldr	r3, [r7, #4]
 8002a0e:	4a17      	ldr	r2, [pc, #92]	; (8002a6c <TIM_OC4_SetConfig+0xc8>)
 8002a10:	4293      	cmp	r3, r2
 8002a12:	d003      	beq.n	8002a1c <TIM_OC4_SetConfig+0x78>
 8002a14:	687b      	ldr	r3, [r7, #4]
 8002a16:	4a16      	ldr	r2, [pc, #88]	; (8002a70 <TIM_OC4_SetConfig+0xcc>)
 8002a18:	4293      	cmp	r3, r2
 8002a1a:	d109      	bne.n	8002a30 <TIM_OC4_SetConfig+0x8c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8002a1c:	697b      	ldr	r3, [r7, #20]
 8002a1e:	4a15      	ldr	r2, [pc, #84]	; (8002a74 <TIM_OC4_SetConfig+0xd0>)
 8002a20:	4013      	ands	r3, r2
 8002a22:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8002a24:	683b      	ldr	r3, [r7, #0]
 8002a26:	695b      	ldr	r3, [r3, #20]
 8002a28:	019b      	lsls	r3, r3, #6
 8002a2a:	697a      	ldr	r2, [r7, #20]
 8002a2c:	4313      	orrs	r3, r2
 8002a2e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002a30:	687b      	ldr	r3, [r7, #4]
 8002a32:	697a      	ldr	r2, [r7, #20]
 8002a34:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8002a36:	687b      	ldr	r3, [r7, #4]
 8002a38:	68fa      	ldr	r2, [r7, #12]
 8002a3a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8002a3c:	683b      	ldr	r3, [r7, #0]
 8002a3e:	685a      	ldr	r2, [r3, #4]
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002a44:	687b      	ldr	r3, [r7, #4]
 8002a46:	693a      	ldr	r2, [r7, #16]
 8002a48:	621a      	str	r2, [r3, #32]
}
 8002a4a:	46c0      	nop			; (mov r8, r8)
 8002a4c:	46bd      	mov	sp, r7
 8002a4e:	b006      	add	sp, #24
 8002a50:	bd80      	pop	{r7, pc}
 8002a52:	46c0      	nop			; (mov r8, r8)
 8002a54:	ffffefff 	.word	0xffffefff
 8002a58:	ffff8fff 	.word	0xffff8fff
 8002a5c:	fffffcff 	.word	0xfffffcff
 8002a60:	ffffdfff 	.word	0xffffdfff
 8002a64:	40012c00 	.word	0x40012c00
 8002a68:	40014000 	.word	0x40014000
 8002a6c:	40014400 	.word	0x40014400
 8002a70:	40014800 	.word	0x40014800
 8002a74:	ffffbfff 	.word	0xffffbfff

08002a78 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002a78:	b580      	push	{r7, lr}
 8002a7a:	b086      	sub	sp, #24
 8002a7c:	af00      	add	r7, sp, #0
 8002a7e:	60f8      	str	r0, [r7, #12]
 8002a80:	60b9      	str	r1, [r7, #8]
 8002a82:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8002a84:	68fb      	ldr	r3, [r7, #12]
 8002a86:	6a1b      	ldr	r3, [r3, #32]
 8002a88:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002a8a:	68fb      	ldr	r3, [r7, #12]
 8002a8c:	6a1b      	ldr	r3, [r3, #32]
 8002a8e:	2201      	movs	r2, #1
 8002a90:	4393      	bics	r3, r2
 8002a92:	001a      	movs	r2, r3
 8002a94:	68fb      	ldr	r3, [r7, #12]
 8002a96:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002a98:	68fb      	ldr	r3, [r7, #12]
 8002a9a:	699b      	ldr	r3, [r3, #24]
 8002a9c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8002a9e:	693b      	ldr	r3, [r7, #16]
 8002aa0:	22f0      	movs	r2, #240	; 0xf0
 8002aa2:	4393      	bics	r3, r2
 8002aa4:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8002aa6:	687b      	ldr	r3, [r7, #4]
 8002aa8:	011b      	lsls	r3, r3, #4
 8002aaa:	693a      	ldr	r2, [r7, #16]
 8002aac:	4313      	orrs	r3, r2
 8002aae:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8002ab0:	697b      	ldr	r3, [r7, #20]
 8002ab2:	220a      	movs	r2, #10
 8002ab4:	4393      	bics	r3, r2
 8002ab6:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8002ab8:	697a      	ldr	r2, [r7, #20]
 8002aba:	68bb      	ldr	r3, [r7, #8]
 8002abc:	4313      	orrs	r3, r2
 8002abe:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8002ac0:	68fb      	ldr	r3, [r7, #12]
 8002ac2:	693a      	ldr	r2, [r7, #16]
 8002ac4:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002ac6:	68fb      	ldr	r3, [r7, #12]
 8002ac8:	697a      	ldr	r2, [r7, #20]
 8002aca:	621a      	str	r2, [r3, #32]
}
 8002acc:	46c0      	nop			; (mov r8, r8)
 8002ace:	46bd      	mov	sp, r7
 8002ad0:	b006      	add	sp, #24
 8002ad2:	bd80      	pop	{r7, pc}

08002ad4 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002ad4:	b580      	push	{r7, lr}
 8002ad6:	b086      	sub	sp, #24
 8002ad8:	af00      	add	r7, sp, #0
 8002ada:	60f8      	str	r0, [r7, #12]
 8002adc:	60b9      	str	r1, [r7, #8]
 8002ade:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002ae0:	68fb      	ldr	r3, [r7, #12]
 8002ae2:	6a1b      	ldr	r3, [r3, #32]
 8002ae4:	2210      	movs	r2, #16
 8002ae6:	4393      	bics	r3, r2
 8002ae8:	001a      	movs	r2, r3
 8002aea:	68fb      	ldr	r3, [r7, #12]
 8002aec:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002aee:	68fb      	ldr	r3, [r7, #12]
 8002af0:	699b      	ldr	r3, [r3, #24]
 8002af2:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8002af4:	68fb      	ldr	r3, [r7, #12]
 8002af6:	6a1b      	ldr	r3, [r3, #32]
 8002af8:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8002afa:	697b      	ldr	r3, [r7, #20]
 8002afc:	4a0d      	ldr	r2, [pc, #52]	; (8002b34 <TIM_TI2_ConfigInputStage+0x60>)
 8002afe:	4013      	ands	r3, r2
 8002b00:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8002b02:	687b      	ldr	r3, [r7, #4]
 8002b04:	031b      	lsls	r3, r3, #12
 8002b06:	697a      	ldr	r2, [r7, #20]
 8002b08:	4313      	orrs	r3, r2
 8002b0a:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8002b0c:	693b      	ldr	r3, [r7, #16]
 8002b0e:	22a0      	movs	r2, #160	; 0xa0
 8002b10:	4393      	bics	r3, r2
 8002b12:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8002b14:	68bb      	ldr	r3, [r7, #8]
 8002b16:	011b      	lsls	r3, r3, #4
 8002b18:	693a      	ldr	r2, [r7, #16]
 8002b1a:	4313      	orrs	r3, r2
 8002b1c:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8002b1e:	68fb      	ldr	r3, [r7, #12]
 8002b20:	697a      	ldr	r2, [r7, #20]
 8002b22:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002b24:	68fb      	ldr	r3, [r7, #12]
 8002b26:	693a      	ldr	r2, [r7, #16]
 8002b28:	621a      	str	r2, [r3, #32]
}
 8002b2a:	46c0      	nop			; (mov r8, r8)
 8002b2c:	46bd      	mov	sp, r7
 8002b2e:	b006      	add	sp, #24
 8002b30:	bd80      	pop	{r7, pc}
 8002b32:	46c0      	nop			; (mov r8, r8)
 8002b34:	ffff0fff 	.word	0xffff0fff

08002b38 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8002b38:	b580      	push	{r7, lr}
 8002b3a:	b084      	sub	sp, #16
 8002b3c:	af00      	add	r7, sp, #0
 8002b3e:	6078      	str	r0, [r7, #4]
 8002b40:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8002b42:	687b      	ldr	r3, [r7, #4]
 8002b44:	689b      	ldr	r3, [r3, #8]
 8002b46:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8002b48:	68fb      	ldr	r3, [r7, #12]
 8002b4a:	2270      	movs	r2, #112	; 0x70
 8002b4c:	4393      	bics	r3, r2
 8002b4e:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8002b50:	683a      	ldr	r2, [r7, #0]
 8002b52:	68fb      	ldr	r3, [r7, #12]
 8002b54:	4313      	orrs	r3, r2
 8002b56:	2207      	movs	r2, #7
 8002b58:	4313      	orrs	r3, r2
 8002b5a:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002b5c:	687b      	ldr	r3, [r7, #4]
 8002b5e:	68fa      	ldr	r2, [r7, #12]
 8002b60:	609a      	str	r2, [r3, #8]
}
 8002b62:	46c0      	nop			; (mov r8, r8)
 8002b64:	46bd      	mov	sp, r7
 8002b66:	b004      	add	sp, #16
 8002b68:	bd80      	pop	{r7, pc}
	...

08002b6c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8002b6c:	b580      	push	{r7, lr}
 8002b6e:	b086      	sub	sp, #24
 8002b70:	af00      	add	r7, sp, #0
 8002b72:	60f8      	str	r0, [r7, #12]
 8002b74:	60b9      	str	r1, [r7, #8]
 8002b76:	607a      	str	r2, [r7, #4]
 8002b78:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8002b7a:	68fb      	ldr	r3, [r7, #12]
 8002b7c:	689b      	ldr	r3, [r3, #8]
 8002b7e:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002b80:	697b      	ldr	r3, [r7, #20]
 8002b82:	4a09      	ldr	r2, [pc, #36]	; (8002ba8 <TIM_ETR_SetConfig+0x3c>)
 8002b84:	4013      	ands	r3, r2
 8002b86:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8002b88:	683b      	ldr	r3, [r7, #0]
 8002b8a:	021a      	lsls	r2, r3, #8
 8002b8c:	687b      	ldr	r3, [r7, #4]
 8002b8e:	431a      	orrs	r2, r3
 8002b90:	68bb      	ldr	r3, [r7, #8]
 8002b92:	4313      	orrs	r3, r2
 8002b94:	697a      	ldr	r2, [r7, #20]
 8002b96:	4313      	orrs	r3, r2
 8002b98:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002b9a:	68fb      	ldr	r3, [r7, #12]
 8002b9c:	697a      	ldr	r2, [r7, #20]
 8002b9e:	609a      	str	r2, [r3, #8]
}
 8002ba0:	46c0      	nop			; (mov r8, r8)
 8002ba2:	46bd      	mov	sp, r7
 8002ba4:	b006      	add	sp, #24
 8002ba6:	bd80      	pop	{r7, pc}
 8002ba8:	ffff00ff 	.word	0xffff00ff

08002bac <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8002bac:	b580      	push	{r7, lr}
 8002bae:	b086      	sub	sp, #24
 8002bb0:	af00      	add	r7, sp, #0
 8002bb2:	60f8      	str	r0, [r7, #12]
 8002bb4:	60b9      	str	r1, [r7, #8]
 8002bb6:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8002bb8:	68bb      	ldr	r3, [r7, #8]
 8002bba:	221f      	movs	r2, #31
 8002bbc:	4013      	ands	r3, r2
 8002bbe:	2201      	movs	r2, #1
 8002bc0:	409a      	lsls	r2, r3
 8002bc2:	0013      	movs	r3, r2
 8002bc4:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8002bc6:	68fb      	ldr	r3, [r7, #12]
 8002bc8:	6a1b      	ldr	r3, [r3, #32]
 8002bca:	697a      	ldr	r2, [r7, #20]
 8002bcc:	43d2      	mvns	r2, r2
 8002bce:	401a      	ands	r2, r3
 8002bd0:	68fb      	ldr	r3, [r7, #12]
 8002bd2:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8002bd4:	68fb      	ldr	r3, [r7, #12]
 8002bd6:	6a1a      	ldr	r2, [r3, #32]
 8002bd8:	68bb      	ldr	r3, [r7, #8]
 8002bda:	211f      	movs	r1, #31
 8002bdc:	400b      	ands	r3, r1
 8002bde:	6879      	ldr	r1, [r7, #4]
 8002be0:	4099      	lsls	r1, r3
 8002be2:	000b      	movs	r3, r1
 8002be4:	431a      	orrs	r2, r3
 8002be6:	68fb      	ldr	r3, [r7, #12]
 8002be8:	621a      	str	r2, [r3, #32]
}
 8002bea:	46c0      	nop			; (mov r8, r8)
 8002bec:	46bd      	mov	sp, r7
 8002bee:	b006      	add	sp, #24
 8002bf0:	bd80      	pop	{r7, pc}
	...

08002bf4 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8002bf4:	b580      	push	{r7, lr}
 8002bf6:	b084      	sub	sp, #16
 8002bf8:	af00      	add	r7, sp, #0
 8002bfa:	6078      	str	r0, [r7, #4]
 8002bfc:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8002bfe:	687b      	ldr	r3, [r7, #4]
 8002c00:	223c      	movs	r2, #60	; 0x3c
 8002c02:	5c9b      	ldrb	r3, [r3, r2]
 8002c04:	2b01      	cmp	r3, #1
 8002c06:	d101      	bne.n	8002c0c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8002c08:	2302      	movs	r3, #2
 8002c0a:	e047      	b.n	8002c9c <HAL_TIMEx_MasterConfigSynchronization+0xa8>
 8002c0c:	687b      	ldr	r3, [r7, #4]
 8002c0e:	223c      	movs	r2, #60	; 0x3c
 8002c10:	2101      	movs	r1, #1
 8002c12:	5499      	strb	r1, [r3, r2]

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002c14:	687b      	ldr	r3, [r7, #4]
 8002c16:	223d      	movs	r2, #61	; 0x3d
 8002c18:	2102      	movs	r1, #2
 8002c1a:	5499      	strb	r1, [r3, r2]

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8002c1c:	687b      	ldr	r3, [r7, #4]
 8002c1e:	681b      	ldr	r3, [r3, #0]
 8002c20:	685b      	ldr	r3, [r3, #4]
 8002c22:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8002c24:	687b      	ldr	r3, [r7, #4]
 8002c26:	681b      	ldr	r3, [r3, #0]
 8002c28:	689b      	ldr	r3, [r3, #8]
 8002c2a:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8002c2c:	68fb      	ldr	r3, [r7, #12]
 8002c2e:	2270      	movs	r2, #112	; 0x70
 8002c30:	4393      	bics	r3, r2
 8002c32:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8002c34:	683b      	ldr	r3, [r7, #0]
 8002c36:	681b      	ldr	r3, [r3, #0]
 8002c38:	68fa      	ldr	r2, [r7, #12]
 8002c3a:	4313      	orrs	r3, r2
 8002c3c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8002c3e:	687b      	ldr	r3, [r7, #4]
 8002c40:	681b      	ldr	r3, [r3, #0]
 8002c42:	68fa      	ldr	r2, [r7, #12]
 8002c44:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002c46:	687b      	ldr	r3, [r7, #4]
 8002c48:	681b      	ldr	r3, [r3, #0]
 8002c4a:	4a16      	ldr	r2, [pc, #88]	; (8002ca4 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8002c4c:	4293      	cmp	r3, r2
 8002c4e:	d00f      	beq.n	8002c70 <HAL_TIMEx_MasterConfigSynchronization+0x7c>
 8002c50:	687b      	ldr	r3, [r7, #4]
 8002c52:	681a      	ldr	r2, [r3, #0]
 8002c54:	2380      	movs	r3, #128	; 0x80
 8002c56:	05db      	lsls	r3, r3, #23
 8002c58:	429a      	cmp	r2, r3
 8002c5a:	d009      	beq.n	8002c70 <HAL_TIMEx_MasterConfigSynchronization+0x7c>
 8002c5c:	687b      	ldr	r3, [r7, #4]
 8002c5e:	681b      	ldr	r3, [r3, #0]
 8002c60:	4a11      	ldr	r2, [pc, #68]	; (8002ca8 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8002c62:	4293      	cmp	r3, r2
 8002c64:	d004      	beq.n	8002c70 <HAL_TIMEx_MasterConfigSynchronization+0x7c>
 8002c66:	687b      	ldr	r3, [r7, #4]
 8002c68:	681b      	ldr	r3, [r3, #0]
 8002c6a:	4a10      	ldr	r2, [pc, #64]	; (8002cac <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 8002c6c:	4293      	cmp	r3, r2
 8002c6e:	d10c      	bne.n	8002c8a <HAL_TIMEx_MasterConfigSynchronization+0x96>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8002c70:	68bb      	ldr	r3, [r7, #8]
 8002c72:	2280      	movs	r2, #128	; 0x80
 8002c74:	4393      	bics	r3, r2
 8002c76:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8002c78:	683b      	ldr	r3, [r7, #0]
 8002c7a:	685b      	ldr	r3, [r3, #4]
 8002c7c:	68ba      	ldr	r2, [r7, #8]
 8002c7e:	4313      	orrs	r3, r2
 8002c80:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8002c82:	687b      	ldr	r3, [r7, #4]
 8002c84:	681b      	ldr	r3, [r3, #0]
 8002c86:	68ba      	ldr	r2, [r7, #8]
 8002c88:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8002c8a:	687b      	ldr	r3, [r7, #4]
 8002c8c:	223d      	movs	r2, #61	; 0x3d
 8002c8e:	2101      	movs	r1, #1
 8002c90:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 8002c92:	687b      	ldr	r3, [r7, #4]
 8002c94:	223c      	movs	r2, #60	; 0x3c
 8002c96:	2100      	movs	r1, #0
 8002c98:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8002c9a:	2300      	movs	r3, #0
}
 8002c9c:	0018      	movs	r0, r3
 8002c9e:	46bd      	mov	sp, r7
 8002ca0:	b004      	add	sp, #16
 8002ca2:	bd80      	pop	{r7, pc}
 8002ca4:	40012c00 	.word	0x40012c00
 8002ca8:	40000400 	.word	0x40000400
 8002cac:	40014000 	.word	0x40014000

08002cb0 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8002cb0:	b580      	push	{r7, lr}
 8002cb2:	b084      	sub	sp, #16
 8002cb4:	af00      	add	r7, sp, #0
 8002cb6:	6078      	str	r0, [r7, #4]
 8002cb8:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8002cba:	2300      	movs	r3, #0
 8002cbc:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8002cbe:	687b      	ldr	r3, [r7, #4]
 8002cc0:	223c      	movs	r2, #60	; 0x3c
 8002cc2:	5c9b      	ldrb	r3, [r3, r2]
 8002cc4:	2b01      	cmp	r3, #1
 8002cc6:	d101      	bne.n	8002ccc <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8002cc8:	2302      	movs	r3, #2
 8002cca:	e03e      	b.n	8002d4a <HAL_TIMEx_ConfigBreakDeadTime+0x9a>
 8002ccc:	687b      	ldr	r3, [r7, #4]
 8002cce:	223c      	movs	r2, #60	; 0x3c
 8002cd0:	2101      	movs	r1, #1
 8002cd2:	5499      	strb	r1, [r3, r2]

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8002cd4:	68fb      	ldr	r3, [r7, #12]
 8002cd6:	22ff      	movs	r2, #255	; 0xff
 8002cd8:	4393      	bics	r3, r2
 8002cda:	001a      	movs	r2, r3
 8002cdc:	683b      	ldr	r3, [r7, #0]
 8002cde:	68db      	ldr	r3, [r3, #12]
 8002ce0:	4313      	orrs	r3, r2
 8002ce2:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8002ce4:	68fb      	ldr	r3, [r7, #12]
 8002ce6:	4a1b      	ldr	r2, [pc, #108]	; (8002d54 <HAL_TIMEx_ConfigBreakDeadTime+0xa4>)
 8002ce8:	401a      	ands	r2, r3
 8002cea:	683b      	ldr	r3, [r7, #0]
 8002cec:	689b      	ldr	r3, [r3, #8]
 8002cee:	4313      	orrs	r3, r2
 8002cf0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8002cf2:	68fb      	ldr	r3, [r7, #12]
 8002cf4:	4a18      	ldr	r2, [pc, #96]	; (8002d58 <HAL_TIMEx_ConfigBreakDeadTime+0xa8>)
 8002cf6:	401a      	ands	r2, r3
 8002cf8:	683b      	ldr	r3, [r7, #0]
 8002cfa:	685b      	ldr	r3, [r3, #4]
 8002cfc:	4313      	orrs	r3, r2
 8002cfe:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8002d00:	68fb      	ldr	r3, [r7, #12]
 8002d02:	4a16      	ldr	r2, [pc, #88]	; (8002d5c <HAL_TIMEx_ConfigBreakDeadTime+0xac>)
 8002d04:	401a      	ands	r2, r3
 8002d06:	683b      	ldr	r3, [r7, #0]
 8002d08:	681b      	ldr	r3, [r3, #0]
 8002d0a:	4313      	orrs	r3, r2
 8002d0c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8002d0e:	68fb      	ldr	r3, [r7, #12]
 8002d10:	4a13      	ldr	r2, [pc, #76]	; (8002d60 <HAL_TIMEx_ConfigBreakDeadTime+0xb0>)
 8002d12:	401a      	ands	r2, r3
 8002d14:	683b      	ldr	r3, [r7, #0]
 8002d16:	691b      	ldr	r3, [r3, #16]
 8002d18:	4313      	orrs	r3, r2
 8002d1a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8002d1c:	68fb      	ldr	r3, [r7, #12]
 8002d1e:	4a11      	ldr	r2, [pc, #68]	; (8002d64 <HAL_TIMEx_ConfigBreakDeadTime+0xb4>)
 8002d20:	401a      	ands	r2, r3
 8002d22:	683b      	ldr	r3, [r7, #0]
 8002d24:	695b      	ldr	r3, [r3, #20]
 8002d26:	4313      	orrs	r3, r2
 8002d28:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8002d2a:	68fb      	ldr	r3, [r7, #12]
 8002d2c:	4a0e      	ldr	r2, [pc, #56]	; (8002d68 <HAL_TIMEx_ConfigBreakDeadTime+0xb8>)
 8002d2e:	401a      	ands	r2, r3
 8002d30:	683b      	ldr	r3, [r7, #0]
 8002d32:	69db      	ldr	r3, [r3, #28]
 8002d34:	4313      	orrs	r3, r2
 8002d36:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8002d38:	687b      	ldr	r3, [r7, #4]
 8002d3a:	681b      	ldr	r3, [r3, #0]
 8002d3c:	68fa      	ldr	r2, [r7, #12]
 8002d3e:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8002d40:	687b      	ldr	r3, [r7, #4]
 8002d42:	223c      	movs	r2, #60	; 0x3c
 8002d44:	2100      	movs	r1, #0
 8002d46:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8002d48:	2300      	movs	r3, #0
}
 8002d4a:	0018      	movs	r0, r3
 8002d4c:	46bd      	mov	sp, r7
 8002d4e:	b004      	add	sp, #16
 8002d50:	bd80      	pop	{r7, pc}
 8002d52:	46c0      	nop			; (mov r8, r8)
 8002d54:	fffffcff 	.word	0xfffffcff
 8002d58:	fffffbff 	.word	0xfffffbff
 8002d5c:	fffff7ff 	.word	0xfffff7ff
 8002d60:	ffffefff 	.word	0xffffefff
 8002d64:	ffffdfff 	.word	0xffffdfff
 8002d68:	ffffbfff 	.word	0xffffbfff

08002d6c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8002d6c:	b580      	push	{r7, lr}
 8002d6e:	b082      	sub	sp, #8
 8002d70:	af00      	add	r7, sp, #0
 8002d72:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8002d74:	46c0      	nop			; (mov r8, r8)
 8002d76:	46bd      	mov	sp, r7
 8002d78:	b002      	add	sp, #8
 8002d7a:	bd80      	pop	{r7, pc}

08002d7c <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8002d7c:	b580      	push	{r7, lr}
 8002d7e:	b082      	sub	sp, #8
 8002d80:	af00      	add	r7, sp, #0
 8002d82:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8002d84:	46c0      	nop			; (mov r8, r8)
 8002d86:	46bd      	mov	sp, r7
 8002d88:	b002      	add	sp, #8
 8002d8a:	bd80      	pop	{r7, pc}

08002d8c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002d8c:	b580      	push	{r7, lr}
 8002d8e:	b082      	sub	sp, #8
 8002d90:	af00      	add	r7, sp, #0
 8002d92:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002d94:	687b      	ldr	r3, [r7, #4]
 8002d96:	2b00      	cmp	r3, #0
 8002d98:	d101      	bne.n	8002d9e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002d9a:	2301      	movs	r3, #1
 8002d9c:	e044      	b.n	8002e28 <HAL_UART_Init+0x9c>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8002d9e:	687b      	ldr	r3, [r7, #4]
 8002da0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002da2:	2b00      	cmp	r3, #0
 8002da4:	d107      	bne.n	8002db6 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002da6:	687b      	ldr	r3, [r7, #4]
 8002da8:	2278      	movs	r2, #120	; 0x78
 8002daa:	2100      	movs	r1, #0
 8002dac:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002dae:	687b      	ldr	r3, [r7, #4]
 8002db0:	0018      	movs	r0, r3
 8002db2:	f7fd fd59 	bl	8000868 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002db6:	687b      	ldr	r3, [r7, #4]
 8002db8:	2224      	movs	r2, #36	; 0x24
 8002dba:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 8002dbc:	687b      	ldr	r3, [r7, #4]
 8002dbe:	681b      	ldr	r3, [r3, #0]
 8002dc0:	681a      	ldr	r2, [r3, #0]
 8002dc2:	687b      	ldr	r3, [r7, #4]
 8002dc4:	681b      	ldr	r3, [r3, #0]
 8002dc6:	2101      	movs	r1, #1
 8002dc8:	438a      	bics	r2, r1
 8002dca:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8002dcc:	687b      	ldr	r3, [r7, #4]
 8002dce:	0018      	movs	r0, r3
 8002dd0:	f000 fbf4 	bl	80035bc <UART_SetConfig>
 8002dd4:	0003      	movs	r3, r0
 8002dd6:	2b01      	cmp	r3, #1
 8002dd8:	d101      	bne.n	8002dde <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 8002dda:	2301      	movs	r3, #1
 8002ddc:	e024      	b.n	8002e28 <HAL_UART_Init+0x9c>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8002dde:	687b      	ldr	r3, [r7, #4]
 8002de0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002de2:	2b00      	cmp	r3, #0
 8002de4:	d003      	beq.n	8002dee <HAL_UART_Init+0x62>
  {
    UART_AdvFeatureConfig(huart);
 8002de6:	687b      	ldr	r3, [r7, #4]
 8002de8:	0018      	movs	r0, r3
 8002dea:	f000 fd6f 	bl	80038cc <UART_AdvFeatureConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN (if LIN is supported) and CLKEN bits in the USART_CR2 register,
  - SCEN (if Smartcard is supported), HDSEL and IREN (if IrDA is supported)  bits in the USART_CR3 register.*/
#if defined (USART_CR2_LINEN)
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002dee:	687b      	ldr	r3, [r7, #4]
 8002df0:	681b      	ldr	r3, [r3, #0]
 8002df2:	685a      	ldr	r2, [r3, #4]
 8002df4:	687b      	ldr	r3, [r7, #4]
 8002df6:	681b      	ldr	r3, [r3, #0]
 8002df8:	490d      	ldr	r1, [pc, #52]	; (8002e30 <HAL_UART_Init+0xa4>)
 8002dfa:	400a      	ands	r2, r1
 8002dfc:	605a      	str	r2, [r3, #4]
#else
  CLEAR_BIT(huart->Instance->CR2, USART_CR2_CLKEN);
#endif /* USART_CR2_LINEN */
#if defined (USART_CR3_SCEN)
#if defined (USART_CR3_IREN)
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002dfe:	687b      	ldr	r3, [r7, #4]
 8002e00:	681b      	ldr	r3, [r3, #0]
 8002e02:	689a      	ldr	r2, [r3, #8]
 8002e04:	687b      	ldr	r3, [r7, #4]
 8002e06:	681b      	ldr	r3, [r3, #0]
 8002e08:	212a      	movs	r1, #42	; 0x2a
 8002e0a:	438a      	bics	r2, r1
 8002e0c:	609a      	str	r2, [r3, #8]
#else
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_HDSEL);
#endif /* USART_CR3_IREN*/
#endif /* USART_CR3_SCEN */

  __HAL_UART_ENABLE(huart);
 8002e0e:	687b      	ldr	r3, [r7, #4]
 8002e10:	681b      	ldr	r3, [r3, #0]
 8002e12:	681a      	ldr	r2, [r3, #0]
 8002e14:	687b      	ldr	r3, [r7, #4]
 8002e16:	681b      	ldr	r3, [r3, #0]
 8002e18:	2101      	movs	r1, #1
 8002e1a:	430a      	orrs	r2, r1
 8002e1c:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8002e1e:	687b      	ldr	r3, [r7, #4]
 8002e20:	0018      	movs	r0, r3
 8002e22:	f000 fe07 	bl	8003a34 <UART_CheckIdleState>
 8002e26:	0003      	movs	r3, r0
}
 8002e28:	0018      	movs	r0, r3
 8002e2a:	46bd      	mov	sp, r7
 8002e2c:	b002      	add	sp, #8
 8002e2e:	bd80      	pop	{r7, pc}
 8002e30:	ffffb7ff 	.word	0xffffb7ff

08002e34 <HAL_UART_Transmit_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 8002e34:	b580      	push	{r7, lr}
 8002e36:	b088      	sub	sp, #32
 8002e38:	af00      	add	r7, sp, #0
 8002e3a:	60f8      	str	r0, [r7, #12]
 8002e3c:	60b9      	str	r1, [r7, #8]
 8002e3e:	1dbb      	adds	r3, r7, #6
 8002e40:	801a      	strh	r2, [r3, #0]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8002e42:	68fb      	ldr	r3, [r7, #12]
 8002e44:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002e46:	2b20      	cmp	r3, #32
 8002e48:	d15b      	bne.n	8002f02 <HAL_UART_Transmit_IT+0xce>
  {
    if ((pData == NULL) || (Size == 0U))
 8002e4a:	68bb      	ldr	r3, [r7, #8]
 8002e4c:	2b00      	cmp	r3, #0
 8002e4e:	d003      	beq.n	8002e58 <HAL_UART_Transmit_IT+0x24>
 8002e50:	1dbb      	adds	r3, r7, #6
 8002e52:	881b      	ldrh	r3, [r3, #0]
 8002e54:	2b00      	cmp	r3, #0
 8002e56:	d101      	bne.n	8002e5c <HAL_UART_Transmit_IT+0x28>
    {
      return HAL_ERROR;
 8002e58:	2301      	movs	r3, #1
 8002e5a:	e053      	b.n	8002f04 <HAL_UART_Transmit_IT+0xd0>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be filled into TDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002e5c:	68fb      	ldr	r3, [r7, #12]
 8002e5e:	689a      	ldr	r2, [r3, #8]
 8002e60:	2380      	movs	r3, #128	; 0x80
 8002e62:	015b      	lsls	r3, r3, #5
 8002e64:	429a      	cmp	r2, r3
 8002e66:	d109      	bne.n	8002e7c <HAL_UART_Transmit_IT+0x48>
 8002e68:	68fb      	ldr	r3, [r7, #12]
 8002e6a:	691b      	ldr	r3, [r3, #16]
 8002e6c:	2b00      	cmp	r3, #0
 8002e6e:	d105      	bne.n	8002e7c <HAL_UART_Transmit_IT+0x48>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 8002e70:	68bb      	ldr	r3, [r7, #8]
 8002e72:	2201      	movs	r2, #1
 8002e74:	4013      	ands	r3, r2
 8002e76:	d001      	beq.n	8002e7c <HAL_UART_Transmit_IT+0x48>
      {
        return  HAL_ERROR;
 8002e78:	2301      	movs	r3, #1
 8002e7a:	e043      	b.n	8002f04 <HAL_UART_Transmit_IT+0xd0>
      }
    }

    huart->pTxBuffPtr  = pData;
 8002e7c:	68fb      	ldr	r3, [r7, #12]
 8002e7e:	68ba      	ldr	r2, [r7, #8]
 8002e80:	64da      	str	r2, [r3, #76]	; 0x4c
    huart->TxXferSize  = Size;
 8002e82:	68fb      	ldr	r3, [r7, #12]
 8002e84:	1dba      	adds	r2, r7, #6
 8002e86:	2150      	movs	r1, #80	; 0x50
 8002e88:	8812      	ldrh	r2, [r2, #0]
 8002e8a:	525a      	strh	r2, [r3, r1]
    huart->TxXferCount = Size;
 8002e8c:	68fb      	ldr	r3, [r7, #12]
 8002e8e:	1dba      	adds	r2, r7, #6
 8002e90:	2152      	movs	r1, #82	; 0x52
 8002e92:	8812      	ldrh	r2, [r2, #0]
 8002e94:	525a      	strh	r2, [r3, r1]
    huart->TxISR       = NULL;
 8002e96:	68fb      	ldr	r3, [r7, #12]
 8002e98:	2200      	movs	r2, #0
 8002e9a:	66da      	str	r2, [r3, #108]	; 0x6c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002e9c:	68fb      	ldr	r3, [r7, #12]
 8002e9e:	2284      	movs	r2, #132	; 0x84
 8002ea0:	2100      	movs	r1, #0
 8002ea2:	5099      	str	r1, [r3, r2]
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002ea4:	68fb      	ldr	r3, [r7, #12]
 8002ea6:	2221      	movs	r2, #33	; 0x21
 8002ea8:	67da      	str	r2, [r3, #124]	; 0x7c

    /* Set the Tx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002eaa:	68fb      	ldr	r3, [r7, #12]
 8002eac:	689a      	ldr	r2, [r3, #8]
 8002eae:	2380      	movs	r3, #128	; 0x80
 8002eb0:	015b      	lsls	r3, r3, #5
 8002eb2:	429a      	cmp	r2, r3
 8002eb4:	d107      	bne.n	8002ec6 <HAL_UART_Transmit_IT+0x92>
 8002eb6:	68fb      	ldr	r3, [r7, #12]
 8002eb8:	691b      	ldr	r3, [r3, #16]
 8002eba:	2b00      	cmp	r3, #0
 8002ebc:	d103      	bne.n	8002ec6 <HAL_UART_Transmit_IT+0x92>
    {
      huart->TxISR = UART_TxISR_16BIT;
 8002ebe:	68fb      	ldr	r3, [r7, #12]
 8002ec0:	4a12      	ldr	r2, [pc, #72]	; (8002f0c <HAL_UART_Transmit_IT+0xd8>)
 8002ec2:	66da      	str	r2, [r3, #108]	; 0x6c
 8002ec4:	e002      	b.n	8002ecc <HAL_UART_Transmit_IT+0x98>
    }
    else
    {
      huart->TxISR = UART_TxISR_8BIT;
 8002ec6:	68fb      	ldr	r3, [r7, #12]
 8002ec8:	4a11      	ldr	r2, [pc, #68]	; (8002f10 <HAL_UART_Transmit_IT+0xdc>)
 8002eca:	66da      	str	r2, [r3, #108]	; 0x6c
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002ecc:	f3ef 8310 	mrs	r3, PRIMASK
 8002ed0:	613b      	str	r3, [r7, #16]
  return(result);
 8002ed2:	693b      	ldr	r3, [r7, #16]
    }

    /* Enable the Transmit Data Register Empty interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 8002ed4:	61fb      	str	r3, [r7, #28]
 8002ed6:	2301      	movs	r3, #1
 8002ed8:	617b      	str	r3, [r7, #20]
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002eda:	697b      	ldr	r3, [r7, #20]
 8002edc:	f383 8810 	msr	PRIMASK, r3
}
 8002ee0:	46c0      	nop			; (mov r8, r8)
 8002ee2:	68fb      	ldr	r3, [r7, #12]
 8002ee4:	681b      	ldr	r3, [r3, #0]
 8002ee6:	681a      	ldr	r2, [r3, #0]
 8002ee8:	68fb      	ldr	r3, [r7, #12]
 8002eea:	681b      	ldr	r3, [r3, #0]
 8002eec:	2180      	movs	r1, #128	; 0x80
 8002eee:	430a      	orrs	r2, r1
 8002ef0:	601a      	str	r2, [r3, #0]
 8002ef2:	69fb      	ldr	r3, [r7, #28]
 8002ef4:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002ef6:	69bb      	ldr	r3, [r7, #24]
 8002ef8:	f383 8810 	msr	PRIMASK, r3
}
 8002efc:	46c0      	nop			; (mov r8, r8)

    return HAL_OK;
 8002efe:	2300      	movs	r3, #0
 8002f00:	e000      	b.n	8002f04 <HAL_UART_Transmit_IT+0xd0>
  }
  else
  {
    return HAL_BUSY;
 8002f02:	2302      	movs	r3, #2
  }
}
 8002f04:	0018      	movs	r0, r3
 8002f06:	46bd      	mov	sp, r7
 8002f08:	b008      	add	sp, #32
 8002f0a:	bd80      	pop	{r7, pc}
 8002f0c:	08003f97 	.word	0x08003f97
 8002f10:	08003ee3 	.word	0x08003ee3

08002f14 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8002f14:	b580      	push	{r7, lr}
 8002f16:	b088      	sub	sp, #32
 8002f18:	af00      	add	r7, sp, #0
 8002f1a:	60f8      	str	r0, [r7, #12]
 8002f1c:	60b9      	str	r1, [r7, #8]
 8002f1e:	1dbb      	adds	r3, r7, #6
 8002f20:	801a      	strh	r2, [r3, #0]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8002f22:	68fb      	ldr	r3, [r7, #12]
 8002f24:	2280      	movs	r2, #128	; 0x80
 8002f26:	589b      	ldr	r3, [r3, r2]
 8002f28:	2b20      	cmp	r3, #32
 8002f2a:	d145      	bne.n	8002fb8 <HAL_UART_Receive_IT+0xa4>
  {
    if ((pData == NULL) || (Size == 0U))
 8002f2c:	68bb      	ldr	r3, [r7, #8]
 8002f2e:	2b00      	cmp	r3, #0
 8002f30:	d003      	beq.n	8002f3a <HAL_UART_Receive_IT+0x26>
 8002f32:	1dbb      	adds	r3, r7, #6
 8002f34:	881b      	ldrh	r3, [r3, #0]
 8002f36:	2b00      	cmp	r3, #0
 8002f38:	d101      	bne.n	8002f3e <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8002f3a:	2301      	movs	r3, #1
 8002f3c:	e03d      	b.n	8002fba <HAL_UART_Receive_IT+0xa6>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be received from RDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002f3e:	68fb      	ldr	r3, [r7, #12]
 8002f40:	689a      	ldr	r2, [r3, #8]
 8002f42:	2380      	movs	r3, #128	; 0x80
 8002f44:	015b      	lsls	r3, r3, #5
 8002f46:	429a      	cmp	r2, r3
 8002f48:	d109      	bne.n	8002f5e <HAL_UART_Receive_IT+0x4a>
 8002f4a:	68fb      	ldr	r3, [r7, #12]
 8002f4c:	691b      	ldr	r3, [r3, #16]
 8002f4e:	2b00      	cmp	r3, #0
 8002f50:	d105      	bne.n	8002f5e <HAL_UART_Receive_IT+0x4a>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 8002f52:	68bb      	ldr	r3, [r7, #8]
 8002f54:	2201      	movs	r2, #1
 8002f56:	4013      	ands	r3, r2
 8002f58:	d001      	beq.n	8002f5e <HAL_UART_Receive_IT+0x4a>
      {
        return  HAL_ERROR;
 8002f5a:	2301      	movs	r3, #1
 8002f5c:	e02d      	b.n	8002fba <HAL_UART_Receive_IT+0xa6>
      }
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002f5e:	68fb      	ldr	r3, [r7, #12]
 8002f60:	2200      	movs	r2, #0
 8002f62:	661a      	str	r2, [r3, #96]	; 0x60

    /* Check that USART RTOEN bit is set */
    if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8002f64:	68fb      	ldr	r3, [r7, #12]
 8002f66:	681b      	ldr	r3, [r3, #0]
 8002f68:	685a      	ldr	r2, [r3, #4]
 8002f6a:	2380      	movs	r3, #128	; 0x80
 8002f6c:	041b      	lsls	r3, r3, #16
 8002f6e:	4013      	ands	r3, r2
 8002f70:	d019      	beq.n	8002fa6 <HAL_UART_Receive_IT+0x92>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002f72:	f3ef 8310 	mrs	r3, PRIMASK
 8002f76:	613b      	str	r3, [r7, #16]
  return(result);
 8002f78:	693b      	ldr	r3, [r7, #16]
    {
      /* Enable the UART Receiver Timeout Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8002f7a:	61fb      	str	r3, [r7, #28]
 8002f7c:	2301      	movs	r3, #1
 8002f7e:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002f80:	697b      	ldr	r3, [r7, #20]
 8002f82:	f383 8810 	msr	PRIMASK, r3
}
 8002f86:	46c0      	nop			; (mov r8, r8)
 8002f88:	68fb      	ldr	r3, [r7, #12]
 8002f8a:	681b      	ldr	r3, [r3, #0]
 8002f8c:	681a      	ldr	r2, [r3, #0]
 8002f8e:	68fb      	ldr	r3, [r7, #12]
 8002f90:	681b      	ldr	r3, [r3, #0]
 8002f92:	2180      	movs	r1, #128	; 0x80
 8002f94:	04c9      	lsls	r1, r1, #19
 8002f96:	430a      	orrs	r2, r1
 8002f98:	601a      	str	r2, [r3, #0]
 8002f9a:	69fb      	ldr	r3, [r7, #28]
 8002f9c:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002f9e:	69bb      	ldr	r3, [r7, #24]
 8002fa0:	f383 8810 	msr	PRIMASK, r3
}
 8002fa4:	46c0      	nop			; (mov r8, r8)
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 8002fa6:	1dbb      	adds	r3, r7, #6
 8002fa8:	881a      	ldrh	r2, [r3, #0]
 8002faa:	68b9      	ldr	r1, [r7, #8]
 8002fac:	68fb      	ldr	r3, [r7, #12]
 8002fae:	0018      	movs	r0, r3
 8002fb0:	f000 fe52 	bl	8003c58 <UART_Start_Receive_IT>
 8002fb4:	0003      	movs	r3, r0
 8002fb6:	e000      	b.n	8002fba <HAL_UART_Receive_IT+0xa6>
  }
  else
  {
    return HAL_BUSY;
 8002fb8:	2302      	movs	r3, #2
  }
}
 8002fba:	0018      	movs	r0, r3
 8002fbc:	46bd      	mov	sp, r7
 8002fbe:	b008      	add	sp, #32
 8002fc0:	bd80      	pop	{r7, pc}
	...

08002fc4 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8002fc4:	b590      	push	{r4, r7, lr}
 8002fc6:	b0ab      	sub	sp, #172	; 0xac
 8002fc8:	af00      	add	r7, sp, #0
 8002fca:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8002fcc:	687b      	ldr	r3, [r7, #4]
 8002fce:	681b      	ldr	r3, [r3, #0]
 8002fd0:	69db      	ldr	r3, [r3, #28]
 8002fd2:	22a4      	movs	r2, #164	; 0xa4
 8002fd4:	18b9      	adds	r1, r7, r2
 8002fd6:	600b      	str	r3, [r1, #0]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8002fd8:	687b      	ldr	r3, [r7, #4]
 8002fda:	681b      	ldr	r3, [r3, #0]
 8002fdc:	681b      	ldr	r3, [r3, #0]
 8002fde:	20a0      	movs	r0, #160	; 0xa0
 8002fe0:	1839      	adds	r1, r7, r0
 8002fe2:	600b      	str	r3, [r1, #0]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8002fe4:	687b      	ldr	r3, [r7, #4]
 8002fe6:	681b      	ldr	r3, [r3, #0]
 8002fe8:	689b      	ldr	r3, [r3, #8]
 8002fea:	219c      	movs	r1, #156	; 0x9c
 8002fec:	1879      	adds	r1, r7, r1
 8002fee:	600b      	str	r3, [r1, #0]

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8002ff0:	0011      	movs	r1, r2
 8002ff2:	18bb      	adds	r3, r7, r2
 8002ff4:	681b      	ldr	r3, [r3, #0]
 8002ff6:	4a99      	ldr	r2, [pc, #612]	; (800325c <HAL_UART_IRQHandler+0x298>)
 8002ff8:	4013      	ands	r3, r2
 8002ffa:	2298      	movs	r2, #152	; 0x98
 8002ffc:	18bc      	adds	r4, r7, r2
 8002ffe:	6023      	str	r3, [r4, #0]
  if (errorflags == 0U)
 8003000:	18bb      	adds	r3, r7, r2
 8003002:	681b      	ldr	r3, [r3, #0]
 8003004:	2b00      	cmp	r3, #0
 8003006:	d114      	bne.n	8003032 <HAL_UART_IRQHandler+0x6e>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8003008:	187b      	adds	r3, r7, r1
 800300a:	681b      	ldr	r3, [r3, #0]
 800300c:	2220      	movs	r2, #32
 800300e:	4013      	ands	r3, r2
 8003010:	d00f      	beq.n	8003032 <HAL_UART_IRQHandler+0x6e>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8003012:	183b      	adds	r3, r7, r0
 8003014:	681b      	ldr	r3, [r3, #0]
 8003016:	2220      	movs	r2, #32
 8003018:	4013      	ands	r3, r2
 800301a:	d00a      	beq.n	8003032 <HAL_UART_IRQHandler+0x6e>
    {
      if (huart->RxISR != NULL)
 800301c:	687b      	ldr	r3, [r7, #4]
 800301e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003020:	2b00      	cmp	r3, #0
 8003022:	d100      	bne.n	8003026 <HAL_UART_IRQHandler+0x62>
 8003024:	e29e      	b.n	8003564 <HAL_UART_IRQHandler+0x5a0>
      {
        huart->RxISR(huart);
 8003026:	687b      	ldr	r3, [r7, #4]
 8003028:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800302a:	687a      	ldr	r2, [r7, #4]
 800302c:	0010      	movs	r0, r2
 800302e:	4798      	blx	r3
      }
      return;
 8003030:	e298      	b.n	8003564 <HAL_UART_IRQHandler+0x5a0>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8003032:	2398      	movs	r3, #152	; 0x98
 8003034:	18fb      	adds	r3, r7, r3
 8003036:	681b      	ldr	r3, [r3, #0]
 8003038:	2b00      	cmp	r3, #0
 800303a:	d100      	bne.n	800303e <HAL_UART_IRQHandler+0x7a>
 800303c:	e114      	b.n	8003268 <HAL_UART_IRQHandler+0x2a4>
      && (((cr3its & USART_CR3_EIE) != 0U)
 800303e:	239c      	movs	r3, #156	; 0x9c
 8003040:	18fb      	adds	r3, r7, r3
 8003042:	681b      	ldr	r3, [r3, #0]
 8003044:	2201      	movs	r2, #1
 8003046:	4013      	ands	r3, r2
 8003048:	d106      	bne.n	8003058 <HAL_UART_IRQHandler+0x94>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 800304a:	23a0      	movs	r3, #160	; 0xa0
 800304c:	18fb      	adds	r3, r7, r3
 800304e:	681b      	ldr	r3, [r3, #0]
 8003050:	4a83      	ldr	r2, [pc, #524]	; (8003260 <HAL_UART_IRQHandler+0x29c>)
 8003052:	4013      	ands	r3, r2
 8003054:	d100      	bne.n	8003058 <HAL_UART_IRQHandler+0x94>
 8003056:	e107      	b.n	8003268 <HAL_UART_IRQHandler+0x2a4>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8003058:	23a4      	movs	r3, #164	; 0xa4
 800305a:	18fb      	adds	r3, r7, r3
 800305c:	681b      	ldr	r3, [r3, #0]
 800305e:	2201      	movs	r2, #1
 8003060:	4013      	ands	r3, r2
 8003062:	d012      	beq.n	800308a <HAL_UART_IRQHandler+0xc6>
 8003064:	23a0      	movs	r3, #160	; 0xa0
 8003066:	18fb      	adds	r3, r7, r3
 8003068:	681a      	ldr	r2, [r3, #0]
 800306a:	2380      	movs	r3, #128	; 0x80
 800306c:	005b      	lsls	r3, r3, #1
 800306e:	4013      	ands	r3, r2
 8003070:	d00b      	beq.n	800308a <HAL_UART_IRQHandler+0xc6>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8003072:	687b      	ldr	r3, [r7, #4]
 8003074:	681b      	ldr	r3, [r3, #0]
 8003076:	2201      	movs	r2, #1
 8003078:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800307a:	687b      	ldr	r3, [r7, #4]
 800307c:	2284      	movs	r2, #132	; 0x84
 800307e:	589b      	ldr	r3, [r3, r2]
 8003080:	2201      	movs	r2, #1
 8003082:	431a      	orrs	r2, r3
 8003084:	687b      	ldr	r3, [r7, #4]
 8003086:	2184      	movs	r1, #132	; 0x84
 8003088:	505a      	str	r2, [r3, r1]
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800308a:	23a4      	movs	r3, #164	; 0xa4
 800308c:	18fb      	adds	r3, r7, r3
 800308e:	681b      	ldr	r3, [r3, #0]
 8003090:	2202      	movs	r2, #2
 8003092:	4013      	ands	r3, r2
 8003094:	d011      	beq.n	80030ba <HAL_UART_IRQHandler+0xf6>
 8003096:	239c      	movs	r3, #156	; 0x9c
 8003098:	18fb      	adds	r3, r7, r3
 800309a:	681b      	ldr	r3, [r3, #0]
 800309c:	2201      	movs	r2, #1
 800309e:	4013      	ands	r3, r2
 80030a0:	d00b      	beq.n	80030ba <HAL_UART_IRQHandler+0xf6>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 80030a2:	687b      	ldr	r3, [r7, #4]
 80030a4:	681b      	ldr	r3, [r3, #0]
 80030a6:	2202      	movs	r2, #2
 80030a8:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80030aa:	687b      	ldr	r3, [r7, #4]
 80030ac:	2284      	movs	r2, #132	; 0x84
 80030ae:	589b      	ldr	r3, [r3, r2]
 80030b0:	2204      	movs	r2, #4
 80030b2:	431a      	orrs	r2, r3
 80030b4:	687b      	ldr	r3, [r7, #4]
 80030b6:	2184      	movs	r1, #132	; 0x84
 80030b8:	505a      	str	r2, [r3, r1]
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80030ba:	23a4      	movs	r3, #164	; 0xa4
 80030bc:	18fb      	adds	r3, r7, r3
 80030be:	681b      	ldr	r3, [r3, #0]
 80030c0:	2204      	movs	r2, #4
 80030c2:	4013      	ands	r3, r2
 80030c4:	d011      	beq.n	80030ea <HAL_UART_IRQHandler+0x126>
 80030c6:	239c      	movs	r3, #156	; 0x9c
 80030c8:	18fb      	adds	r3, r7, r3
 80030ca:	681b      	ldr	r3, [r3, #0]
 80030cc:	2201      	movs	r2, #1
 80030ce:	4013      	ands	r3, r2
 80030d0:	d00b      	beq.n	80030ea <HAL_UART_IRQHandler+0x126>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 80030d2:	687b      	ldr	r3, [r7, #4]
 80030d4:	681b      	ldr	r3, [r3, #0]
 80030d6:	2204      	movs	r2, #4
 80030d8:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80030da:	687b      	ldr	r3, [r7, #4]
 80030dc:	2284      	movs	r2, #132	; 0x84
 80030de:	589b      	ldr	r3, [r3, r2]
 80030e0:	2202      	movs	r2, #2
 80030e2:	431a      	orrs	r2, r3
 80030e4:	687b      	ldr	r3, [r7, #4]
 80030e6:	2184      	movs	r1, #132	; 0x84
 80030e8:	505a      	str	r2, [r3, r1]
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 80030ea:	23a4      	movs	r3, #164	; 0xa4
 80030ec:	18fb      	adds	r3, r7, r3
 80030ee:	681b      	ldr	r3, [r3, #0]
 80030f0:	2208      	movs	r2, #8
 80030f2:	4013      	ands	r3, r2
 80030f4:	d017      	beq.n	8003126 <HAL_UART_IRQHandler+0x162>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 80030f6:	23a0      	movs	r3, #160	; 0xa0
 80030f8:	18fb      	adds	r3, r7, r3
 80030fa:	681b      	ldr	r3, [r3, #0]
 80030fc:	2220      	movs	r2, #32
 80030fe:	4013      	ands	r3, r2
 8003100:	d105      	bne.n	800310e <HAL_UART_IRQHandler+0x14a>
            ((cr3its & USART_CR3_EIE) != 0U)))
 8003102:	239c      	movs	r3, #156	; 0x9c
 8003104:	18fb      	adds	r3, r7, r3
 8003106:	681b      	ldr	r3, [r3, #0]
 8003108:	2201      	movs	r2, #1
 800310a:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 800310c:	d00b      	beq.n	8003126 <HAL_UART_IRQHandler+0x162>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800310e:	687b      	ldr	r3, [r7, #4]
 8003110:	681b      	ldr	r3, [r3, #0]
 8003112:	2208      	movs	r2, #8
 8003114:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8003116:	687b      	ldr	r3, [r7, #4]
 8003118:	2284      	movs	r2, #132	; 0x84
 800311a:	589b      	ldr	r3, [r3, r2]
 800311c:	2208      	movs	r2, #8
 800311e:	431a      	orrs	r2, r3
 8003120:	687b      	ldr	r3, [r7, #4]
 8003122:	2184      	movs	r1, #132	; 0x84
 8003124:	505a      	str	r2, [r3, r1]
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8003126:	23a4      	movs	r3, #164	; 0xa4
 8003128:	18fb      	adds	r3, r7, r3
 800312a:	681a      	ldr	r2, [r3, #0]
 800312c:	2380      	movs	r3, #128	; 0x80
 800312e:	011b      	lsls	r3, r3, #4
 8003130:	4013      	ands	r3, r2
 8003132:	d013      	beq.n	800315c <HAL_UART_IRQHandler+0x198>
 8003134:	23a0      	movs	r3, #160	; 0xa0
 8003136:	18fb      	adds	r3, r7, r3
 8003138:	681a      	ldr	r2, [r3, #0]
 800313a:	2380      	movs	r3, #128	; 0x80
 800313c:	04db      	lsls	r3, r3, #19
 800313e:	4013      	ands	r3, r2
 8003140:	d00c      	beq.n	800315c <HAL_UART_IRQHandler+0x198>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8003142:	687b      	ldr	r3, [r7, #4]
 8003144:	681b      	ldr	r3, [r3, #0]
 8003146:	2280      	movs	r2, #128	; 0x80
 8003148:	0112      	lsls	r2, r2, #4
 800314a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 800314c:	687b      	ldr	r3, [r7, #4]
 800314e:	2284      	movs	r2, #132	; 0x84
 8003150:	589b      	ldr	r3, [r3, r2]
 8003152:	2220      	movs	r2, #32
 8003154:	431a      	orrs	r2, r3
 8003156:	687b      	ldr	r3, [r7, #4]
 8003158:	2184      	movs	r1, #132	; 0x84
 800315a:	505a      	str	r2, [r3, r1]
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800315c:	687b      	ldr	r3, [r7, #4]
 800315e:	2284      	movs	r2, #132	; 0x84
 8003160:	589b      	ldr	r3, [r3, r2]
 8003162:	2b00      	cmp	r3, #0
 8003164:	d100      	bne.n	8003168 <HAL_UART_IRQHandler+0x1a4>
 8003166:	e1ff      	b.n	8003568 <HAL_UART_IRQHandler+0x5a4>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 8003168:	23a4      	movs	r3, #164	; 0xa4
 800316a:	18fb      	adds	r3, r7, r3
 800316c:	681b      	ldr	r3, [r3, #0]
 800316e:	2220      	movs	r2, #32
 8003170:	4013      	ands	r3, r2
 8003172:	d00e      	beq.n	8003192 <HAL_UART_IRQHandler+0x1ce>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8003174:	23a0      	movs	r3, #160	; 0xa0
 8003176:	18fb      	adds	r3, r7, r3
 8003178:	681b      	ldr	r3, [r3, #0]
 800317a:	2220      	movs	r2, #32
 800317c:	4013      	ands	r3, r2
 800317e:	d008      	beq.n	8003192 <HAL_UART_IRQHandler+0x1ce>
      {
        if (huart->RxISR != NULL)
 8003180:	687b      	ldr	r3, [r7, #4]
 8003182:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003184:	2b00      	cmp	r3, #0
 8003186:	d004      	beq.n	8003192 <HAL_UART_IRQHandler+0x1ce>
        {
          huart->RxISR(huart);
 8003188:	687b      	ldr	r3, [r7, #4]
 800318a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800318c:	687a      	ldr	r2, [r7, #4]
 800318e:	0010      	movs	r0, r2
 8003190:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8003192:	687b      	ldr	r3, [r7, #4]
 8003194:	2284      	movs	r2, #132	; 0x84
 8003196:	589b      	ldr	r3, [r3, r2]
 8003198:	2194      	movs	r1, #148	; 0x94
 800319a:	187a      	adds	r2, r7, r1
 800319c:	6013      	str	r3, [r2, #0]
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800319e:	687b      	ldr	r3, [r7, #4]
 80031a0:	681b      	ldr	r3, [r3, #0]
 80031a2:	689b      	ldr	r3, [r3, #8]
 80031a4:	2240      	movs	r2, #64	; 0x40
 80031a6:	4013      	ands	r3, r2
 80031a8:	2b40      	cmp	r3, #64	; 0x40
 80031aa:	d004      	beq.n	80031b6 <HAL_UART_IRQHandler+0x1f2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 80031ac:	187b      	adds	r3, r7, r1
 80031ae:	681b      	ldr	r3, [r3, #0]
 80031b0:	2228      	movs	r2, #40	; 0x28
 80031b2:	4013      	ands	r3, r2
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80031b4:	d047      	beq.n	8003246 <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80031b6:	687b      	ldr	r3, [r7, #4]
 80031b8:	0018      	movs	r0, r3
 80031ba:	f000 fe17 	bl	8003dec <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80031be:	687b      	ldr	r3, [r7, #4]
 80031c0:	681b      	ldr	r3, [r3, #0]
 80031c2:	689b      	ldr	r3, [r3, #8]
 80031c4:	2240      	movs	r2, #64	; 0x40
 80031c6:	4013      	ands	r3, r2
 80031c8:	2b40      	cmp	r3, #64	; 0x40
 80031ca:	d137      	bne.n	800323c <HAL_UART_IRQHandler+0x278>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80031cc:	f3ef 8310 	mrs	r3, PRIMASK
 80031d0:	663b      	str	r3, [r7, #96]	; 0x60
  return(result);
 80031d2:	6e3b      	ldr	r3, [r7, #96]	; 0x60
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80031d4:	2090      	movs	r0, #144	; 0x90
 80031d6:	183a      	adds	r2, r7, r0
 80031d8:	6013      	str	r3, [r2, #0]
 80031da:	2301      	movs	r3, #1
 80031dc:	667b      	str	r3, [r7, #100]	; 0x64
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80031de:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80031e0:	f383 8810 	msr	PRIMASK, r3
}
 80031e4:	46c0      	nop			; (mov r8, r8)
 80031e6:	687b      	ldr	r3, [r7, #4]
 80031e8:	681b      	ldr	r3, [r3, #0]
 80031ea:	689a      	ldr	r2, [r3, #8]
 80031ec:	687b      	ldr	r3, [r7, #4]
 80031ee:	681b      	ldr	r3, [r3, #0]
 80031f0:	2140      	movs	r1, #64	; 0x40
 80031f2:	438a      	bics	r2, r1
 80031f4:	609a      	str	r2, [r3, #8]
 80031f6:	183b      	adds	r3, r7, r0
 80031f8:	681b      	ldr	r3, [r3, #0]
 80031fa:	66bb      	str	r3, [r7, #104]	; 0x68
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80031fc:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80031fe:	f383 8810 	msr	PRIMASK, r3
}
 8003202:	46c0      	nop			; (mov r8, r8)

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8003204:	687b      	ldr	r3, [r7, #4]
 8003206:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003208:	2b00      	cmp	r3, #0
 800320a:	d012      	beq.n	8003232 <HAL_UART_IRQHandler+0x26e>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800320c:	687b      	ldr	r3, [r7, #4]
 800320e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003210:	4a14      	ldr	r2, [pc, #80]	; (8003264 <HAL_UART_IRQHandler+0x2a0>)
 8003212:	635a      	str	r2, [r3, #52]	; 0x34

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8003214:	687b      	ldr	r3, [r7, #4]
 8003216:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003218:	0018      	movs	r0, r3
 800321a:	f7fd fd65 	bl	8000ce8 <HAL_DMA_Abort_IT>
 800321e:	1e03      	subs	r3, r0, #0
 8003220:	d01a      	beq.n	8003258 <HAL_UART_IRQHandler+0x294>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8003222:	687b      	ldr	r3, [r7, #4]
 8003224:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003226:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003228:	687b      	ldr	r3, [r7, #4]
 800322a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800322c:	0018      	movs	r0, r3
 800322e:	4790      	blx	r2
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003230:	e012      	b.n	8003258 <HAL_UART_IRQHandler+0x294>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8003232:	687b      	ldr	r3, [r7, #4]
 8003234:	0018      	movs	r0, r3
 8003236:	f000 f9ad 	bl	8003594 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800323a:	e00d      	b.n	8003258 <HAL_UART_IRQHandler+0x294>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800323c:	687b      	ldr	r3, [r7, #4]
 800323e:	0018      	movs	r0, r3
 8003240:	f000 f9a8 	bl	8003594 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003244:	e008      	b.n	8003258 <HAL_UART_IRQHandler+0x294>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8003246:	687b      	ldr	r3, [r7, #4]
 8003248:	0018      	movs	r0, r3
 800324a:	f000 f9a3 	bl	8003594 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800324e:	687b      	ldr	r3, [r7, #4]
 8003250:	2284      	movs	r2, #132	; 0x84
 8003252:	2100      	movs	r1, #0
 8003254:	5099      	str	r1, [r3, r2]
      }
    }
    return;
 8003256:	e187      	b.n	8003568 <HAL_UART_IRQHandler+0x5a4>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003258:	46c0      	nop			; (mov r8, r8)
    return;
 800325a:	e185      	b.n	8003568 <HAL_UART_IRQHandler+0x5a4>
 800325c:	0000080f 	.word	0x0000080f
 8003260:	04000120 	.word	0x04000120
 8003264:	08003eb5 	.word	0x08003eb5

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003268:	687b      	ldr	r3, [r7, #4]
 800326a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800326c:	2b01      	cmp	r3, #1
 800326e:	d000      	beq.n	8003272 <HAL_UART_IRQHandler+0x2ae>
 8003270:	e139      	b.n	80034e6 <HAL_UART_IRQHandler+0x522>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8003272:	23a4      	movs	r3, #164	; 0xa4
 8003274:	18fb      	adds	r3, r7, r3
 8003276:	681b      	ldr	r3, [r3, #0]
 8003278:	2210      	movs	r2, #16
 800327a:	4013      	ands	r3, r2
 800327c:	d100      	bne.n	8003280 <HAL_UART_IRQHandler+0x2bc>
 800327e:	e132      	b.n	80034e6 <HAL_UART_IRQHandler+0x522>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8003280:	23a0      	movs	r3, #160	; 0xa0
 8003282:	18fb      	adds	r3, r7, r3
 8003284:	681b      	ldr	r3, [r3, #0]
 8003286:	2210      	movs	r2, #16
 8003288:	4013      	ands	r3, r2
 800328a:	d100      	bne.n	800328e <HAL_UART_IRQHandler+0x2ca>
 800328c:	e12b      	b.n	80034e6 <HAL_UART_IRQHandler+0x522>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800328e:	687b      	ldr	r3, [r7, #4]
 8003290:	681b      	ldr	r3, [r3, #0]
 8003292:	2210      	movs	r2, #16
 8003294:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003296:	687b      	ldr	r3, [r7, #4]
 8003298:	681b      	ldr	r3, [r3, #0]
 800329a:	689b      	ldr	r3, [r3, #8]
 800329c:	2240      	movs	r2, #64	; 0x40
 800329e:	4013      	ands	r3, r2
 80032a0:	2b40      	cmp	r3, #64	; 0x40
 80032a2:	d000      	beq.n	80032a6 <HAL_UART_IRQHandler+0x2e2>
 80032a4:	e09f      	b.n	80033e6 <HAL_UART_IRQHandler+0x422>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80032a6:	687b      	ldr	r3, [r7, #4]
 80032a8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80032aa:	681b      	ldr	r3, [r3, #0]
 80032ac:	685a      	ldr	r2, [r3, #4]
 80032ae:	217e      	movs	r1, #126	; 0x7e
 80032b0:	187b      	adds	r3, r7, r1
 80032b2:	801a      	strh	r2, [r3, #0]
      if ((nb_remaining_rx_data > 0U)
 80032b4:	187b      	adds	r3, r7, r1
 80032b6:	881b      	ldrh	r3, [r3, #0]
 80032b8:	2b00      	cmp	r3, #0
 80032ba:	d100      	bne.n	80032be <HAL_UART_IRQHandler+0x2fa>
 80032bc:	e156      	b.n	800356c <HAL_UART_IRQHandler+0x5a8>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80032be:	687b      	ldr	r3, [r7, #4]
 80032c0:	2258      	movs	r2, #88	; 0x58
 80032c2:	5a9b      	ldrh	r3, [r3, r2]
 80032c4:	187a      	adds	r2, r7, r1
 80032c6:	8812      	ldrh	r2, [r2, #0]
 80032c8:	429a      	cmp	r2, r3
 80032ca:	d300      	bcc.n	80032ce <HAL_UART_IRQHandler+0x30a>
 80032cc:	e14e      	b.n	800356c <HAL_UART_IRQHandler+0x5a8>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80032ce:	687b      	ldr	r3, [r7, #4]
 80032d0:	187a      	adds	r2, r7, r1
 80032d2:	215a      	movs	r1, #90	; 0x5a
 80032d4:	8812      	ldrh	r2, [r2, #0]
 80032d6:	525a      	strh	r2, [r3, r1]

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 80032d8:	687b      	ldr	r3, [r7, #4]
 80032da:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80032dc:	699b      	ldr	r3, [r3, #24]
 80032de:	2b20      	cmp	r3, #32
 80032e0:	d06f      	beq.n	80033c2 <HAL_UART_IRQHandler+0x3fe>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80032e2:	f3ef 8310 	mrs	r3, PRIMASK
 80032e6:	633b      	str	r3, [r7, #48]	; 0x30
  return(result);
 80032e8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80032ea:	67bb      	str	r3, [r7, #120]	; 0x78
 80032ec:	2301      	movs	r3, #1
 80032ee:	637b      	str	r3, [r7, #52]	; 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80032f0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80032f2:	f383 8810 	msr	PRIMASK, r3
}
 80032f6:	46c0      	nop			; (mov r8, r8)
 80032f8:	687b      	ldr	r3, [r7, #4]
 80032fa:	681b      	ldr	r3, [r3, #0]
 80032fc:	681a      	ldr	r2, [r3, #0]
 80032fe:	687b      	ldr	r3, [r7, #4]
 8003300:	681b      	ldr	r3, [r3, #0]
 8003302:	499e      	ldr	r1, [pc, #632]	; (800357c <HAL_UART_IRQHandler+0x5b8>)
 8003304:	400a      	ands	r2, r1
 8003306:	601a      	str	r2, [r3, #0]
 8003308:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800330a:	63bb      	str	r3, [r7, #56]	; 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800330c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800330e:	f383 8810 	msr	PRIMASK, r3
}
 8003312:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003314:	f3ef 8310 	mrs	r3, PRIMASK
 8003318:	63fb      	str	r3, [r7, #60]	; 0x3c
  return(result);
 800331a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800331c:	677b      	str	r3, [r7, #116]	; 0x74
 800331e:	2301      	movs	r3, #1
 8003320:	643b      	str	r3, [r7, #64]	; 0x40
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003322:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003324:	f383 8810 	msr	PRIMASK, r3
}
 8003328:	46c0      	nop			; (mov r8, r8)
 800332a:	687b      	ldr	r3, [r7, #4]
 800332c:	681b      	ldr	r3, [r3, #0]
 800332e:	689a      	ldr	r2, [r3, #8]
 8003330:	687b      	ldr	r3, [r7, #4]
 8003332:	681b      	ldr	r3, [r3, #0]
 8003334:	2101      	movs	r1, #1
 8003336:	438a      	bics	r2, r1
 8003338:	609a      	str	r2, [r3, #8]
 800333a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800333c:	647b      	str	r3, [r7, #68]	; 0x44
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800333e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003340:	f383 8810 	msr	PRIMASK, r3
}
 8003344:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003346:	f3ef 8310 	mrs	r3, PRIMASK
 800334a:	64bb      	str	r3, [r7, #72]	; 0x48
  return(result);
 800334c:	6cbb      	ldr	r3, [r7, #72]	; 0x48

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800334e:	673b      	str	r3, [r7, #112]	; 0x70
 8003350:	2301      	movs	r3, #1
 8003352:	64fb      	str	r3, [r7, #76]	; 0x4c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003354:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003356:	f383 8810 	msr	PRIMASK, r3
}
 800335a:	46c0      	nop			; (mov r8, r8)
 800335c:	687b      	ldr	r3, [r7, #4]
 800335e:	681b      	ldr	r3, [r3, #0]
 8003360:	689a      	ldr	r2, [r3, #8]
 8003362:	687b      	ldr	r3, [r7, #4]
 8003364:	681b      	ldr	r3, [r3, #0]
 8003366:	2140      	movs	r1, #64	; 0x40
 8003368:	438a      	bics	r2, r1
 800336a:	609a      	str	r2, [r3, #8]
 800336c:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800336e:	653b      	str	r3, [r7, #80]	; 0x50
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003370:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003372:	f383 8810 	msr	PRIMASK, r3
}
 8003376:	46c0      	nop			; (mov r8, r8)

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8003378:	687b      	ldr	r3, [r7, #4]
 800337a:	2280      	movs	r2, #128	; 0x80
 800337c:	2120      	movs	r1, #32
 800337e:	5099      	str	r1, [r3, r2]
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003380:	687b      	ldr	r3, [r7, #4]
 8003382:	2200      	movs	r2, #0
 8003384:	661a      	str	r2, [r3, #96]	; 0x60
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003386:	f3ef 8310 	mrs	r3, PRIMASK
 800338a:	657b      	str	r3, [r7, #84]	; 0x54
  return(result);
 800338c:	6d7b      	ldr	r3, [r7, #84]	; 0x54

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800338e:	66fb      	str	r3, [r7, #108]	; 0x6c
 8003390:	2301      	movs	r3, #1
 8003392:	65bb      	str	r3, [r7, #88]	; 0x58
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003394:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8003396:	f383 8810 	msr	PRIMASK, r3
}
 800339a:	46c0      	nop			; (mov r8, r8)
 800339c:	687b      	ldr	r3, [r7, #4]
 800339e:	681b      	ldr	r3, [r3, #0]
 80033a0:	681a      	ldr	r2, [r3, #0]
 80033a2:	687b      	ldr	r3, [r7, #4]
 80033a4:	681b      	ldr	r3, [r3, #0]
 80033a6:	2110      	movs	r1, #16
 80033a8:	438a      	bics	r2, r1
 80033aa:	601a      	str	r2, [r3, #0]
 80033ac:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80033ae:	65fb      	str	r3, [r7, #92]	; 0x5c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80033b0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80033b2:	f383 8810 	msr	PRIMASK, r3
}
 80033b6:	46c0      	nop			; (mov r8, r8)

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80033b8:	687b      	ldr	r3, [r7, #4]
 80033ba:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80033bc:	0018      	movs	r0, r3
 80033be:	f7fd fc5b 	bl	8000c78 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80033c2:	687b      	ldr	r3, [r7, #4]
 80033c4:	2202      	movs	r2, #2
 80033c6:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80033c8:	687b      	ldr	r3, [r7, #4]
 80033ca:	2258      	movs	r2, #88	; 0x58
 80033cc:	5a9a      	ldrh	r2, [r3, r2]
 80033ce:	687b      	ldr	r3, [r7, #4]
 80033d0:	215a      	movs	r1, #90	; 0x5a
 80033d2:	5a5b      	ldrh	r3, [r3, r1]
 80033d4:	b29b      	uxth	r3, r3
 80033d6:	1ad3      	subs	r3, r2, r3
 80033d8:	b29a      	uxth	r2, r3
 80033da:	687b      	ldr	r3, [r7, #4]
 80033dc:	0011      	movs	r1, r2
 80033de:	0018      	movs	r0, r3
 80033e0:	f000 f8e0 	bl	80035a4 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 80033e4:	e0c2      	b.n	800356c <HAL_UART_IRQHandler+0x5a8>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80033e6:	687b      	ldr	r3, [r7, #4]
 80033e8:	2258      	movs	r2, #88	; 0x58
 80033ea:	5a99      	ldrh	r1, [r3, r2]
 80033ec:	687b      	ldr	r3, [r7, #4]
 80033ee:	225a      	movs	r2, #90	; 0x5a
 80033f0:	5a9b      	ldrh	r3, [r3, r2]
 80033f2:	b29a      	uxth	r2, r3
 80033f4:	208e      	movs	r0, #142	; 0x8e
 80033f6:	183b      	adds	r3, r7, r0
 80033f8:	1a8a      	subs	r2, r1, r2
 80033fa:	801a      	strh	r2, [r3, #0]
      if ((huart->RxXferCount > 0U)
 80033fc:	687b      	ldr	r3, [r7, #4]
 80033fe:	225a      	movs	r2, #90	; 0x5a
 8003400:	5a9b      	ldrh	r3, [r3, r2]
 8003402:	b29b      	uxth	r3, r3
 8003404:	2b00      	cmp	r3, #0
 8003406:	d100      	bne.n	800340a <HAL_UART_IRQHandler+0x446>
 8003408:	e0b2      	b.n	8003570 <HAL_UART_IRQHandler+0x5ac>
          && (nb_rx_data > 0U))
 800340a:	183b      	adds	r3, r7, r0
 800340c:	881b      	ldrh	r3, [r3, #0]
 800340e:	2b00      	cmp	r3, #0
 8003410:	d100      	bne.n	8003414 <HAL_UART_IRQHandler+0x450>
 8003412:	e0ad      	b.n	8003570 <HAL_UART_IRQHandler+0x5ac>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003414:	f3ef 8310 	mrs	r3, PRIMASK
 8003418:	60fb      	str	r3, [r7, #12]
  return(result);
 800341a:	68fb      	ldr	r3, [r7, #12]
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800341c:	2488      	movs	r4, #136	; 0x88
 800341e:	193a      	adds	r2, r7, r4
 8003420:	6013      	str	r3, [r2, #0]
 8003422:	2301      	movs	r3, #1
 8003424:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003426:	693b      	ldr	r3, [r7, #16]
 8003428:	f383 8810 	msr	PRIMASK, r3
}
 800342c:	46c0      	nop			; (mov r8, r8)
 800342e:	687b      	ldr	r3, [r7, #4]
 8003430:	681b      	ldr	r3, [r3, #0]
 8003432:	681a      	ldr	r2, [r3, #0]
 8003434:	687b      	ldr	r3, [r7, #4]
 8003436:	681b      	ldr	r3, [r3, #0]
 8003438:	4951      	ldr	r1, [pc, #324]	; (8003580 <HAL_UART_IRQHandler+0x5bc>)
 800343a:	400a      	ands	r2, r1
 800343c:	601a      	str	r2, [r3, #0]
 800343e:	193b      	adds	r3, r7, r4
 8003440:	681b      	ldr	r3, [r3, #0]
 8003442:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003444:	697b      	ldr	r3, [r7, #20]
 8003446:	f383 8810 	msr	PRIMASK, r3
}
 800344a:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800344c:	f3ef 8310 	mrs	r3, PRIMASK
 8003450:	61bb      	str	r3, [r7, #24]
  return(result);
 8003452:	69bb      	ldr	r3, [r7, #24]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003454:	2484      	movs	r4, #132	; 0x84
 8003456:	193a      	adds	r2, r7, r4
 8003458:	6013      	str	r3, [r2, #0]
 800345a:	2301      	movs	r3, #1
 800345c:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800345e:	69fb      	ldr	r3, [r7, #28]
 8003460:	f383 8810 	msr	PRIMASK, r3
}
 8003464:	46c0      	nop			; (mov r8, r8)
 8003466:	687b      	ldr	r3, [r7, #4]
 8003468:	681b      	ldr	r3, [r3, #0]
 800346a:	689a      	ldr	r2, [r3, #8]
 800346c:	687b      	ldr	r3, [r7, #4]
 800346e:	681b      	ldr	r3, [r3, #0]
 8003470:	2101      	movs	r1, #1
 8003472:	438a      	bics	r2, r1
 8003474:	609a      	str	r2, [r3, #8]
 8003476:	193b      	adds	r3, r7, r4
 8003478:	681b      	ldr	r3, [r3, #0]
 800347a:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800347c:	6a3b      	ldr	r3, [r7, #32]
 800347e:	f383 8810 	msr	PRIMASK, r3
}
 8003482:	46c0      	nop			; (mov r8, r8)

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8003484:	687b      	ldr	r3, [r7, #4]
 8003486:	2280      	movs	r2, #128	; 0x80
 8003488:	2120      	movs	r1, #32
 800348a:	5099      	str	r1, [r3, r2]
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800348c:	687b      	ldr	r3, [r7, #4]
 800348e:	2200      	movs	r2, #0
 8003490:	661a      	str	r2, [r3, #96]	; 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8003492:	687b      	ldr	r3, [r7, #4]
 8003494:	2200      	movs	r2, #0
 8003496:	669a      	str	r2, [r3, #104]	; 0x68
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003498:	f3ef 8310 	mrs	r3, PRIMASK
 800349c:	627b      	str	r3, [r7, #36]	; 0x24
  return(result);
 800349e:	6a7b      	ldr	r3, [r7, #36]	; 0x24

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80034a0:	2480      	movs	r4, #128	; 0x80
 80034a2:	193a      	adds	r2, r7, r4
 80034a4:	6013      	str	r3, [r2, #0]
 80034a6:	2301      	movs	r3, #1
 80034a8:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80034aa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80034ac:	f383 8810 	msr	PRIMASK, r3
}
 80034b0:	46c0      	nop			; (mov r8, r8)
 80034b2:	687b      	ldr	r3, [r7, #4]
 80034b4:	681b      	ldr	r3, [r3, #0]
 80034b6:	681a      	ldr	r2, [r3, #0]
 80034b8:	687b      	ldr	r3, [r7, #4]
 80034ba:	681b      	ldr	r3, [r3, #0]
 80034bc:	2110      	movs	r1, #16
 80034be:	438a      	bics	r2, r1
 80034c0:	601a      	str	r2, [r3, #0]
 80034c2:	193b      	adds	r3, r7, r4
 80034c4:	681b      	ldr	r3, [r3, #0]
 80034c6:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80034c8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80034ca:	f383 8810 	msr	PRIMASK, r3
}
 80034ce:	46c0      	nop			; (mov r8, r8)

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80034d0:	687b      	ldr	r3, [r7, #4]
 80034d2:	2202      	movs	r2, #2
 80034d4:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80034d6:	183b      	adds	r3, r7, r0
 80034d8:	881a      	ldrh	r2, [r3, #0]
 80034da:	687b      	ldr	r3, [r7, #4]
 80034dc:	0011      	movs	r1, r2
 80034de:	0018      	movs	r0, r3
 80034e0:	f000 f860 	bl	80035a4 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 80034e4:	e044      	b.n	8003570 <HAL_UART_IRQHandler+0x5ac>
  }
#if defined(USART_CR1_UESM)
#if defined(USART_CR3_WUFIE)

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 80034e6:	23a4      	movs	r3, #164	; 0xa4
 80034e8:	18fb      	adds	r3, r7, r3
 80034ea:	681a      	ldr	r2, [r3, #0]
 80034ec:	2380      	movs	r3, #128	; 0x80
 80034ee:	035b      	lsls	r3, r3, #13
 80034f0:	4013      	ands	r3, r2
 80034f2:	d010      	beq.n	8003516 <HAL_UART_IRQHandler+0x552>
 80034f4:	239c      	movs	r3, #156	; 0x9c
 80034f6:	18fb      	adds	r3, r7, r3
 80034f8:	681a      	ldr	r2, [r3, #0]
 80034fa:	2380      	movs	r3, #128	; 0x80
 80034fc:	03db      	lsls	r3, r3, #15
 80034fe:	4013      	ands	r3, r2
 8003500:	d009      	beq.n	8003516 <HAL_UART_IRQHandler+0x552>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8003502:	687b      	ldr	r3, [r7, #4]
 8003504:	681b      	ldr	r3, [r3, #0]
 8003506:	2280      	movs	r2, #128	; 0x80
 8003508:	0352      	lsls	r2, r2, #13
 800350a:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 800350c:	687b      	ldr	r3, [r7, #4]
 800350e:	0018      	movs	r0, r3
 8003510:	f000 ff82 	bl	8004418 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8003514:	e02f      	b.n	8003576 <HAL_UART_IRQHandler+0x5b2>
  }
#endif /* USART_CR3_WUFIE */
#endif /* USART_CR1_UESM */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 8003516:	23a4      	movs	r3, #164	; 0xa4
 8003518:	18fb      	adds	r3, r7, r3
 800351a:	681b      	ldr	r3, [r3, #0]
 800351c:	2280      	movs	r2, #128	; 0x80
 800351e:	4013      	ands	r3, r2
 8003520:	d00f      	beq.n	8003542 <HAL_UART_IRQHandler+0x57e>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 8003522:	23a0      	movs	r3, #160	; 0xa0
 8003524:	18fb      	adds	r3, r7, r3
 8003526:	681b      	ldr	r3, [r3, #0]
 8003528:	2280      	movs	r2, #128	; 0x80
 800352a:	4013      	ands	r3, r2
 800352c:	d009      	beq.n	8003542 <HAL_UART_IRQHandler+0x57e>
  {
    if (huart->TxISR != NULL)
 800352e:	687b      	ldr	r3, [r7, #4]
 8003530:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003532:	2b00      	cmp	r3, #0
 8003534:	d01e      	beq.n	8003574 <HAL_UART_IRQHandler+0x5b0>
    {
      huart->TxISR(huart);
 8003536:	687b      	ldr	r3, [r7, #4]
 8003538:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800353a:	687a      	ldr	r2, [r7, #4]
 800353c:	0010      	movs	r0, r2
 800353e:	4798      	blx	r3
    }
    return;
 8003540:	e018      	b.n	8003574 <HAL_UART_IRQHandler+0x5b0>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8003542:	23a4      	movs	r3, #164	; 0xa4
 8003544:	18fb      	adds	r3, r7, r3
 8003546:	681b      	ldr	r3, [r3, #0]
 8003548:	2240      	movs	r2, #64	; 0x40
 800354a:	4013      	ands	r3, r2
 800354c:	d013      	beq.n	8003576 <HAL_UART_IRQHandler+0x5b2>
 800354e:	23a0      	movs	r3, #160	; 0xa0
 8003550:	18fb      	adds	r3, r7, r3
 8003552:	681b      	ldr	r3, [r3, #0]
 8003554:	2240      	movs	r2, #64	; 0x40
 8003556:	4013      	ands	r3, r2
 8003558:	d00d      	beq.n	8003576 <HAL_UART_IRQHandler+0x5b2>
  {
    UART_EndTransmit_IT(huart);
 800355a:	687b      	ldr	r3, [r7, #4]
 800355c:	0018      	movs	r0, r3
 800355e:	f000 fd78 	bl	8004052 <UART_EndTransmit_IT>
    return;
 8003562:	e008      	b.n	8003576 <HAL_UART_IRQHandler+0x5b2>
      return;
 8003564:	46c0      	nop			; (mov r8, r8)
 8003566:	e006      	b.n	8003576 <HAL_UART_IRQHandler+0x5b2>
    return;
 8003568:	46c0      	nop			; (mov r8, r8)
 800356a:	e004      	b.n	8003576 <HAL_UART_IRQHandler+0x5b2>
      return;
 800356c:	46c0      	nop			; (mov r8, r8)
 800356e:	e002      	b.n	8003576 <HAL_UART_IRQHandler+0x5b2>
      return;
 8003570:	46c0      	nop			; (mov r8, r8)
 8003572:	e000      	b.n	8003576 <HAL_UART_IRQHandler+0x5b2>
    return;
 8003574:	46c0      	nop			; (mov r8, r8)
  }

}
 8003576:	46bd      	mov	sp, r7
 8003578:	b02b      	add	sp, #172	; 0xac
 800357a:	bd90      	pop	{r4, r7, pc}
 800357c:	fffffeff 	.word	0xfffffeff
 8003580:	fffffedf 	.word	0xfffffedf

08003584 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8003584:	b580      	push	{r7, lr}
 8003586:	b082      	sub	sp, #8
 8003588:	af00      	add	r7, sp, #0
 800358a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 800358c:	46c0      	nop			; (mov r8, r8)
 800358e:	46bd      	mov	sp, r7
 8003590:	b002      	add	sp, #8
 8003592:	bd80      	pop	{r7, pc}

08003594 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8003594:	b580      	push	{r7, lr}
 8003596:	b082      	sub	sp, #8
 8003598:	af00      	add	r7, sp, #0
 800359a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 800359c:	46c0      	nop			; (mov r8, r8)
 800359e:	46bd      	mov	sp, r7
 80035a0:	b002      	add	sp, #8
 80035a2:	bd80      	pop	{r7, pc}

080035a4 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80035a4:	b580      	push	{r7, lr}
 80035a6:	b082      	sub	sp, #8
 80035a8:	af00      	add	r7, sp, #0
 80035aa:	6078      	str	r0, [r7, #4]
 80035ac:	000a      	movs	r2, r1
 80035ae:	1cbb      	adds	r3, r7, #2
 80035b0:	801a      	strh	r2, [r3, #0]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80035b2:	46c0      	nop			; (mov r8, r8)
 80035b4:	46bd      	mov	sp, r7
 80035b6:	b002      	add	sp, #8
 80035b8:	bd80      	pop	{r7, pc}
	...

080035bc <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80035bc:	b580      	push	{r7, lr}
 80035be:	b088      	sub	sp, #32
 80035c0:	af00      	add	r7, sp, #0
 80035c2:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80035c4:	231e      	movs	r3, #30
 80035c6:	18fb      	adds	r3, r7, r3
 80035c8:	2200      	movs	r2, #0
 80035ca:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80035cc:	687b      	ldr	r3, [r7, #4]
 80035ce:	689a      	ldr	r2, [r3, #8]
 80035d0:	687b      	ldr	r3, [r7, #4]
 80035d2:	691b      	ldr	r3, [r3, #16]
 80035d4:	431a      	orrs	r2, r3
 80035d6:	687b      	ldr	r3, [r7, #4]
 80035d8:	695b      	ldr	r3, [r3, #20]
 80035da:	431a      	orrs	r2, r3
 80035dc:	687b      	ldr	r3, [r7, #4]
 80035de:	69db      	ldr	r3, [r3, #28]
 80035e0:	4313      	orrs	r3, r2
 80035e2:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80035e4:	687b      	ldr	r3, [r7, #4]
 80035e6:	681b      	ldr	r3, [r3, #0]
 80035e8:	681b      	ldr	r3, [r3, #0]
 80035ea:	4aaf      	ldr	r2, [pc, #700]	; (80038a8 <UART_SetConfig+0x2ec>)
 80035ec:	4013      	ands	r3, r2
 80035ee:	0019      	movs	r1, r3
 80035f0:	687b      	ldr	r3, [r7, #4]
 80035f2:	681b      	ldr	r3, [r3, #0]
 80035f4:	697a      	ldr	r2, [r7, #20]
 80035f6:	430a      	orrs	r2, r1
 80035f8:	601a      	str	r2, [r3, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80035fa:	687b      	ldr	r3, [r7, #4]
 80035fc:	681b      	ldr	r3, [r3, #0]
 80035fe:	685b      	ldr	r3, [r3, #4]
 8003600:	4aaa      	ldr	r2, [pc, #680]	; (80038ac <UART_SetConfig+0x2f0>)
 8003602:	4013      	ands	r3, r2
 8003604:	0019      	movs	r1, r3
 8003606:	687b      	ldr	r3, [r7, #4]
 8003608:	68da      	ldr	r2, [r3, #12]
 800360a:	687b      	ldr	r3, [r7, #4]
 800360c:	681b      	ldr	r3, [r3, #0]
 800360e:	430a      	orrs	r2, r1
 8003610:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8003612:	687b      	ldr	r3, [r7, #4]
 8003614:	699b      	ldr	r3, [r3, #24]
 8003616:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8003618:	687b      	ldr	r3, [r7, #4]
 800361a:	6a1b      	ldr	r3, [r3, #32]
 800361c:	697a      	ldr	r2, [r7, #20]
 800361e:	4313      	orrs	r3, r2
 8003620:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8003622:	687b      	ldr	r3, [r7, #4]
 8003624:	681b      	ldr	r3, [r3, #0]
 8003626:	689b      	ldr	r3, [r3, #8]
 8003628:	4aa1      	ldr	r2, [pc, #644]	; (80038b0 <UART_SetConfig+0x2f4>)
 800362a:	4013      	ands	r3, r2
 800362c:	0019      	movs	r1, r3
 800362e:	687b      	ldr	r3, [r7, #4]
 8003630:	681b      	ldr	r3, [r3, #0]
 8003632:	697a      	ldr	r2, [r7, #20]
 8003634:	430a      	orrs	r2, r1
 8003636:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8003638:	687b      	ldr	r3, [r7, #4]
 800363a:	681b      	ldr	r3, [r3, #0]
 800363c:	4a9d      	ldr	r2, [pc, #628]	; (80038b4 <UART_SetConfig+0x2f8>)
 800363e:	4293      	cmp	r3, r2
 8003640:	d127      	bne.n	8003692 <UART_SetConfig+0xd6>
 8003642:	4b9d      	ldr	r3, [pc, #628]	; (80038b8 <UART_SetConfig+0x2fc>)
 8003644:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003646:	2203      	movs	r2, #3
 8003648:	4013      	ands	r3, r2
 800364a:	2b03      	cmp	r3, #3
 800364c:	d00d      	beq.n	800366a <UART_SetConfig+0xae>
 800364e:	d81b      	bhi.n	8003688 <UART_SetConfig+0xcc>
 8003650:	2b02      	cmp	r3, #2
 8003652:	d014      	beq.n	800367e <UART_SetConfig+0xc2>
 8003654:	d818      	bhi.n	8003688 <UART_SetConfig+0xcc>
 8003656:	2b00      	cmp	r3, #0
 8003658:	d002      	beq.n	8003660 <UART_SetConfig+0xa4>
 800365a:	2b01      	cmp	r3, #1
 800365c:	d00a      	beq.n	8003674 <UART_SetConfig+0xb8>
 800365e:	e013      	b.n	8003688 <UART_SetConfig+0xcc>
 8003660:	231f      	movs	r3, #31
 8003662:	18fb      	adds	r3, r7, r3
 8003664:	2200      	movs	r2, #0
 8003666:	701a      	strb	r2, [r3, #0]
 8003668:	e065      	b.n	8003736 <UART_SetConfig+0x17a>
 800366a:	231f      	movs	r3, #31
 800366c:	18fb      	adds	r3, r7, r3
 800366e:	2202      	movs	r2, #2
 8003670:	701a      	strb	r2, [r3, #0]
 8003672:	e060      	b.n	8003736 <UART_SetConfig+0x17a>
 8003674:	231f      	movs	r3, #31
 8003676:	18fb      	adds	r3, r7, r3
 8003678:	2204      	movs	r2, #4
 800367a:	701a      	strb	r2, [r3, #0]
 800367c:	e05b      	b.n	8003736 <UART_SetConfig+0x17a>
 800367e:	231f      	movs	r3, #31
 8003680:	18fb      	adds	r3, r7, r3
 8003682:	2208      	movs	r2, #8
 8003684:	701a      	strb	r2, [r3, #0]
 8003686:	e056      	b.n	8003736 <UART_SetConfig+0x17a>
 8003688:	231f      	movs	r3, #31
 800368a:	18fb      	adds	r3, r7, r3
 800368c:	2210      	movs	r2, #16
 800368e:	701a      	strb	r2, [r3, #0]
 8003690:	e051      	b.n	8003736 <UART_SetConfig+0x17a>
 8003692:	687b      	ldr	r3, [r7, #4]
 8003694:	681b      	ldr	r3, [r3, #0]
 8003696:	4a89      	ldr	r2, [pc, #548]	; (80038bc <UART_SetConfig+0x300>)
 8003698:	4293      	cmp	r3, r2
 800369a:	d134      	bne.n	8003706 <UART_SetConfig+0x14a>
 800369c:	4b86      	ldr	r3, [pc, #536]	; (80038b8 <UART_SetConfig+0x2fc>)
 800369e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80036a0:	23c0      	movs	r3, #192	; 0xc0
 80036a2:	029b      	lsls	r3, r3, #10
 80036a4:	4013      	ands	r3, r2
 80036a6:	22c0      	movs	r2, #192	; 0xc0
 80036a8:	0292      	lsls	r2, r2, #10
 80036aa:	4293      	cmp	r3, r2
 80036ac:	d017      	beq.n	80036de <UART_SetConfig+0x122>
 80036ae:	22c0      	movs	r2, #192	; 0xc0
 80036b0:	0292      	lsls	r2, r2, #10
 80036b2:	4293      	cmp	r3, r2
 80036b4:	d822      	bhi.n	80036fc <UART_SetConfig+0x140>
 80036b6:	2280      	movs	r2, #128	; 0x80
 80036b8:	0292      	lsls	r2, r2, #10
 80036ba:	4293      	cmp	r3, r2
 80036bc:	d019      	beq.n	80036f2 <UART_SetConfig+0x136>
 80036be:	2280      	movs	r2, #128	; 0x80
 80036c0:	0292      	lsls	r2, r2, #10
 80036c2:	4293      	cmp	r3, r2
 80036c4:	d81a      	bhi.n	80036fc <UART_SetConfig+0x140>
 80036c6:	2b00      	cmp	r3, #0
 80036c8:	d004      	beq.n	80036d4 <UART_SetConfig+0x118>
 80036ca:	2280      	movs	r2, #128	; 0x80
 80036cc:	0252      	lsls	r2, r2, #9
 80036ce:	4293      	cmp	r3, r2
 80036d0:	d00a      	beq.n	80036e8 <UART_SetConfig+0x12c>
 80036d2:	e013      	b.n	80036fc <UART_SetConfig+0x140>
 80036d4:	231f      	movs	r3, #31
 80036d6:	18fb      	adds	r3, r7, r3
 80036d8:	2200      	movs	r2, #0
 80036da:	701a      	strb	r2, [r3, #0]
 80036dc:	e02b      	b.n	8003736 <UART_SetConfig+0x17a>
 80036de:	231f      	movs	r3, #31
 80036e0:	18fb      	adds	r3, r7, r3
 80036e2:	2202      	movs	r2, #2
 80036e4:	701a      	strb	r2, [r3, #0]
 80036e6:	e026      	b.n	8003736 <UART_SetConfig+0x17a>
 80036e8:	231f      	movs	r3, #31
 80036ea:	18fb      	adds	r3, r7, r3
 80036ec:	2204      	movs	r2, #4
 80036ee:	701a      	strb	r2, [r3, #0]
 80036f0:	e021      	b.n	8003736 <UART_SetConfig+0x17a>
 80036f2:	231f      	movs	r3, #31
 80036f4:	18fb      	adds	r3, r7, r3
 80036f6:	2208      	movs	r2, #8
 80036f8:	701a      	strb	r2, [r3, #0]
 80036fa:	e01c      	b.n	8003736 <UART_SetConfig+0x17a>
 80036fc:	231f      	movs	r3, #31
 80036fe:	18fb      	adds	r3, r7, r3
 8003700:	2210      	movs	r2, #16
 8003702:	701a      	strb	r2, [r3, #0]
 8003704:	e017      	b.n	8003736 <UART_SetConfig+0x17a>
 8003706:	687b      	ldr	r3, [r7, #4]
 8003708:	681b      	ldr	r3, [r3, #0]
 800370a:	4a6d      	ldr	r2, [pc, #436]	; (80038c0 <UART_SetConfig+0x304>)
 800370c:	4293      	cmp	r3, r2
 800370e:	d104      	bne.n	800371a <UART_SetConfig+0x15e>
 8003710:	231f      	movs	r3, #31
 8003712:	18fb      	adds	r3, r7, r3
 8003714:	2200      	movs	r2, #0
 8003716:	701a      	strb	r2, [r3, #0]
 8003718:	e00d      	b.n	8003736 <UART_SetConfig+0x17a>
 800371a:	687b      	ldr	r3, [r7, #4]
 800371c:	681b      	ldr	r3, [r3, #0]
 800371e:	4a69      	ldr	r2, [pc, #420]	; (80038c4 <UART_SetConfig+0x308>)
 8003720:	4293      	cmp	r3, r2
 8003722:	d104      	bne.n	800372e <UART_SetConfig+0x172>
 8003724:	231f      	movs	r3, #31
 8003726:	18fb      	adds	r3, r7, r3
 8003728:	2200      	movs	r2, #0
 800372a:	701a      	strb	r2, [r3, #0]
 800372c:	e003      	b.n	8003736 <UART_SetConfig+0x17a>
 800372e:	231f      	movs	r3, #31
 8003730:	18fb      	adds	r3, r7, r3
 8003732:	2210      	movs	r2, #16
 8003734:	701a      	strb	r2, [r3, #0]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003736:	687b      	ldr	r3, [r7, #4]
 8003738:	69da      	ldr	r2, [r3, #28]
 800373a:	2380      	movs	r3, #128	; 0x80
 800373c:	021b      	lsls	r3, r3, #8
 800373e:	429a      	cmp	r2, r3
 8003740:	d15c      	bne.n	80037fc <UART_SetConfig+0x240>
  {
    switch (clocksource)
 8003742:	231f      	movs	r3, #31
 8003744:	18fb      	adds	r3, r7, r3
 8003746:	781b      	ldrb	r3, [r3, #0]
 8003748:	2b08      	cmp	r3, #8
 800374a:	d015      	beq.n	8003778 <UART_SetConfig+0x1bc>
 800374c:	dc18      	bgt.n	8003780 <UART_SetConfig+0x1c4>
 800374e:	2b04      	cmp	r3, #4
 8003750:	d00d      	beq.n	800376e <UART_SetConfig+0x1b2>
 8003752:	dc15      	bgt.n	8003780 <UART_SetConfig+0x1c4>
 8003754:	2b00      	cmp	r3, #0
 8003756:	d002      	beq.n	800375e <UART_SetConfig+0x1a2>
 8003758:	2b02      	cmp	r3, #2
 800375a:	d005      	beq.n	8003768 <UART_SetConfig+0x1ac>
 800375c:	e010      	b.n	8003780 <UART_SetConfig+0x1c4>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800375e:	f7fe f97b 	bl	8001a58 <HAL_RCC_GetPCLK1Freq>
 8003762:	0003      	movs	r3, r0
 8003764:	61bb      	str	r3, [r7, #24]
        break;
 8003766:	e012      	b.n	800378e <UART_SetConfig+0x1d2>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003768:	4b57      	ldr	r3, [pc, #348]	; (80038c8 <UART_SetConfig+0x30c>)
 800376a:	61bb      	str	r3, [r7, #24]
        break;
 800376c:	e00f      	b.n	800378e <UART_SetConfig+0x1d2>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800376e:	f7fe f8f7 	bl	8001960 <HAL_RCC_GetSysClockFreq>
 8003772:	0003      	movs	r3, r0
 8003774:	61bb      	str	r3, [r7, #24]
        break;
 8003776:	e00a      	b.n	800378e <UART_SetConfig+0x1d2>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003778:	2380      	movs	r3, #128	; 0x80
 800377a:	021b      	lsls	r3, r3, #8
 800377c:	61bb      	str	r3, [r7, #24]
        break;
 800377e:	e006      	b.n	800378e <UART_SetConfig+0x1d2>
      default:
        pclk = 0U;
 8003780:	2300      	movs	r3, #0
 8003782:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8003784:	231e      	movs	r3, #30
 8003786:	18fb      	adds	r3, r7, r3
 8003788:	2201      	movs	r2, #1
 800378a:	701a      	strb	r2, [r3, #0]
        break;
 800378c:	46c0      	nop			; (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800378e:	69bb      	ldr	r3, [r7, #24]
 8003790:	2b00      	cmp	r3, #0
 8003792:	d100      	bne.n	8003796 <UART_SetConfig+0x1da>
 8003794:	e07a      	b.n	800388c <UART_SetConfig+0x2d0>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8003796:	69bb      	ldr	r3, [r7, #24]
 8003798:	005a      	lsls	r2, r3, #1
 800379a:	687b      	ldr	r3, [r7, #4]
 800379c:	685b      	ldr	r3, [r3, #4]
 800379e:	085b      	lsrs	r3, r3, #1
 80037a0:	18d2      	adds	r2, r2, r3
 80037a2:	687b      	ldr	r3, [r7, #4]
 80037a4:	685b      	ldr	r3, [r3, #4]
 80037a6:	0019      	movs	r1, r3
 80037a8:	0010      	movs	r0, r2
 80037aa:	f7fc fcb5 	bl	8000118 <__udivsi3>
 80037ae:	0003      	movs	r3, r0
 80037b0:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80037b2:	693b      	ldr	r3, [r7, #16]
 80037b4:	2b0f      	cmp	r3, #15
 80037b6:	d91c      	bls.n	80037f2 <UART_SetConfig+0x236>
 80037b8:	693a      	ldr	r2, [r7, #16]
 80037ba:	2380      	movs	r3, #128	; 0x80
 80037bc:	025b      	lsls	r3, r3, #9
 80037be:	429a      	cmp	r2, r3
 80037c0:	d217      	bcs.n	80037f2 <UART_SetConfig+0x236>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80037c2:	693b      	ldr	r3, [r7, #16]
 80037c4:	b29a      	uxth	r2, r3
 80037c6:	200e      	movs	r0, #14
 80037c8:	183b      	adds	r3, r7, r0
 80037ca:	210f      	movs	r1, #15
 80037cc:	438a      	bics	r2, r1
 80037ce:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80037d0:	693b      	ldr	r3, [r7, #16]
 80037d2:	085b      	lsrs	r3, r3, #1
 80037d4:	b29b      	uxth	r3, r3
 80037d6:	2207      	movs	r2, #7
 80037d8:	4013      	ands	r3, r2
 80037da:	b299      	uxth	r1, r3
 80037dc:	183b      	adds	r3, r7, r0
 80037de:	183a      	adds	r2, r7, r0
 80037e0:	8812      	ldrh	r2, [r2, #0]
 80037e2:	430a      	orrs	r2, r1
 80037e4:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
 80037e6:	687b      	ldr	r3, [r7, #4]
 80037e8:	681b      	ldr	r3, [r3, #0]
 80037ea:	183a      	adds	r2, r7, r0
 80037ec:	8812      	ldrh	r2, [r2, #0]
 80037ee:	60da      	str	r2, [r3, #12]
 80037f0:	e04c      	b.n	800388c <UART_SetConfig+0x2d0>
      }
      else
      {
        ret = HAL_ERROR;
 80037f2:	231e      	movs	r3, #30
 80037f4:	18fb      	adds	r3, r7, r3
 80037f6:	2201      	movs	r2, #1
 80037f8:	701a      	strb	r2, [r3, #0]
 80037fa:	e047      	b.n	800388c <UART_SetConfig+0x2d0>
      }
    }
  }
  else
  {
    switch (clocksource)
 80037fc:	231f      	movs	r3, #31
 80037fe:	18fb      	adds	r3, r7, r3
 8003800:	781b      	ldrb	r3, [r3, #0]
 8003802:	2b08      	cmp	r3, #8
 8003804:	d015      	beq.n	8003832 <UART_SetConfig+0x276>
 8003806:	dc18      	bgt.n	800383a <UART_SetConfig+0x27e>
 8003808:	2b04      	cmp	r3, #4
 800380a:	d00d      	beq.n	8003828 <UART_SetConfig+0x26c>
 800380c:	dc15      	bgt.n	800383a <UART_SetConfig+0x27e>
 800380e:	2b00      	cmp	r3, #0
 8003810:	d002      	beq.n	8003818 <UART_SetConfig+0x25c>
 8003812:	2b02      	cmp	r3, #2
 8003814:	d005      	beq.n	8003822 <UART_SetConfig+0x266>
 8003816:	e010      	b.n	800383a <UART_SetConfig+0x27e>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003818:	f7fe f91e 	bl	8001a58 <HAL_RCC_GetPCLK1Freq>
 800381c:	0003      	movs	r3, r0
 800381e:	61bb      	str	r3, [r7, #24]
        break;
 8003820:	e012      	b.n	8003848 <UART_SetConfig+0x28c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003822:	4b29      	ldr	r3, [pc, #164]	; (80038c8 <UART_SetConfig+0x30c>)
 8003824:	61bb      	str	r3, [r7, #24]
        break;
 8003826:	e00f      	b.n	8003848 <UART_SetConfig+0x28c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003828:	f7fe f89a 	bl	8001960 <HAL_RCC_GetSysClockFreq>
 800382c:	0003      	movs	r3, r0
 800382e:	61bb      	str	r3, [r7, #24]
        break;
 8003830:	e00a      	b.n	8003848 <UART_SetConfig+0x28c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003832:	2380      	movs	r3, #128	; 0x80
 8003834:	021b      	lsls	r3, r3, #8
 8003836:	61bb      	str	r3, [r7, #24]
        break;
 8003838:	e006      	b.n	8003848 <UART_SetConfig+0x28c>
      default:
        pclk = 0U;
 800383a:	2300      	movs	r3, #0
 800383c:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 800383e:	231e      	movs	r3, #30
 8003840:	18fb      	adds	r3, r7, r3
 8003842:	2201      	movs	r2, #1
 8003844:	701a      	strb	r2, [r3, #0]
        break;
 8003846:	46c0      	nop			; (mov r8, r8)
    }

    if (pclk != 0U)
 8003848:	69bb      	ldr	r3, [r7, #24]
 800384a:	2b00      	cmp	r3, #0
 800384c:	d01e      	beq.n	800388c <UART_SetConfig+0x2d0>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800384e:	687b      	ldr	r3, [r7, #4]
 8003850:	685b      	ldr	r3, [r3, #4]
 8003852:	085a      	lsrs	r2, r3, #1
 8003854:	69bb      	ldr	r3, [r7, #24]
 8003856:	18d2      	adds	r2, r2, r3
 8003858:	687b      	ldr	r3, [r7, #4]
 800385a:	685b      	ldr	r3, [r3, #4]
 800385c:	0019      	movs	r1, r3
 800385e:	0010      	movs	r0, r2
 8003860:	f7fc fc5a 	bl	8000118 <__udivsi3>
 8003864:	0003      	movs	r3, r0
 8003866:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003868:	693b      	ldr	r3, [r7, #16]
 800386a:	2b0f      	cmp	r3, #15
 800386c:	d90a      	bls.n	8003884 <UART_SetConfig+0x2c8>
 800386e:	693a      	ldr	r2, [r7, #16]
 8003870:	2380      	movs	r3, #128	; 0x80
 8003872:	025b      	lsls	r3, r3, #9
 8003874:	429a      	cmp	r2, r3
 8003876:	d205      	bcs.n	8003884 <UART_SetConfig+0x2c8>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8003878:	693b      	ldr	r3, [r7, #16]
 800387a:	b29a      	uxth	r2, r3
 800387c:	687b      	ldr	r3, [r7, #4]
 800387e:	681b      	ldr	r3, [r3, #0]
 8003880:	60da      	str	r2, [r3, #12]
 8003882:	e003      	b.n	800388c <UART_SetConfig+0x2d0>
      }
      else
      {
        ret = HAL_ERROR;
 8003884:	231e      	movs	r3, #30
 8003886:	18fb      	adds	r3, r7, r3
 8003888:	2201      	movs	r2, #1
 800388a:	701a      	strb	r2, [r3, #0]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800388c:	687b      	ldr	r3, [r7, #4]
 800388e:	2200      	movs	r2, #0
 8003890:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 8003892:	687b      	ldr	r3, [r7, #4]
 8003894:	2200      	movs	r2, #0
 8003896:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 8003898:	231e      	movs	r3, #30
 800389a:	18fb      	adds	r3, r7, r3
 800389c:	781b      	ldrb	r3, [r3, #0]
}
 800389e:	0018      	movs	r0, r3
 80038a0:	46bd      	mov	sp, r7
 80038a2:	b008      	add	sp, #32
 80038a4:	bd80      	pop	{r7, pc}
 80038a6:	46c0      	nop			; (mov r8, r8)
 80038a8:	efff69f3 	.word	0xefff69f3
 80038ac:	ffffcfff 	.word	0xffffcfff
 80038b0:	fffff4ff 	.word	0xfffff4ff
 80038b4:	40013800 	.word	0x40013800
 80038b8:	40021000 	.word	0x40021000
 80038bc:	40004400 	.word	0x40004400
 80038c0:	40004800 	.word	0x40004800
 80038c4:	40004c00 	.word	0x40004c00
 80038c8:	007a1200 	.word	0x007a1200

080038cc <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80038cc:	b580      	push	{r7, lr}
 80038ce:	b082      	sub	sp, #8
 80038d0:	af00      	add	r7, sp, #0
 80038d2:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80038d4:	687b      	ldr	r3, [r7, #4]
 80038d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80038d8:	2201      	movs	r2, #1
 80038da:	4013      	ands	r3, r2
 80038dc:	d00b      	beq.n	80038f6 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80038de:	687b      	ldr	r3, [r7, #4]
 80038e0:	681b      	ldr	r3, [r3, #0]
 80038e2:	685b      	ldr	r3, [r3, #4]
 80038e4:	4a4a      	ldr	r2, [pc, #296]	; (8003a10 <UART_AdvFeatureConfig+0x144>)
 80038e6:	4013      	ands	r3, r2
 80038e8:	0019      	movs	r1, r3
 80038ea:	687b      	ldr	r3, [r7, #4]
 80038ec:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80038ee:	687b      	ldr	r3, [r7, #4]
 80038f0:	681b      	ldr	r3, [r3, #0]
 80038f2:	430a      	orrs	r2, r1
 80038f4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80038f6:	687b      	ldr	r3, [r7, #4]
 80038f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80038fa:	2202      	movs	r2, #2
 80038fc:	4013      	ands	r3, r2
 80038fe:	d00b      	beq.n	8003918 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8003900:	687b      	ldr	r3, [r7, #4]
 8003902:	681b      	ldr	r3, [r3, #0]
 8003904:	685b      	ldr	r3, [r3, #4]
 8003906:	4a43      	ldr	r2, [pc, #268]	; (8003a14 <UART_AdvFeatureConfig+0x148>)
 8003908:	4013      	ands	r3, r2
 800390a:	0019      	movs	r1, r3
 800390c:	687b      	ldr	r3, [r7, #4]
 800390e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003910:	687b      	ldr	r3, [r7, #4]
 8003912:	681b      	ldr	r3, [r3, #0]
 8003914:	430a      	orrs	r2, r1
 8003916:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8003918:	687b      	ldr	r3, [r7, #4]
 800391a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800391c:	2204      	movs	r2, #4
 800391e:	4013      	ands	r3, r2
 8003920:	d00b      	beq.n	800393a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8003922:	687b      	ldr	r3, [r7, #4]
 8003924:	681b      	ldr	r3, [r3, #0]
 8003926:	685b      	ldr	r3, [r3, #4]
 8003928:	4a3b      	ldr	r2, [pc, #236]	; (8003a18 <UART_AdvFeatureConfig+0x14c>)
 800392a:	4013      	ands	r3, r2
 800392c:	0019      	movs	r1, r3
 800392e:	687b      	ldr	r3, [r7, #4]
 8003930:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003932:	687b      	ldr	r3, [r7, #4]
 8003934:	681b      	ldr	r3, [r3, #0]
 8003936:	430a      	orrs	r2, r1
 8003938:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800393a:	687b      	ldr	r3, [r7, #4]
 800393c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800393e:	2208      	movs	r2, #8
 8003940:	4013      	ands	r3, r2
 8003942:	d00b      	beq.n	800395c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8003944:	687b      	ldr	r3, [r7, #4]
 8003946:	681b      	ldr	r3, [r3, #0]
 8003948:	685b      	ldr	r3, [r3, #4]
 800394a:	4a34      	ldr	r2, [pc, #208]	; (8003a1c <UART_AdvFeatureConfig+0x150>)
 800394c:	4013      	ands	r3, r2
 800394e:	0019      	movs	r1, r3
 8003950:	687b      	ldr	r3, [r7, #4]
 8003952:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003954:	687b      	ldr	r3, [r7, #4]
 8003956:	681b      	ldr	r3, [r3, #0]
 8003958:	430a      	orrs	r2, r1
 800395a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800395c:	687b      	ldr	r3, [r7, #4]
 800395e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003960:	2210      	movs	r2, #16
 8003962:	4013      	ands	r3, r2
 8003964:	d00b      	beq.n	800397e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8003966:	687b      	ldr	r3, [r7, #4]
 8003968:	681b      	ldr	r3, [r3, #0]
 800396a:	689b      	ldr	r3, [r3, #8]
 800396c:	4a2c      	ldr	r2, [pc, #176]	; (8003a20 <UART_AdvFeatureConfig+0x154>)
 800396e:	4013      	ands	r3, r2
 8003970:	0019      	movs	r1, r3
 8003972:	687b      	ldr	r3, [r7, #4]
 8003974:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003976:	687b      	ldr	r3, [r7, #4]
 8003978:	681b      	ldr	r3, [r3, #0]
 800397a:	430a      	orrs	r2, r1
 800397c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800397e:	687b      	ldr	r3, [r7, #4]
 8003980:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003982:	2220      	movs	r2, #32
 8003984:	4013      	ands	r3, r2
 8003986:	d00b      	beq.n	80039a0 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8003988:	687b      	ldr	r3, [r7, #4]
 800398a:	681b      	ldr	r3, [r3, #0]
 800398c:	689b      	ldr	r3, [r3, #8]
 800398e:	4a25      	ldr	r2, [pc, #148]	; (8003a24 <UART_AdvFeatureConfig+0x158>)
 8003990:	4013      	ands	r3, r2
 8003992:	0019      	movs	r1, r3
 8003994:	687b      	ldr	r3, [r7, #4]
 8003996:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003998:	687b      	ldr	r3, [r7, #4]
 800399a:	681b      	ldr	r3, [r3, #0]
 800399c:	430a      	orrs	r2, r1
 800399e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80039a0:	687b      	ldr	r3, [r7, #4]
 80039a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80039a4:	2240      	movs	r2, #64	; 0x40
 80039a6:	4013      	ands	r3, r2
 80039a8:	d01d      	beq.n	80039e6 <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80039aa:	687b      	ldr	r3, [r7, #4]
 80039ac:	681b      	ldr	r3, [r3, #0]
 80039ae:	685b      	ldr	r3, [r3, #4]
 80039b0:	4a1d      	ldr	r2, [pc, #116]	; (8003a28 <UART_AdvFeatureConfig+0x15c>)
 80039b2:	4013      	ands	r3, r2
 80039b4:	0019      	movs	r1, r3
 80039b6:	687b      	ldr	r3, [r7, #4]
 80039b8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80039ba:	687b      	ldr	r3, [r7, #4]
 80039bc:	681b      	ldr	r3, [r3, #0]
 80039be:	430a      	orrs	r2, r1
 80039c0:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80039c2:	687b      	ldr	r3, [r7, #4]
 80039c4:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80039c6:	2380      	movs	r3, #128	; 0x80
 80039c8:	035b      	lsls	r3, r3, #13
 80039ca:	429a      	cmp	r2, r3
 80039cc:	d10b      	bne.n	80039e6 <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80039ce:	687b      	ldr	r3, [r7, #4]
 80039d0:	681b      	ldr	r3, [r3, #0]
 80039d2:	685b      	ldr	r3, [r3, #4]
 80039d4:	4a15      	ldr	r2, [pc, #84]	; (8003a2c <UART_AdvFeatureConfig+0x160>)
 80039d6:	4013      	ands	r3, r2
 80039d8:	0019      	movs	r1, r3
 80039da:	687b      	ldr	r3, [r7, #4]
 80039dc:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80039de:	687b      	ldr	r3, [r7, #4]
 80039e0:	681b      	ldr	r3, [r3, #0]
 80039e2:	430a      	orrs	r2, r1
 80039e4:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80039e6:	687b      	ldr	r3, [r7, #4]
 80039e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80039ea:	2280      	movs	r2, #128	; 0x80
 80039ec:	4013      	ands	r3, r2
 80039ee:	d00b      	beq.n	8003a08 <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80039f0:	687b      	ldr	r3, [r7, #4]
 80039f2:	681b      	ldr	r3, [r3, #0]
 80039f4:	685b      	ldr	r3, [r3, #4]
 80039f6:	4a0e      	ldr	r2, [pc, #56]	; (8003a30 <UART_AdvFeatureConfig+0x164>)
 80039f8:	4013      	ands	r3, r2
 80039fa:	0019      	movs	r1, r3
 80039fc:	687b      	ldr	r3, [r7, #4]
 80039fe:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8003a00:	687b      	ldr	r3, [r7, #4]
 8003a02:	681b      	ldr	r3, [r3, #0]
 8003a04:	430a      	orrs	r2, r1
 8003a06:	605a      	str	r2, [r3, #4]
  }
}
 8003a08:	46c0      	nop			; (mov r8, r8)
 8003a0a:	46bd      	mov	sp, r7
 8003a0c:	b002      	add	sp, #8
 8003a0e:	bd80      	pop	{r7, pc}
 8003a10:	fffdffff 	.word	0xfffdffff
 8003a14:	fffeffff 	.word	0xfffeffff
 8003a18:	fffbffff 	.word	0xfffbffff
 8003a1c:	ffff7fff 	.word	0xffff7fff
 8003a20:	ffffefff 	.word	0xffffefff
 8003a24:	ffffdfff 	.word	0xffffdfff
 8003a28:	ffefffff 	.word	0xffefffff
 8003a2c:	ff9fffff 	.word	0xff9fffff
 8003a30:	fff7ffff 	.word	0xfff7ffff

08003a34 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8003a34:	b580      	push	{r7, lr}
 8003a36:	b092      	sub	sp, #72	; 0x48
 8003a38:	af02      	add	r7, sp, #8
 8003a3a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003a3c:	687b      	ldr	r3, [r7, #4]
 8003a3e:	2284      	movs	r2, #132	; 0x84
 8003a40:	2100      	movs	r1, #0
 8003a42:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8003a44:	f7fd f830 	bl	8000aa8 <HAL_GetTick>
 8003a48:	0003      	movs	r3, r0
 8003a4a:	63fb      	str	r3, [r7, #60]	; 0x3c

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8003a4c:	687b      	ldr	r3, [r7, #4]
 8003a4e:	681b      	ldr	r3, [r3, #0]
 8003a50:	681b      	ldr	r3, [r3, #0]
 8003a52:	2208      	movs	r2, #8
 8003a54:	4013      	ands	r3, r2
 8003a56:	2b08      	cmp	r3, #8
 8003a58:	d12c      	bne.n	8003ab4 <UART_CheckIdleState+0x80>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003a5a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003a5c:	2280      	movs	r2, #128	; 0x80
 8003a5e:	0391      	lsls	r1, r2, #14
 8003a60:	6878      	ldr	r0, [r7, #4]
 8003a62:	4a46      	ldr	r2, [pc, #280]	; (8003b7c <UART_CheckIdleState+0x148>)
 8003a64:	9200      	str	r2, [sp, #0]
 8003a66:	2200      	movs	r2, #0
 8003a68:	f000 f88c 	bl	8003b84 <UART_WaitOnFlagUntilTimeout>
 8003a6c:	1e03      	subs	r3, r0, #0
 8003a6e:	d021      	beq.n	8003ab4 <UART_CheckIdleState+0x80>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003a70:	f3ef 8310 	mrs	r3, PRIMASK
 8003a74:	627b      	str	r3, [r7, #36]	; 0x24
  return(result);
 8003a76:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 8003a78:	63bb      	str	r3, [r7, #56]	; 0x38
 8003a7a:	2301      	movs	r3, #1
 8003a7c:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003a7e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003a80:	f383 8810 	msr	PRIMASK, r3
}
 8003a84:	46c0      	nop			; (mov r8, r8)
 8003a86:	687b      	ldr	r3, [r7, #4]
 8003a88:	681b      	ldr	r3, [r3, #0]
 8003a8a:	681a      	ldr	r2, [r3, #0]
 8003a8c:	687b      	ldr	r3, [r7, #4]
 8003a8e:	681b      	ldr	r3, [r3, #0]
 8003a90:	2180      	movs	r1, #128	; 0x80
 8003a92:	438a      	bics	r2, r1
 8003a94:	601a      	str	r2, [r3, #0]
 8003a96:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003a98:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003a9a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003a9c:	f383 8810 	msr	PRIMASK, r3
}
 8003aa0:	46c0      	nop			; (mov r8, r8)

      huart->gState = HAL_UART_STATE_READY;
 8003aa2:	687b      	ldr	r3, [r7, #4]
 8003aa4:	2220      	movs	r2, #32
 8003aa6:	67da      	str	r2, [r3, #124]	; 0x7c

      __HAL_UNLOCK(huart);
 8003aa8:	687b      	ldr	r3, [r7, #4]
 8003aaa:	2278      	movs	r2, #120	; 0x78
 8003aac:	2100      	movs	r1, #0
 8003aae:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003ab0:	2303      	movs	r3, #3
 8003ab2:	e05f      	b.n	8003b74 <UART_CheckIdleState+0x140>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8003ab4:	687b      	ldr	r3, [r7, #4]
 8003ab6:	681b      	ldr	r3, [r3, #0]
 8003ab8:	681b      	ldr	r3, [r3, #0]
 8003aba:	2204      	movs	r2, #4
 8003abc:	4013      	ands	r3, r2
 8003abe:	2b04      	cmp	r3, #4
 8003ac0:	d146      	bne.n	8003b50 <UART_CheckIdleState+0x11c>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003ac2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003ac4:	2280      	movs	r2, #128	; 0x80
 8003ac6:	03d1      	lsls	r1, r2, #15
 8003ac8:	6878      	ldr	r0, [r7, #4]
 8003aca:	4a2c      	ldr	r2, [pc, #176]	; (8003b7c <UART_CheckIdleState+0x148>)
 8003acc:	9200      	str	r2, [sp, #0]
 8003ace:	2200      	movs	r2, #0
 8003ad0:	f000 f858 	bl	8003b84 <UART_WaitOnFlagUntilTimeout>
 8003ad4:	1e03      	subs	r3, r0, #0
 8003ad6:	d03b      	beq.n	8003b50 <UART_CheckIdleState+0x11c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003ad8:	f3ef 8310 	mrs	r3, PRIMASK
 8003adc:	60fb      	str	r3, [r7, #12]
  return(result);
 8003ade:	68fb      	ldr	r3, [r7, #12]
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003ae0:	637b      	str	r3, [r7, #52]	; 0x34
 8003ae2:	2301      	movs	r3, #1
 8003ae4:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003ae6:	693b      	ldr	r3, [r7, #16]
 8003ae8:	f383 8810 	msr	PRIMASK, r3
}
 8003aec:	46c0      	nop			; (mov r8, r8)
 8003aee:	687b      	ldr	r3, [r7, #4]
 8003af0:	681b      	ldr	r3, [r3, #0]
 8003af2:	681a      	ldr	r2, [r3, #0]
 8003af4:	687b      	ldr	r3, [r7, #4]
 8003af6:	681b      	ldr	r3, [r3, #0]
 8003af8:	4921      	ldr	r1, [pc, #132]	; (8003b80 <UART_CheckIdleState+0x14c>)
 8003afa:	400a      	ands	r2, r1
 8003afc:	601a      	str	r2, [r3, #0]
 8003afe:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003b00:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003b02:	697b      	ldr	r3, [r7, #20]
 8003b04:	f383 8810 	msr	PRIMASK, r3
}
 8003b08:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003b0a:	f3ef 8310 	mrs	r3, PRIMASK
 8003b0e:	61bb      	str	r3, [r7, #24]
  return(result);
 8003b10:	69bb      	ldr	r3, [r7, #24]
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003b12:	633b      	str	r3, [r7, #48]	; 0x30
 8003b14:	2301      	movs	r3, #1
 8003b16:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003b18:	69fb      	ldr	r3, [r7, #28]
 8003b1a:	f383 8810 	msr	PRIMASK, r3
}
 8003b1e:	46c0      	nop			; (mov r8, r8)
 8003b20:	687b      	ldr	r3, [r7, #4]
 8003b22:	681b      	ldr	r3, [r3, #0]
 8003b24:	689a      	ldr	r2, [r3, #8]
 8003b26:	687b      	ldr	r3, [r7, #4]
 8003b28:	681b      	ldr	r3, [r3, #0]
 8003b2a:	2101      	movs	r1, #1
 8003b2c:	438a      	bics	r2, r1
 8003b2e:	609a      	str	r2, [r3, #8]
 8003b30:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003b32:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003b34:	6a3b      	ldr	r3, [r7, #32]
 8003b36:	f383 8810 	msr	PRIMASK, r3
}
 8003b3a:	46c0      	nop			; (mov r8, r8)

      huart->RxState = HAL_UART_STATE_READY;
 8003b3c:	687b      	ldr	r3, [r7, #4]
 8003b3e:	2280      	movs	r2, #128	; 0x80
 8003b40:	2120      	movs	r1, #32
 8003b42:	5099      	str	r1, [r3, r2]

      __HAL_UNLOCK(huart);
 8003b44:	687b      	ldr	r3, [r7, #4]
 8003b46:	2278      	movs	r2, #120	; 0x78
 8003b48:	2100      	movs	r1, #0
 8003b4a:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003b4c:	2303      	movs	r3, #3
 8003b4e:	e011      	b.n	8003b74 <UART_CheckIdleState+0x140>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8003b50:	687b      	ldr	r3, [r7, #4]
 8003b52:	2220      	movs	r2, #32
 8003b54:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8003b56:	687b      	ldr	r3, [r7, #4]
 8003b58:	2280      	movs	r2, #128	; 0x80
 8003b5a:	2120      	movs	r1, #32
 8003b5c:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003b5e:	687b      	ldr	r3, [r7, #4]
 8003b60:	2200      	movs	r2, #0
 8003b62:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003b64:	687b      	ldr	r3, [r7, #4]
 8003b66:	2200      	movs	r2, #0
 8003b68:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 8003b6a:	687b      	ldr	r3, [r7, #4]
 8003b6c:	2278      	movs	r2, #120	; 0x78
 8003b6e:	2100      	movs	r1, #0
 8003b70:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8003b72:	2300      	movs	r3, #0
}
 8003b74:	0018      	movs	r0, r3
 8003b76:	46bd      	mov	sp, r7
 8003b78:	b010      	add	sp, #64	; 0x40
 8003b7a:	bd80      	pop	{r7, pc}
 8003b7c:	01ffffff 	.word	0x01ffffff
 8003b80:	fffffedf 	.word	0xfffffedf

08003b84 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8003b84:	b580      	push	{r7, lr}
 8003b86:	b084      	sub	sp, #16
 8003b88:	af00      	add	r7, sp, #0
 8003b8a:	60f8      	str	r0, [r7, #12]
 8003b8c:	60b9      	str	r1, [r7, #8]
 8003b8e:	603b      	str	r3, [r7, #0]
 8003b90:	1dfb      	adds	r3, r7, #7
 8003b92:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003b94:	e04b      	b.n	8003c2e <UART_WaitOnFlagUntilTimeout+0xaa>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003b96:	69bb      	ldr	r3, [r7, #24]
 8003b98:	3301      	adds	r3, #1
 8003b9a:	d048      	beq.n	8003c2e <UART_WaitOnFlagUntilTimeout+0xaa>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003b9c:	f7fc ff84 	bl	8000aa8 <HAL_GetTick>
 8003ba0:	0002      	movs	r2, r0
 8003ba2:	683b      	ldr	r3, [r7, #0]
 8003ba4:	1ad3      	subs	r3, r2, r3
 8003ba6:	69ba      	ldr	r2, [r7, #24]
 8003ba8:	429a      	cmp	r2, r3
 8003baa:	d302      	bcc.n	8003bb2 <UART_WaitOnFlagUntilTimeout+0x2e>
 8003bac:	69bb      	ldr	r3, [r7, #24]
 8003bae:	2b00      	cmp	r3, #0
 8003bb0:	d101      	bne.n	8003bb6 <UART_WaitOnFlagUntilTimeout+0x32>
      {

        return HAL_TIMEOUT;
 8003bb2:	2303      	movs	r3, #3
 8003bb4:	e04b      	b.n	8003c4e <UART_WaitOnFlagUntilTimeout+0xca>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8003bb6:	68fb      	ldr	r3, [r7, #12]
 8003bb8:	681b      	ldr	r3, [r3, #0]
 8003bba:	681b      	ldr	r3, [r3, #0]
 8003bbc:	2204      	movs	r2, #4
 8003bbe:	4013      	ands	r3, r2
 8003bc0:	d035      	beq.n	8003c2e <UART_WaitOnFlagUntilTimeout+0xaa>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8003bc2:	68fb      	ldr	r3, [r7, #12]
 8003bc4:	681b      	ldr	r3, [r3, #0]
 8003bc6:	69db      	ldr	r3, [r3, #28]
 8003bc8:	2208      	movs	r2, #8
 8003bca:	4013      	ands	r3, r2
 8003bcc:	2b08      	cmp	r3, #8
 8003bce:	d111      	bne.n	8003bf4 <UART_WaitOnFlagUntilTimeout+0x70>
        {
           /* Clear Overrun Error flag*/
           __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8003bd0:	68fb      	ldr	r3, [r7, #12]
 8003bd2:	681b      	ldr	r3, [r3, #0]
 8003bd4:	2208      	movs	r2, #8
 8003bd6:	621a      	str	r2, [r3, #32]

           /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts if ongoing */
           UART_EndRxTransfer(huart);
 8003bd8:	68fb      	ldr	r3, [r7, #12]
 8003bda:	0018      	movs	r0, r3
 8003bdc:	f000 f906 	bl	8003dec <UART_EndRxTransfer>

           huart->ErrorCode = HAL_UART_ERROR_ORE;
 8003be0:	68fb      	ldr	r3, [r7, #12]
 8003be2:	2284      	movs	r2, #132	; 0x84
 8003be4:	2108      	movs	r1, #8
 8003be6:	5099      	str	r1, [r3, r2]

           /* Process Unlocked */
           __HAL_UNLOCK(huart);
 8003be8:	68fb      	ldr	r3, [r7, #12]
 8003bea:	2278      	movs	r2, #120	; 0x78
 8003bec:	2100      	movs	r1, #0
 8003bee:	5499      	strb	r1, [r3, r2]

           return HAL_ERROR;
 8003bf0:	2301      	movs	r3, #1
 8003bf2:	e02c      	b.n	8003c4e <UART_WaitOnFlagUntilTimeout+0xca>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8003bf4:	68fb      	ldr	r3, [r7, #12]
 8003bf6:	681b      	ldr	r3, [r3, #0]
 8003bf8:	69da      	ldr	r2, [r3, #28]
 8003bfa:	2380      	movs	r3, #128	; 0x80
 8003bfc:	011b      	lsls	r3, r3, #4
 8003bfe:	401a      	ands	r2, r3
 8003c00:	2380      	movs	r3, #128	; 0x80
 8003c02:	011b      	lsls	r3, r3, #4
 8003c04:	429a      	cmp	r2, r3
 8003c06:	d112      	bne.n	8003c2e <UART_WaitOnFlagUntilTimeout+0xaa>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8003c08:	68fb      	ldr	r3, [r7, #12]
 8003c0a:	681b      	ldr	r3, [r3, #0]
 8003c0c:	2280      	movs	r2, #128	; 0x80
 8003c0e:	0112      	lsls	r2, r2, #4
 8003c10:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8003c12:	68fb      	ldr	r3, [r7, #12]
 8003c14:	0018      	movs	r0, r3
 8003c16:	f000 f8e9 	bl	8003dec <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8003c1a:	68fb      	ldr	r3, [r7, #12]
 8003c1c:	2284      	movs	r2, #132	; 0x84
 8003c1e:	2120      	movs	r1, #32
 8003c20:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8003c22:	68fb      	ldr	r3, [r7, #12]
 8003c24:	2278      	movs	r2, #120	; 0x78
 8003c26:	2100      	movs	r1, #0
 8003c28:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 8003c2a:	2303      	movs	r3, #3
 8003c2c:	e00f      	b.n	8003c4e <UART_WaitOnFlagUntilTimeout+0xca>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003c2e:	68fb      	ldr	r3, [r7, #12]
 8003c30:	681b      	ldr	r3, [r3, #0]
 8003c32:	69db      	ldr	r3, [r3, #28]
 8003c34:	68ba      	ldr	r2, [r7, #8]
 8003c36:	4013      	ands	r3, r2
 8003c38:	68ba      	ldr	r2, [r7, #8]
 8003c3a:	1ad3      	subs	r3, r2, r3
 8003c3c:	425a      	negs	r2, r3
 8003c3e:	4153      	adcs	r3, r2
 8003c40:	b2db      	uxtb	r3, r3
 8003c42:	001a      	movs	r2, r3
 8003c44:	1dfb      	adds	r3, r7, #7
 8003c46:	781b      	ldrb	r3, [r3, #0]
 8003c48:	429a      	cmp	r2, r3
 8003c4a:	d0a4      	beq.n	8003b96 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003c4c:	2300      	movs	r3, #0
}
 8003c4e:	0018      	movs	r0, r3
 8003c50:	46bd      	mov	sp, r7
 8003c52:	b004      	add	sp, #16
 8003c54:	bd80      	pop	{r7, pc}
	...

08003c58 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8003c58:	b580      	push	{r7, lr}
 8003c5a:	b090      	sub	sp, #64	; 0x40
 8003c5c:	af00      	add	r7, sp, #0
 8003c5e:	60f8      	str	r0, [r7, #12]
 8003c60:	60b9      	str	r1, [r7, #8]
 8003c62:	1dbb      	adds	r3, r7, #6
 8003c64:	801a      	strh	r2, [r3, #0]
  huart->pRxBuffPtr  = pData;
 8003c66:	68fb      	ldr	r3, [r7, #12]
 8003c68:	68ba      	ldr	r2, [r7, #8]
 8003c6a:	655a      	str	r2, [r3, #84]	; 0x54
  huart->RxXferSize  = Size;
 8003c6c:	68fb      	ldr	r3, [r7, #12]
 8003c6e:	1dba      	adds	r2, r7, #6
 8003c70:	2158      	movs	r1, #88	; 0x58
 8003c72:	8812      	ldrh	r2, [r2, #0]
 8003c74:	525a      	strh	r2, [r3, r1]
  huart->RxXferCount = Size;
 8003c76:	68fb      	ldr	r3, [r7, #12]
 8003c78:	1dba      	adds	r2, r7, #6
 8003c7a:	215a      	movs	r1, #90	; 0x5a
 8003c7c:	8812      	ldrh	r2, [r2, #0]
 8003c7e:	525a      	strh	r2, [r3, r1]
  huart->RxISR       = NULL;
 8003c80:	68fb      	ldr	r3, [r7, #12]
 8003c82:	2200      	movs	r2, #0
 8003c84:	669a      	str	r2, [r3, #104]	; 0x68

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 8003c86:	68fb      	ldr	r3, [r7, #12]
 8003c88:	689a      	ldr	r2, [r3, #8]
 8003c8a:	2380      	movs	r3, #128	; 0x80
 8003c8c:	015b      	lsls	r3, r3, #5
 8003c8e:	429a      	cmp	r2, r3
 8003c90:	d10d      	bne.n	8003cae <UART_Start_Receive_IT+0x56>
 8003c92:	68fb      	ldr	r3, [r7, #12]
 8003c94:	691b      	ldr	r3, [r3, #16]
 8003c96:	2b00      	cmp	r3, #0
 8003c98:	d104      	bne.n	8003ca4 <UART_Start_Receive_IT+0x4c>
 8003c9a:	68fb      	ldr	r3, [r7, #12]
 8003c9c:	225c      	movs	r2, #92	; 0x5c
 8003c9e:	4950      	ldr	r1, [pc, #320]	; (8003de0 <UART_Start_Receive_IT+0x188>)
 8003ca0:	5299      	strh	r1, [r3, r2]
 8003ca2:	e02e      	b.n	8003d02 <UART_Start_Receive_IT+0xaa>
 8003ca4:	68fb      	ldr	r3, [r7, #12]
 8003ca6:	225c      	movs	r2, #92	; 0x5c
 8003ca8:	21ff      	movs	r1, #255	; 0xff
 8003caa:	5299      	strh	r1, [r3, r2]
 8003cac:	e029      	b.n	8003d02 <UART_Start_Receive_IT+0xaa>
 8003cae:	68fb      	ldr	r3, [r7, #12]
 8003cb0:	689b      	ldr	r3, [r3, #8]
 8003cb2:	2b00      	cmp	r3, #0
 8003cb4:	d10d      	bne.n	8003cd2 <UART_Start_Receive_IT+0x7a>
 8003cb6:	68fb      	ldr	r3, [r7, #12]
 8003cb8:	691b      	ldr	r3, [r3, #16]
 8003cba:	2b00      	cmp	r3, #0
 8003cbc:	d104      	bne.n	8003cc8 <UART_Start_Receive_IT+0x70>
 8003cbe:	68fb      	ldr	r3, [r7, #12]
 8003cc0:	225c      	movs	r2, #92	; 0x5c
 8003cc2:	21ff      	movs	r1, #255	; 0xff
 8003cc4:	5299      	strh	r1, [r3, r2]
 8003cc6:	e01c      	b.n	8003d02 <UART_Start_Receive_IT+0xaa>
 8003cc8:	68fb      	ldr	r3, [r7, #12]
 8003cca:	225c      	movs	r2, #92	; 0x5c
 8003ccc:	217f      	movs	r1, #127	; 0x7f
 8003cce:	5299      	strh	r1, [r3, r2]
 8003cd0:	e017      	b.n	8003d02 <UART_Start_Receive_IT+0xaa>
 8003cd2:	68fb      	ldr	r3, [r7, #12]
 8003cd4:	689a      	ldr	r2, [r3, #8]
 8003cd6:	2380      	movs	r3, #128	; 0x80
 8003cd8:	055b      	lsls	r3, r3, #21
 8003cda:	429a      	cmp	r2, r3
 8003cdc:	d10d      	bne.n	8003cfa <UART_Start_Receive_IT+0xa2>
 8003cde:	68fb      	ldr	r3, [r7, #12]
 8003ce0:	691b      	ldr	r3, [r3, #16]
 8003ce2:	2b00      	cmp	r3, #0
 8003ce4:	d104      	bne.n	8003cf0 <UART_Start_Receive_IT+0x98>
 8003ce6:	68fb      	ldr	r3, [r7, #12]
 8003ce8:	225c      	movs	r2, #92	; 0x5c
 8003cea:	217f      	movs	r1, #127	; 0x7f
 8003cec:	5299      	strh	r1, [r3, r2]
 8003cee:	e008      	b.n	8003d02 <UART_Start_Receive_IT+0xaa>
 8003cf0:	68fb      	ldr	r3, [r7, #12]
 8003cf2:	225c      	movs	r2, #92	; 0x5c
 8003cf4:	213f      	movs	r1, #63	; 0x3f
 8003cf6:	5299      	strh	r1, [r3, r2]
 8003cf8:	e003      	b.n	8003d02 <UART_Start_Receive_IT+0xaa>
 8003cfa:	68fb      	ldr	r3, [r7, #12]
 8003cfc:	225c      	movs	r2, #92	; 0x5c
 8003cfe:	2100      	movs	r1, #0
 8003d00:	5299      	strh	r1, [r3, r2]

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003d02:	68fb      	ldr	r3, [r7, #12]
 8003d04:	2284      	movs	r2, #132	; 0x84
 8003d06:	2100      	movs	r1, #0
 8003d08:	5099      	str	r1, [r3, r2]
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8003d0a:	68fb      	ldr	r3, [r7, #12]
 8003d0c:	2280      	movs	r2, #128	; 0x80
 8003d0e:	2122      	movs	r1, #34	; 0x22
 8003d10:	5099      	str	r1, [r3, r2]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003d12:	f3ef 8310 	mrs	r3, PRIMASK
 8003d16:	62bb      	str	r3, [r7, #40]	; 0x28
  return(result);
 8003d18:	6abb      	ldr	r3, [r7, #40]	; 0x28

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003d1a:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003d1c:	2301      	movs	r3, #1
 8003d1e:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003d20:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003d22:	f383 8810 	msr	PRIMASK, r3
}
 8003d26:	46c0      	nop			; (mov r8, r8)
 8003d28:	68fb      	ldr	r3, [r7, #12]
 8003d2a:	681b      	ldr	r3, [r3, #0]
 8003d2c:	689a      	ldr	r2, [r3, #8]
 8003d2e:	68fb      	ldr	r3, [r7, #12]
 8003d30:	681b      	ldr	r3, [r3, #0]
 8003d32:	2101      	movs	r1, #1
 8003d34:	430a      	orrs	r2, r1
 8003d36:	609a      	str	r2, [r3, #8]
 8003d38:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003d3a:	633b      	str	r3, [r7, #48]	; 0x30
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003d3c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003d3e:	f383 8810 	msr	PRIMASK, r3
}
 8003d42:	46c0      	nop			; (mov r8, r8)

  /* Set the Rx ISR function pointer according to the data word length */
  if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003d44:	68fb      	ldr	r3, [r7, #12]
 8003d46:	689a      	ldr	r2, [r3, #8]
 8003d48:	2380      	movs	r3, #128	; 0x80
 8003d4a:	015b      	lsls	r3, r3, #5
 8003d4c:	429a      	cmp	r2, r3
 8003d4e:	d107      	bne.n	8003d60 <UART_Start_Receive_IT+0x108>
 8003d50:	68fb      	ldr	r3, [r7, #12]
 8003d52:	691b      	ldr	r3, [r3, #16]
 8003d54:	2b00      	cmp	r3, #0
 8003d56:	d103      	bne.n	8003d60 <UART_Start_Receive_IT+0x108>
  {
    huart->RxISR = UART_RxISR_16BIT;
 8003d58:	68fb      	ldr	r3, [r7, #12]
 8003d5a:	4a22      	ldr	r2, [pc, #136]	; (8003de4 <UART_Start_Receive_IT+0x18c>)
 8003d5c:	669a      	str	r2, [r3, #104]	; 0x68
 8003d5e:	e002      	b.n	8003d66 <UART_Start_Receive_IT+0x10e>
  }
  else
  {
    huart->RxISR = UART_RxISR_8BIT;
 8003d60:	68fb      	ldr	r3, [r7, #12]
 8003d62:	4a21      	ldr	r2, [pc, #132]	; (8003de8 <UART_Start_Receive_IT+0x190>)
 8003d64:	669a      	str	r2, [r3, #104]	; 0x68
  }

  /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 8003d66:	68fb      	ldr	r3, [r7, #12]
 8003d68:	691b      	ldr	r3, [r3, #16]
 8003d6a:	2b00      	cmp	r3, #0
 8003d6c:	d019      	beq.n	8003da2 <UART_Start_Receive_IT+0x14a>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003d6e:	f3ef 8310 	mrs	r3, PRIMASK
 8003d72:	61fb      	str	r3, [r7, #28]
  return(result);
 8003d74:	69fb      	ldr	r3, [r7, #28]
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE);
 8003d76:	637b      	str	r3, [r7, #52]	; 0x34
 8003d78:	2301      	movs	r3, #1
 8003d7a:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003d7c:	6a3b      	ldr	r3, [r7, #32]
 8003d7e:	f383 8810 	msr	PRIMASK, r3
}
 8003d82:	46c0      	nop			; (mov r8, r8)
 8003d84:	68fb      	ldr	r3, [r7, #12]
 8003d86:	681b      	ldr	r3, [r3, #0]
 8003d88:	681a      	ldr	r2, [r3, #0]
 8003d8a:	68fb      	ldr	r3, [r7, #12]
 8003d8c:	681b      	ldr	r3, [r3, #0]
 8003d8e:	2190      	movs	r1, #144	; 0x90
 8003d90:	0049      	lsls	r1, r1, #1
 8003d92:	430a      	orrs	r2, r1
 8003d94:	601a      	str	r2, [r3, #0]
 8003d96:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003d98:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003d9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d9c:	f383 8810 	msr	PRIMASK, r3
}
 8003da0:	e018      	b.n	8003dd4 <UART_Start_Receive_IT+0x17c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003da2:	f3ef 8310 	mrs	r3, PRIMASK
 8003da6:	613b      	str	r3, [r7, #16]
  return(result);
 8003da8:	693b      	ldr	r3, [r7, #16]
  }
  else
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE);
 8003daa:	63bb      	str	r3, [r7, #56]	; 0x38
 8003dac:	2301      	movs	r3, #1
 8003dae:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003db0:	697b      	ldr	r3, [r7, #20]
 8003db2:	f383 8810 	msr	PRIMASK, r3
}
 8003db6:	46c0      	nop			; (mov r8, r8)
 8003db8:	68fb      	ldr	r3, [r7, #12]
 8003dba:	681b      	ldr	r3, [r3, #0]
 8003dbc:	681a      	ldr	r2, [r3, #0]
 8003dbe:	68fb      	ldr	r3, [r7, #12]
 8003dc0:	681b      	ldr	r3, [r3, #0]
 8003dc2:	2120      	movs	r1, #32
 8003dc4:	430a      	orrs	r2, r1
 8003dc6:	601a      	str	r2, [r3, #0]
 8003dc8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003dca:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003dcc:	69bb      	ldr	r3, [r7, #24]
 8003dce:	f383 8810 	msr	PRIMASK, r3
}
 8003dd2:	46c0      	nop			; (mov r8, r8)
  }
  return HAL_OK;
 8003dd4:	2300      	movs	r3, #0
}
 8003dd6:	0018      	movs	r0, r3
 8003dd8:	46bd      	mov	sp, r7
 8003dda:	b010      	add	sp, #64	; 0x40
 8003ddc:	bd80      	pop	{r7, pc}
 8003dde:	46c0      	nop			; (mov r8, r8)
 8003de0:	000001ff 	.word	0x000001ff
 8003de4:	08004261 	.word	0x08004261
 8003de8:	080040a9 	.word	0x080040a9

08003dec <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8003dec:	b580      	push	{r7, lr}
 8003dee:	b08e      	sub	sp, #56	; 0x38
 8003df0:	af00      	add	r7, sp, #0
 8003df2:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003df4:	f3ef 8310 	mrs	r3, PRIMASK
 8003df8:	617b      	str	r3, [r7, #20]
  return(result);
 8003dfa:	697b      	ldr	r3, [r7, #20]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003dfc:	637b      	str	r3, [r7, #52]	; 0x34
 8003dfe:	2301      	movs	r3, #1
 8003e00:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003e02:	69bb      	ldr	r3, [r7, #24]
 8003e04:	f383 8810 	msr	PRIMASK, r3
}
 8003e08:	46c0      	nop			; (mov r8, r8)
 8003e0a:	687b      	ldr	r3, [r7, #4]
 8003e0c:	681b      	ldr	r3, [r3, #0]
 8003e0e:	681a      	ldr	r2, [r3, #0]
 8003e10:	687b      	ldr	r3, [r7, #4]
 8003e12:	681b      	ldr	r3, [r3, #0]
 8003e14:	4926      	ldr	r1, [pc, #152]	; (8003eb0 <UART_EndRxTransfer+0xc4>)
 8003e16:	400a      	ands	r2, r1
 8003e18:	601a      	str	r2, [r3, #0]
 8003e1a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003e1c:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003e1e:	69fb      	ldr	r3, [r7, #28]
 8003e20:	f383 8810 	msr	PRIMASK, r3
}
 8003e24:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003e26:	f3ef 8310 	mrs	r3, PRIMASK
 8003e2a:	623b      	str	r3, [r7, #32]
  return(result);
 8003e2c:	6a3b      	ldr	r3, [r7, #32]
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003e2e:	633b      	str	r3, [r7, #48]	; 0x30
 8003e30:	2301      	movs	r3, #1
 8003e32:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003e34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e36:	f383 8810 	msr	PRIMASK, r3
}
 8003e3a:	46c0      	nop			; (mov r8, r8)
 8003e3c:	687b      	ldr	r3, [r7, #4]
 8003e3e:	681b      	ldr	r3, [r3, #0]
 8003e40:	689a      	ldr	r2, [r3, #8]
 8003e42:	687b      	ldr	r3, [r7, #4]
 8003e44:	681b      	ldr	r3, [r3, #0]
 8003e46:	2101      	movs	r1, #1
 8003e48:	438a      	bics	r2, r1
 8003e4a:	609a      	str	r2, [r3, #8]
 8003e4c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003e4e:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003e50:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003e52:	f383 8810 	msr	PRIMASK, r3
}
 8003e56:	46c0      	nop			; (mov r8, r8)

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003e58:	687b      	ldr	r3, [r7, #4]
 8003e5a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003e5c:	2b01      	cmp	r3, #1
 8003e5e:	d118      	bne.n	8003e92 <UART_EndRxTransfer+0xa6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003e60:	f3ef 8310 	mrs	r3, PRIMASK
 8003e64:	60bb      	str	r3, [r7, #8]
  return(result);
 8003e66:	68bb      	ldr	r3, [r7, #8]
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003e68:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003e6a:	2301      	movs	r3, #1
 8003e6c:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003e6e:	68fb      	ldr	r3, [r7, #12]
 8003e70:	f383 8810 	msr	PRIMASK, r3
}
 8003e74:	46c0      	nop			; (mov r8, r8)
 8003e76:	687b      	ldr	r3, [r7, #4]
 8003e78:	681b      	ldr	r3, [r3, #0]
 8003e7a:	681a      	ldr	r2, [r3, #0]
 8003e7c:	687b      	ldr	r3, [r7, #4]
 8003e7e:	681b      	ldr	r3, [r3, #0]
 8003e80:	2110      	movs	r1, #16
 8003e82:	438a      	bics	r2, r1
 8003e84:	601a      	str	r2, [r3, #0]
 8003e86:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003e88:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003e8a:	693b      	ldr	r3, [r7, #16]
 8003e8c:	f383 8810 	msr	PRIMASK, r3
}
 8003e90:	46c0      	nop			; (mov r8, r8)
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8003e92:	687b      	ldr	r3, [r7, #4]
 8003e94:	2280      	movs	r2, #128	; 0x80
 8003e96:	2120      	movs	r1, #32
 8003e98:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003e9a:	687b      	ldr	r3, [r7, #4]
 8003e9c:	2200      	movs	r2, #0
 8003e9e:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8003ea0:	687b      	ldr	r3, [r7, #4]
 8003ea2:	2200      	movs	r2, #0
 8003ea4:	669a      	str	r2, [r3, #104]	; 0x68
}
 8003ea6:	46c0      	nop			; (mov r8, r8)
 8003ea8:	46bd      	mov	sp, r7
 8003eaa:	b00e      	add	sp, #56	; 0x38
 8003eac:	bd80      	pop	{r7, pc}
 8003eae:	46c0      	nop			; (mov r8, r8)
 8003eb0:	fffffedf 	.word	0xfffffedf

08003eb4 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8003eb4:	b580      	push	{r7, lr}
 8003eb6:	b084      	sub	sp, #16
 8003eb8:	af00      	add	r7, sp, #0
 8003eba:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8003ebc:	687b      	ldr	r3, [r7, #4]
 8003ebe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ec0:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8003ec2:	68fb      	ldr	r3, [r7, #12]
 8003ec4:	225a      	movs	r2, #90	; 0x5a
 8003ec6:	2100      	movs	r1, #0
 8003ec8:	5299      	strh	r1, [r3, r2]
  huart->TxXferCount = 0U;
 8003eca:	68fb      	ldr	r3, [r7, #12]
 8003ecc:	2252      	movs	r2, #82	; 0x52
 8003ece:	2100      	movs	r1, #0
 8003ed0:	5299      	strh	r1, [r3, r2]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8003ed2:	68fb      	ldr	r3, [r7, #12]
 8003ed4:	0018      	movs	r0, r3
 8003ed6:	f7ff fb5d 	bl	8003594 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8003eda:	46c0      	nop			; (mov r8, r8)
 8003edc:	46bd      	mov	sp, r7
 8003ede:	b004      	add	sp, #16
 8003ee0:	bd80      	pop	{r7, pc}

08003ee2 <UART_TxISR_8BIT>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_8BIT(UART_HandleTypeDef *huart)
{
 8003ee2:	b580      	push	{r7, lr}
 8003ee4:	b08a      	sub	sp, #40	; 0x28
 8003ee6:	af00      	add	r7, sp, #0
 8003ee8:	6078      	str	r0, [r7, #4]
  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8003eea:	687b      	ldr	r3, [r7, #4]
 8003eec:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003eee:	2b21      	cmp	r3, #33	; 0x21
 8003ef0:	d14d      	bne.n	8003f8e <UART_TxISR_8BIT+0xac>
  {
    if (huart->TxXferCount == 0U)
 8003ef2:	687b      	ldr	r3, [r7, #4]
 8003ef4:	2252      	movs	r2, #82	; 0x52
 8003ef6:	5a9b      	ldrh	r3, [r3, r2]
 8003ef8:	b29b      	uxth	r3, r3
 8003efa:	2b00      	cmp	r3, #0
 8003efc:	d132      	bne.n	8003f64 <UART_TxISR_8BIT+0x82>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003efe:	f3ef 8310 	mrs	r3, PRIMASK
 8003f02:	60bb      	str	r3, [r7, #8]
  return(result);
 8003f04:	68bb      	ldr	r3, [r7, #8]
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 8003f06:	627b      	str	r3, [r7, #36]	; 0x24
 8003f08:	2301      	movs	r3, #1
 8003f0a:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003f0c:	68fb      	ldr	r3, [r7, #12]
 8003f0e:	f383 8810 	msr	PRIMASK, r3
}
 8003f12:	46c0      	nop			; (mov r8, r8)
 8003f14:	687b      	ldr	r3, [r7, #4]
 8003f16:	681b      	ldr	r3, [r3, #0]
 8003f18:	681a      	ldr	r2, [r3, #0]
 8003f1a:	687b      	ldr	r3, [r7, #4]
 8003f1c:	681b      	ldr	r3, [r3, #0]
 8003f1e:	2180      	movs	r1, #128	; 0x80
 8003f20:	438a      	bics	r2, r1
 8003f22:	601a      	str	r2, [r3, #0]
 8003f24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f26:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003f28:	693b      	ldr	r3, [r7, #16]
 8003f2a:	f383 8810 	msr	PRIMASK, r3
}
 8003f2e:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003f30:	f3ef 8310 	mrs	r3, PRIMASK
 8003f34:	617b      	str	r3, [r7, #20]
  return(result);
 8003f36:	697b      	ldr	r3, [r7, #20]

      /* Enable the UART Transmit Complete Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8003f38:	623b      	str	r3, [r7, #32]
 8003f3a:	2301      	movs	r3, #1
 8003f3c:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003f3e:	69bb      	ldr	r3, [r7, #24]
 8003f40:	f383 8810 	msr	PRIMASK, r3
}
 8003f44:	46c0      	nop			; (mov r8, r8)
 8003f46:	687b      	ldr	r3, [r7, #4]
 8003f48:	681b      	ldr	r3, [r3, #0]
 8003f4a:	681a      	ldr	r2, [r3, #0]
 8003f4c:	687b      	ldr	r3, [r7, #4]
 8003f4e:	681b      	ldr	r3, [r3, #0]
 8003f50:	2140      	movs	r1, #64	; 0x40
 8003f52:	430a      	orrs	r2, r1
 8003f54:	601a      	str	r2, [r3, #0]
 8003f56:	6a3b      	ldr	r3, [r7, #32]
 8003f58:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003f5a:	69fb      	ldr	r3, [r7, #28]
 8003f5c:	f383 8810 	msr	PRIMASK, r3
}
 8003f60:	46c0      	nop			; (mov r8, r8)
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
      huart->pTxBuffPtr++;
      huart->TxXferCount--;
    }
  }
}
 8003f62:	e014      	b.n	8003f8e <UART_TxISR_8BIT+0xac>
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
 8003f64:	687b      	ldr	r3, [r7, #4]
 8003f66:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003f68:	781a      	ldrb	r2, [r3, #0]
 8003f6a:	687b      	ldr	r3, [r7, #4]
 8003f6c:	681b      	ldr	r3, [r3, #0]
 8003f6e:	b292      	uxth	r2, r2
 8003f70:	851a      	strh	r2, [r3, #40]	; 0x28
      huart->pTxBuffPtr++;
 8003f72:	687b      	ldr	r3, [r7, #4]
 8003f74:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003f76:	1c5a      	adds	r2, r3, #1
 8003f78:	687b      	ldr	r3, [r7, #4]
 8003f7a:	64da      	str	r2, [r3, #76]	; 0x4c
      huart->TxXferCount--;
 8003f7c:	687b      	ldr	r3, [r7, #4]
 8003f7e:	2252      	movs	r2, #82	; 0x52
 8003f80:	5a9b      	ldrh	r3, [r3, r2]
 8003f82:	b29b      	uxth	r3, r3
 8003f84:	3b01      	subs	r3, #1
 8003f86:	b299      	uxth	r1, r3
 8003f88:	687b      	ldr	r3, [r7, #4]
 8003f8a:	2252      	movs	r2, #82	; 0x52
 8003f8c:	5299      	strh	r1, [r3, r2]
}
 8003f8e:	46c0      	nop			; (mov r8, r8)
 8003f90:	46bd      	mov	sp, r7
 8003f92:	b00a      	add	sp, #40	; 0x28
 8003f94:	bd80      	pop	{r7, pc}

08003f96 <UART_TxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_16BIT(UART_HandleTypeDef *huart)
{
 8003f96:	b580      	push	{r7, lr}
 8003f98:	b08c      	sub	sp, #48	; 0x30
 8003f9a:	af00      	add	r7, sp, #0
 8003f9c:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8003f9e:	687b      	ldr	r3, [r7, #4]
 8003fa0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003fa2:	2b21      	cmp	r3, #33	; 0x21
 8003fa4:	d151      	bne.n	800404a <UART_TxISR_16BIT+0xb4>
  {
    if (huart->TxXferCount == 0U)
 8003fa6:	687b      	ldr	r3, [r7, #4]
 8003fa8:	2252      	movs	r2, #82	; 0x52
 8003faa:	5a9b      	ldrh	r3, [r3, r2]
 8003fac:	b29b      	uxth	r3, r3
 8003fae:	2b00      	cmp	r3, #0
 8003fb0:	d132      	bne.n	8004018 <UART_TxISR_16BIT+0x82>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003fb2:	f3ef 8310 	mrs	r3, PRIMASK
 8003fb6:	60fb      	str	r3, [r7, #12]
  return(result);
 8003fb8:	68fb      	ldr	r3, [r7, #12]
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 8003fba:	62bb      	str	r3, [r7, #40]	; 0x28
 8003fbc:	2301      	movs	r3, #1
 8003fbe:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003fc0:	693b      	ldr	r3, [r7, #16]
 8003fc2:	f383 8810 	msr	PRIMASK, r3
}
 8003fc6:	46c0      	nop			; (mov r8, r8)
 8003fc8:	687b      	ldr	r3, [r7, #4]
 8003fca:	681b      	ldr	r3, [r3, #0]
 8003fcc:	681a      	ldr	r2, [r3, #0]
 8003fce:	687b      	ldr	r3, [r7, #4]
 8003fd0:	681b      	ldr	r3, [r3, #0]
 8003fd2:	2180      	movs	r1, #128	; 0x80
 8003fd4:	438a      	bics	r2, r1
 8003fd6:	601a      	str	r2, [r3, #0]
 8003fd8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003fda:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003fdc:	697b      	ldr	r3, [r7, #20]
 8003fde:	f383 8810 	msr	PRIMASK, r3
}
 8003fe2:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003fe4:	f3ef 8310 	mrs	r3, PRIMASK
 8003fe8:	61bb      	str	r3, [r7, #24]
  return(result);
 8003fea:	69bb      	ldr	r3, [r7, #24]

      /* Enable the UART Transmit Complete Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8003fec:	627b      	str	r3, [r7, #36]	; 0x24
 8003fee:	2301      	movs	r3, #1
 8003ff0:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003ff2:	69fb      	ldr	r3, [r7, #28]
 8003ff4:	f383 8810 	msr	PRIMASK, r3
}
 8003ff8:	46c0      	nop			; (mov r8, r8)
 8003ffa:	687b      	ldr	r3, [r7, #4]
 8003ffc:	681b      	ldr	r3, [r3, #0]
 8003ffe:	681a      	ldr	r2, [r3, #0]
 8004000:	687b      	ldr	r3, [r7, #4]
 8004002:	681b      	ldr	r3, [r3, #0]
 8004004:	2140      	movs	r1, #64	; 0x40
 8004006:	430a      	orrs	r2, r1
 8004008:	601a      	str	r2, [r3, #0]
 800400a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800400c:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800400e:	6a3b      	ldr	r3, [r7, #32]
 8004010:	f383 8810 	msr	PRIMASK, r3
}
 8004014:	46c0      	nop			; (mov r8, r8)
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
      huart->pTxBuffPtr += 2U;
      huart->TxXferCount--;
    }
  }
}
 8004016:	e018      	b.n	800404a <UART_TxISR_16BIT+0xb4>
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8004018:	687b      	ldr	r3, [r7, #4]
 800401a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800401c:	62fb      	str	r3, [r7, #44]	; 0x2c
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
 800401e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004020:	881a      	ldrh	r2, [r3, #0]
 8004022:	687b      	ldr	r3, [r7, #4]
 8004024:	681b      	ldr	r3, [r3, #0]
 8004026:	05d2      	lsls	r2, r2, #23
 8004028:	0dd2      	lsrs	r2, r2, #23
 800402a:	b292      	uxth	r2, r2
 800402c:	851a      	strh	r2, [r3, #40]	; 0x28
      huart->pTxBuffPtr += 2U;
 800402e:	687b      	ldr	r3, [r7, #4]
 8004030:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004032:	1c9a      	adds	r2, r3, #2
 8004034:	687b      	ldr	r3, [r7, #4]
 8004036:	64da      	str	r2, [r3, #76]	; 0x4c
      huart->TxXferCount--;
 8004038:	687b      	ldr	r3, [r7, #4]
 800403a:	2252      	movs	r2, #82	; 0x52
 800403c:	5a9b      	ldrh	r3, [r3, r2]
 800403e:	b29b      	uxth	r3, r3
 8004040:	3b01      	subs	r3, #1
 8004042:	b299      	uxth	r1, r3
 8004044:	687b      	ldr	r3, [r7, #4]
 8004046:	2252      	movs	r2, #82	; 0x52
 8004048:	5299      	strh	r1, [r3, r2]
}
 800404a:	46c0      	nop			; (mov r8, r8)
 800404c:	46bd      	mov	sp, r7
 800404e:	b00c      	add	sp, #48	; 0x30
 8004050:	bd80      	pop	{r7, pc}

08004052 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8004052:	b580      	push	{r7, lr}
 8004054:	b086      	sub	sp, #24
 8004056:	af00      	add	r7, sp, #0
 8004058:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800405a:	f3ef 8310 	mrs	r3, PRIMASK
 800405e:	60bb      	str	r3, [r7, #8]
  return(result);
 8004060:	68bb      	ldr	r3, [r7, #8]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8004062:	617b      	str	r3, [r7, #20]
 8004064:	2301      	movs	r3, #1
 8004066:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004068:	68fb      	ldr	r3, [r7, #12]
 800406a:	f383 8810 	msr	PRIMASK, r3
}
 800406e:	46c0      	nop			; (mov r8, r8)
 8004070:	687b      	ldr	r3, [r7, #4]
 8004072:	681b      	ldr	r3, [r3, #0]
 8004074:	681a      	ldr	r2, [r3, #0]
 8004076:	687b      	ldr	r3, [r7, #4]
 8004078:	681b      	ldr	r3, [r3, #0]
 800407a:	2140      	movs	r1, #64	; 0x40
 800407c:	438a      	bics	r2, r1
 800407e:	601a      	str	r2, [r3, #0]
 8004080:	697b      	ldr	r3, [r7, #20]
 8004082:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004084:	693b      	ldr	r3, [r7, #16]
 8004086:	f383 8810 	msr	PRIMASK, r3
}
 800408a:	46c0      	nop			; (mov r8, r8)

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800408c:	687b      	ldr	r3, [r7, #4]
 800408e:	2220      	movs	r2, #32
 8004090:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8004092:	687b      	ldr	r3, [r7, #4]
 8004094:	2200      	movs	r2, #0
 8004096:	66da      	str	r2, [r3, #108]	; 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8004098:	687b      	ldr	r3, [r7, #4]
 800409a:	0018      	movs	r0, r3
 800409c:	f7ff fa72 	bl	8003584 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80040a0:	46c0      	nop			; (mov r8, r8)
 80040a2:	46bd      	mov	sp, r7
 80040a4:	b006      	add	sp, #24
 80040a6:	bd80      	pop	{r7, pc}

080040a8 <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 80040a8:	b580      	push	{r7, lr}
 80040aa:	b094      	sub	sp, #80	; 0x50
 80040ac:	af00      	add	r7, sp, #0
 80040ae:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 80040b0:	204e      	movs	r0, #78	; 0x4e
 80040b2:	183b      	adds	r3, r7, r0
 80040b4:	687a      	ldr	r2, [r7, #4]
 80040b6:	215c      	movs	r1, #92	; 0x5c
 80040b8:	5a52      	ldrh	r2, [r2, r1]
 80040ba:	801a      	strh	r2, [r3, #0]
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80040bc:	687b      	ldr	r3, [r7, #4]
 80040be:	2280      	movs	r2, #128	; 0x80
 80040c0:	589b      	ldr	r3, [r3, r2]
 80040c2:	2b22      	cmp	r3, #34	; 0x22
 80040c4:	d000      	beq.n	80040c8 <UART_RxISR_8BIT+0x20>
 80040c6:	e0ba      	b.n	800423e <UART_RxISR_8BIT+0x196>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 80040c8:	687b      	ldr	r3, [r7, #4]
 80040ca:	681a      	ldr	r2, [r3, #0]
 80040cc:	214c      	movs	r1, #76	; 0x4c
 80040ce:	187b      	adds	r3, r7, r1
 80040d0:	8c92      	ldrh	r2, [r2, #36]	; 0x24
 80040d2:	801a      	strh	r2, [r3, #0]
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 80040d4:	187b      	adds	r3, r7, r1
 80040d6:	881b      	ldrh	r3, [r3, #0]
 80040d8:	b2da      	uxtb	r2, r3
 80040da:	183b      	adds	r3, r7, r0
 80040dc:	881b      	ldrh	r3, [r3, #0]
 80040de:	b2d9      	uxtb	r1, r3
 80040e0:	687b      	ldr	r3, [r7, #4]
 80040e2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80040e4:	400a      	ands	r2, r1
 80040e6:	b2d2      	uxtb	r2, r2
 80040e8:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 80040ea:	687b      	ldr	r3, [r7, #4]
 80040ec:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80040ee:	1c5a      	adds	r2, r3, #1
 80040f0:	687b      	ldr	r3, [r7, #4]
 80040f2:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 80040f4:	687b      	ldr	r3, [r7, #4]
 80040f6:	225a      	movs	r2, #90	; 0x5a
 80040f8:	5a9b      	ldrh	r3, [r3, r2]
 80040fa:	b29b      	uxth	r3, r3
 80040fc:	3b01      	subs	r3, #1
 80040fe:	b299      	uxth	r1, r3
 8004100:	687b      	ldr	r3, [r7, #4]
 8004102:	225a      	movs	r2, #90	; 0x5a
 8004104:	5299      	strh	r1, [r3, r2]

    if (huart->RxXferCount == 0U)
 8004106:	687b      	ldr	r3, [r7, #4]
 8004108:	225a      	movs	r2, #90	; 0x5a
 800410a:	5a9b      	ldrh	r3, [r3, r2]
 800410c:	b29b      	uxth	r3, r3
 800410e:	2b00      	cmp	r3, #0
 8004110:	d000      	beq.n	8004114 <UART_RxISR_8BIT+0x6c>
 8004112:	e09c      	b.n	800424e <UART_RxISR_8BIT+0x1a6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004114:	f3ef 8310 	mrs	r3, PRIMASK
 8004118:	627b      	str	r3, [r7, #36]	; 0x24
  return(result);
 800411a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800411c:	64bb      	str	r3, [r7, #72]	; 0x48
 800411e:	2301      	movs	r3, #1
 8004120:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004122:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004124:	f383 8810 	msr	PRIMASK, r3
}
 8004128:	46c0      	nop			; (mov r8, r8)
 800412a:	687b      	ldr	r3, [r7, #4]
 800412c:	681b      	ldr	r3, [r3, #0]
 800412e:	681a      	ldr	r2, [r3, #0]
 8004130:	687b      	ldr	r3, [r7, #4]
 8004132:	681b      	ldr	r3, [r3, #0]
 8004134:	4948      	ldr	r1, [pc, #288]	; (8004258 <UART_RxISR_8BIT+0x1b0>)
 8004136:	400a      	ands	r2, r1
 8004138:	601a      	str	r2, [r3, #0]
 800413a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800413c:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800413e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004140:	f383 8810 	msr	PRIMASK, r3
}
 8004144:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004146:	f3ef 8310 	mrs	r3, PRIMASK
 800414a:	633b      	str	r3, [r7, #48]	; 0x30
  return(result);
 800414c:	6b3b      	ldr	r3, [r7, #48]	; 0x30

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800414e:	647b      	str	r3, [r7, #68]	; 0x44
 8004150:	2301      	movs	r3, #1
 8004152:	637b      	str	r3, [r7, #52]	; 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004154:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004156:	f383 8810 	msr	PRIMASK, r3
}
 800415a:	46c0      	nop			; (mov r8, r8)
 800415c:	687b      	ldr	r3, [r7, #4]
 800415e:	681b      	ldr	r3, [r3, #0]
 8004160:	689a      	ldr	r2, [r3, #8]
 8004162:	687b      	ldr	r3, [r7, #4]
 8004164:	681b      	ldr	r3, [r3, #0]
 8004166:	2101      	movs	r1, #1
 8004168:	438a      	bics	r2, r1
 800416a:	609a      	str	r2, [r3, #8]
 800416c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800416e:	63bb      	str	r3, [r7, #56]	; 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004170:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004172:	f383 8810 	msr	PRIMASK, r3
}
 8004176:	46c0      	nop			; (mov r8, r8)

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8004178:	687b      	ldr	r3, [r7, #4]
 800417a:	2280      	movs	r2, #128	; 0x80
 800417c:	2120      	movs	r1, #32
 800417e:	5099      	str	r1, [r3, r2]

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8004180:	687b      	ldr	r3, [r7, #4]
 8004182:	2200      	movs	r2, #0
 8004184:	669a      	str	r2, [r3, #104]	; 0x68

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004186:	687b      	ldr	r3, [r7, #4]
 8004188:	2200      	movs	r2, #0
 800418a:	665a      	str	r2, [r3, #100]	; 0x64

      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800418c:	687b      	ldr	r3, [r7, #4]
 800418e:	681b      	ldr	r3, [r3, #0]
 8004190:	685a      	ldr	r2, [r3, #4]
 8004192:	2380      	movs	r3, #128	; 0x80
 8004194:	041b      	lsls	r3, r3, #16
 8004196:	4013      	ands	r3, r2
 8004198:	d018      	beq.n	80041cc <UART_RxISR_8BIT+0x124>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800419a:	f3ef 8310 	mrs	r3, PRIMASK
 800419e:	61bb      	str	r3, [r7, #24]
  return(result);
 80041a0:	69bb      	ldr	r3, [r7, #24]
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 80041a2:	643b      	str	r3, [r7, #64]	; 0x40
 80041a4:	2301      	movs	r3, #1
 80041a6:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80041a8:	69fb      	ldr	r3, [r7, #28]
 80041aa:	f383 8810 	msr	PRIMASK, r3
}
 80041ae:	46c0      	nop			; (mov r8, r8)
 80041b0:	687b      	ldr	r3, [r7, #4]
 80041b2:	681b      	ldr	r3, [r3, #0]
 80041b4:	681a      	ldr	r2, [r3, #0]
 80041b6:	687b      	ldr	r3, [r7, #4]
 80041b8:	681b      	ldr	r3, [r3, #0]
 80041ba:	4928      	ldr	r1, [pc, #160]	; (800425c <UART_RxISR_8BIT+0x1b4>)
 80041bc:	400a      	ands	r2, r1
 80041be:	601a      	str	r2, [r3, #0]
 80041c0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80041c2:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80041c4:	6a3b      	ldr	r3, [r7, #32]
 80041c6:	f383 8810 	msr	PRIMASK, r3
}
 80041ca:	46c0      	nop			; (mov r8, r8)
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80041cc:	687b      	ldr	r3, [r7, #4]
 80041ce:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80041d0:	2b01      	cmp	r3, #1
 80041d2:	d12f      	bne.n	8004234 <UART_RxISR_8BIT+0x18c>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80041d4:	687b      	ldr	r3, [r7, #4]
 80041d6:	2200      	movs	r2, #0
 80041d8:	661a      	str	r2, [r3, #96]	; 0x60
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80041da:	f3ef 8310 	mrs	r3, PRIMASK
 80041de:	60fb      	str	r3, [r7, #12]
  return(result);
 80041e0:	68fb      	ldr	r3, [r7, #12]

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80041e2:	63fb      	str	r3, [r7, #60]	; 0x3c
 80041e4:	2301      	movs	r3, #1
 80041e6:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80041e8:	693b      	ldr	r3, [r7, #16]
 80041ea:	f383 8810 	msr	PRIMASK, r3
}
 80041ee:	46c0      	nop			; (mov r8, r8)
 80041f0:	687b      	ldr	r3, [r7, #4]
 80041f2:	681b      	ldr	r3, [r3, #0]
 80041f4:	681a      	ldr	r2, [r3, #0]
 80041f6:	687b      	ldr	r3, [r7, #4]
 80041f8:	681b      	ldr	r3, [r3, #0]
 80041fa:	2110      	movs	r1, #16
 80041fc:	438a      	bics	r2, r1
 80041fe:	601a      	str	r2, [r3, #0]
 8004200:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004202:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004204:	697b      	ldr	r3, [r7, #20]
 8004206:	f383 8810 	msr	PRIMASK, r3
}
 800420a:	46c0      	nop			; (mov r8, r8)

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800420c:	687b      	ldr	r3, [r7, #4]
 800420e:	681b      	ldr	r3, [r3, #0]
 8004210:	69db      	ldr	r3, [r3, #28]
 8004212:	2210      	movs	r2, #16
 8004214:	4013      	ands	r3, r2
 8004216:	2b10      	cmp	r3, #16
 8004218:	d103      	bne.n	8004222 <UART_RxISR_8BIT+0x17a>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800421a:	687b      	ldr	r3, [r7, #4]
 800421c:	681b      	ldr	r3, [r3, #0]
 800421e:	2210      	movs	r2, #16
 8004220:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8004222:	687b      	ldr	r3, [r7, #4]
 8004224:	2258      	movs	r2, #88	; 0x58
 8004226:	5a9a      	ldrh	r2, [r3, r2]
 8004228:	687b      	ldr	r3, [r7, #4]
 800422a:	0011      	movs	r1, r2
 800422c:	0018      	movs	r0, r3
 800422e:	f7ff f9b9 	bl	80035a4 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8004232:	e00c      	b.n	800424e <UART_RxISR_8BIT+0x1a6>
        HAL_UART_RxCpltCallback(huart);
 8004234:	687b      	ldr	r3, [r7, #4]
 8004236:	0018      	movs	r0, r3
 8004238:	f7fc f852 	bl	80002e0 <HAL_UART_RxCpltCallback>
}
 800423c:	e007      	b.n	800424e <UART_RxISR_8BIT+0x1a6>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800423e:	687b      	ldr	r3, [r7, #4]
 8004240:	681b      	ldr	r3, [r3, #0]
 8004242:	699a      	ldr	r2, [r3, #24]
 8004244:	687b      	ldr	r3, [r7, #4]
 8004246:	681b      	ldr	r3, [r3, #0]
 8004248:	2108      	movs	r1, #8
 800424a:	430a      	orrs	r2, r1
 800424c:	619a      	str	r2, [r3, #24]
}
 800424e:	46c0      	nop			; (mov r8, r8)
 8004250:	46bd      	mov	sp, r7
 8004252:	b014      	add	sp, #80	; 0x50
 8004254:	bd80      	pop	{r7, pc}
 8004256:	46c0      	nop			; (mov r8, r8)
 8004258:	fffffedf 	.word	0xfffffedf
 800425c:	fbffffff 	.word	0xfbffffff

08004260 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 8004260:	b580      	push	{r7, lr}
 8004262:	b094      	sub	sp, #80	; 0x50
 8004264:	af00      	add	r7, sp, #0
 8004266:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 8004268:	204e      	movs	r0, #78	; 0x4e
 800426a:	183b      	adds	r3, r7, r0
 800426c:	687a      	ldr	r2, [r7, #4]
 800426e:	215c      	movs	r1, #92	; 0x5c
 8004270:	5a52      	ldrh	r2, [r2, r1]
 8004272:	801a      	strh	r2, [r3, #0]
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8004274:	687b      	ldr	r3, [r7, #4]
 8004276:	2280      	movs	r2, #128	; 0x80
 8004278:	589b      	ldr	r3, [r3, r2]
 800427a:	2b22      	cmp	r3, #34	; 0x22
 800427c:	d000      	beq.n	8004280 <UART_RxISR_16BIT+0x20>
 800427e:	e0ba      	b.n	80043f6 <UART_RxISR_16BIT+0x196>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8004280:	687b      	ldr	r3, [r7, #4]
 8004282:	681a      	ldr	r2, [r3, #0]
 8004284:	214c      	movs	r1, #76	; 0x4c
 8004286:	187b      	adds	r3, r7, r1
 8004288:	8c92      	ldrh	r2, [r2, #36]	; 0x24
 800428a:	801a      	strh	r2, [r3, #0]
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 800428c:	687b      	ldr	r3, [r7, #4]
 800428e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004290:	64bb      	str	r3, [r7, #72]	; 0x48
    *tmp = (uint16_t)(uhdata & uhMask);
 8004292:	187b      	adds	r3, r7, r1
 8004294:	183a      	adds	r2, r7, r0
 8004296:	881b      	ldrh	r3, [r3, #0]
 8004298:	8812      	ldrh	r2, [r2, #0]
 800429a:	4013      	ands	r3, r2
 800429c:	b29a      	uxth	r2, r3
 800429e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80042a0:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 80042a2:	687b      	ldr	r3, [r7, #4]
 80042a4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80042a6:	1c9a      	adds	r2, r3, #2
 80042a8:	687b      	ldr	r3, [r7, #4]
 80042aa:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 80042ac:	687b      	ldr	r3, [r7, #4]
 80042ae:	225a      	movs	r2, #90	; 0x5a
 80042b0:	5a9b      	ldrh	r3, [r3, r2]
 80042b2:	b29b      	uxth	r3, r3
 80042b4:	3b01      	subs	r3, #1
 80042b6:	b299      	uxth	r1, r3
 80042b8:	687b      	ldr	r3, [r7, #4]
 80042ba:	225a      	movs	r2, #90	; 0x5a
 80042bc:	5299      	strh	r1, [r3, r2]

    if (huart->RxXferCount == 0U)
 80042be:	687b      	ldr	r3, [r7, #4]
 80042c0:	225a      	movs	r2, #90	; 0x5a
 80042c2:	5a9b      	ldrh	r3, [r3, r2]
 80042c4:	b29b      	uxth	r3, r3
 80042c6:	2b00      	cmp	r3, #0
 80042c8:	d000      	beq.n	80042cc <UART_RxISR_16BIT+0x6c>
 80042ca:	e09c      	b.n	8004406 <UART_RxISR_16BIT+0x1a6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80042cc:	f3ef 8310 	mrs	r3, PRIMASK
 80042d0:	623b      	str	r3, [r7, #32]
  return(result);
 80042d2:	6a3b      	ldr	r3, [r7, #32]
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80042d4:	647b      	str	r3, [r7, #68]	; 0x44
 80042d6:	2301      	movs	r3, #1
 80042d8:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80042da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80042dc:	f383 8810 	msr	PRIMASK, r3
}
 80042e0:	46c0      	nop			; (mov r8, r8)
 80042e2:	687b      	ldr	r3, [r7, #4]
 80042e4:	681b      	ldr	r3, [r3, #0]
 80042e6:	681a      	ldr	r2, [r3, #0]
 80042e8:	687b      	ldr	r3, [r7, #4]
 80042ea:	681b      	ldr	r3, [r3, #0]
 80042ec:	4948      	ldr	r1, [pc, #288]	; (8004410 <UART_RxISR_16BIT+0x1b0>)
 80042ee:	400a      	ands	r2, r1
 80042f0:	601a      	str	r2, [r3, #0]
 80042f2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80042f4:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80042f6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80042f8:	f383 8810 	msr	PRIMASK, r3
}
 80042fc:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80042fe:	f3ef 8310 	mrs	r3, PRIMASK
 8004302:	62fb      	str	r3, [r7, #44]	; 0x2c
  return(result);
 8004304:	6afb      	ldr	r3, [r7, #44]	; 0x2c

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004306:	643b      	str	r3, [r7, #64]	; 0x40
 8004308:	2301      	movs	r3, #1
 800430a:	633b      	str	r3, [r7, #48]	; 0x30
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800430c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800430e:	f383 8810 	msr	PRIMASK, r3
}
 8004312:	46c0      	nop			; (mov r8, r8)
 8004314:	687b      	ldr	r3, [r7, #4]
 8004316:	681b      	ldr	r3, [r3, #0]
 8004318:	689a      	ldr	r2, [r3, #8]
 800431a:	687b      	ldr	r3, [r7, #4]
 800431c:	681b      	ldr	r3, [r3, #0]
 800431e:	2101      	movs	r1, #1
 8004320:	438a      	bics	r2, r1
 8004322:	609a      	str	r2, [r3, #8]
 8004324:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004326:	637b      	str	r3, [r7, #52]	; 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004328:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800432a:	f383 8810 	msr	PRIMASK, r3
}
 800432e:	46c0      	nop			; (mov r8, r8)

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8004330:	687b      	ldr	r3, [r7, #4]
 8004332:	2280      	movs	r2, #128	; 0x80
 8004334:	2120      	movs	r1, #32
 8004336:	5099      	str	r1, [r3, r2]

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8004338:	687b      	ldr	r3, [r7, #4]
 800433a:	2200      	movs	r2, #0
 800433c:	669a      	str	r2, [r3, #104]	; 0x68

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 800433e:	687b      	ldr	r3, [r7, #4]
 8004340:	2200      	movs	r2, #0
 8004342:	665a      	str	r2, [r3, #100]	; 0x64

      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8004344:	687b      	ldr	r3, [r7, #4]
 8004346:	681b      	ldr	r3, [r3, #0]
 8004348:	685a      	ldr	r2, [r3, #4]
 800434a:	2380      	movs	r3, #128	; 0x80
 800434c:	041b      	lsls	r3, r3, #16
 800434e:	4013      	ands	r3, r2
 8004350:	d018      	beq.n	8004384 <UART_RxISR_16BIT+0x124>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004352:	f3ef 8310 	mrs	r3, PRIMASK
 8004356:	617b      	str	r3, [r7, #20]
  return(result);
 8004358:	697b      	ldr	r3, [r7, #20]
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800435a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800435c:	2301      	movs	r3, #1
 800435e:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004360:	69bb      	ldr	r3, [r7, #24]
 8004362:	f383 8810 	msr	PRIMASK, r3
}
 8004366:	46c0      	nop			; (mov r8, r8)
 8004368:	687b      	ldr	r3, [r7, #4]
 800436a:	681b      	ldr	r3, [r3, #0]
 800436c:	681a      	ldr	r2, [r3, #0]
 800436e:	687b      	ldr	r3, [r7, #4]
 8004370:	681b      	ldr	r3, [r3, #0]
 8004372:	4928      	ldr	r1, [pc, #160]	; (8004414 <UART_RxISR_16BIT+0x1b4>)
 8004374:	400a      	ands	r2, r1
 8004376:	601a      	str	r2, [r3, #0]
 8004378:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800437a:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800437c:	69fb      	ldr	r3, [r7, #28]
 800437e:	f383 8810 	msr	PRIMASK, r3
}
 8004382:	46c0      	nop			; (mov r8, r8)
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004384:	687b      	ldr	r3, [r7, #4]
 8004386:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004388:	2b01      	cmp	r3, #1
 800438a:	d12f      	bne.n	80043ec <UART_RxISR_16BIT+0x18c>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800438c:	687b      	ldr	r3, [r7, #4]
 800438e:	2200      	movs	r2, #0
 8004390:	661a      	str	r2, [r3, #96]	; 0x60
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004392:	f3ef 8310 	mrs	r3, PRIMASK
 8004396:	60bb      	str	r3, [r7, #8]
  return(result);
 8004398:	68bb      	ldr	r3, [r7, #8]

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800439a:	63bb      	str	r3, [r7, #56]	; 0x38
 800439c:	2301      	movs	r3, #1
 800439e:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80043a0:	68fb      	ldr	r3, [r7, #12]
 80043a2:	f383 8810 	msr	PRIMASK, r3
}
 80043a6:	46c0      	nop			; (mov r8, r8)
 80043a8:	687b      	ldr	r3, [r7, #4]
 80043aa:	681b      	ldr	r3, [r3, #0]
 80043ac:	681a      	ldr	r2, [r3, #0]
 80043ae:	687b      	ldr	r3, [r7, #4]
 80043b0:	681b      	ldr	r3, [r3, #0]
 80043b2:	2110      	movs	r1, #16
 80043b4:	438a      	bics	r2, r1
 80043b6:	601a      	str	r2, [r3, #0]
 80043b8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80043ba:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80043bc:	693b      	ldr	r3, [r7, #16]
 80043be:	f383 8810 	msr	PRIMASK, r3
}
 80043c2:	46c0      	nop			; (mov r8, r8)

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 80043c4:	687b      	ldr	r3, [r7, #4]
 80043c6:	681b      	ldr	r3, [r3, #0]
 80043c8:	69db      	ldr	r3, [r3, #28]
 80043ca:	2210      	movs	r2, #16
 80043cc:	4013      	ands	r3, r2
 80043ce:	2b10      	cmp	r3, #16
 80043d0:	d103      	bne.n	80043da <UART_RxISR_16BIT+0x17a>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80043d2:	687b      	ldr	r3, [r7, #4]
 80043d4:	681b      	ldr	r3, [r3, #0]
 80043d6:	2210      	movs	r2, #16
 80043d8:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80043da:	687b      	ldr	r3, [r7, #4]
 80043dc:	2258      	movs	r2, #88	; 0x58
 80043de:	5a9a      	ldrh	r2, [r3, r2]
 80043e0:	687b      	ldr	r3, [r7, #4]
 80043e2:	0011      	movs	r1, r2
 80043e4:	0018      	movs	r0, r3
 80043e6:	f7ff f8dd 	bl	80035a4 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 80043ea:	e00c      	b.n	8004406 <UART_RxISR_16BIT+0x1a6>
        HAL_UART_RxCpltCallback(huart);
 80043ec:	687b      	ldr	r3, [r7, #4]
 80043ee:	0018      	movs	r0, r3
 80043f0:	f7fb ff76 	bl	80002e0 <HAL_UART_RxCpltCallback>
}
 80043f4:	e007      	b.n	8004406 <UART_RxISR_16BIT+0x1a6>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 80043f6:	687b      	ldr	r3, [r7, #4]
 80043f8:	681b      	ldr	r3, [r3, #0]
 80043fa:	699a      	ldr	r2, [r3, #24]
 80043fc:	687b      	ldr	r3, [r7, #4]
 80043fe:	681b      	ldr	r3, [r3, #0]
 8004400:	2108      	movs	r1, #8
 8004402:	430a      	orrs	r2, r1
 8004404:	619a      	str	r2, [r3, #24]
}
 8004406:	46c0      	nop			; (mov r8, r8)
 8004408:	46bd      	mov	sp, r7
 800440a:	b014      	add	sp, #80	; 0x50
 800440c:	bd80      	pop	{r7, pc}
 800440e:	46c0      	nop			; (mov r8, r8)
 8004410:	fffffedf 	.word	0xfffffedf
 8004414:	fbffffff 	.word	0xfbffffff

08004418 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8004418:	b580      	push	{r7, lr}
 800441a:	b082      	sub	sp, #8
 800441c:	af00      	add	r7, sp, #0
 800441e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8004420:	46c0      	nop			; (mov r8, r8)
 8004422:	46bd      	mov	sp, r7
 8004424:	b002      	add	sp, #8
 8004426:	bd80      	pop	{r7, pc}

08004428 <__libc_init_array>:
 8004428:	b570      	push	{r4, r5, r6, lr}
 800442a:	2600      	movs	r6, #0
 800442c:	4d0c      	ldr	r5, [pc, #48]	; (8004460 <__libc_init_array+0x38>)
 800442e:	4c0d      	ldr	r4, [pc, #52]	; (8004464 <__libc_init_array+0x3c>)
 8004430:	1b64      	subs	r4, r4, r5
 8004432:	10a4      	asrs	r4, r4, #2
 8004434:	42a6      	cmp	r6, r4
 8004436:	d109      	bne.n	800444c <__libc_init_array+0x24>
 8004438:	2600      	movs	r6, #0
 800443a:	f000 f821 	bl	8004480 <_init>
 800443e:	4d0a      	ldr	r5, [pc, #40]	; (8004468 <__libc_init_array+0x40>)
 8004440:	4c0a      	ldr	r4, [pc, #40]	; (800446c <__libc_init_array+0x44>)
 8004442:	1b64      	subs	r4, r4, r5
 8004444:	10a4      	asrs	r4, r4, #2
 8004446:	42a6      	cmp	r6, r4
 8004448:	d105      	bne.n	8004456 <__libc_init_array+0x2e>
 800444a:	bd70      	pop	{r4, r5, r6, pc}
 800444c:	00b3      	lsls	r3, r6, #2
 800444e:	58eb      	ldr	r3, [r5, r3]
 8004450:	4798      	blx	r3
 8004452:	3601      	adds	r6, #1
 8004454:	e7ee      	b.n	8004434 <__libc_init_array+0xc>
 8004456:	00b3      	lsls	r3, r6, #2
 8004458:	58eb      	ldr	r3, [r5, r3]
 800445a:	4798      	blx	r3
 800445c:	3601      	adds	r6, #1
 800445e:	e7f2      	b.n	8004446 <__libc_init_array+0x1e>
 8004460:	080044f8 	.word	0x080044f8
 8004464:	080044f8 	.word	0x080044f8
 8004468:	080044f8 	.word	0x080044f8
 800446c:	080044fc 	.word	0x080044fc

08004470 <memset>:
 8004470:	0003      	movs	r3, r0
 8004472:	1882      	adds	r2, r0, r2
 8004474:	4293      	cmp	r3, r2
 8004476:	d100      	bne.n	800447a <memset+0xa>
 8004478:	4770      	bx	lr
 800447a:	7019      	strb	r1, [r3, #0]
 800447c:	3301      	adds	r3, #1
 800447e:	e7f9      	b.n	8004474 <memset+0x4>

08004480 <_init>:
 8004480:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004482:	46c0      	nop			; (mov r8, r8)
 8004484:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004486:	bc08      	pop	{r3}
 8004488:	469e      	mov	lr, r3
 800448a:	4770      	bx	lr

0800448c <_fini>:
 800448c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800448e:	46c0      	nop			; (mov r8, r8)
 8004490:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004492:	bc08      	pop	{r3}
 8004494:	469e      	mov	lr, r3
 8004496:	4770      	bx	lr

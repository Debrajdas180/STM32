
7_Segment_Display.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000459c  080000c0  080000c0  000100c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000038  0800465c  0800465c  0001465c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004694  08004694  000200cc  2**0
                  CONTENTS
  4 .ARM          00000000  08004694  08004694  000200cc  2**0
                  CONTENTS
  5 .preinit_array 00000000  08004694  08004694  000200cc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004694  08004694  00014694  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08004698  08004698  00014698  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000000cc  20000000  0800469c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000110  200000cc  08004768  000200cc  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200001dc  08004768  000201dc  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  000200cc  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000edfa  00000000  00000000  000200f4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001fdc  00000000  00000000  0002eeee  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000ca0  00000000  00000000  00030ed0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000bd8  00000000  00000000  00031b70  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00019c31  00000000  00000000  00032748  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000f4ca  00000000  00000000  0004c379  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00097d90  00000000  00000000  0005b843  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000f35d3  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002d10  00000000  00000000  000f3624  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	; (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	; (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	; (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	200000cc 	.word	0x200000cc
 80000e0:	00000000 	.word	0x00000000
 80000e4:	08004644 	.word	0x08004644

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	; (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	; (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	; (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			; (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	200000d0 	.word	0x200000d0
 8000104:	08004644 	.word	0x08004644

08000108 <strlen>:
 8000108:	2300      	movs	r3, #0
 800010a:	5cc2      	ldrb	r2, [r0, r3]
 800010c:	3301      	adds	r3, #1
 800010e:	2a00      	cmp	r2, #0
 8000110:	d1fb      	bne.n	800010a <strlen+0x2>
 8000112:	1e58      	subs	r0, r3, #1
 8000114:	4770      	bx	lr
	...

08000118 <__udivsi3>:
 8000118:	2200      	movs	r2, #0
 800011a:	0843      	lsrs	r3, r0, #1
 800011c:	428b      	cmp	r3, r1
 800011e:	d374      	bcc.n	800020a <__udivsi3+0xf2>
 8000120:	0903      	lsrs	r3, r0, #4
 8000122:	428b      	cmp	r3, r1
 8000124:	d35f      	bcc.n	80001e6 <__udivsi3+0xce>
 8000126:	0a03      	lsrs	r3, r0, #8
 8000128:	428b      	cmp	r3, r1
 800012a:	d344      	bcc.n	80001b6 <__udivsi3+0x9e>
 800012c:	0b03      	lsrs	r3, r0, #12
 800012e:	428b      	cmp	r3, r1
 8000130:	d328      	bcc.n	8000184 <__udivsi3+0x6c>
 8000132:	0c03      	lsrs	r3, r0, #16
 8000134:	428b      	cmp	r3, r1
 8000136:	d30d      	bcc.n	8000154 <__udivsi3+0x3c>
 8000138:	22ff      	movs	r2, #255	; 0xff
 800013a:	0209      	lsls	r1, r1, #8
 800013c:	ba12      	rev	r2, r2
 800013e:	0c03      	lsrs	r3, r0, #16
 8000140:	428b      	cmp	r3, r1
 8000142:	d302      	bcc.n	800014a <__udivsi3+0x32>
 8000144:	1212      	asrs	r2, r2, #8
 8000146:	0209      	lsls	r1, r1, #8
 8000148:	d065      	beq.n	8000216 <__udivsi3+0xfe>
 800014a:	0b03      	lsrs	r3, r0, #12
 800014c:	428b      	cmp	r3, r1
 800014e:	d319      	bcc.n	8000184 <__udivsi3+0x6c>
 8000150:	e000      	b.n	8000154 <__udivsi3+0x3c>
 8000152:	0a09      	lsrs	r1, r1, #8
 8000154:	0bc3      	lsrs	r3, r0, #15
 8000156:	428b      	cmp	r3, r1
 8000158:	d301      	bcc.n	800015e <__udivsi3+0x46>
 800015a:	03cb      	lsls	r3, r1, #15
 800015c:	1ac0      	subs	r0, r0, r3
 800015e:	4152      	adcs	r2, r2
 8000160:	0b83      	lsrs	r3, r0, #14
 8000162:	428b      	cmp	r3, r1
 8000164:	d301      	bcc.n	800016a <__udivsi3+0x52>
 8000166:	038b      	lsls	r3, r1, #14
 8000168:	1ac0      	subs	r0, r0, r3
 800016a:	4152      	adcs	r2, r2
 800016c:	0b43      	lsrs	r3, r0, #13
 800016e:	428b      	cmp	r3, r1
 8000170:	d301      	bcc.n	8000176 <__udivsi3+0x5e>
 8000172:	034b      	lsls	r3, r1, #13
 8000174:	1ac0      	subs	r0, r0, r3
 8000176:	4152      	adcs	r2, r2
 8000178:	0b03      	lsrs	r3, r0, #12
 800017a:	428b      	cmp	r3, r1
 800017c:	d301      	bcc.n	8000182 <__udivsi3+0x6a>
 800017e:	030b      	lsls	r3, r1, #12
 8000180:	1ac0      	subs	r0, r0, r3
 8000182:	4152      	adcs	r2, r2
 8000184:	0ac3      	lsrs	r3, r0, #11
 8000186:	428b      	cmp	r3, r1
 8000188:	d301      	bcc.n	800018e <__udivsi3+0x76>
 800018a:	02cb      	lsls	r3, r1, #11
 800018c:	1ac0      	subs	r0, r0, r3
 800018e:	4152      	adcs	r2, r2
 8000190:	0a83      	lsrs	r3, r0, #10
 8000192:	428b      	cmp	r3, r1
 8000194:	d301      	bcc.n	800019a <__udivsi3+0x82>
 8000196:	028b      	lsls	r3, r1, #10
 8000198:	1ac0      	subs	r0, r0, r3
 800019a:	4152      	adcs	r2, r2
 800019c:	0a43      	lsrs	r3, r0, #9
 800019e:	428b      	cmp	r3, r1
 80001a0:	d301      	bcc.n	80001a6 <__udivsi3+0x8e>
 80001a2:	024b      	lsls	r3, r1, #9
 80001a4:	1ac0      	subs	r0, r0, r3
 80001a6:	4152      	adcs	r2, r2
 80001a8:	0a03      	lsrs	r3, r0, #8
 80001aa:	428b      	cmp	r3, r1
 80001ac:	d301      	bcc.n	80001b2 <__udivsi3+0x9a>
 80001ae:	020b      	lsls	r3, r1, #8
 80001b0:	1ac0      	subs	r0, r0, r3
 80001b2:	4152      	adcs	r2, r2
 80001b4:	d2cd      	bcs.n	8000152 <__udivsi3+0x3a>
 80001b6:	09c3      	lsrs	r3, r0, #7
 80001b8:	428b      	cmp	r3, r1
 80001ba:	d301      	bcc.n	80001c0 <__udivsi3+0xa8>
 80001bc:	01cb      	lsls	r3, r1, #7
 80001be:	1ac0      	subs	r0, r0, r3
 80001c0:	4152      	adcs	r2, r2
 80001c2:	0983      	lsrs	r3, r0, #6
 80001c4:	428b      	cmp	r3, r1
 80001c6:	d301      	bcc.n	80001cc <__udivsi3+0xb4>
 80001c8:	018b      	lsls	r3, r1, #6
 80001ca:	1ac0      	subs	r0, r0, r3
 80001cc:	4152      	adcs	r2, r2
 80001ce:	0943      	lsrs	r3, r0, #5
 80001d0:	428b      	cmp	r3, r1
 80001d2:	d301      	bcc.n	80001d8 <__udivsi3+0xc0>
 80001d4:	014b      	lsls	r3, r1, #5
 80001d6:	1ac0      	subs	r0, r0, r3
 80001d8:	4152      	adcs	r2, r2
 80001da:	0903      	lsrs	r3, r0, #4
 80001dc:	428b      	cmp	r3, r1
 80001de:	d301      	bcc.n	80001e4 <__udivsi3+0xcc>
 80001e0:	010b      	lsls	r3, r1, #4
 80001e2:	1ac0      	subs	r0, r0, r3
 80001e4:	4152      	adcs	r2, r2
 80001e6:	08c3      	lsrs	r3, r0, #3
 80001e8:	428b      	cmp	r3, r1
 80001ea:	d301      	bcc.n	80001f0 <__udivsi3+0xd8>
 80001ec:	00cb      	lsls	r3, r1, #3
 80001ee:	1ac0      	subs	r0, r0, r3
 80001f0:	4152      	adcs	r2, r2
 80001f2:	0883      	lsrs	r3, r0, #2
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d301      	bcc.n	80001fc <__udivsi3+0xe4>
 80001f8:	008b      	lsls	r3, r1, #2
 80001fa:	1ac0      	subs	r0, r0, r3
 80001fc:	4152      	adcs	r2, r2
 80001fe:	0843      	lsrs	r3, r0, #1
 8000200:	428b      	cmp	r3, r1
 8000202:	d301      	bcc.n	8000208 <__udivsi3+0xf0>
 8000204:	004b      	lsls	r3, r1, #1
 8000206:	1ac0      	subs	r0, r0, r3
 8000208:	4152      	adcs	r2, r2
 800020a:	1a41      	subs	r1, r0, r1
 800020c:	d200      	bcs.n	8000210 <__udivsi3+0xf8>
 800020e:	4601      	mov	r1, r0
 8000210:	4152      	adcs	r2, r2
 8000212:	4610      	mov	r0, r2
 8000214:	4770      	bx	lr
 8000216:	e7ff      	b.n	8000218 <__udivsi3+0x100>
 8000218:	b501      	push	{r0, lr}
 800021a:	2000      	movs	r0, #0
 800021c:	f000 f806 	bl	800022c <__aeabi_idiv0>
 8000220:	bd02      	pop	{r1, pc}
 8000222:	46c0      	nop			; (mov r8, r8)

08000224 <__aeabi_uidivmod>:
 8000224:	2900      	cmp	r1, #0
 8000226:	d0f7      	beq.n	8000218 <__udivsi3+0x100>
 8000228:	e776      	b.n	8000118 <__udivsi3>
 800022a:	4770      	bx	lr

0800022c <__aeabi_idiv0>:
 800022c:	4770      	bx	lr
 800022e:	46c0      	nop			; (mov r8, r8)

08000230 <disp_setNumber>:
if (j == size){
	j = 0 ;
			}
}

void disp_setNumber(uint8_t value){
 8000230:	b580      	push	{r7, lr}
 8000232:	b084      	sub	sp, #16
 8000234:	af00      	add	r7, sp, #0
 8000236:	0002      	movs	r2, r0
 8000238:	1dfb      	adds	r3, r7, #7
 800023a:	701a      	strb	r2, [r3, #0]

	static volatile int i = 0;
	static volatile uint8_t digit ;
	uint32_t valurToShift;
	if(value!=0){
 800023c:	1dfb      	adds	r3, r7, #7
 800023e:	781b      	ldrb	r3, [r3, #0]
 8000240:	2b00      	cmp	r3, #0
 8000242:	d00e      	beq.n	8000262 <disp_setNumber+0x32>
		digit =(value)-'0';
 8000244:	1dfb      	adds	r3, r7, #7
 8000246:	781b      	ldrb	r3, [r3, #0]
 8000248:	3b30      	subs	r3, #48	; 0x30
 800024a:	b2da      	uxtb	r2, r3
 800024c:	4b25      	ldr	r3, [pc, #148]	; (80002e4 <disp_setNumber+0xb4>)
 800024e:	701a      	strb	r2, [r3, #0]
		valurToShift=var[digit];
 8000250:	4b24      	ldr	r3, [pc, #144]	; (80002e4 <disp_setNumber+0xb4>)
 8000252:	781b      	ldrb	r3, [r3, #0]
 8000254:	b2db      	uxtb	r3, r3
 8000256:	001a      	movs	r2, r3
 8000258:	4b23      	ldr	r3, [pc, #140]	; (80002e8 <disp_setNumber+0xb8>)
 800025a:	0092      	lsls	r2, r2, #2
 800025c:	58d3      	ldr	r3, [r2, r3]
 800025e:	60fb      	str	r3, [r7, #12]
 8000260:	e001      	b.n	8000266 <disp_setNumber+0x36>
	}
	else{
		valurToShift=0;
 8000262:	2300      	movs	r3, #0
 8000264:	60fb      	str	r3, [r7, #12]
	}
    HAL_GPIO_WritePin(LE_GPIO_port, LE_pin, 0);
 8000266:	2380      	movs	r3, #128	; 0x80
 8000268:	00db      	lsls	r3, r3, #3
 800026a:	4820      	ldr	r0, [pc, #128]	; (80002ec <disp_setNumber+0xbc>)
 800026c:	2200      	movs	r2, #0
 800026e:	0019      	movs	r1, r3
 8000270:	f000 ff16 	bl	80010a0 <HAL_GPIO_WritePin>
	  if (valurToShift & (uint32_t)1<<i){
 8000274:	4b1e      	ldr	r3, [pc, #120]	; (80002f0 <disp_setNumber+0xc0>)
 8000276:	681b      	ldr	r3, [r3, #0]
 8000278:	68fa      	ldr	r2, [r7, #12]
 800027a:	40da      	lsrs	r2, r3
 800027c:	0013      	movs	r3, r2
 800027e:	2201      	movs	r2, #1
 8000280:	4013      	ands	r3, r2
 8000282:	d006      	beq.n	8000292 <disp_setNumber+0x62>
	  	HAL_GPIO_WritePin(SDA_GPIO_Port, SDA_Pin, 1);
 8000284:	4b19      	ldr	r3, [pc, #100]	; (80002ec <disp_setNumber+0xbc>)
 8000286:	2201      	movs	r2, #1
 8000288:	2102      	movs	r1, #2
 800028a:	0018      	movs	r0, r3
 800028c:	f000 ff08 	bl	80010a0 <HAL_GPIO_WritePin>
 8000290:	e005      	b.n	800029e <disp_setNumber+0x6e>
	  }
	  else
	  	HAL_GPIO_WritePin(SDA_GPIO_Port, SDA_Pin, 0);
 8000292:	4b16      	ldr	r3, [pc, #88]	; (80002ec <disp_setNumber+0xbc>)
 8000294:	2200      	movs	r2, #0
 8000296:	2102      	movs	r1, #2
 8000298:	0018      	movs	r0, r3
 800029a:	f000 ff01 	bl	80010a0 <HAL_GPIO_WritePin>
	  i++;
 800029e:	4b14      	ldr	r3, [pc, #80]	; (80002f0 <disp_setNumber+0xc0>)
 80002a0:	681b      	ldr	r3, [r3, #0]
 80002a2:	1c5a      	adds	r2, r3, #1
 80002a4:	4b12      	ldr	r3, [pc, #72]	; (80002f0 <disp_setNumber+0xc0>)
 80002a6:	601a      	str	r2, [r3, #0]
	  if (i==33){
 80002a8:	4b11      	ldr	r3, [pc, #68]	; (80002f0 <disp_setNumber+0xc0>)
 80002aa:	681b      	ldr	r3, [r3, #0]
 80002ac:	2b21      	cmp	r3, #33	; 0x21
 80002ae:	d115      	bne.n	80002dc <disp_setNumber+0xac>
	  	i = 0;
 80002b0:	4b0f      	ldr	r3, [pc, #60]	; (80002f0 <disp_setNumber+0xc0>)
 80002b2:	2200      	movs	r2, #0
 80002b4:	601a      	str	r2, [r3, #0]
	  	HAL_GPIO_WritePin(LE_GPIO_port, LE_pin, 1);
 80002b6:	2380      	movs	r3, #128	; 0x80
 80002b8:	00db      	lsls	r3, r3, #3
 80002ba:	480c      	ldr	r0, [pc, #48]	; (80002ec <disp_setNumber+0xbc>)
 80002bc:	2201      	movs	r2, #1
 80002be:	0019      	movs	r1, r3
 80002c0:	f000 feee 	bl	80010a0 <HAL_GPIO_WritePin>
	  	HAL_GPIO_WritePin(OE_GPIO_port, OE_pin, 0);
 80002c4:	2380      	movs	r3, #128	; 0x80
 80002c6:	021b      	lsls	r3, r3, #8
 80002c8:	4808      	ldr	r0, [pc, #32]	; (80002ec <disp_setNumber+0xbc>)
 80002ca:	2200      	movs	r2, #0
 80002cc:	0019      	movs	r1, r3
 80002ce:	f000 fee7 	bl	80010a0 <HAL_GPIO_WritePin>
	  	HAL_TIM_PWM_Stop_IT(&htim1, TIM_CHANNEL_1);
 80002d2:	4b08      	ldr	r3, [pc, #32]	; (80002f4 <disp_setNumber+0xc4>)
 80002d4:	2100      	movs	r1, #0
 80002d6:	0018      	movs	r0, r3
 80002d8:	f001 fe98 	bl	800200c <HAL_TIM_PWM_Stop_IT>
	  	  	  	  }
		}
 80002dc:	46c0      	nop			; (mov r8, r8)
 80002de:	46bd      	mov	sp, r7
 80002e0:	b004      	add	sp, #16
 80002e2:	bd80      	pop	{r7, pc}
 80002e4:	200000e8 	.word	0x200000e8
 80002e8:	20000000 	.word	0x20000000
 80002ec:	48000400 	.word	0x48000400
 80002f0:	200000ec 	.word	0x200000ec
 80002f4:	200000f0 	.word	0x200000f0

080002f8 <HAL_UART_RxCpltCallback>:
size_t length = 0;
size_t g_receivedFlag=0;
uint8_t g_num ;


void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart){
 80002f8:	b580      	push	{r7, lr}
 80002fa:	b082      	sub	sp, #8
 80002fc:	af00      	add	r7, sp, #0
 80002fe:	6078      	str	r0, [r7, #4]
	if(length<10 && (rbuf[length]!='\r' && rbuf[length]!='\n') ){
 8000300:	4b1c      	ldr	r3, [pc, #112]	; (8000374 <HAL_UART_RxCpltCallback+0x7c>)
 8000302:	681b      	ldr	r3, [r3, #0]
 8000304:	2b09      	cmp	r3, #9
 8000306:	d81a      	bhi.n	800033e <HAL_UART_RxCpltCallback+0x46>
 8000308:	4b1a      	ldr	r3, [pc, #104]	; (8000374 <HAL_UART_RxCpltCallback+0x7c>)
 800030a:	681b      	ldr	r3, [r3, #0]
 800030c:	4a1a      	ldr	r2, [pc, #104]	; (8000378 <HAL_UART_RxCpltCallback+0x80>)
 800030e:	5cd3      	ldrb	r3, [r2, r3]
 8000310:	2b0d      	cmp	r3, #13
 8000312:	d014      	beq.n	800033e <HAL_UART_RxCpltCallback+0x46>
 8000314:	4b17      	ldr	r3, [pc, #92]	; (8000374 <HAL_UART_RxCpltCallback+0x7c>)
 8000316:	681b      	ldr	r3, [r3, #0]
 8000318:	4a17      	ldr	r2, [pc, #92]	; (8000378 <HAL_UART_RxCpltCallback+0x80>)
 800031a:	5cd3      	ldrb	r3, [r2, r3]
 800031c:	2b0a      	cmp	r3, #10
 800031e:	d00e      	beq.n	800033e <HAL_UART_RxCpltCallback+0x46>
		length++;
 8000320:	4b14      	ldr	r3, [pc, #80]	; (8000374 <HAL_UART_RxCpltCallback+0x7c>)
 8000322:	681b      	ldr	r3, [r3, #0]
 8000324:	1c5a      	adds	r2, r3, #1
 8000326:	4b13      	ldr	r3, [pc, #76]	; (8000374 <HAL_UART_RxCpltCallback+0x7c>)
 8000328:	601a      	str	r2, [r3, #0]
		HAL_UART_Receive_IT(&huart2,rbuf+length,1);
 800032a:	4b12      	ldr	r3, [pc, #72]	; (8000374 <HAL_UART_RxCpltCallback+0x7c>)
 800032c:	681a      	ldr	r2, [r3, #0]
 800032e:	4b12      	ldr	r3, [pc, #72]	; (8000378 <HAL_UART_RxCpltCallback+0x80>)
 8000330:	18d1      	adds	r1, r2, r3
 8000332:	4b12      	ldr	r3, [pc, #72]	; (800037c <HAL_UART_RxCpltCallback+0x84>)
 8000334:	2201      	movs	r2, #1
 8000336:	0018      	movs	r0, r3
 8000338:	f002 fece 	bl	80030d8 <HAL_UART_Receive_IT>
	else if(rbuf[length]=='\r' || rbuf[length]=='\n'){
		 g_num = rbuf[length-1];
		 g_receivedFlag=1;

	}
}
 800033c:	e015      	b.n	800036a <HAL_UART_RxCpltCallback+0x72>
	else if(rbuf[length]=='\r' || rbuf[length]=='\n'){
 800033e:	4b0d      	ldr	r3, [pc, #52]	; (8000374 <HAL_UART_RxCpltCallback+0x7c>)
 8000340:	681b      	ldr	r3, [r3, #0]
 8000342:	4a0d      	ldr	r2, [pc, #52]	; (8000378 <HAL_UART_RxCpltCallback+0x80>)
 8000344:	5cd3      	ldrb	r3, [r2, r3]
 8000346:	2b0d      	cmp	r3, #13
 8000348:	d005      	beq.n	8000356 <HAL_UART_RxCpltCallback+0x5e>
 800034a:	4b0a      	ldr	r3, [pc, #40]	; (8000374 <HAL_UART_RxCpltCallback+0x7c>)
 800034c:	681b      	ldr	r3, [r3, #0]
 800034e:	4a0a      	ldr	r2, [pc, #40]	; (8000378 <HAL_UART_RxCpltCallback+0x80>)
 8000350:	5cd3      	ldrb	r3, [r2, r3]
 8000352:	2b0a      	cmp	r3, #10
 8000354:	d109      	bne.n	800036a <HAL_UART_RxCpltCallback+0x72>
		 g_num = rbuf[length-1];
 8000356:	4b07      	ldr	r3, [pc, #28]	; (8000374 <HAL_UART_RxCpltCallback+0x7c>)
 8000358:	681b      	ldr	r3, [r3, #0]
 800035a:	3b01      	subs	r3, #1
 800035c:	4a06      	ldr	r2, [pc, #24]	; (8000378 <HAL_UART_RxCpltCallback+0x80>)
 800035e:	5cd2      	ldrb	r2, [r2, r3]
 8000360:	4b07      	ldr	r3, [pc, #28]	; (8000380 <HAL_UART_RxCpltCallback+0x88>)
 8000362:	701a      	strb	r2, [r3, #0]
		 g_receivedFlag=1;
 8000364:	4b07      	ldr	r3, [pc, #28]	; (8000384 <HAL_UART_RxCpltCallback+0x8c>)
 8000366:	2201      	movs	r2, #1
 8000368:	601a      	str	r2, [r3, #0]
}
 800036a:	46c0      	nop			; (mov r8, r8)
 800036c:	46bd      	mov	sp, r7
 800036e:	b002      	add	sp, #8
 8000370:	bd80      	pop	{r7, pc}
 8000372:	46c0      	nop			; (mov r8, r8)
 8000374:	200001cc 	.word	0x200001cc
 8000378:	200001c0 	.word	0x200001c0
 800037c:	20000138 	.word	0x20000138
 8000380:	200001d4 	.word	0x200001d4
 8000384:	200001d0 	.word	0x200001d0

08000388 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000388:	b580      	push	{r7, lr}
 800038a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800038c:	f000 fb50 	bl	8000a30 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000390:	f000 f866 	bl	8000460 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000394:	f000 f99e 	bl	80006d4 <MX_GPIO_Init>
  MX_TIM1_Init();
 8000398:	f000 f8b6 	bl	8000508 <MX_TIM1_Init>
  MX_USART2_UART_Init();
 800039c:	f000 f96a 	bl	8000674 <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */
  g_num=0;
 80003a0:	4b27      	ldr	r3, [pc, #156]	; (8000440 <main+0xb8>)
 80003a2:	2200      	movs	r2, #0
 80003a4:	701a      	strb	r2, [r3, #0]
  TIM1->CCR1 = 50 ;
 80003a6:	4b27      	ldr	r3, [pc, #156]	; (8000444 <main+0xbc>)
 80003a8:	2232      	movs	r2, #50	; 0x32
 80003aa:	635a      	str	r2, [r3, #52]	; 0x34
  HAL_TIM_PWM_Start_IT(&htim1, TIM_CHANNEL_1);
 80003ac:	4b26      	ldr	r3, [pc, #152]	; (8000448 <main+0xc0>)
 80003ae:	2100      	movs	r1, #0
 80003b0:	0018      	movs	r0, r3
 80003b2:	f001 fd2b 	bl	8001e0c <HAL_TIM_PWM_Start_IT>
  HAL_UART_Transmit_IT(&huart2, tbuf, strlen((char*)tbuf));
 80003b6:	4b25      	ldr	r3, [pc, #148]	; (800044c <main+0xc4>)
 80003b8:	0018      	movs	r0, r3
 80003ba:	f7ff fea5 	bl	8000108 <strlen>
 80003be:	0003      	movs	r3, r0
 80003c0:	b29a      	uxth	r2, r3
 80003c2:	4922      	ldr	r1, [pc, #136]	; (800044c <main+0xc4>)
 80003c4:	4b22      	ldr	r3, [pc, #136]	; (8000450 <main+0xc8>)
 80003c6:	0018      	movs	r0, r3
 80003c8:	f002 fe16 	bl	8002ff8 <HAL_UART_Transmit_IT>
  HAL_UART_Receive_IT(&huart2,rbuf, 1);
 80003cc:	4921      	ldr	r1, [pc, #132]	; (8000454 <main+0xcc>)
 80003ce:	4b20      	ldr	r3, [pc, #128]	; (8000450 <main+0xc8>)
 80003d0:	2201      	movs	r2, #1
 80003d2:	0018      	movs	r0, r3
 80003d4:	f002 fe80 	bl	80030d8 <HAL_UART_Receive_IT>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {

	  if(g_receivedFlag){
 80003d8:	4b1f      	ldr	r3, [pc, #124]	; (8000458 <main+0xd0>)
 80003da:	681b      	ldr	r3, [r3, #0]
 80003dc:	2b00      	cmp	r3, #0
 80003de:	d0fb      	beq.n	80003d8 <main+0x50>
			  HAL_UART_Transmit_IT(&huart2, rbuf, length);
 80003e0:	4b1e      	ldr	r3, [pc, #120]	; (800045c <main+0xd4>)
 80003e2:	681b      	ldr	r3, [r3, #0]
 80003e4:	b29a      	uxth	r2, r3
 80003e6:	491b      	ldr	r1, [pc, #108]	; (8000454 <main+0xcc>)
 80003e8:	4b19      	ldr	r3, [pc, #100]	; (8000450 <main+0xc8>)
 80003ea:	0018      	movs	r0, r3
 80003ec:	f002 fe04 	bl	8002ff8 <HAL_UART_Transmit_IT>
			  if (g_num >= '0' && g_num <= '9'){
 80003f0:	4b13      	ldr	r3, [pc, #76]	; (8000440 <main+0xb8>)
 80003f2:	781b      	ldrb	r3, [r3, #0]
 80003f4:	2b2f      	cmp	r3, #47	; 0x2f
 80003f6:	d90b      	bls.n	8000410 <main+0x88>
 80003f8:	4b11      	ldr	r3, [pc, #68]	; (8000440 <main+0xb8>)
 80003fa:	781b      	ldrb	r3, [r3, #0]
 80003fc:	2b39      	cmp	r3, #57	; 0x39
 80003fe:	d807      	bhi.n	8000410 <main+0x88>
				  TIM1->CCR1 = 50 ;
 8000400:	4b10      	ldr	r3, [pc, #64]	; (8000444 <main+0xbc>)
 8000402:	2232      	movs	r2, #50	; 0x32
 8000404:	635a      	str	r2, [r3, #52]	; 0x34
				  HAL_TIM_PWM_Start_IT(&htim1, TIM_CHANNEL_1);
 8000406:	4b10      	ldr	r3, [pc, #64]	; (8000448 <main+0xc0>)
 8000408:	2100      	movs	r1, #0
 800040a:	0018      	movs	r0, r3
 800040c:	f001 fcfe 	bl	8001e0c <HAL_TIM_PWM_Start_IT>
			  		}
			  g_receivedFlag=0;
 8000410:	4b11      	ldr	r3, [pc, #68]	; (8000458 <main+0xd0>)
 8000412:	2200      	movs	r2, #0
 8000414:	601a      	str	r2, [r3, #0]
			  length=0;
 8000416:	4b11      	ldr	r3, [pc, #68]	; (800045c <main+0xd4>)
 8000418:	2200      	movs	r2, #0
 800041a:	601a      	str	r2, [r3, #0]
			  HAL_UART_Transmit_IT(&huart2, tbuf, strlen((char*)tbuf));
 800041c:	4b0b      	ldr	r3, [pc, #44]	; (800044c <main+0xc4>)
 800041e:	0018      	movs	r0, r3
 8000420:	f7ff fe72 	bl	8000108 <strlen>
 8000424:	0003      	movs	r3, r0
 8000426:	b29a      	uxth	r2, r3
 8000428:	4908      	ldr	r1, [pc, #32]	; (800044c <main+0xc4>)
 800042a:	4b09      	ldr	r3, [pc, #36]	; (8000450 <main+0xc8>)
 800042c:	0018      	movs	r0, r3
 800042e:	f002 fde3 	bl	8002ff8 <HAL_UART_Transmit_IT>
			  HAL_UART_Receive_IT(&huart2,rbuf, 1);
 8000432:	4908      	ldr	r1, [pc, #32]	; (8000454 <main+0xcc>)
 8000434:	4b06      	ldr	r3, [pc, #24]	; (8000450 <main+0xc8>)
 8000436:	2201      	movs	r2, #1
 8000438:	0018      	movs	r0, r3
 800043a:	f002 fe4d 	bl	80030d8 <HAL_UART_Receive_IT>
	  if(g_receivedFlag){
 800043e:	e7cb      	b.n	80003d8 <main+0x50>
 8000440:	200001d4 	.word	0x200001d4
 8000444:	40012c00 	.word	0x40012c00
 8000448:	200000f0 	.word	0x200000f0
 800044c:	20000028 	.word	0x20000028
 8000450:	20000138 	.word	0x20000138
 8000454:	200001c0 	.word	0x200001c0
 8000458:	200001d0 	.word	0x200001d0
 800045c:	200001cc 	.word	0x200001cc

08000460 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000460:	b590      	push	{r4, r7, lr}
 8000462:	b099      	sub	sp, #100	; 0x64
 8000464:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000466:	242c      	movs	r4, #44	; 0x2c
 8000468:	193b      	adds	r3, r7, r4
 800046a:	0018      	movs	r0, r3
 800046c:	2334      	movs	r3, #52	; 0x34
 800046e:	001a      	movs	r2, r3
 8000470:	2100      	movs	r1, #0
 8000472:	f004 f8df 	bl	8004634 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000476:	231c      	movs	r3, #28
 8000478:	18fb      	adds	r3, r7, r3
 800047a:	0018      	movs	r0, r3
 800047c:	2310      	movs	r3, #16
 800047e:	001a      	movs	r2, r3
 8000480:	2100      	movs	r1, #0
 8000482:	f004 f8d7 	bl	8004634 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000486:	003b      	movs	r3, r7
 8000488:	0018      	movs	r0, r3
 800048a:	231c      	movs	r3, #28
 800048c:	001a      	movs	r2, r3
 800048e:	2100      	movs	r1, #0
 8000490:	f004 f8d0 	bl	8004634 <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI48;
 8000494:	193b      	adds	r3, r7, r4
 8000496:	2220      	movs	r2, #32
 8000498:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
 800049a:	193b      	adds	r3, r7, r4
 800049c:	2201      	movs	r2, #1
 800049e:	621a      	str	r2, [r3, #32]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80004a0:	193b      	adds	r3, r7, r4
 80004a2:	2200      	movs	r2, #0
 80004a4:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80004a6:	193b      	adds	r3, r7, r4
 80004a8:	0018      	movs	r0, r3
 80004aa:	f000 fe17 	bl	80010dc <HAL_RCC_OscConfig>
 80004ae:	1e03      	subs	r3, r0, #0
 80004b0:	d001      	beq.n	80004b6 <SystemClock_Config+0x56>
  {
    Error_Handler();
 80004b2:	f000 f971 	bl	8000798 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80004b6:	211c      	movs	r1, #28
 80004b8:	187b      	adds	r3, r7, r1
 80004ba:	2207      	movs	r2, #7
 80004bc:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI48;
 80004be:	187b      	adds	r3, r7, r1
 80004c0:	2203      	movs	r2, #3
 80004c2:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80004c4:	187b      	adds	r3, r7, r1
 80004c6:	2200      	movs	r2, #0
 80004c8:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80004ca:	187b      	adds	r3, r7, r1
 80004cc:	2200      	movs	r2, #0
 80004ce:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 80004d0:	187b      	adds	r3, r7, r1
 80004d2:	2101      	movs	r1, #1
 80004d4:	0018      	movs	r0, r3
 80004d6:	f001 f987 	bl	80017e8 <HAL_RCC_ClockConfig>
 80004da:	1e03      	subs	r3, r0, #0
 80004dc:	d001      	beq.n	80004e2 <SystemClock_Config+0x82>
  {
    Error_Handler();
 80004de:	f000 f95b 	bl	8000798 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 80004e2:	003b      	movs	r3, r7
 80004e4:	2202      	movs	r2, #2
 80004e6:	601a      	str	r2, [r3, #0]
  PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 80004e8:	003b      	movs	r3, r7
 80004ea:	2200      	movs	r2, #0
 80004ec:	60da      	str	r2, [r3, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80004ee:	003b      	movs	r3, r7
 80004f0:	0018      	movs	r0, r3
 80004f2:	f001 fae5 	bl	8001ac0 <HAL_RCCEx_PeriphCLKConfig>
 80004f6:	1e03      	subs	r3, r0, #0
 80004f8:	d001      	beq.n	80004fe <SystemClock_Config+0x9e>
  {
    Error_Handler();
 80004fa:	f000 f94d 	bl	8000798 <Error_Handler>
  }
}
 80004fe:	46c0      	nop			; (mov r8, r8)
 8000500:	46bd      	mov	sp, r7
 8000502:	b019      	add	sp, #100	; 0x64
 8000504:	bd90      	pop	{r4, r7, pc}
	...

08000508 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8000508:	b580      	push	{r7, lr}
 800050a:	b096      	sub	sp, #88	; 0x58
 800050c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800050e:	2348      	movs	r3, #72	; 0x48
 8000510:	18fb      	adds	r3, r7, r3
 8000512:	0018      	movs	r0, r3
 8000514:	2310      	movs	r3, #16
 8000516:	001a      	movs	r2, r3
 8000518:	2100      	movs	r1, #0
 800051a:	f004 f88b 	bl	8004634 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800051e:	2340      	movs	r3, #64	; 0x40
 8000520:	18fb      	adds	r3, r7, r3
 8000522:	0018      	movs	r0, r3
 8000524:	2308      	movs	r3, #8
 8000526:	001a      	movs	r2, r3
 8000528:	2100      	movs	r1, #0
 800052a:	f004 f883 	bl	8004634 <memset>
  TIM_OC_InitTypeDef sConfigOC = {0};
 800052e:	2324      	movs	r3, #36	; 0x24
 8000530:	18fb      	adds	r3, r7, r3
 8000532:	0018      	movs	r0, r3
 8000534:	231c      	movs	r3, #28
 8000536:	001a      	movs	r2, r3
 8000538:	2100      	movs	r1, #0
 800053a:	f004 f87b 	bl	8004634 <memset>
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 800053e:	1d3b      	adds	r3, r7, #4
 8000540:	0018      	movs	r0, r3
 8000542:	2320      	movs	r3, #32
 8000544:	001a      	movs	r2, r3
 8000546:	2100      	movs	r1, #0
 8000548:	f004 f874 	bl	8004634 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 800054c:	4b46      	ldr	r3, [pc, #280]	; (8000668 <MX_TIM1_Init+0x160>)
 800054e:	4a47      	ldr	r2, [pc, #284]	; (800066c <MX_TIM1_Init+0x164>)
 8000550:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 10000;
 8000552:	4b45      	ldr	r3, [pc, #276]	; (8000668 <MX_TIM1_Init+0x160>)
 8000554:	4a46      	ldr	r2, [pc, #280]	; (8000670 <MX_TIM1_Init+0x168>)
 8000556:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000558:	4b43      	ldr	r3, [pc, #268]	; (8000668 <MX_TIM1_Init+0x160>)
 800055a:	2200      	movs	r2, #0
 800055c:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 150;
 800055e:	4b42      	ldr	r3, [pc, #264]	; (8000668 <MX_TIM1_Init+0x160>)
 8000560:	2296      	movs	r2, #150	; 0x96
 8000562:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000564:	4b40      	ldr	r3, [pc, #256]	; (8000668 <MX_TIM1_Init+0x160>)
 8000566:	2200      	movs	r2, #0
 8000568:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 800056a:	4b3f      	ldr	r3, [pc, #252]	; (8000668 <MX_TIM1_Init+0x160>)
 800056c:	2200      	movs	r2, #0
 800056e:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8000570:	4b3d      	ldr	r3, [pc, #244]	; (8000668 <MX_TIM1_Init+0x160>)
 8000572:	2280      	movs	r2, #128	; 0x80
 8000574:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8000576:	4b3c      	ldr	r3, [pc, #240]	; (8000668 <MX_TIM1_Init+0x160>)
 8000578:	0018      	movs	r0, r3
 800057a:	f001 fb9f 	bl	8001cbc <HAL_TIM_Base_Init>
 800057e:	1e03      	subs	r3, r0, #0
 8000580:	d001      	beq.n	8000586 <MX_TIM1_Init+0x7e>
  {
    Error_Handler();
 8000582:	f000 f909 	bl	8000798 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000586:	2148      	movs	r1, #72	; 0x48
 8000588:	187b      	adds	r3, r7, r1
 800058a:	2280      	movs	r2, #128	; 0x80
 800058c:	0152      	lsls	r2, r2, #5
 800058e:	601a      	str	r2, [r3, #0]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8000590:	187a      	adds	r2, r7, r1
 8000592:	4b35      	ldr	r3, [pc, #212]	; (8000668 <MX_TIM1_Init+0x160>)
 8000594:	0011      	movs	r1, r2
 8000596:	0018      	movs	r0, r3
 8000598:	f001 ffd8 	bl	800254c <HAL_TIM_ConfigClockSource>
 800059c:	1e03      	subs	r3, r0, #0
 800059e:	d001      	beq.n	80005a4 <MX_TIM1_Init+0x9c>
  {
    Error_Handler();
 80005a0:	f000 f8fa 	bl	8000798 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 80005a4:	4b30      	ldr	r3, [pc, #192]	; (8000668 <MX_TIM1_Init+0x160>)
 80005a6:	0018      	movs	r0, r3
 80005a8:	f001 fbd8 	bl	8001d5c <HAL_TIM_PWM_Init>
 80005ac:	1e03      	subs	r3, r0, #0
 80005ae:	d001      	beq.n	80005b4 <MX_TIM1_Init+0xac>
  {
    Error_Handler();
 80005b0:	f000 f8f2 	bl	8000798 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80005b4:	2140      	movs	r1, #64	; 0x40
 80005b6:	187b      	adds	r3, r7, r1
 80005b8:	2200      	movs	r2, #0
 80005ba:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80005bc:	187b      	adds	r3, r7, r1
 80005be:	2200      	movs	r2, #0
 80005c0:	605a      	str	r2, [r3, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80005c2:	187a      	adds	r2, r7, r1
 80005c4:	4b28      	ldr	r3, [pc, #160]	; (8000668 <MX_TIM1_Init+0x160>)
 80005c6:	0011      	movs	r1, r2
 80005c8:	0018      	movs	r0, r3
 80005ca:	f002 fbf5 	bl	8002db8 <HAL_TIMEx_MasterConfigSynchronization>
 80005ce:	1e03      	subs	r3, r0, #0
 80005d0:	d001      	beq.n	80005d6 <MX_TIM1_Init+0xce>
  {
    Error_Handler();
 80005d2:	f000 f8e1 	bl	8000798 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80005d6:	2124      	movs	r1, #36	; 0x24
 80005d8:	187b      	adds	r3, r7, r1
 80005da:	2260      	movs	r2, #96	; 0x60
 80005dc:	601a      	str	r2, [r3, #0]
  sConfigOC.Pulse = 50;
 80005de:	187b      	adds	r3, r7, r1
 80005e0:	2232      	movs	r2, #50	; 0x32
 80005e2:	605a      	str	r2, [r3, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80005e4:	187b      	adds	r3, r7, r1
 80005e6:	2200      	movs	r2, #0
 80005e8:	609a      	str	r2, [r3, #8]
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 80005ea:	187b      	adds	r3, r7, r1
 80005ec:	2200      	movs	r2, #0
 80005ee:	60da      	str	r2, [r3, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80005f0:	187b      	adds	r3, r7, r1
 80005f2:	2200      	movs	r2, #0
 80005f4:	611a      	str	r2, [r3, #16]
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 80005f6:	187b      	adds	r3, r7, r1
 80005f8:	2200      	movs	r2, #0
 80005fa:	615a      	str	r2, [r3, #20]
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 80005fc:	187b      	adds	r3, r7, r1
 80005fe:	2200      	movs	r2, #0
 8000600:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000602:	1879      	adds	r1, r7, r1
 8000604:	4b18      	ldr	r3, [pc, #96]	; (8000668 <MX_TIM1_Init+0x160>)
 8000606:	2200      	movs	r2, #0
 8000608:	0018      	movs	r0, r3
 800060a:	f001 fed9 	bl	80023c0 <HAL_TIM_PWM_ConfigChannel>
 800060e:	1e03      	subs	r3, r0, #0
 8000610:	d001      	beq.n	8000616 <MX_TIM1_Init+0x10e>
  {
    Error_Handler();
 8000612:	f000 f8c1 	bl	8000798 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8000616:	1d3b      	adds	r3, r7, #4
 8000618:	2200      	movs	r2, #0
 800061a:	601a      	str	r2, [r3, #0]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 800061c:	1d3b      	adds	r3, r7, #4
 800061e:	2200      	movs	r2, #0
 8000620:	605a      	str	r2, [r3, #4]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8000622:	1d3b      	adds	r3, r7, #4
 8000624:	2200      	movs	r2, #0
 8000626:	609a      	str	r2, [r3, #8]
  sBreakDeadTimeConfig.DeadTime = 0;
 8000628:	1d3b      	adds	r3, r7, #4
 800062a:	2200      	movs	r2, #0
 800062c:	60da      	str	r2, [r3, #12]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 800062e:	1d3b      	adds	r3, r7, #4
 8000630:	2200      	movs	r2, #0
 8000632:	611a      	str	r2, [r3, #16]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8000634:	1d3b      	adds	r3, r7, #4
 8000636:	2280      	movs	r2, #128	; 0x80
 8000638:	0192      	lsls	r2, r2, #6
 800063a:	615a      	str	r2, [r3, #20]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 800063c:	1d3b      	adds	r3, r7, #4
 800063e:	2200      	movs	r2, #0
 8000640:	61da      	str	r2, [r3, #28]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8000642:	1d3a      	adds	r2, r7, #4
 8000644:	4b08      	ldr	r3, [pc, #32]	; (8000668 <MX_TIM1_Init+0x160>)
 8000646:	0011      	movs	r1, r2
 8000648:	0018      	movs	r0, r3
 800064a:	f002 fc13 	bl	8002e74 <HAL_TIMEx_ConfigBreakDeadTime>
 800064e:	1e03      	subs	r3, r0, #0
 8000650:	d001      	beq.n	8000656 <MX_TIM1_Init+0x14e>
  {
    Error_Handler();
 8000652:	f000 f8a1 	bl	8000798 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8000656:	4b04      	ldr	r3, [pc, #16]	; (8000668 <MX_TIM1_Init+0x160>)
 8000658:	0018      	movs	r0, r3
 800065a:	f000 f8ef 	bl	800083c <HAL_TIM_MspPostInit>

}
 800065e:	46c0      	nop			; (mov r8, r8)
 8000660:	46bd      	mov	sp, r7
 8000662:	b016      	add	sp, #88	; 0x58
 8000664:	bd80      	pop	{r7, pc}
 8000666:	46c0      	nop			; (mov r8, r8)
 8000668:	200000f0 	.word	0x200000f0
 800066c:	40012c00 	.word	0x40012c00
 8000670:	00002710 	.word	0x00002710

08000674 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000674:	b580      	push	{r7, lr}
 8000676:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000678:	4b14      	ldr	r3, [pc, #80]	; (80006cc <MX_USART2_UART_Init+0x58>)
 800067a:	4a15      	ldr	r2, [pc, #84]	; (80006d0 <MX_USART2_UART_Init+0x5c>)
 800067c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800067e:	4b13      	ldr	r3, [pc, #76]	; (80006cc <MX_USART2_UART_Init+0x58>)
 8000680:	22e1      	movs	r2, #225	; 0xe1
 8000682:	0252      	lsls	r2, r2, #9
 8000684:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000686:	4b11      	ldr	r3, [pc, #68]	; (80006cc <MX_USART2_UART_Init+0x58>)
 8000688:	2200      	movs	r2, #0
 800068a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 800068c:	4b0f      	ldr	r3, [pc, #60]	; (80006cc <MX_USART2_UART_Init+0x58>)
 800068e:	2200      	movs	r2, #0
 8000690:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000692:	4b0e      	ldr	r3, [pc, #56]	; (80006cc <MX_USART2_UART_Init+0x58>)
 8000694:	2200      	movs	r2, #0
 8000696:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000698:	4b0c      	ldr	r3, [pc, #48]	; (80006cc <MX_USART2_UART_Init+0x58>)
 800069a:	220c      	movs	r2, #12
 800069c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800069e:	4b0b      	ldr	r3, [pc, #44]	; (80006cc <MX_USART2_UART_Init+0x58>)
 80006a0:	2200      	movs	r2, #0
 80006a2:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80006a4:	4b09      	ldr	r3, [pc, #36]	; (80006cc <MX_USART2_UART_Init+0x58>)
 80006a6:	2200      	movs	r2, #0
 80006a8:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80006aa:	4b08      	ldr	r3, [pc, #32]	; (80006cc <MX_USART2_UART_Init+0x58>)
 80006ac:	2200      	movs	r2, #0
 80006ae:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80006b0:	4b06      	ldr	r3, [pc, #24]	; (80006cc <MX_USART2_UART_Init+0x58>)
 80006b2:	2200      	movs	r2, #0
 80006b4:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80006b6:	4b05      	ldr	r3, [pc, #20]	; (80006cc <MX_USART2_UART_Init+0x58>)
 80006b8:	0018      	movs	r0, r3
 80006ba:	f002 fc49 	bl	8002f50 <HAL_UART_Init>
 80006be:	1e03      	subs	r3, r0, #0
 80006c0:	d001      	beq.n	80006c6 <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 80006c2:	f000 f869 	bl	8000798 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80006c6:	46c0      	nop			; (mov r8, r8)
 80006c8:	46bd      	mov	sp, r7
 80006ca:	bd80      	pop	{r7, pc}
 80006cc:	20000138 	.word	0x20000138
 80006d0:	40004400 	.word	0x40004400

080006d4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80006d4:	b590      	push	{r4, r7, lr}
 80006d6:	b089      	sub	sp, #36	; 0x24
 80006d8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80006da:	240c      	movs	r4, #12
 80006dc:	193b      	adds	r3, r7, r4
 80006de:	0018      	movs	r0, r3
 80006e0:	2314      	movs	r3, #20
 80006e2:	001a      	movs	r2, r3
 80006e4:	2100      	movs	r1, #0
 80006e6:	f003 ffa5 	bl	8004634 <memset>
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80006ea:	4b29      	ldr	r3, [pc, #164]	; (8000790 <MX_GPIO_Init+0xbc>)
 80006ec:	695a      	ldr	r2, [r3, #20]
 80006ee:	4b28      	ldr	r3, [pc, #160]	; (8000790 <MX_GPIO_Init+0xbc>)
 80006f0:	2180      	movs	r1, #128	; 0x80
 80006f2:	0289      	lsls	r1, r1, #10
 80006f4:	430a      	orrs	r2, r1
 80006f6:	615a      	str	r2, [r3, #20]
 80006f8:	4b25      	ldr	r3, [pc, #148]	; (8000790 <MX_GPIO_Init+0xbc>)
 80006fa:	695a      	ldr	r2, [r3, #20]
 80006fc:	2380      	movs	r3, #128	; 0x80
 80006fe:	029b      	lsls	r3, r3, #10
 8000700:	4013      	ands	r3, r2
 8000702:	60bb      	str	r3, [r7, #8]
 8000704:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000706:	4b22      	ldr	r3, [pc, #136]	; (8000790 <MX_GPIO_Init+0xbc>)
 8000708:	695a      	ldr	r2, [r3, #20]
 800070a:	4b21      	ldr	r3, [pc, #132]	; (8000790 <MX_GPIO_Init+0xbc>)
 800070c:	2180      	movs	r1, #128	; 0x80
 800070e:	02c9      	lsls	r1, r1, #11
 8000710:	430a      	orrs	r2, r1
 8000712:	615a      	str	r2, [r3, #20]
 8000714:	4b1e      	ldr	r3, [pc, #120]	; (8000790 <MX_GPIO_Init+0xbc>)
 8000716:	695a      	ldr	r2, [r3, #20]
 8000718:	2380      	movs	r3, #128	; 0x80
 800071a:	02db      	lsls	r3, r3, #11
 800071c:	4013      	ands	r3, r2
 800071e:	607b      	str	r3, [r7, #4]
 8000720:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_1, GPIO_PIN_SET);
 8000722:	4b1c      	ldr	r3, [pc, #112]	; (8000794 <MX_GPIO_Init+0xc0>)
 8000724:	2201      	movs	r2, #1
 8000726:	2102      	movs	r1, #2
 8000728:	0018      	movs	r0, r3
 800072a:	f000 fcb9 	bl	80010a0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_10|GPIO_PIN_15, GPIO_PIN_RESET);
 800072e:	2384      	movs	r3, #132	; 0x84
 8000730:	021b      	lsls	r3, r3, #8
 8000732:	4818      	ldr	r0, [pc, #96]	; (8000794 <MX_GPIO_Init+0xc0>)
 8000734:	2200      	movs	r2, #0
 8000736:	0019      	movs	r1, r3
 8000738:	f000 fcb2 	bl	80010a0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PB1 */
  GPIO_InitStruct.Pin = GPIO_PIN_1;
 800073c:	193b      	adds	r3, r7, r4
 800073e:	2202      	movs	r2, #2
 8000740:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000742:	193b      	adds	r3, r7, r4
 8000744:	2201      	movs	r2, #1
 8000746:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000748:	193b      	adds	r3, r7, r4
 800074a:	2200      	movs	r2, #0
 800074c:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800074e:	193b      	adds	r3, r7, r4
 8000750:	2203      	movs	r2, #3
 8000752:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000754:	193b      	adds	r3, r7, r4
 8000756:	4a0f      	ldr	r2, [pc, #60]	; (8000794 <MX_GPIO_Init+0xc0>)
 8000758:	0019      	movs	r1, r3
 800075a:	0010      	movs	r0, r2
 800075c:	f000 fb28 	bl	8000db0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB10 PB15 */
  GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_15;
 8000760:	0021      	movs	r1, r4
 8000762:	187b      	adds	r3, r7, r1
 8000764:	2284      	movs	r2, #132	; 0x84
 8000766:	0212      	lsls	r2, r2, #8
 8000768:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800076a:	187b      	adds	r3, r7, r1
 800076c:	2201      	movs	r2, #1
 800076e:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000770:	187b      	adds	r3, r7, r1
 8000772:	2200      	movs	r2, #0
 8000774:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000776:	187b      	adds	r3, r7, r1
 8000778:	2200      	movs	r2, #0
 800077a:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800077c:	187b      	adds	r3, r7, r1
 800077e:	4a05      	ldr	r2, [pc, #20]	; (8000794 <MX_GPIO_Init+0xc0>)
 8000780:	0019      	movs	r1, r3
 8000782:	0010      	movs	r0, r2
 8000784:	f000 fb14 	bl	8000db0 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000788:	46c0      	nop			; (mov r8, r8)
 800078a:	46bd      	mov	sp, r7
 800078c:	b009      	add	sp, #36	; 0x24
 800078e:	bd90      	pop	{r4, r7, pc}
 8000790:	40021000 	.word	0x40021000
 8000794:	48000400 	.word	0x48000400

08000798 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000798:	b580      	push	{r7, lr}
 800079a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800079c:	b672      	cpsid	i
}
 800079e:	46c0      	nop			; (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80007a0:	e7fe      	b.n	80007a0 <Error_Handler+0x8>
	...

080007a4 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80007a4:	b580      	push	{r7, lr}
 80007a6:	b082      	sub	sp, #8
 80007a8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80007aa:	4b0f      	ldr	r3, [pc, #60]	; (80007e8 <HAL_MspInit+0x44>)
 80007ac:	699a      	ldr	r2, [r3, #24]
 80007ae:	4b0e      	ldr	r3, [pc, #56]	; (80007e8 <HAL_MspInit+0x44>)
 80007b0:	2101      	movs	r1, #1
 80007b2:	430a      	orrs	r2, r1
 80007b4:	619a      	str	r2, [r3, #24]
 80007b6:	4b0c      	ldr	r3, [pc, #48]	; (80007e8 <HAL_MspInit+0x44>)
 80007b8:	699b      	ldr	r3, [r3, #24]
 80007ba:	2201      	movs	r2, #1
 80007bc:	4013      	ands	r3, r2
 80007be:	607b      	str	r3, [r7, #4]
 80007c0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80007c2:	4b09      	ldr	r3, [pc, #36]	; (80007e8 <HAL_MspInit+0x44>)
 80007c4:	69da      	ldr	r2, [r3, #28]
 80007c6:	4b08      	ldr	r3, [pc, #32]	; (80007e8 <HAL_MspInit+0x44>)
 80007c8:	2180      	movs	r1, #128	; 0x80
 80007ca:	0549      	lsls	r1, r1, #21
 80007cc:	430a      	orrs	r2, r1
 80007ce:	61da      	str	r2, [r3, #28]
 80007d0:	4b05      	ldr	r3, [pc, #20]	; (80007e8 <HAL_MspInit+0x44>)
 80007d2:	69da      	ldr	r2, [r3, #28]
 80007d4:	2380      	movs	r3, #128	; 0x80
 80007d6:	055b      	lsls	r3, r3, #21
 80007d8:	4013      	ands	r3, r2
 80007da:	603b      	str	r3, [r7, #0]
 80007dc:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80007de:	46c0      	nop			; (mov r8, r8)
 80007e0:	46bd      	mov	sp, r7
 80007e2:	b002      	add	sp, #8
 80007e4:	bd80      	pop	{r7, pc}
 80007e6:	46c0      	nop			; (mov r8, r8)
 80007e8:	40021000 	.word	0x40021000

080007ec <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80007ec:	b580      	push	{r7, lr}
 80007ee:	b084      	sub	sp, #16
 80007f0:	af00      	add	r7, sp, #0
 80007f2:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 80007f4:	687b      	ldr	r3, [r7, #4]
 80007f6:	681b      	ldr	r3, [r3, #0]
 80007f8:	4a0e      	ldr	r2, [pc, #56]	; (8000834 <HAL_TIM_Base_MspInit+0x48>)
 80007fa:	4293      	cmp	r3, r2
 80007fc:	d115      	bne.n	800082a <HAL_TIM_Base_MspInit+0x3e>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80007fe:	4b0e      	ldr	r3, [pc, #56]	; (8000838 <HAL_TIM_Base_MspInit+0x4c>)
 8000800:	699a      	ldr	r2, [r3, #24]
 8000802:	4b0d      	ldr	r3, [pc, #52]	; (8000838 <HAL_TIM_Base_MspInit+0x4c>)
 8000804:	2180      	movs	r1, #128	; 0x80
 8000806:	0109      	lsls	r1, r1, #4
 8000808:	430a      	orrs	r2, r1
 800080a:	619a      	str	r2, [r3, #24]
 800080c:	4b0a      	ldr	r3, [pc, #40]	; (8000838 <HAL_TIM_Base_MspInit+0x4c>)
 800080e:	699a      	ldr	r2, [r3, #24]
 8000810:	2380      	movs	r3, #128	; 0x80
 8000812:	011b      	lsls	r3, r3, #4
 8000814:	4013      	ands	r3, r2
 8000816:	60fb      	str	r3, [r7, #12]
 8000818:	68fb      	ldr	r3, [r7, #12]
    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_CC_IRQn, 0, 0);
 800081a:	2200      	movs	r2, #0
 800081c:	2100      	movs	r1, #0
 800081e:	200e      	movs	r0, #14
 8000820:	f000 fa16 	bl	8000c50 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_CC_IRQn);
 8000824:	200e      	movs	r0, #14
 8000826:	f000 fa28 	bl	8000c7a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 800082a:	46c0      	nop			; (mov r8, r8)
 800082c:	46bd      	mov	sp, r7
 800082e:	b004      	add	sp, #16
 8000830:	bd80      	pop	{r7, pc}
 8000832:	46c0      	nop			; (mov r8, r8)
 8000834:	40012c00 	.word	0x40012c00
 8000838:	40021000 	.word	0x40021000

0800083c <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 800083c:	b590      	push	{r4, r7, lr}
 800083e:	b089      	sub	sp, #36	; 0x24
 8000840:	af00      	add	r7, sp, #0
 8000842:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000844:	240c      	movs	r4, #12
 8000846:	193b      	adds	r3, r7, r4
 8000848:	0018      	movs	r0, r3
 800084a:	2314      	movs	r3, #20
 800084c:	001a      	movs	r2, r3
 800084e:	2100      	movs	r1, #0
 8000850:	f003 fef0 	bl	8004634 <memset>
  if(htim->Instance==TIM1)
 8000854:	687b      	ldr	r3, [r7, #4]
 8000856:	681b      	ldr	r3, [r3, #0]
 8000858:	4a16      	ldr	r2, [pc, #88]	; (80008b4 <HAL_TIM_MspPostInit+0x78>)
 800085a:	4293      	cmp	r3, r2
 800085c:	d125      	bne.n	80008aa <HAL_TIM_MspPostInit+0x6e>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800085e:	4b16      	ldr	r3, [pc, #88]	; (80008b8 <HAL_TIM_MspPostInit+0x7c>)
 8000860:	695a      	ldr	r2, [r3, #20]
 8000862:	4b15      	ldr	r3, [pc, #84]	; (80008b8 <HAL_TIM_MspPostInit+0x7c>)
 8000864:	2180      	movs	r1, #128	; 0x80
 8000866:	0289      	lsls	r1, r1, #10
 8000868:	430a      	orrs	r2, r1
 800086a:	615a      	str	r2, [r3, #20]
 800086c:	4b12      	ldr	r3, [pc, #72]	; (80008b8 <HAL_TIM_MspPostInit+0x7c>)
 800086e:	695a      	ldr	r2, [r3, #20]
 8000870:	2380      	movs	r3, #128	; 0x80
 8000872:	029b      	lsls	r3, r3, #10
 8000874:	4013      	ands	r3, r2
 8000876:	60bb      	str	r3, [r7, #8]
 8000878:	68bb      	ldr	r3, [r7, #8]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 800087a:	193b      	adds	r3, r7, r4
 800087c:	2280      	movs	r2, #128	; 0x80
 800087e:	0052      	lsls	r2, r2, #1
 8000880:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000882:	0021      	movs	r1, r4
 8000884:	187b      	adds	r3, r7, r1
 8000886:	2202      	movs	r2, #2
 8000888:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800088a:	187b      	adds	r3, r7, r1
 800088c:	2200      	movs	r2, #0
 800088e:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000890:	187b      	adds	r3, r7, r1
 8000892:	2200      	movs	r2, #0
 8000894:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM1;
 8000896:	187b      	adds	r3, r7, r1
 8000898:	2202      	movs	r2, #2
 800089a:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800089c:	187a      	adds	r2, r7, r1
 800089e:	2390      	movs	r3, #144	; 0x90
 80008a0:	05db      	lsls	r3, r3, #23
 80008a2:	0011      	movs	r1, r2
 80008a4:	0018      	movs	r0, r3
 80008a6:	f000 fa83 	bl	8000db0 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 80008aa:	46c0      	nop			; (mov r8, r8)
 80008ac:	46bd      	mov	sp, r7
 80008ae:	b009      	add	sp, #36	; 0x24
 80008b0:	bd90      	pop	{r4, r7, pc}
 80008b2:	46c0      	nop			; (mov r8, r8)
 80008b4:	40012c00 	.word	0x40012c00
 80008b8:	40021000 	.word	0x40021000

080008bc <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80008bc:	b590      	push	{r4, r7, lr}
 80008be:	b08b      	sub	sp, #44	; 0x2c
 80008c0:	af00      	add	r7, sp, #0
 80008c2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80008c4:	2414      	movs	r4, #20
 80008c6:	193b      	adds	r3, r7, r4
 80008c8:	0018      	movs	r0, r3
 80008ca:	2314      	movs	r3, #20
 80008cc:	001a      	movs	r2, r3
 80008ce:	2100      	movs	r1, #0
 80008d0:	f003 feb0 	bl	8004634 <memset>
  if(huart->Instance==USART2)
 80008d4:	687b      	ldr	r3, [r7, #4]
 80008d6:	681b      	ldr	r3, [r3, #0]
 80008d8:	4a20      	ldr	r2, [pc, #128]	; (800095c <HAL_UART_MspInit+0xa0>)
 80008da:	4293      	cmp	r3, r2
 80008dc:	d13a      	bne.n	8000954 <HAL_UART_MspInit+0x98>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80008de:	4b20      	ldr	r3, [pc, #128]	; (8000960 <HAL_UART_MspInit+0xa4>)
 80008e0:	69da      	ldr	r2, [r3, #28]
 80008e2:	4b1f      	ldr	r3, [pc, #124]	; (8000960 <HAL_UART_MspInit+0xa4>)
 80008e4:	2180      	movs	r1, #128	; 0x80
 80008e6:	0289      	lsls	r1, r1, #10
 80008e8:	430a      	orrs	r2, r1
 80008ea:	61da      	str	r2, [r3, #28]
 80008ec:	4b1c      	ldr	r3, [pc, #112]	; (8000960 <HAL_UART_MspInit+0xa4>)
 80008ee:	69da      	ldr	r2, [r3, #28]
 80008f0:	2380      	movs	r3, #128	; 0x80
 80008f2:	029b      	lsls	r3, r3, #10
 80008f4:	4013      	ands	r3, r2
 80008f6:	613b      	str	r3, [r7, #16]
 80008f8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80008fa:	4b19      	ldr	r3, [pc, #100]	; (8000960 <HAL_UART_MspInit+0xa4>)
 80008fc:	695a      	ldr	r2, [r3, #20]
 80008fe:	4b18      	ldr	r3, [pc, #96]	; (8000960 <HAL_UART_MspInit+0xa4>)
 8000900:	2180      	movs	r1, #128	; 0x80
 8000902:	0289      	lsls	r1, r1, #10
 8000904:	430a      	orrs	r2, r1
 8000906:	615a      	str	r2, [r3, #20]
 8000908:	4b15      	ldr	r3, [pc, #84]	; (8000960 <HAL_UART_MspInit+0xa4>)
 800090a:	695a      	ldr	r2, [r3, #20]
 800090c:	2380      	movs	r3, #128	; 0x80
 800090e:	029b      	lsls	r3, r3, #10
 8000910:	4013      	ands	r3, r2
 8000912:	60fb      	str	r3, [r7, #12]
 8000914:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8000916:	0021      	movs	r1, r4
 8000918:	187b      	adds	r3, r7, r1
 800091a:	220c      	movs	r2, #12
 800091c:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800091e:	187b      	adds	r3, r7, r1
 8000920:	2202      	movs	r2, #2
 8000922:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000924:	187b      	adds	r3, r7, r1
 8000926:	2200      	movs	r2, #0
 8000928:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800092a:	187b      	adds	r3, r7, r1
 800092c:	2203      	movs	r2, #3
 800092e:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_USART2;
 8000930:	187b      	adds	r3, r7, r1
 8000932:	2201      	movs	r2, #1
 8000934:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000936:	187a      	adds	r2, r7, r1
 8000938:	2390      	movs	r3, #144	; 0x90
 800093a:	05db      	lsls	r3, r3, #23
 800093c:	0011      	movs	r1, r2
 800093e:	0018      	movs	r0, r3
 8000940:	f000 fa36 	bl	8000db0 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8000944:	2200      	movs	r2, #0
 8000946:	2100      	movs	r1, #0
 8000948:	201c      	movs	r0, #28
 800094a:	f000 f981 	bl	8000c50 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 800094e:	201c      	movs	r0, #28
 8000950:	f000 f993 	bl	8000c7a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000954:	46c0      	nop			; (mov r8, r8)
 8000956:	46bd      	mov	sp, r7
 8000958:	b00b      	add	sp, #44	; 0x2c
 800095a:	bd90      	pop	{r4, r7, pc}
 800095c:	40004400 	.word	0x40004400
 8000960:	40021000 	.word	0x40021000

08000964 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000964:	b580      	push	{r7, lr}
 8000966:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000968:	e7fe      	b.n	8000968 <NMI_Handler+0x4>

0800096a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800096a:	b580      	push	{r7, lr}
 800096c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800096e:	e7fe      	b.n	800096e <HardFault_Handler+0x4>

08000970 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000970:	b580      	push	{r7, lr}
 8000972:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8000974:	46c0      	nop			; (mov r8, r8)
 8000976:	46bd      	mov	sp, r7
 8000978:	bd80      	pop	{r7, pc}

0800097a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800097a:	b580      	push	{r7, lr}
 800097c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800097e:	46c0      	nop			; (mov r8, r8)
 8000980:	46bd      	mov	sp, r7
 8000982:	bd80      	pop	{r7, pc}

08000984 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000984:	b580      	push	{r7, lr}
 8000986:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000988:	f000 f89a 	bl	8000ac0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800098c:	46c0      	nop			; (mov r8, r8)
 800098e:	46bd      	mov	sp, r7
 8000990:	bd80      	pop	{r7, pc}
	...

08000994 <TIM1_CC_IRQHandler>:
/**
  * @brief This function handles TIM1 capture compare interrupt.
  */

void TIM1_CC_IRQHandler(void)
{
 8000994:	b580      	push	{r7, lr}
 8000996:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_CC_IRQn 0 */

	disp_setNumber(g_num);
 8000998:	4b05      	ldr	r3, [pc, #20]	; (80009b0 <TIM1_CC_IRQHandler+0x1c>)
 800099a:	781b      	ldrb	r3, [r3, #0]
 800099c:	0018      	movs	r0, r3
 800099e:	f7ff fc47 	bl	8000230 <disp_setNumber>

  /* USER CODE END TIM1_CC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 80009a2:	4b04      	ldr	r3, [pc, #16]	; (80009b4 <TIM1_CC_IRQHandler+0x20>)
 80009a4:	0018      	movs	r0, r3
 80009a6:	f001 fbf5 	bl	8002194 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_CC_IRQn 1 */

  /* USER CODE END TIM1_CC_IRQn 1 */
}
 80009aa:	46c0      	nop			; (mov r8, r8)
 80009ac:	46bd      	mov	sp, r7
 80009ae:	bd80      	pop	{r7, pc}
 80009b0:	200001d4 	.word	0x200001d4
 80009b4:	200000f0 	.word	0x200000f0

080009b8 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt / USART2 wake-up interrupt through EXTI line 26.
  */
void USART2_IRQHandler(void)
{
 80009b8:	b580      	push	{r7, lr}
 80009ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 80009bc:	4b03      	ldr	r3, [pc, #12]	; (80009cc <USART2_IRQHandler+0x14>)
 80009be:	0018      	movs	r0, r3
 80009c0:	f002 fbe2 	bl	8003188 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 80009c4:	46c0      	nop			; (mov r8, r8)
 80009c6:	46bd      	mov	sp, r7
 80009c8:	bd80      	pop	{r7, pc}
 80009ca:	46c0      	nop			; (mov r8, r8)
 80009cc:	20000138 	.word	0x20000138

080009d0 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80009d0:	b580      	push	{r7, lr}
 80009d2:	af00      	add	r7, sp, #0
                         before branch to main program. This call is made inside
                         the "startup_stm32f0xx.s" file.
                         User can setups the default system clock (System clock source, PLL Multiplier
                         and Divider factors, AHB/APBx prescalers and Flash settings).
   */
}
 80009d4:	46c0      	nop			; (mov r8, r8)
 80009d6:	46bd      	mov	sp, r7
 80009d8:	bd80      	pop	{r7, pc}
	...

080009dc <Reset_Handler>:
 80009dc:	480d      	ldr	r0, [pc, #52]	; (8000a14 <LoopForever+0x2>)
 80009de:	4685      	mov	sp, r0
 80009e0:	f7ff fff6 	bl	80009d0 <SystemInit>
 80009e4:	480c      	ldr	r0, [pc, #48]	; (8000a18 <LoopForever+0x6>)
 80009e6:	490d      	ldr	r1, [pc, #52]	; (8000a1c <LoopForever+0xa>)
 80009e8:	4a0d      	ldr	r2, [pc, #52]	; (8000a20 <LoopForever+0xe>)
 80009ea:	2300      	movs	r3, #0
 80009ec:	e002      	b.n	80009f4 <LoopCopyDataInit>

080009ee <CopyDataInit>:
 80009ee:	58d4      	ldr	r4, [r2, r3]
 80009f0:	50c4      	str	r4, [r0, r3]
 80009f2:	3304      	adds	r3, #4

080009f4 <LoopCopyDataInit>:
 80009f4:	18c4      	adds	r4, r0, r3
 80009f6:	428c      	cmp	r4, r1
 80009f8:	d3f9      	bcc.n	80009ee <CopyDataInit>
 80009fa:	4a0a      	ldr	r2, [pc, #40]	; (8000a24 <LoopForever+0x12>)
 80009fc:	4c0a      	ldr	r4, [pc, #40]	; (8000a28 <LoopForever+0x16>)
 80009fe:	2300      	movs	r3, #0
 8000a00:	e001      	b.n	8000a06 <LoopFillZerobss>

08000a02 <FillZerobss>:
 8000a02:	6013      	str	r3, [r2, #0]
 8000a04:	3204      	adds	r2, #4

08000a06 <LoopFillZerobss>:
 8000a06:	42a2      	cmp	r2, r4
 8000a08:	d3fb      	bcc.n	8000a02 <FillZerobss>
 8000a0a:	f003 fdef 	bl	80045ec <__libc_init_array>
 8000a0e:	f7ff fcbb 	bl	8000388 <main>

08000a12 <LoopForever>:
 8000a12:	e7fe      	b.n	8000a12 <LoopForever>
 8000a14:	20004000 	.word	0x20004000
 8000a18:	20000000 	.word	0x20000000
 8000a1c:	200000cc 	.word	0x200000cc
 8000a20:	0800469c 	.word	0x0800469c
 8000a24:	200000cc 	.word	0x200000cc
 8000a28:	200001dc 	.word	0x200001dc

08000a2c <ADC1_COMP_IRQHandler>:
 8000a2c:	e7fe      	b.n	8000a2c <ADC1_COMP_IRQHandler>
	...

08000a30 <HAL_Init>:
  *       In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000a30:	b580      	push	{r7, lr}
 8000a32:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */ 
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000a34:	4b07      	ldr	r3, [pc, #28]	; (8000a54 <HAL_Init+0x24>)
 8000a36:	681a      	ldr	r2, [r3, #0]
 8000a38:	4b06      	ldr	r3, [pc, #24]	; (8000a54 <HAL_Init+0x24>)
 8000a3a:	2110      	movs	r1, #16
 8000a3c:	430a      	orrs	r2, r1
 8000a3e:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */

  HAL_InitTick(TICK_INT_PRIORITY);
 8000a40:	2003      	movs	r0, #3
 8000a42:	f000 f809 	bl	8000a58 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000a46:	f7ff fead 	bl	80007a4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000a4a:	2300      	movs	r3, #0
}
 8000a4c:	0018      	movs	r0, r3
 8000a4e:	46bd      	mov	sp, r7
 8000a50:	bd80      	pop	{r7, pc}
 8000a52:	46c0      	nop			; (mov r8, r8)
 8000a54:	40022000 	.word	0x40022000

08000a58 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000a58:	b590      	push	{r4, r7, lr}
 8000a5a:	b083      	sub	sp, #12
 8000a5c:	af00      	add	r7, sp, #0
 8000a5e:	6078      	str	r0, [r7, #4]
  /*Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000a60:	4b14      	ldr	r3, [pc, #80]	; (8000ab4 <HAL_InitTick+0x5c>)
 8000a62:	681c      	ldr	r4, [r3, #0]
 8000a64:	4b14      	ldr	r3, [pc, #80]	; (8000ab8 <HAL_InitTick+0x60>)
 8000a66:	781b      	ldrb	r3, [r3, #0]
 8000a68:	0019      	movs	r1, r3
 8000a6a:	23fa      	movs	r3, #250	; 0xfa
 8000a6c:	0098      	lsls	r0, r3, #2
 8000a6e:	f7ff fb53 	bl	8000118 <__udivsi3>
 8000a72:	0003      	movs	r3, r0
 8000a74:	0019      	movs	r1, r3
 8000a76:	0020      	movs	r0, r4
 8000a78:	f7ff fb4e 	bl	8000118 <__udivsi3>
 8000a7c:	0003      	movs	r3, r0
 8000a7e:	0018      	movs	r0, r3
 8000a80:	f000 f90b 	bl	8000c9a <HAL_SYSTICK_Config>
 8000a84:	1e03      	subs	r3, r0, #0
 8000a86:	d001      	beq.n	8000a8c <HAL_InitTick+0x34>
  {
    return HAL_ERROR;
 8000a88:	2301      	movs	r3, #1
 8000a8a:	e00f      	b.n	8000aac <HAL_InitTick+0x54>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000a8c:	687b      	ldr	r3, [r7, #4]
 8000a8e:	2b03      	cmp	r3, #3
 8000a90:	d80b      	bhi.n	8000aaa <HAL_InitTick+0x52>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000a92:	6879      	ldr	r1, [r7, #4]
 8000a94:	2301      	movs	r3, #1
 8000a96:	425b      	negs	r3, r3
 8000a98:	2200      	movs	r2, #0
 8000a9a:	0018      	movs	r0, r3
 8000a9c:	f000 f8d8 	bl	8000c50 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000aa0:	4b06      	ldr	r3, [pc, #24]	; (8000abc <HAL_InitTick+0x64>)
 8000aa2:	687a      	ldr	r2, [r7, #4]
 8000aa4:	601a      	str	r2, [r3, #0]
  {
    return HAL_ERROR;
  }

   /* Return function status */
  return HAL_OK;
 8000aa6:	2300      	movs	r3, #0
 8000aa8:	e000      	b.n	8000aac <HAL_InitTick+0x54>
    return HAL_ERROR;
 8000aaa:	2301      	movs	r3, #1
}
 8000aac:	0018      	movs	r0, r3
 8000aae:	46bd      	mov	sp, r7
 8000ab0:	b003      	add	sp, #12
 8000ab2:	bd90      	pop	{r4, r7, pc}
 8000ab4:	200000c0 	.word	0x200000c0
 8000ab8:	200000c8 	.word	0x200000c8
 8000abc:	200000c4 	.word	0x200000c4

08000ac0 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000ac0:	b580      	push	{r7, lr}
 8000ac2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000ac4:	4b05      	ldr	r3, [pc, #20]	; (8000adc <HAL_IncTick+0x1c>)
 8000ac6:	781b      	ldrb	r3, [r3, #0]
 8000ac8:	001a      	movs	r2, r3
 8000aca:	4b05      	ldr	r3, [pc, #20]	; (8000ae0 <HAL_IncTick+0x20>)
 8000acc:	681b      	ldr	r3, [r3, #0]
 8000ace:	18d2      	adds	r2, r2, r3
 8000ad0:	4b03      	ldr	r3, [pc, #12]	; (8000ae0 <HAL_IncTick+0x20>)
 8000ad2:	601a      	str	r2, [r3, #0]
}
 8000ad4:	46c0      	nop			; (mov r8, r8)
 8000ad6:	46bd      	mov	sp, r7
 8000ad8:	bd80      	pop	{r7, pc}
 8000ada:	46c0      	nop			; (mov r8, r8)
 8000adc:	200000c8 	.word	0x200000c8
 8000ae0:	200001d8 	.word	0x200001d8

08000ae4 <HAL_GetTick>:
  * @note   This function is declared as __weak  to be overwritten  in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000ae4:	b580      	push	{r7, lr}
 8000ae6:	af00      	add	r7, sp, #0
  return uwTick;
 8000ae8:	4b02      	ldr	r3, [pc, #8]	; (8000af4 <HAL_GetTick+0x10>)
 8000aea:	681b      	ldr	r3, [r3, #0]
}
 8000aec:	0018      	movs	r0, r3
 8000aee:	46bd      	mov	sp, r7
 8000af0:	bd80      	pop	{r7, pc}
 8000af2:	46c0      	nop			; (mov r8, r8)
 8000af4:	200001d8 	.word	0x200001d8

08000af8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000af8:	b580      	push	{r7, lr}
 8000afa:	b082      	sub	sp, #8
 8000afc:	af00      	add	r7, sp, #0
 8000afe:	0002      	movs	r2, r0
 8000b00:	1dfb      	adds	r3, r7, #7
 8000b02:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8000b04:	1dfb      	adds	r3, r7, #7
 8000b06:	781b      	ldrb	r3, [r3, #0]
 8000b08:	2b7f      	cmp	r3, #127	; 0x7f
 8000b0a:	d809      	bhi.n	8000b20 <__NVIC_EnableIRQ+0x28>
  {
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000b0c:	1dfb      	adds	r3, r7, #7
 8000b0e:	781b      	ldrb	r3, [r3, #0]
 8000b10:	001a      	movs	r2, r3
 8000b12:	231f      	movs	r3, #31
 8000b14:	401a      	ands	r2, r3
 8000b16:	4b04      	ldr	r3, [pc, #16]	; (8000b28 <__NVIC_EnableIRQ+0x30>)
 8000b18:	2101      	movs	r1, #1
 8000b1a:	4091      	lsls	r1, r2
 8000b1c:	000a      	movs	r2, r1
 8000b1e:	601a      	str	r2, [r3, #0]
  }
}
 8000b20:	46c0      	nop			; (mov r8, r8)
 8000b22:	46bd      	mov	sp, r7
 8000b24:	b002      	add	sp, #8
 8000b26:	bd80      	pop	{r7, pc}
 8000b28:	e000e100 	.word	0xe000e100

08000b2c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000b2c:	b590      	push	{r4, r7, lr}
 8000b2e:	b083      	sub	sp, #12
 8000b30:	af00      	add	r7, sp, #0
 8000b32:	0002      	movs	r2, r0
 8000b34:	6039      	str	r1, [r7, #0]
 8000b36:	1dfb      	adds	r3, r7, #7
 8000b38:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8000b3a:	1dfb      	adds	r3, r7, #7
 8000b3c:	781b      	ldrb	r3, [r3, #0]
 8000b3e:	2b7f      	cmp	r3, #127	; 0x7f
 8000b40:	d828      	bhi.n	8000b94 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000b42:	4a2f      	ldr	r2, [pc, #188]	; (8000c00 <__NVIC_SetPriority+0xd4>)
 8000b44:	1dfb      	adds	r3, r7, #7
 8000b46:	781b      	ldrb	r3, [r3, #0]
 8000b48:	b25b      	sxtb	r3, r3
 8000b4a:	089b      	lsrs	r3, r3, #2
 8000b4c:	33c0      	adds	r3, #192	; 0xc0
 8000b4e:	009b      	lsls	r3, r3, #2
 8000b50:	589b      	ldr	r3, [r3, r2]
 8000b52:	1dfa      	adds	r2, r7, #7
 8000b54:	7812      	ldrb	r2, [r2, #0]
 8000b56:	0011      	movs	r1, r2
 8000b58:	2203      	movs	r2, #3
 8000b5a:	400a      	ands	r2, r1
 8000b5c:	00d2      	lsls	r2, r2, #3
 8000b5e:	21ff      	movs	r1, #255	; 0xff
 8000b60:	4091      	lsls	r1, r2
 8000b62:	000a      	movs	r2, r1
 8000b64:	43d2      	mvns	r2, r2
 8000b66:	401a      	ands	r2, r3
 8000b68:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8000b6a:	683b      	ldr	r3, [r7, #0]
 8000b6c:	019b      	lsls	r3, r3, #6
 8000b6e:	22ff      	movs	r2, #255	; 0xff
 8000b70:	401a      	ands	r2, r3
 8000b72:	1dfb      	adds	r3, r7, #7
 8000b74:	781b      	ldrb	r3, [r3, #0]
 8000b76:	0018      	movs	r0, r3
 8000b78:	2303      	movs	r3, #3
 8000b7a:	4003      	ands	r3, r0
 8000b7c:	00db      	lsls	r3, r3, #3
 8000b7e:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000b80:	481f      	ldr	r0, [pc, #124]	; (8000c00 <__NVIC_SetPriority+0xd4>)
 8000b82:	1dfb      	adds	r3, r7, #7
 8000b84:	781b      	ldrb	r3, [r3, #0]
 8000b86:	b25b      	sxtb	r3, r3
 8000b88:	089b      	lsrs	r3, r3, #2
 8000b8a:	430a      	orrs	r2, r1
 8000b8c:	33c0      	adds	r3, #192	; 0xc0
 8000b8e:	009b      	lsls	r3, r3, #2
 8000b90:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 8000b92:	e031      	b.n	8000bf8 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000b94:	4a1b      	ldr	r2, [pc, #108]	; (8000c04 <__NVIC_SetPriority+0xd8>)
 8000b96:	1dfb      	adds	r3, r7, #7
 8000b98:	781b      	ldrb	r3, [r3, #0]
 8000b9a:	0019      	movs	r1, r3
 8000b9c:	230f      	movs	r3, #15
 8000b9e:	400b      	ands	r3, r1
 8000ba0:	3b08      	subs	r3, #8
 8000ba2:	089b      	lsrs	r3, r3, #2
 8000ba4:	3306      	adds	r3, #6
 8000ba6:	009b      	lsls	r3, r3, #2
 8000ba8:	18d3      	adds	r3, r2, r3
 8000baa:	3304      	adds	r3, #4
 8000bac:	681b      	ldr	r3, [r3, #0]
 8000bae:	1dfa      	adds	r2, r7, #7
 8000bb0:	7812      	ldrb	r2, [r2, #0]
 8000bb2:	0011      	movs	r1, r2
 8000bb4:	2203      	movs	r2, #3
 8000bb6:	400a      	ands	r2, r1
 8000bb8:	00d2      	lsls	r2, r2, #3
 8000bba:	21ff      	movs	r1, #255	; 0xff
 8000bbc:	4091      	lsls	r1, r2
 8000bbe:	000a      	movs	r2, r1
 8000bc0:	43d2      	mvns	r2, r2
 8000bc2:	401a      	ands	r2, r3
 8000bc4:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8000bc6:	683b      	ldr	r3, [r7, #0]
 8000bc8:	019b      	lsls	r3, r3, #6
 8000bca:	22ff      	movs	r2, #255	; 0xff
 8000bcc:	401a      	ands	r2, r3
 8000bce:	1dfb      	adds	r3, r7, #7
 8000bd0:	781b      	ldrb	r3, [r3, #0]
 8000bd2:	0018      	movs	r0, r3
 8000bd4:	2303      	movs	r3, #3
 8000bd6:	4003      	ands	r3, r0
 8000bd8:	00db      	lsls	r3, r3, #3
 8000bda:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000bdc:	4809      	ldr	r0, [pc, #36]	; (8000c04 <__NVIC_SetPriority+0xd8>)
 8000bde:	1dfb      	adds	r3, r7, #7
 8000be0:	781b      	ldrb	r3, [r3, #0]
 8000be2:	001c      	movs	r4, r3
 8000be4:	230f      	movs	r3, #15
 8000be6:	4023      	ands	r3, r4
 8000be8:	3b08      	subs	r3, #8
 8000bea:	089b      	lsrs	r3, r3, #2
 8000bec:	430a      	orrs	r2, r1
 8000bee:	3306      	adds	r3, #6
 8000bf0:	009b      	lsls	r3, r3, #2
 8000bf2:	18c3      	adds	r3, r0, r3
 8000bf4:	3304      	adds	r3, #4
 8000bf6:	601a      	str	r2, [r3, #0]
}
 8000bf8:	46c0      	nop			; (mov r8, r8)
 8000bfa:	46bd      	mov	sp, r7
 8000bfc:	b003      	add	sp, #12
 8000bfe:	bd90      	pop	{r4, r7, pc}
 8000c00:	e000e100 	.word	0xe000e100
 8000c04:	e000ed00 	.word	0xe000ed00

08000c08 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000c08:	b580      	push	{r7, lr}
 8000c0a:	b082      	sub	sp, #8
 8000c0c:	af00      	add	r7, sp, #0
 8000c0e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000c10:	687b      	ldr	r3, [r7, #4]
 8000c12:	1e5a      	subs	r2, r3, #1
 8000c14:	2380      	movs	r3, #128	; 0x80
 8000c16:	045b      	lsls	r3, r3, #17
 8000c18:	429a      	cmp	r2, r3
 8000c1a:	d301      	bcc.n	8000c20 <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000c1c:	2301      	movs	r3, #1
 8000c1e:	e010      	b.n	8000c42 <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000c20:	4b0a      	ldr	r3, [pc, #40]	; (8000c4c <SysTick_Config+0x44>)
 8000c22:	687a      	ldr	r2, [r7, #4]
 8000c24:	3a01      	subs	r2, #1
 8000c26:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000c28:	2301      	movs	r3, #1
 8000c2a:	425b      	negs	r3, r3
 8000c2c:	2103      	movs	r1, #3
 8000c2e:	0018      	movs	r0, r3
 8000c30:	f7ff ff7c 	bl	8000b2c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000c34:	4b05      	ldr	r3, [pc, #20]	; (8000c4c <SysTick_Config+0x44>)
 8000c36:	2200      	movs	r2, #0
 8000c38:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000c3a:	4b04      	ldr	r3, [pc, #16]	; (8000c4c <SysTick_Config+0x44>)
 8000c3c:	2207      	movs	r2, #7
 8000c3e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000c40:	2300      	movs	r3, #0
}
 8000c42:	0018      	movs	r0, r3
 8000c44:	46bd      	mov	sp, r7
 8000c46:	b002      	add	sp, #8
 8000c48:	bd80      	pop	{r7, pc}
 8000c4a:	46c0      	nop			; (mov r8, r8)
 8000c4c:	e000e010 	.word	0xe000e010

08000c50 <HAL_NVIC_SetPriority>:
  *         with stm32f0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0 based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000c50:	b580      	push	{r7, lr}
 8000c52:	b084      	sub	sp, #16
 8000c54:	af00      	add	r7, sp, #0
 8000c56:	60b9      	str	r1, [r7, #8]
 8000c58:	607a      	str	r2, [r7, #4]
 8000c5a:	210f      	movs	r1, #15
 8000c5c:	187b      	adds	r3, r7, r1
 8000c5e:	1c02      	adds	r2, r0, #0
 8000c60:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 8000c62:	68ba      	ldr	r2, [r7, #8]
 8000c64:	187b      	adds	r3, r7, r1
 8000c66:	781b      	ldrb	r3, [r3, #0]
 8000c68:	b25b      	sxtb	r3, r3
 8000c6a:	0011      	movs	r1, r2
 8000c6c:	0018      	movs	r0, r3
 8000c6e:	f7ff ff5d 	bl	8000b2c <__NVIC_SetPriority>
}
 8000c72:	46c0      	nop			; (mov r8, r8)
 8000c74:	46bd      	mov	sp, r7
 8000c76:	b004      	add	sp, #16
 8000c78:	bd80      	pop	{r7, pc}

08000c7a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f0xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000c7a:	b580      	push	{r7, lr}
 8000c7c:	b082      	sub	sp, #8
 8000c7e:	af00      	add	r7, sp, #0
 8000c80:	0002      	movs	r2, r0
 8000c82:	1dfb      	adds	r3, r7, #7
 8000c84:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000c86:	1dfb      	adds	r3, r7, #7
 8000c88:	781b      	ldrb	r3, [r3, #0]
 8000c8a:	b25b      	sxtb	r3, r3
 8000c8c:	0018      	movs	r0, r3
 8000c8e:	f7ff ff33 	bl	8000af8 <__NVIC_EnableIRQ>
}
 8000c92:	46c0      	nop			; (mov r8, r8)
 8000c94:	46bd      	mov	sp, r7
 8000c96:	b002      	add	sp, #8
 8000c98:	bd80      	pop	{r7, pc}

08000c9a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000c9a:	b580      	push	{r7, lr}
 8000c9c:	b082      	sub	sp, #8
 8000c9e:	af00      	add	r7, sp, #0
 8000ca0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000ca2:	687b      	ldr	r3, [r7, #4]
 8000ca4:	0018      	movs	r0, r3
 8000ca6:	f7ff ffaf 	bl	8000c08 <SysTick_Config>
 8000caa:	0003      	movs	r3, r0
}
 8000cac:	0018      	movs	r0, r3
 8000cae:	46bd      	mov	sp, r7
 8000cb0:	b002      	add	sp, #8
 8000cb2:	bd80      	pop	{r7, pc}

08000cb4 <HAL_DMA_Abort>:
  * @param  hdma  pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8000cb4:	b580      	push	{r7, lr}
 8000cb6:	b082      	sub	sp, #8
 8000cb8:	af00      	add	r7, sp, #0
 8000cba:	6078      	str	r0, [r7, #4]
  if (hdma->State != HAL_DMA_STATE_BUSY)
 8000cbc:	687b      	ldr	r3, [r7, #4]
 8000cbe:	2221      	movs	r2, #33	; 0x21
 8000cc0:	5c9b      	ldrb	r3, [r3, r2]
 8000cc2:	b2db      	uxtb	r3, r3
 8000cc4:	2b02      	cmp	r3, #2
 8000cc6:	d008      	beq.n	8000cda <HAL_DMA_Abort+0x26>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000cc8:	687b      	ldr	r3, [r7, #4]
 8000cca:	2204      	movs	r2, #4
 8000ccc:	639a      	str	r2, [r3, #56]	; 0x38

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000cce:	687b      	ldr	r3, [r7, #4]
 8000cd0:	2220      	movs	r2, #32
 8000cd2:	2100      	movs	r1, #0
 8000cd4:	5499      	strb	r1, [r3, r2]

    return HAL_ERROR;
 8000cd6:	2301      	movs	r3, #1
 8000cd8:	e020      	b.n	8000d1c <HAL_DMA_Abort+0x68>
  }
  else
  {
    /* Disable DMA IT */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8000cda:	687b      	ldr	r3, [r7, #4]
 8000cdc:	681b      	ldr	r3, [r3, #0]
 8000cde:	681a      	ldr	r2, [r3, #0]
 8000ce0:	687b      	ldr	r3, [r7, #4]
 8000ce2:	681b      	ldr	r3, [r3, #0]
 8000ce4:	210e      	movs	r1, #14
 8000ce6:	438a      	bics	r2, r1
 8000ce8:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 8000cea:	687b      	ldr	r3, [r7, #4]
 8000cec:	681b      	ldr	r3, [r3, #0]
 8000cee:	681a      	ldr	r2, [r3, #0]
 8000cf0:	687b      	ldr	r3, [r7, #4]
 8000cf2:	681b      	ldr	r3, [r3, #0]
 8000cf4:	2101      	movs	r1, #1
 8000cf6:	438a      	bics	r2, r1
 8000cf8:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_FLAG_GL1 << hdma->ChannelIndex);
 8000cfa:	687b      	ldr	r3, [r7, #4]
 8000cfc:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000cfe:	687b      	ldr	r3, [r7, #4]
 8000d00:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000d02:	2101      	movs	r1, #1
 8000d04:	4091      	lsls	r1, r2
 8000d06:	000a      	movs	r2, r1
 8000d08:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8000d0a:	687b      	ldr	r3, [r7, #4]
 8000d0c:	2221      	movs	r2, #33	; 0x21
 8000d0e:	2101      	movs	r1, #1
 8000d10:	5499      	strb	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);
 8000d12:	687b      	ldr	r3, [r7, #4]
 8000d14:	2220      	movs	r2, #32
 8000d16:	2100      	movs	r1, #0
 8000d18:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8000d1a:	2300      	movs	r3, #0
}
 8000d1c:	0018      	movs	r0, r3
 8000d1e:	46bd      	mov	sp, r7
 8000d20:	b002      	add	sp, #8
 8000d22:	bd80      	pop	{r7, pc}

08000d24 <HAL_DMA_Abort_IT>:
  * @param  hdma  pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8000d24:	b580      	push	{r7, lr}
 8000d26:	b084      	sub	sp, #16
 8000d28:	af00      	add	r7, sp, #0
 8000d2a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8000d2c:	210f      	movs	r1, #15
 8000d2e:	187b      	adds	r3, r7, r1
 8000d30:	2200      	movs	r2, #0
 8000d32:	701a      	strb	r2, [r3, #0]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 8000d34:	687b      	ldr	r3, [r7, #4]
 8000d36:	2221      	movs	r2, #33	; 0x21
 8000d38:	5c9b      	ldrb	r3, [r3, r2]
 8000d3a:	b2db      	uxtb	r3, r3
 8000d3c:	2b02      	cmp	r3, #2
 8000d3e:	d006      	beq.n	8000d4e <HAL_DMA_Abort_IT+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000d40:	687b      	ldr	r3, [r7, #4]
 8000d42:	2204      	movs	r2, #4
 8000d44:	639a      	str	r2, [r3, #56]	; 0x38

    status = HAL_ERROR;
 8000d46:	187b      	adds	r3, r7, r1
 8000d48:	2201      	movs	r2, #1
 8000d4a:	701a      	strb	r2, [r3, #0]
 8000d4c:	e028      	b.n	8000da0 <HAL_DMA_Abort_IT+0x7c>
  }
  else
  {

    /* Disable DMA IT */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8000d4e:	687b      	ldr	r3, [r7, #4]
 8000d50:	681b      	ldr	r3, [r3, #0]
 8000d52:	681a      	ldr	r2, [r3, #0]
 8000d54:	687b      	ldr	r3, [r7, #4]
 8000d56:	681b      	ldr	r3, [r3, #0]
 8000d58:	210e      	movs	r1, #14
 8000d5a:	438a      	bics	r2, r1
 8000d5c:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 8000d5e:	687b      	ldr	r3, [r7, #4]
 8000d60:	681b      	ldr	r3, [r3, #0]
 8000d62:	681a      	ldr	r2, [r3, #0]
 8000d64:	687b      	ldr	r3, [r7, #4]
 8000d66:	681b      	ldr	r3, [r3, #0]
 8000d68:	2101      	movs	r1, #1
 8000d6a:	438a      	bics	r2, r1
 8000d6c:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 8000d6e:	687b      	ldr	r3, [r7, #4]
 8000d70:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000d72:	687b      	ldr	r3, [r7, #4]
 8000d74:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000d76:	2101      	movs	r1, #1
 8000d78:	4091      	lsls	r1, r2
 8000d7a:	000a      	movs	r2, r1
 8000d7c:	605a      	str	r2, [r3, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8000d7e:	687b      	ldr	r3, [r7, #4]
 8000d80:	2221      	movs	r2, #33	; 0x21
 8000d82:	2101      	movs	r1, #1
 8000d84:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000d86:	687b      	ldr	r3, [r7, #4]
 8000d88:	2220      	movs	r2, #32
 8000d8a:	2100      	movs	r1, #0
 8000d8c:	5499      	strb	r1, [r3, r2]

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 8000d8e:	687b      	ldr	r3, [r7, #4]
 8000d90:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000d92:	2b00      	cmp	r3, #0
 8000d94:	d004      	beq.n	8000da0 <HAL_DMA_Abort_IT+0x7c>
    {
      hdma->XferAbortCallback(hdma);
 8000d96:	687b      	ldr	r3, [r7, #4]
 8000d98:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000d9a:	687a      	ldr	r2, [r7, #4]
 8000d9c:	0010      	movs	r0, r2
 8000d9e:	4798      	blx	r3
    }
  }
  return status;
 8000da0:	230f      	movs	r3, #15
 8000da2:	18fb      	adds	r3, r7, r3
 8000da4:	781b      	ldrb	r3, [r3, #0]
}
 8000da6:	0018      	movs	r0, r3
 8000da8:	46bd      	mov	sp, r7
 8000daa:	b004      	add	sp, #16
 8000dac:	bd80      	pop	{r7, pc}
	...

08000db0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000db0:	b580      	push	{r7, lr}
 8000db2:	b086      	sub	sp, #24
 8000db4:	af00      	add	r7, sp, #0
 8000db6:	6078      	str	r0, [r7, #4]
 8000db8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000dba:	2300      	movs	r3, #0
 8000dbc:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000dbe:	e155      	b.n	800106c <HAL_GPIO_Init+0x2bc>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8000dc0:	683b      	ldr	r3, [r7, #0]
 8000dc2:	681b      	ldr	r3, [r3, #0]
 8000dc4:	2101      	movs	r1, #1
 8000dc6:	697a      	ldr	r2, [r7, #20]
 8000dc8:	4091      	lsls	r1, r2
 8000dca:	000a      	movs	r2, r1
 8000dcc:	4013      	ands	r3, r2
 8000dce:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8000dd0:	68fb      	ldr	r3, [r7, #12]
 8000dd2:	2b00      	cmp	r3, #0
 8000dd4:	d100      	bne.n	8000dd8 <HAL_GPIO_Init+0x28>
 8000dd6:	e146      	b.n	8001066 <HAL_GPIO_Init+0x2b6>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8000dd8:	683b      	ldr	r3, [r7, #0]
 8000dda:	685b      	ldr	r3, [r3, #4]
 8000ddc:	2203      	movs	r2, #3
 8000dde:	4013      	ands	r3, r2
 8000de0:	2b01      	cmp	r3, #1
 8000de2:	d005      	beq.n	8000df0 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8000de4:	683b      	ldr	r3, [r7, #0]
 8000de6:	685b      	ldr	r3, [r3, #4]
 8000de8:	2203      	movs	r2, #3
 8000dea:	4013      	ands	r3, r2
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8000dec:	2b02      	cmp	r3, #2
 8000dee:	d130      	bne.n	8000e52 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000df0:	687b      	ldr	r3, [r7, #4]
 8000df2:	689b      	ldr	r3, [r3, #8]
 8000df4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8000df6:	697b      	ldr	r3, [r7, #20]
 8000df8:	005b      	lsls	r3, r3, #1
 8000dfa:	2203      	movs	r2, #3
 8000dfc:	409a      	lsls	r2, r3
 8000dfe:	0013      	movs	r3, r2
 8000e00:	43da      	mvns	r2, r3
 8000e02:	693b      	ldr	r3, [r7, #16]
 8000e04:	4013      	ands	r3, r2
 8000e06:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8000e08:	683b      	ldr	r3, [r7, #0]
 8000e0a:	68da      	ldr	r2, [r3, #12]
 8000e0c:	697b      	ldr	r3, [r7, #20]
 8000e0e:	005b      	lsls	r3, r3, #1
 8000e10:	409a      	lsls	r2, r3
 8000e12:	0013      	movs	r3, r2
 8000e14:	693a      	ldr	r2, [r7, #16]
 8000e16:	4313      	orrs	r3, r2
 8000e18:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8000e1a:	687b      	ldr	r3, [r7, #4]
 8000e1c:	693a      	ldr	r2, [r7, #16]
 8000e1e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000e20:	687b      	ldr	r3, [r7, #4]
 8000e22:	685b      	ldr	r3, [r3, #4]
 8000e24:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000e26:	2201      	movs	r2, #1
 8000e28:	697b      	ldr	r3, [r7, #20]
 8000e2a:	409a      	lsls	r2, r3
 8000e2c:	0013      	movs	r3, r2
 8000e2e:	43da      	mvns	r2, r3
 8000e30:	693b      	ldr	r3, [r7, #16]
 8000e32:	4013      	ands	r3, r2
 8000e34:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000e36:	683b      	ldr	r3, [r7, #0]
 8000e38:	685b      	ldr	r3, [r3, #4]
 8000e3a:	091b      	lsrs	r3, r3, #4
 8000e3c:	2201      	movs	r2, #1
 8000e3e:	401a      	ands	r2, r3
 8000e40:	697b      	ldr	r3, [r7, #20]
 8000e42:	409a      	lsls	r2, r3
 8000e44:	0013      	movs	r3, r2
 8000e46:	693a      	ldr	r2, [r7, #16]
 8000e48:	4313      	orrs	r3, r2
 8000e4a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8000e4c:	687b      	ldr	r3, [r7, #4]
 8000e4e:	693a      	ldr	r2, [r7, #16]
 8000e50:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000e52:	683b      	ldr	r3, [r7, #0]
 8000e54:	685b      	ldr	r3, [r3, #4]
 8000e56:	2203      	movs	r2, #3
 8000e58:	4013      	ands	r3, r2
 8000e5a:	2b03      	cmp	r3, #3
 8000e5c:	d017      	beq.n	8000e8e <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8000e5e:	687b      	ldr	r3, [r7, #4]
 8000e60:	68db      	ldr	r3, [r3, #12]
 8000e62:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8000e64:	697b      	ldr	r3, [r7, #20]
 8000e66:	005b      	lsls	r3, r3, #1
 8000e68:	2203      	movs	r2, #3
 8000e6a:	409a      	lsls	r2, r3
 8000e6c:	0013      	movs	r3, r2
 8000e6e:	43da      	mvns	r2, r3
 8000e70:	693b      	ldr	r3, [r7, #16]
 8000e72:	4013      	ands	r3, r2
 8000e74:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8000e76:	683b      	ldr	r3, [r7, #0]
 8000e78:	689a      	ldr	r2, [r3, #8]
 8000e7a:	697b      	ldr	r3, [r7, #20]
 8000e7c:	005b      	lsls	r3, r3, #1
 8000e7e:	409a      	lsls	r2, r3
 8000e80:	0013      	movs	r3, r2
 8000e82:	693a      	ldr	r2, [r7, #16]
 8000e84:	4313      	orrs	r3, r2
 8000e86:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8000e88:	687b      	ldr	r3, [r7, #4]
 8000e8a:	693a      	ldr	r2, [r7, #16]
 8000e8c:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000e8e:	683b      	ldr	r3, [r7, #0]
 8000e90:	685b      	ldr	r3, [r3, #4]
 8000e92:	2203      	movs	r2, #3
 8000e94:	4013      	ands	r3, r2
 8000e96:	2b02      	cmp	r3, #2
 8000e98:	d123      	bne.n	8000ee2 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8000e9a:	697b      	ldr	r3, [r7, #20]
 8000e9c:	08da      	lsrs	r2, r3, #3
 8000e9e:	687b      	ldr	r3, [r7, #4]
 8000ea0:	3208      	adds	r2, #8
 8000ea2:	0092      	lsls	r2, r2, #2
 8000ea4:	58d3      	ldr	r3, [r2, r3]
 8000ea6:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8000ea8:	697b      	ldr	r3, [r7, #20]
 8000eaa:	2207      	movs	r2, #7
 8000eac:	4013      	ands	r3, r2
 8000eae:	009b      	lsls	r3, r3, #2
 8000eb0:	220f      	movs	r2, #15
 8000eb2:	409a      	lsls	r2, r3
 8000eb4:	0013      	movs	r3, r2
 8000eb6:	43da      	mvns	r2, r3
 8000eb8:	693b      	ldr	r3, [r7, #16]
 8000eba:	4013      	ands	r3, r2
 8000ebc:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8000ebe:	683b      	ldr	r3, [r7, #0]
 8000ec0:	691a      	ldr	r2, [r3, #16]
 8000ec2:	697b      	ldr	r3, [r7, #20]
 8000ec4:	2107      	movs	r1, #7
 8000ec6:	400b      	ands	r3, r1
 8000ec8:	009b      	lsls	r3, r3, #2
 8000eca:	409a      	lsls	r2, r3
 8000ecc:	0013      	movs	r3, r2
 8000ece:	693a      	ldr	r2, [r7, #16]
 8000ed0:	4313      	orrs	r3, r2
 8000ed2:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8000ed4:	697b      	ldr	r3, [r7, #20]
 8000ed6:	08da      	lsrs	r2, r3, #3
 8000ed8:	687b      	ldr	r3, [r7, #4]
 8000eda:	3208      	adds	r2, #8
 8000edc:	0092      	lsls	r2, r2, #2
 8000ede:	6939      	ldr	r1, [r7, #16]
 8000ee0:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000ee2:	687b      	ldr	r3, [r7, #4]
 8000ee4:	681b      	ldr	r3, [r3, #0]
 8000ee6:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8000ee8:	697b      	ldr	r3, [r7, #20]
 8000eea:	005b      	lsls	r3, r3, #1
 8000eec:	2203      	movs	r2, #3
 8000eee:	409a      	lsls	r2, r3
 8000ef0:	0013      	movs	r3, r2
 8000ef2:	43da      	mvns	r2, r3
 8000ef4:	693b      	ldr	r3, [r7, #16]
 8000ef6:	4013      	ands	r3, r2
 8000ef8:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8000efa:	683b      	ldr	r3, [r7, #0]
 8000efc:	685b      	ldr	r3, [r3, #4]
 8000efe:	2203      	movs	r2, #3
 8000f00:	401a      	ands	r2, r3
 8000f02:	697b      	ldr	r3, [r7, #20]
 8000f04:	005b      	lsls	r3, r3, #1
 8000f06:	409a      	lsls	r2, r3
 8000f08:	0013      	movs	r3, r2
 8000f0a:	693a      	ldr	r2, [r7, #16]
 8000f0c:	4313      	orrs	r3, r2
 8000f0e:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8000f10:	687b      	ldr	r3, [r7, #4]
 8000f12:	693a      	ldr	r2, [r7, #16]
 8000f14:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8000f16:	683b      	ldr	r3, [r7, #0]
 8000f18:	685a      	ldr	r2, [r3, #4]
 8000f1a:	23c0      	movs	r3, #192	; 0xc0
 8000f1c:	029b      	lsls	r3, r3, #10
 8000f1e:	4013      	ands	r3, r2
 8000f20:	d100      	bne.n	8000f24 <HAL_GPIO_Init+0x174>
 8000f22:	e0a0      	b.n	8001066 <HAL_GPIO_Init+0x2b6>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000f24:	4b57      	ldr	r3, [pc, #348]	; (8001084 <HAL_GPIO_Init+0x2d4>)
 8000f26:	699a      	ldr	r2, [r3, #24]
 8000f28:	4b56      	ldr	r3, [pc, #344]	; (8001084 <HAL_GPIO_Init+0x2d4>)
 8000f2a:	2101      	movs	r1, #1
 8000f2c:	430a      	orrs	r2, r1
 8000f2e:	619a      	str	r2, [r3, #24]
 8000f30:	4b54      	ldr	r3, [pc, #336]	; (8001084 <HAL_GPIO_Init+0x2d4>)
 8000f32:	699b      	ldr	r3, [r3, #24]
 8000f34:	2201      	movs	r2, #1
 8000f36:	4013      	ands	r3, r2
 8000f38:	60bb      	str	r3, [r7, #8]
 8000f3a:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8000f3c:	4a52      	ldr	r2, [pc, #328]	; (8001088 <HAL_GPIO_Init+0x2d8>)
 8000f3e:	697b      	ldr	r3, [r7, #20]
 8000f40:	089b      	lsrs	r3, r3, #2
 8000f42:	3302      	adds	r3, #2
 8000f44:	009b      	lsls	r3, r3, #2
 8000f46:	589b      	ldr	r3, [r3, r2]
 8000f48:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8000f4a:	697b      	ldr	r3, [r7, #20]
 8000f4c:	2203      	movs	r2, #3
 8000f4e:	4013      	ands	r3, r2
 8000f50:	009b      	lsls	r3, r3, #2
 8000f52:	220f      	movs	r2, #15
 8000f54:	409a      	lsls	r2, r3
 8000f56:	0013      	movs	r3, r2
 8000f58:	43da      	mvns	r2, r3
 8000f5a:	693b      	ldr	r3, [r7, #16]
 8000f5c:	4013      	ands	r3, r2
 8000f5e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8000f60:	687a      	ldr	r2, [r7, #4]
 8000f62:	2390      	movs	r3, #144	; 0x90
 8000f64:	05db      	lsls	r3, r3, #23
 8000f66:	429a      	cmp	r2, r3
 8000f68:	d019      	beq.n	8000f9e <HAL_GPIO_Init+0x1ee>
 8000f6a:	687b      	ldr	r3, [r7, #4]
 8000f6c:	4a47      	ldr	r2, [pc, #284]	; (800108c <HAL_GPIO_Init+0x2dc>)
 8000f6e:	4293      	cmp	r3, r2
 8000f70:	d013      	beq.n	8000f9a <HAL_GPIO_Init+0x1ea>
 8000f72:	687b      	ldr	r3, [r7, #4]
 8000f74:	4a46      	ldr	r2, [pc, #280]	; (8001090 <HAL_GPIO_Init+0x2e0>)
 8000f76:	4293      	cmp	r3, r2
 8000f78:	d00d      	beq.n	8000f96 <HAL_GPIO_Init+0x1e6>
 8000f7a:	687b      	ldr	r3, [r7, #4]
 8000f7c:	4a45      	ldr	r2, [pc, #276]	; (8001094 <HAL_GPIO_Init+0x2e4>)
 8000f7e:	4293      	cmp	r3, r2
 8000f80:	d007      	beq.n	8000f92 <HAL_GPIO_Init+0x1e2>
 8000f82:	687b      	ldr	r3, [r7, #4]
 8000f84:	4a44      	ldr	r2, [pc, #272]	; (8001098 <HAL_GPIO_Init+0x2e8>)
 8000f86:	4293      	cmp	r3, r2
 8000f88:	d101      	bne.n	8000f8e <HAL_GPIO_Init+0x1de>
 8000f8a:	2304      	movs	r3, #4
 8000f8c:	e008      	b.n	8000fa0 <HAL_GPIO_Init+0x1f0>
 8000f8e:	2305      	movs	r3, #5
 8000f90:	e006      	b.n	8000fa0 <HAL_GPIO_Init+0x1f0>
 8000f92:	2303      	movs	r3, #3
 8000f94:	e004      	b.n	8000fa0 <HAL_GPIO_Init+0x1f0>
 8000f96:	2302      	movs	r3, #2
 8000f98:	e002      	b.n	8000fa0 <HAL_GPIO_Init+0x1f0>
 8000f9a:	2301      	movs	r3, #1
 8000f9c:	e000      	b.n	8000fa0 <HAL_GPIO_Init+0x1f0>
 8000f9e:	2300      	movs	r3, #0
 8000fa0:	697a      	ldr	r2, [r7, #20]
 8000fa2:	2103      	movs	r1, #3
 8000fa4:	400a      	ands	r2, r1
 8000fa6:	0092      	lsls	r2, r2, #2
 8000fa8:	4093      	lsls	r3, r2
 8000faa:	693a      	ldr	r2, [r7, #16]
 8000fac:	4313      	orrs	r3, r2
 8000fae:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8000fb0:	4935      	ldr	r1, [pc, #212]	; (8001088 <HAL_GPIO_Init+0x2d8>)
 8000fb2:	697b      	ldr	r3, [r7, #20]
 8000fb4:	089b      	lsrs	r3, r3, #2
 8000fb6:	3302      	adds	r3, #2
 8000fb8:	009b      	lsls	r3, r3, #2
 8000fba:	693a      	ldr	r2, [r7, #16]
 8000fbc:	505a      	str	r2, [r3, r1]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8000fbe:	4b37      	ldr	r3, [pc, #220]	; (800109c <HAL_GPIO_Init+0x2ec>)
 8000fc0:	689b      	ldr	r3, [r3, #8]
 8000fc2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000fc4:	68fb      	ldr	r3, [r7, #12]
 8000fc6:	43da      	mvns	r2, r3
 8000fc8:	693b      	ldr	r3, [r7, #16]
 8000fca:	4013      	ands	r3, r2
 8000fcc:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8000fce:	683b      	ldr	r3, [r7, #0]
 8000fd0:	685a      	ldr	r2, [r3, #4]
 8000fd2:	2380      	movs	r3, #128	; 0x80
 8000fd4:	035b      	lsls	r3, r3, #13
 8000fd6:	4013      	ands	r3, r2
 8000fd8:	d003      	beq.n	8000fe2 <HAL_GPIO_Init+0x232>
        {
          temp |= iocurrent;
 8000fda:	693a      	ldr	r2, [r7, #16]
 8000fdc:	68fb      	ldr	r3, [r7, #12]
 8000fde:	4313      	orrs	r3, r2
 8000fe0:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8000fe2:	4b2e      	ldr	r3, [pc, #184]	; (800109c <HAL_GPIO_Init+0x2ec>)
 8000fe4:	693a      	ldr	r2, [r7, #16]
 8000fe6:	609a      	str	r2, [r3, #8]

        temp = EXTI->FTSR;
 8000fe8:	4b2c      	ldr	r3, [pc, #176]	; (800109c <HAL_GPIO_Init+0x2ec>)
 8000fea:	68db      	ldr	r3, [r3, #12]
 8000fec:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000fee:	68fb      	ldr	r3, [r7, #12]
 8000ff0:	43da      	mvns	r2, r3
 8000ff2:	693b      	ldr	r3, [r7, #16]
 8000ff4:	4013      	ands	r3, r2
 8000ff6:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8000ff8:	683b      	ldr	r3, [r7, #0]
 8000ffa:	685a      	ldr	r2, [r3, #4]
 8000ffc:	2380      	movs	r3, #128	; 0x80
 8000ffe:	039b      	lsls	r3, r3, #14
 8001000:	4013      	ands	r3, r2
 8001002:	d003      	beq.n	800100c <HAL_GPIO_Init+0x25c>
        {
          temp |= iocurrent;
 8001004:	693a      	ldr	r2, [r7, #16]
 8001006:	68fb      	ldr	r3, [r7, #12]
 8001008:	4313      	orrs	r3, r2
 800100a:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 800100c:	4b23      	ldr	r3, [pc, #140]	; (800109c <HAL_GPIO_Init+0x2ec>)
 800100e:	693a      	ldr	r2, [r7, #16]
 8001010:	60da      	str	r2, [r3, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR;
 8001012:	4b22      	ldr	r3, [pc, #136]	; (800109c <HAL_GPIO_Init+0x2ec>)
 8001014:	685b      	ldr	r3, [r3, #4]
 8001016:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001018:	68fb      	ldr	r3, [r7, #12]
 800101a:	43da      	mvns	r2, r3
 800101c:	693b      	ldr	r3, [r7, #16]
 800101e:	4013      	ands	r3, r2
 8001020:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8001022:	683b      	ldr	r3, [r7, #0]
 8001024:	685a      	ldr	r2, [r3, #4]
 8001026:	2380      	movs	r3, #128	; 0x80
 8001028:	029b      	lsls	r3, r3, #10
 800102a:	4013      	ands	r3, r2
 800102c:	d003      	beq.n	8001036 <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 800102e:	693a      	ldr	r2, [r7, #16]
 8001030:	68fb      	ldr	r3, [r7, #12]
 8001032:	4313      	orrs	r3, r2
 8001034:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8001036:	4b19      	ldr	r3, [pc, #100]	; (800109c <HAL_GPIO_Init+0x2ec>)
 8001038:	693a      	ldr	r2, [r7, #16]
 800103a:	605a      	str	r2, [r3, #4]

        temp = EXTI->IMR;
 800103c:	4b17      	ldr	r3, [pc, #92]	; (800109c <HAL_GPIO_Init+0x2ec>)
 800103e:	681b      	ldr	r3, [r3, #0]
 8001040:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001042:	68fb      	ldr	r3, [r7, #12]
 8001044:	43da      	mvns	r2, r3
 8001046:	693b      	ldr	r3, [r7, #16]
 8001048:	4013      	ands	r3, r2
 800104a:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 800104c:	683b      	ldr	r3, [r7, #0]
 800104e:	685a      	ldr	r2, [r3, #4]
 8001050:	2380      	movs	r3, #128	; 0x80
 8001052:	025b      	lsls	r3, r3, #9
 8001054:	4013      	ands	r3, r2
 8001056:	d003      	beq.n	8001060 <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 8001058:	693a      	ldr	r2, [r7, #16]
 800105a:	68fb      	ldr	r3, [r7, #12]
 800105c:	4313      	orrs	r3, r2
 800105e:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8001060:	4b0e      	ldr	r3, [pc, #56]	; (800109c <HAL_GPIO_Init+0x2ec>)
 8001062:	693a      	ldr	r2, [r7, #16]
 8001064:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 8001066:	697b      	ldr	r3, [r7, #20]
 8001068:	3301      	adds	r3, #1
 800106a:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800106c:	683b      	ldr	r3, [r7, #0]
 800106e:	681a      	ldr	r2, [r3, #0]
 8001070:	697b      	ldr	r3, [r7, #20]
 8001072:	40da      	lsrs	r2, r3
 8001074:	1e13      	subs	r3, r2, #0
 8001076:	d000      	beq.n	800107a <HAL_GPIO_Init+0x2ca>
 8001078:	e6a2      	b.n	8000dc0 <HAL_GPIO_Init+0x10>
  } 
}
 800107a:	46c0      	nop			; (mov r8, r8)
 800107c:	46c0      	nop			; (mov r8, r8)
 800107e:	46bd      	mov	sp, r7
 8001080:	b006      	add	sp, #24
 8001082:	bd80      	pop	{r7, pc}
 8001084:	40021000 	.word	0x40021000
 8001088:	40010000 	.word	0x40010000
 800108c:	48000400 	.word	0x48000400
 8001090:	48000800 	.word	0x48000800
 8001094:	48000c00 	.word	0x48000c00
 8001098:	48001000 	.word	0x48001000
 800109c:	40010400 	.word	0x40010400

080010a0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80010a0:	b580      	push	{r7, lr}
 80010a2:	b082      	sub	sp, #8
 80010a4:	af00      	add	r7, sp, #0
 80010a6:	6078      	str	r0, [r7, #4]
 80010a8:	0008      	movs	r0, r1
 80010aa:	0011      	movs	r1, r2
 80010ac:	1cbb      	adds	r3, r7, #2
 80010ae:	1c02      	adds	r2, r0, #0
 80010b0:	801a      	strh	r2, [r3, #0]
 80010b2:	1c7b      	adds	r3, r7, #1
 80010b4:	1c0a      	adds	r2, r1, #0
 80010b6:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80010b8:	1c7b      	adds	r3, r7, #1
 80010ba:	781b      	ldrb	r3, [r3, #0]
 80010bc:	2b00      	cmp	r3, #0
 80010be:	d004      	beq.n	80010ca <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80010c0:	1cbb      	adds	r3, r7, #2
 80010c2:	881a      	ldrh	r2, [r3, #0]
 80010c4:	687b      	ldr	r3, [r7, #4]
 80010c6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80010c8:	e003      	b.n	80010d2 <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80010ca:	1cbb      	adds	r3, r7, #2
 80010cc:	881a      	ldrh	r2, [r3, #0]
 80010ce:	687b      	ldr	r3, [r7, #4]
 80010d0:	629a      	str	r2, [r3, #40]	; 0x28
}
 80010d2:	46c0      	nop			; (mov r8, r8)
 80010d4:	46bd      	mov	sp, r7
 80010d6:	b002      	add	sp, #8
 80010d8:	bd80      	pop	{r7, pc}
	...

080010dc <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80010dc:	b580      	push	{r7, lr}
 80010de:	b088      	sub	sp, #32
 80010e0:	af00      	add	r7, sp, #0
 80010e2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  uint32_t pll_config2;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80010e4:	687b      	ldr	r3, [r7, #4]
 80010e6:	2b00      	cmp	r3, #0
 80010e8:	d102      	bne.n	80010f0 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 80010ea:	2301      	movs	r3, #1
 80010ec:	f000 fb76 	bl	80017dc <HAL_RCC_OscConfig+0x700>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80010f0:	687b      	ldr	r3, [r7, #4]
 80010f2:	681b      	ldr	r3, [r3, #0]
 80010f4:	2201      	movs	r2, #1
 80010f6:	4013      	ands	r3, r2
 80010f8:	d100      	bne.n	80010fc <HAL_RCC_OscConfig+0x20>
 80010fa:	e08e      	b.n	800121a <HAL_RCC_OscConfig+0x13e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 80010fc:	4bc5      	ldr	r3, [pc, #788]	; (8001414 <HAL_RCC_OscConfig+0x338>)
 80010fe:	685b      	ldr	r3, [r3, #4]
 8001100:	220c      	movs	r2, #12
 8001102:	4013      	ands	r3, r2
 8001104:	2b04      	cmp	r3, #4
 8001106:	d00e      	beq.n	8001126 <HAL_RCC_OscConfig+0x4a>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001108:	4bc2      	ldr	r3, [pc, #776]	; (8001414 <HAL_RCC_OscConfig+0x338>)
 800110a:	685b      	ldr	r3, [r3, #4]
 800110c:	220c      	movs	r2, #12
 800110e:	4013      	ands	r3, r2
 8001110:	2b08      	cmp	r3, #8
 8001112:	d117      	bne.n	8001144 <HAL_RCC_OscConfig+0x68>
 8001114:	4bbf      	ldr	r3, [pc, #764]	; (8001414 <HAL_RCC_OscConfig+0x338>)
 8001116:	685a      	ldr	r2, [r3, #4]
 8001118:	23c0      	movs	r3, #192	; 0xc0
 800111a:	025b      	lsls	r3, r3, #9
 800111c:	401a      	ands	r2, r3
 800111e:	2380      	movs	r3, #128	; 0x80
 8001120:	025b      	lsls	r3, r3, #9
 8001122:	429a      	cmp	r2, r3
 8001124:	d10e      	bne.n	8001144 <HAL_RCC_OscConfig+0x68>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001126:	4bbb      	ldr	r3, [pc, #748]	; (8001414 <HAL_RCC_OscConfig+0x338>)
 8001128:	681a      	ldr	r2, [r3, #0]
 800112a:	2380      	movs	r3, #128	; 0x80
 800112c:	029b      	lsls	r3, r3, #10
 800112e:	4013      	ands	r3, r2
 8001130:	d100      	bne.n	8001134 <HAL_RCC_OscConfig+0x58>
 8001132:	e071      	b.n	8001218 <HAL_RCC_OscConfig+0x13c>
 8001134:	687b      	ldr	r3, [r7, #4]
 8001136:	685b      	ldr	r3, [r3, #4]
 8001138:	2b00      	cmp	r3, #0
 800113a:	d000      	beq.n	800113e <HAL_RCC_OscConfig+0x62>
 800113c:	e06c      	b.n	8001218 <HAL_RCC_OscConfig+0x13c>
      {
        return HAL_ERROR;
 800113e:	2301      	movs	r3, #1
 8001140:	f000 fb4c 	bl	80017dc <HAL_RCC_OscConfig+0x700>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001144:	687b      	ldr	r3, [r7, #4]
 8001146:	685b      	ldr	r3, [r3, #4]
 8001148:	2b01      	cmp	r3, #1
 800114a:	d107      	bne.n	800115c <HAL_RCC_OscConfig+0x80>
 800114c:	4bb1      	ldr	r3, [pc, #708]	; (8001414 <HAL_RCC_OscConfig+0x338>)
 800114e:	681a      	ldr	r2, [r3, #0]
 8001150:	4bb0      	ldr	r3, [pc, #704]	; (8001414 <HAL_RCC_OscConfig+0x338>)
 8001152:	2180      	movs	r1, #128	; 0x80
 8001154:	0249      	lsls	r1, r1, #9
 8001156:	430a      	orrs	r2, r1
 8001158:	601a      	str	r2, [r3, #0]
 800115a:	e02f      	b.n	80011bc <HAL_RCC_OscConfig+0xe0>
 800115c:	687b      	ldr	r3, [r7, #4]
 800115e:	685b      	ldr	r3, [r3, #4]
 8001160:	2b00      	cmp	r3, #0
 8001162:	d10c      	bne.n	800117e <HAL_RCC_OscConfig+0xa2>
 8001164:	4bab      	ldr	r3, [pc, #684]	; (8001414 <HAL_RCC_OscConfig+0x338>)
 8001166:	681a      	ldr	r2, [r3, #0]
 8001168:	4baa      	ldr	r3, [pc, #680]	; (8001414 <HAL_RCC_OscConfig+0x338>)
 800116a:	49ab      	ldr	r1, [pc, #684]	; (8001418 <HAL_RCC_OscConfig+0x33c>)
 800116c:	400a      	ands	r2, r1
 800116e:	601a      	str	r2, [r3, #0]
 8001170:	4ba8      	ldr	r3, [pc, #672]	; (8001414 <HAL_RCC_OscConfig+0x338>)
 8001172:	681a      	ldr	r2, [r3, #0]
 8001174:	4ba7      	ldr	r3, [pc, #668]	; (8001414 <HAL_RCC_OscConfig+0x338>)
 8001176:	49a9      	ldr	r1, [pc, #676]	; (800141c <HAL_RCC_OscConfig+0x340>)
 8001178:	400a      	ands	r2, r1
 800117a:	601a      	str	r2, [r3, #0]
 800117c:	e01e      	b.n	80011bc <HAL_RCC_OscConfig+0xe0>
 800117e:	687b      	ldr	r3, [r7, #4]
 8001180:	685b      	ldr	r3, [r3, #4]
 8001182:	2b05      	cmp	r3, #5
 8001184:	d10e      	bne.n	80011a4 <HAL_RCC_OscConfig+0xc8>
 8001186:	4ba3      	ldr	r3, [pc, #652]	; (8001414 <HAL_RCC_OscConfig+0x338>)
 8001188:	681a      	ldr	r2, [r3, #0]
 800118a:	4ba2      	ldr	r3, [pc, #648]	; (8001414 <HAL_RCC_OscConfig+0x338>)
 800118c:	2180      	movs	r1, #128	; 0x80
 800118e:	02c9      	lsls	r1, r1, #11
 8001190:	430a      	orrs	r2, r1
 8001192:	601a      	str	r2, [r3, #0]
 8001194:	4b9f      	ldr	r3, [pc, #636]	; (8001414 <HAL_RCC_OscConfig+0x338>)
 8001196:	681a      	ldr	r2, [r3, #0]
 8001198:	4b9e      	ldr	r3, [pc, #632]	; (8001414 <HAL_RCC_OscConfig+0x338>)
 800119a:	2180      	movs	r1, #128	; 0x80
 800119c:	0249      	lsls	r1, r1, #9
 800119e:	430a      	orrs	r2, r1
 80011a0:	601a      	str	r2, [r3, #0]
 80011a2:	e00b      	b.n	80011bc <HAL_RCC_OscConfig+0xe0>
 80011a4:	4b9b      	ldr	r3, [pc, #620]	; (8001414 <HAL_RCC_OscConfig+0x338>)
 80011a6:	681a      	ldr	r2, [r3, #0]
 80011a8:	4b9a      	ldr	r3, [pc, #616]	; (8001414 <HAL_RCC_OscConfig+0x338>)
 80011aa:	499b      	ldr	r1, [pc, #620]	; (8001418 <HAL_RCC_OscConfig+0x33c>)
 80011ac:	400a      	ands	r2, r1
 80011ae:	601a      	str	r2, [r3, #0]
 80011b0:	4b98      	ldr	r3, [pc, #608]	; (8001414 <HAL_RCC_OscConfig+0x338>)
 80011b2:	681a      	ldr	r2, [r3, #0]
 80011b4:	4b97      	ldr	r3, [pc, #604]	; (8001414 <HAL_RCC_OscConfig+0x338>)
 80011b6:	4999      	ldr	r1, [pc, #612]	; (800141c <HAL_RCC_OscConfig+0x340>)
 80011b8:	400a      	ands	r2, r1
 80011ba:	601a      	str	r2, [r3, #0]
      

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80011bc:	687b      	ldr	r3, [r7, #4]
 80011be:	685b      	ldr	r3, [r3, #4]
 80011c0:	2b00      	cmp	r3, #0
 80011c2:	d014      	beq.n	80011ee <HAL_RCC_OscConfig+0x112>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80011c4:	f7ff fc8e 	bl	8000ae4 <HAL_GetTick>
 80011c8:	0003      	movs	r3, r0
 80011ca:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80011cc:	e008      	b.n	80011e0 <HAL_RCC_OscConfig+0x104>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80011ce:	f7ff fc89 	bl	8000ae4 <HAL_GetTick>
 80011d2:	0002      	movs	r2, r0
 80011d4:	69bb      	ldr	r3, [r7, #24]
 80011d6:	1ad3      	subs	r3, r2, r3
 80011d8:	2b64      	cmp	r3, #100	; 0x64
 80011da:	d901      	bls.n	80011e0 <HAL_RCC_OscConfig+0x104>
          {
            return HAL_TIMEOUT;
 80011dc:	2303      	movs	r3, #3
 80011de:	e2fd      	b.n	80017dc <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80011e0:	4b8c      	ldr	r3, [pc, #560]	; (8001414 <HAL_RCC_OscConfig+0x338>)
 80011e2:	681a      	ldr	r2, [r3, #0]
 80011e4:	2380      	movs	r3, #128	; 0x80
 80011e6:	029b      	lsls	r3, r3, #10
 80011e8:	4013      	ands	r3, r2
 80011ea:	d0f0      	beq.n	80011ce <HAL_RCC_OscConfig+0xf2>
 80011ec:	e015      	b.n	800121a <HAL_RCC_OscConfig+0x13e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80011ee:	f7ff fc79 	bl	8000ae4 <HAL_GetTick>
 80011f2:	0003      	movs	r3, r0
 80011f4:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80011f6:	e008      	b.n	800120a <HAL_RCC_OscConfig+0x12e>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80011f8:	f7ff fc74 	bl	8000ae4 <HAL_GetTick>
 80011fc:	0002      	movs	r2, r0
 80011fe:	69bb      	ldr	r3, [r7, #24]
 8001200:	1ad3      	subs	r3, r2, r3
 8001202:	2b64      	cmp	r3, #100	; 0x64
 8001204:	d901      	bls.n	800120a <HAL_RCC_OscConfig+0x12e>
          {
            return HAL_TIMEOUT;
 8001206:	2303      	movs	r3, #3
 8001208:	e2e8      	b.n	80017dc <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800120a:	4b82      	ldr	r3, [pc, #520]	; (8001414 <HAL_RCC_OscConfig+0x338>)
 800120c:	681a      	ldr	r2, [r3, #0]
 800120e:	2380      	movs	r3, #128	; 0x80
 8001210:	029b      	lsls	r3, r3, #10
 8001212:	4013      	ands	r3, r2
 8001214:	d1f0      	bne.n	80011f8 <HAL_RCC_OscConfig+0x11c>
 8001216:	e000      	b.n	800121a <HAL_RCC_OscConfig+0x13e>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001218:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800121a:	687b      	ldr	r3, [r7, #4]
 800121c:	681b      	ldr	r3, [r3, #0]
 800121e:	2202      	movs	r2, #2
 8001220:	4013      	ands	r3, r2
 8001222:	d100      	bne.n	8001226 <HAL_RCC_OscConfig+0x14a>
 8001224:	e06c      	b.n	8001300 <HAL_RCC_OscConfig+0x224>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8001226:	4b7b      	ldr	r3, [pc, #492]	; (8001414 <HAL_RCC_OscConfig+0x338>)
 8001228:	685b      	ldr	r3, [r3, #4]
 800122a:	220c      	movs	r2, #12
 800122c:	4013      	ands	r3, r2
 800122e:	d00e      	beq.n	800124e <HAL_RCC_OscConfig+0x172>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8001230:	4b78      	ldr	r3, [pc, #480]	; (8001414 <HAL_RCC_OscConfig+0x338>)
 8001232:	685b      	ldr	r3, [r3, #4]
 8001234:	220c      	movs	r2, #12
 8001236:	4013      	ands	r3, r2
 8001238:	2b08      	cmp	r3, #8
 800123a:	d11f      	bne.n	800127c <HAL_RCC_OscConfig+0x1a0>
 800123c:	4b75      	ldr	r3, [pc, #468]	; (8001414 <HAL_RCC_OscConfig+0x338>)
 800123e:	685a      	ldr	r2, [r3, #4]
 8001240:	23c0      	movs	r3, #192	; 0xc0
 8001242:	025b      	lsls	r3, r3, #9
 8001244:	401a      	ands	r2, r3
 8001246:	2380      	movs	r3, #128	; 0x80
 8001248:	021b      	lsls	r3, r3, #8
 800124a:	429a      	cmp	r2, r3
 800124c:	d116      	bne.n	800127c <HAL_RCC_OscConfig+0x1a0>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800124e:	4b71      	ldr	r3, [pc, #452]	; (8001414 <HAL_RCC_OscConfig+0x338>)
 8001250:	681b      	ldr	r3, [r3, #0]
 8001252:	2202      	movs	r2, #2
 8001254:	4013      	ands	r3, r2
 8001256:	d005      	beq.n	8001264 <HAL_RCC_OscConfig+0x188>
 8001258:	687b      	ldr	r3, [r7, #4]
 800125a:	68db      	ldr	r3, [r3, #12]
 800125c:	2b01      	cmp	r3, #1
 800125e:	d001      	beq.n	8001264 <HAL_RCC_OscConfig+0x188>
      {
        return HAL_ERROR;
 8001260:	2301      	movs	r3, #1
 8001262:	e2bb      	b.n	80017dc <HAL_RCC_OscConfig+0x700>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001264:	4b6b      	ldr	r3, [pc, #428]	; (8001414 <HAL_RCC_OscConfig+0x338>)
 8001266:	681b      	ldr	r3, [r3, #0]
 8001268:	22f8      	movs	r2, #248	; 0xf8
 800126a:	4393      	bics	r3, r2
 800126c:	0019      	movs	r1, r3
 800126e:	687b      	ldr	r3, [r7, #4]
 8001270:	691b      	ldr	r3, [r3, #16]
 8001272:	00da      	lsls	r2, r3, #3
 8001274:	4b67      	ldr	r3, [pc, #412]	; (8001414 <HAL_RCC_OscConfig+0x338>)
 8001276:	430a      	orrs	r2, r1
 8001278:	601a      	str	r2, [r3, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800127a:	e041      	b.n	8001300 <HAL_RCC_OscConfig+0x224>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800127c:	687b      	ldr	r3, [r7, #4]
 800127e:	68db      	ldr	r3, [r3, #12]
 8001280:	2b00      	cmp	r3, #0
 8001282:	d024      	beq.n	80012ce <HAL_RCC_OscConfig+0x1f2>
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001284:	4b63      	ldr	r3, [pc, #396]	; (8001414 <HAL_RCC_OscConfig+0x338>)
 8001286:	681a      	ldr	r2, [r3, #0]
 8001288:	4b62      	ldr	r3, [pc, #392]	; (8001414 <HAL_RCC_OscConfig+0x338>)
 800128a:	2101      	movs	r1, #1
 800128c:	430a      	orrs	r2, r1
 800128e:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001290:	f7ff fc28 	bl	8000ae4 <HAL_GetTick>
 8001294:	0003      	movs	r3, r0
 8001296:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001298:	e008      	b.n	80012ac <HAL_RCC_OscConfig+0x1d0>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800129a:	f7ff fc23 	bl	8000ae4 <HAL_GetTick>
 800129e:	0002      	movs	r2, r0
 80012a0:	69bb      	ldr	r3, [r7, #24]
 80012a2:	1ad3      	subs	r3, r2, r3
 80012a4:	2b02      	cmp	r3, #2
 80012a6:	d901      	bls.n	80012ac <HAL_RCC_OscConfig+0x1d0>
          {
            return HAL_TIMEOUT;
 80012a8:	2303      	movs	r3, #3
 80012aa:	e297      	b.n	80017dc <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80012ac:	4b59      	ldr	r3, [pc, #356]	; (8001414 <HAL_RCC_OscConfig+0x338>)
 80012ae:	681b      	ldr	r3, [r3, #0]
 80012b0:	2202      	movs	r2, #2
 80012b2:	4013      	ands	r3, r2
 80012b4:	d0f1      	beq.n	800129a <HAL_RCC_OscConfig+0x1be>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80012b6:	4b57      	ldr	r3, [pc, #348]	; (8001414 <HAL_RCC_OscConfig+0x338>)
 80012b8:	681b      	ldr	r3, [r3, #0]
 80012ba:	22f8      	movs	r2, #248	; 0xf8
 80012bc:	4393      	bics	r3, r2
 80012be:	0019      	movs	r1, r3
 80012c0:	687b      	ldr	r3, [r7, #4]
 80012c2:	691b      	ldr	r3, [r3, #16]
 80012c4:	00da      	lsls	r2, r3, #3
 80012c6:	4b53      	ldr	r3, [pc, #332]	; (8001414 <HAL_RCC_OscConfig+0x338>)
 80012c8:	430a      	orrs	r2, r1
 80012ca:	601a      	str	r2, [r3, #0]
 80012cc:	e018      	b.n	8001300 <HAL_RCC_OscConfig+0x224>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80012ce:	4b51      	ldr	r3, [pc, #324]	; (8001414 <HAL_RCC_OscConfig+0x338>)
 80012d0:	681a      	ldr	r2, [r3, #0]
 80012d2:	4b50      	ldr	r3, [pc, #320]	; (8001414 <HAL_RCC_OscConfig+0x338>)
 80012d4:	2101      	movs	r1, #1
 80012d6:	438a      	bics	r2, r1
 80012d8:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80012da:	f7ff fc03 	bl	8000ae4 <HAL_GetTick>
 80012de:	0003      	movs	r3, r0
 80012e0:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80012e2:	e008      	b.n	80012f6 <HAL_RCC_OscConfig+0x21a>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80012e4:	f7ff fbfe 	bl	8000ae4 <HAL_GetTick>
 80012e8:	0002      	movs	r2, r0
 80012ea:	69bb      	ldr	r3, [r7, #24]
 80012ec:	1ad3      	subs	r3, r2, r3
 80012ee:	2b02      	cmp	r3, #2
 80012f0:	d901      	bls.n	80012f6 <HAL_RCC_OscConfig+0x21a>
          {
            return HAL_TIMEOUT;
 80012f2:	2303      	movs	r3, #3
 80012f4:	e272      	b.n	80017dc <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80012f6:	4b47      	ldr	r3, [pc, #284]	; (8001414 <HAL_RCC_OscConfig+0x338>)
 80012f8:	681b      	ldr	r3, [r3, #0]
 80012fa:	2202      	movs	r2, #2
 80012fc:	4013      	ands	r3, r2
 80012fe:	d1f1      	bne.n	80012e4 <HAL_RCC_OscConfig+0x208>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001300:	687b      	ldr	r3, [r7, #4]
 8001302:	681b      	ldr	r3, [r3, #0]
 8001304:	2208      	movs	r2, #8
 8001306:	4013      	ands	r3, r2
 8001308:	d036      	beq.n	8001378 <HAL_RCC_OscConfig+0x29c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800130a:	687b      	ldr	r3, [r7, #4]
 800130c:	69db      	ldr	r3, [r3, #28]
 800130e:	2b00      	cmp	r3, #0
 8001310:	d019      	beq.n	8001346 <HAL_RCC_OscConfig+0x26a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001312:	4b40      	ldr	r3, [pc, #256]	; (8001414 <HAL_RCC_OscConfig+0x338>)
 8001314:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001316:	4b3f      	ldr	r3, [pc, #252]	; (8001414 <HAL_RCC_OscConfig+0x338>)
 8001318:	2101      	movs	r1, #1
 800131a:	430a      	orrs	r2, r1
 800131c:	625a      	str	r2, [r3, #36]	; 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800131e:	f7ff fbe1 	bl	8000ae4 <HAL_GetTick>
 8001322:	0003      	movs	r3, r0
 8001324:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001326:	e008      	b.n	800133a <HAL_RCC_OscConfig+0x25e>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001328:	f7ff fbdc 	bl	8000ae4 <HAL_GetTick>
 800132c:	0002      	movs	r2, r0
 800132e:	69bb      	ldr	r3, [r7, #24]
 8001330:	1ad3      	subs	r3, r2, r3
 8001332:	2b02      	cmp	r3, #2
 8001334:	d901      	bls.n	800133a <HAL_RCC_OscConfig+0x25e>
        {
          return HAL_TIMEOUT;
 8001336:	2303      	movs	r3, #3
 8001338:	e250      	b.n	80017dc <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800133a:	4b36      	ldr	r3, [pc, #216]	; (8001414 <HAL_RCC_OscConfig+0x338>)
 800133c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800133e:	2202      	movs	r2, #2
 8001340:	4013      	ands	r3, r2
 8001342:	d0f1      	beq.n	8001328 <HAL_RCC_OscConfig+0x24c>
 8001344:	e018      	b.n	8001378 <HAL_RCC_OscConfig+0x29c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001346:	4b33      	ldr	r3, [pc, #204]	; (8001414 <HAL_RCC_OscConfig+0x338>)
 8001348:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800134a:	4b32      	ldr	r3, [pc, #200]	; (8001414 <HAL_RCC_OscConfig+0x338>)
 800134c:	2101      	movs	r1, #1
 800134e:	438a      	bics	r2, r1
 8001350:	625a      	str	r2, [r3, #36]	; 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001352:	f7ff fbc7 	bl	8000ae4 <HAL_GetTick>
 8001356:	0003      	movs	r3, r0
 8001358:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800135a:	e008      	b.n	800136e <HAL_RCC_OscConfig+0x292>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800135c:	f7ff fbc2 	bl	8000ae4 <HAL_GetTick>
 8001360:	0002      	movs	r2, r0
 8001362:	69bb      	ldr	r3, [r7, #24]
 8001364:	1ad3      	subs	r3, r2, r3
 8001366:	2b02      	cmp	r3, #2
 8001368:	d901      	bls.n	800136e <HAL_RCC_OscConfig+0x292>
        {
          return HAL_TIMEOUT;
 800136a:	2303      	movs	r3, #3
 800136c:	e236      	b.n	80017dc <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800136e:	4b29      	ldr	r3, [pc, #164]	; (8001414 <HAL_RCC_OscConfig+0x338>)
 8001370:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001372:	2202      	movs	r2, #2
 8001374:	4013      	ands	r3, r2
 8001376:	d1f1      	bne.n	800135c <HAL_RCC_OscConfig+0x280>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001378:	687b      	ldr	r3, [r7, #4]
 800137a:	681b      	ldr	r3, [r3, #0]
 800137c:	2204      	movs	r2, #4
 800137e:	4013      	ands	r3, r2
 8001380:	d100      	bne.n	8001384 <HAL_RCC_OscConfig+0x2a8>
 8001382:	e0b5      	b.n	80014f0 <HAL_RCC_OscConfig+0x414>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001384:	201f      	movs	r0, #31
 8001386:	183b      	adds	r3, r7, r0
 8001388:	2200      	movs	r2, #0
 800138a:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800138c:	4b21      	ldr	r3, [pc, #132]	; (8001414 <HAL_RCC_OscConfig+0x338>)
 800138e:	69da      	ldr	r2, [r3, #28]
 8001390:	2380      	movs	r3, #128	; 0x80
 8001392:	055b      	lsls	r3, r3, #21
 8001394:	4013      	ands	r3, r2
 8001396:	d110      	bne.n	80013ba <HAL_RCC_OscConfig+0x2de>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001398:	4b1e      	ldr	r3, [pc, #120]	; (8001414 <HAL_RCC_OscConfig+0x338>)
 800139a:	69da      	ldr	r2, [r3, #28]
 800139c:	4b1d      	ldr	r3, [pc, #116]	; (8001414 <HAL_RCC_OscConfig+0x338>)
 800139e:	2180      	movs	r1, #128	; 0x80
 80013a0:	0549      	lsls	r1, r1, #21
 80013a2:	430a      	orrs	r2, r1
 80013a4:	61da      	str	r2, [r3, #28]
 80013a6:	4b1b      	ldr	r3, [pc, #108]	; (8001414 <HAL_RCC_OscConfig+0x338>)
 80013a8:	69da      	ldr	r2, [r3, #28]
 80013aa:	2380      	movs	r3, #128	; 0x80
 80013ac:	055b      	lsls	r3, r3, #21
 80013ae:	4013      	ands	r3, r2
 80013b0:	60fb      	str	r3, [r7, #12]
 80013b2:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 80013b4:	183b      	adds	r3, r7, r0
 80013b6:	2201      	movs	r2, #1
 80013b8:	701a      	strb	r2, [r3, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80013ba:	4b19      	ldr	r3, [pc, #100]	; (8001420 <HAL_RCC_OscConfig+0x344>)
 80013bc:	681a      	ldr	r2, [r3, #0]
 80013be:	2380      	movs	r3, #128	; 0x80
 80013c0:	005b      	lsls	r3, r3, #1
 80013c2:	4013      	ands	r3, r2
 80013c4:	d11a      	bne.n	80013fc <HAL_RCC_OscConfig+0x320>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80013c6:	4b16      	ldr	r3, [pc, #88]	; (8001420 <HAL_RCC_OscConfig+0x344>)
 80013c8:	681a      	ldr	r2, [r3, #0]
 80013ca:	4b15      	ldr	r3, [pc, #84]	; (8001420 <HAL_RCC_OscConfig+0x344>)
 80013cc:	2180      	movs	r1, #128	; 0x80
 80013ce:	0049      	lsls	r1, r1, #1
 80013d0:	430a      	orrs	r2, r1
 80013d2:	601a      	str	r2, [r3, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80013d4:	f7ff fb86 	bl	8000ae4 <HAL_GetTick>
 80013d8:	0003      	movs	r3, r0
 80013da:	61bb      	str	r3, [r7, #24]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80013dc:	e008      	b.n	80013f0 <HAL_RCC_OscConfig+0x314>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80013de:	f7ff fb81 	bl	8000ae4 <HAL_GetTick>
 80013e2:	0002      	movs	r2, r0
 80013e4:	69bb      	ldr	r3, [r7, #24]
 80013e6:	1ad3      	subs	r3, r2, r3
 80013e8:	2b64      	cmp	r3, #100	; 0x64
 80013ea:	d901      	bls.n	80013f0 <HAL_RCC_OscConfig+0x314>
        {
          return HAL_TIMEOUT;
 80013ec:	2303      	movs	r3, #3
 80013ee:	e1f5      	b.n	80017dc <HAL_RCC_OscConfig+0x700>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80013f0:	4b0b      	ldr	r3, [pc, #44]	; (8001420 <HAL_RCC_OscConfig+0x344>)
 80013f2:	681a      	ldr	r2, [r3, #0]
 80013f4:	2380      	movs	r3, #128	; 0x80
 80013f6:	005b      	lsls	r3, r3, #1
 80013f8:	4013      	ands	r3, r2
 80013fa:	d0f0      	beq.n	80013de <HAL_RCC_OscConfig+0x302>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80013fc:	687b      	ldr	r3, [r7, #4]
 80013fe:	689b      	ldr	r3, [r3, #8]
 8001400:	2b01      	cmp	r3, #1
 8001402:	d10f      	bne.n	8001424 <HAL_RCC_OscConfig+0x348>
 8001404:	4b03      	ldr	r3, [pc, #12]	; (8001414 <HAL_RCC_OscConfig+0x338>)
 8001406:	6a1a      	ldr	r2, [r3, #32]
 8001408:	4b02      	ldr	r3, [pc, #8]	; (8001414 <HAL_RCC_OscConfig+0x338>)
 800140a:	2101      	movs	r1, #1
 800140c:	430a      	orrs	r2, r1
 800140e:	621a      	str	r2, [r3, #32]
 8001410:	e036      	b.n	8001480 <HAL_RCC_OscConfig+0x3a4>
 8001412:	46c0      	nop			; (mov r8, r8)
 8001414:	40021000 	.word	0x40021000
 8001418:	fffeffff 	.word	0xfffeffff
 800141c:	fffbffff 	.word	0xfffbffff
 8001420:	40007000 	.word	0x40007000
 8001424:	687b      	ldr	r3, [r7, #4]
 8001426:	689b      	ldr	r3, [r3, #8]
 8001428:	2b00      	cmp	r3, #0
 800142a:	d10c      	bne.n	8001446 <HAL_RCC_OscConfig+0x36a>
 800142c:	4bca      	ldr	r3, [pc, #808]	; (8001758 <HAL_RCC_OscConfig+0x67c>)
 800142e:	6a1a      	ldr	r2, [r3, #32]
 8001430:	4bc9      	ldr	r3, [pc, #804]	; (8001758 <HAL_RCC_OscConfig+0x67c>)
 8001432:	2101      	movs	r1, #1
 8001434:	438a      	bics	r2, r1
 8001436:	621a      	str	r2, [r3, #32]
 8001438:	4bc7      	ldr	r3, [pc, #796]	; (8001758 <HAL_RCC_OscConfig+0x67c>)
 800143a:	6a1a      	ldr	r2, [r3, #32]
 800143c:	4bc6      	ldr	r3, [pc, #792]	; (8001758 <HAL_RCC_OscConfig+0x67c>)
 800143e:	2104      	movs	r1, #4
 8001440:	438a      	bics	r2, r1
 8001442:	621a      	str	r2, [r3, #32]
 8001444:	e01c      	b.n	8001480 <HAL_RCC_OscConfig+0x3a4>
 8001446:	687b      	ldr	r3, [r7, #4]
 8001448:	689b      	ldr	r3, [r3, #8]
 800144a:	2b05      	cmp	r3, #5
 800144c:	d10c      	bne.n	8001468 <HAL_RCC_OscConfig+0x38c>
 800144e:	4bc2      	ldr	r3, [pc, #776]	; (8001758 <HAL_RCC_OscConfig+0x67c>)
 8001450:	6a1a      	ldr	r2, [r3, #32]
 8001452:	4bc1      	ldr	r3, [pc, #772]	; (8001758 <HAL_RCC_OscConfig+0x67c>)
 8001454:	2104      	movs	r1, #4
 8001456:	430a      	orrs	r2, r1
 8001458:	621a      	str	r2, [r3, #32]
 800145a:	4bbf      	ldr	r3, [pc, #764]	; (8001758 <HAL_RCC_OscConfig+0x67c>)
 800145c:	6a1a      	ldr	r2, [r3, #32]
 800145e:	4bbe      	ldr	r3, [pc, #760]	; (8001758 <HAL_RCC_OscConfig+0x67c>)
 8001460:	2101      	movs	r1, #1
 8001462:	430a      	orrs	r2, r1
 8001464:	621a      	str	r2, [r3, #32]
 8001466:	e00b      	b.n	8001480 <HAL_RCC_OscConfig+0x3a4>
 8001468:	4bbb      	ldr	r3, [pc, #748]	; (8001758 <HAL_RCC_OscConfig+0x67c>)
 800146a:	6a1a      	ldr	r2, [r3, #32]
 800146c:	4bba      	ldr	r3, [pc, #744]	; (8001758 <HAL_RCC_OscConfig+0x67c>)
 800146e:	2101      	movs	r1, #1
 8001470:	438a      	bics	r2, r1
 8001472:	621a      	str	r2, [r3, #32]
 8001474:	4bb8      	ldr	r3, [pc, #736]	; (8001758 <HAL_RCC_OscConfig+0x67c>)
 8001476:	6a1a      	ldr	r2, [r3, #32]
 8001478:	4bb7      	ldr	r3, [pc, #732]	; (8001758 <HAL_RCC_OscConfig+0x67c>)
 800147a:	2104      	movs	r1, #4
 800147c:	438a      	bics	r2, r1
 800147e:	621a      	str	r2, [r3, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001480:	687b      	ldr	r3, [r7, #4]
 8001482:	689b      	ldr	r3, [r3, #8]
 8001484:	2b00      	cmp	r3, #0
 8001486:	d014      	beq.n	80014b2 <HAL_RCC_OscConfig+0x3d6>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001488:	f7ff fb2c 	bl	8000ae4 <HAL_GetTick>
 800148c:	0003      	movs	r3, r0
 800148e:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001490:	e009      	b.n	80014a6 <HAL_RCC_OscConfig+0x3ca>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001492:	f7ff fb27 	bl	8000ae4 <HAL_GetTick>
 8001496:	0002      	movs	r2, r0
 8001498:	69bb      	ldr	r3, [r7, #24]
 800149a:	1ad3      	subs	r3, r2, r3
 800149c:	4aaf      	ldr	r2, [pc, #700]	; (800175c <HAL_RCC_OscConfig+0x680>)
 800149e:	4293      	cmp	r3, r2
 80014a0:	d901      	bls.n	80014a6 <HAL_RCC_OscConfig+0x3ca>
        {
          return HAL_TIMEOUT;
 80014a2:	2303      	movs	r3, #3
 80014a4:	e19a      	b.n	80017dc <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80014a6:	4bac      	ldr	r3, [pc, #688]	; (8001758 <HAL_RCC_OscConfig+0x67c>)
 80014a8:	6a1b      	ldr	r3, [r3, #32]
 80014aa:	2202      	movs	r2, #2
 80014ac:	4013      	ands	r3, r2
 80014ae:	d0f0      	beq.n	8001492 <HAL_RCC_OscConfig+0x3b6>
 80014b0:	e013      	b.n	80014da <HAL_RCC_OscConfig+0x3fe>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80014b2:	f7ff fb17 	bl	8000ae4 <HAL_GetTick>
 80014b6:	0003      	movs	r3, r0
 80014b8:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80014ba:	e009      	b.n	80014d0 <HAL_RCC_OscConfig+0x3f4>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80014bc:	f7ff fb12 	bl	8000ae4 <HAL_GetTick>
 80014c0:	0002      	movs	r2, r0
 80014c2:	69bb      	ldr	r3, [r7, #24]
 80014c4:	1ad3      	subs	r3, r2, r3
 80014c6:	4aa5      	ldr	r2, [pc, #660]	; (800175c <HAL_RCC_OscConfig+0x680>)
 80014c8:	4293      	cmp	r3, r2
 80014ca:	d901      	bls.n	80014d0 <HAL_RCC_OscConfig+0x3f4>
        {
          return HAL_TIMEOUT;
 80014cc:	2303      	movs	r3, #3
 80014ce:	e185      	b.n	80017dc <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80014d0:	4ba1      	ldr	r3, [pc, #644]	; (8001758 <HAL_RCC_OscConfig+0x67c>)
 80014d2:	6a1b      	ldr	r3, [r3, #32]
 80014d4:	2202      	movs	r2, #2
 80014d6:	4013      	ands	r3, r2
 80014d8:	d1f0      	bne.n	80014bc <HAL_RCC_OscConfig+0x3e0>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 80014da:	231f      	movs	r3, #31
 80014dc:	18fb      	adds	r3, r7, r3
 80014de:	781b      	ldrb	r3, [r3, #0]
 80014e0:	2b01      	cmp	r3, #1
 80014e2:	d105      	bne.n	80014f0 <HAL_RCC_OscConfig+0x414>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80014e4:	4b9c      	ldr	r3, [pc, #624]	; (8001758 <HAL_RCC_OscConfig+0x67c>)
 80014e6:	69da      	ldr	r2, [r3, #28]
 80014e8:	4b9b      	ldr	r3, [pc, #620]	; (8001758 <HAL_RCC_OscConfig+0x67c>)
 80014ea:	499d      	ldr	r1, [pc, #628]	; (8001760 <HAL_RCC_OscConfig+0x684>)
 80014ec:	400a      	ands	r2, r1
 80014ee:	61da      	str	r2, [r3, #28]
    }
  }

  /*----------------------------- HSI14 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI14) == RCC_OSCILLATORTYPE_HSI14)
 80014f0:	687b      	ldr	r3, [r7, #4]
 80014f2:	681b      	ldr	r3, [r3, #0]
 80014f4:	2210      	movs	r2, #16
 80014f6:	4013      	ands	r3, r2
 80014f8:	d063      	beq.n	80015c2 <HAL_RCC_OscConfig+0x4e6>
    /* Check the parameters */
    assert_param(IS_RCC_HSI14(RCC_OscInitStruct->HSI14State));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSI14CalibrationValue));

    /* Check the HSI14 State */
    if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ON)
 80014fa:	687b      	ldr	r3, [r7, #4]
 80014fc:	695b      	ldr	r3, [r3, #20]
 80014fe:	2b01      	cmp	r3, #1
 8001500:	d12a      	bne.n	8001558 <HAL_RCC_OscConfig+0x47c>
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 8001502:	4b95      	ldr	r3, [pc, #596]	; (8001758 <HAL_RCC_OscConfig+0x67c>)
 8001504:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001506:	4b94      	ldr	r3, [pc, #592]	; (8001758 <HAL_RCC_OscConfig+0x67c>)
 8001508:	2104      	movs	r1, #4
 800150a:	430a      	orrs	r2, r1
 800150c:	635a      	str	r2, [r3, #52]	; 0x34

      /* Enable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_ENABLE();
 800150e:	4b92      	ldr	r3, [pc, #584]	; (8001758 <HAL_RCC_OscConfig+0x67c>)
 8001510:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001512:	4b91      	ldr	r3, [pc, #580]	; (8001758 <HAL_RCC_OscConfig+0x67c>)
 8001514:	2101      	movs	r1, #1
 8001516:	430a      	orrs	r2, r1
 8001518:	635a      	str	r2, [r3, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800151a:	f7ff fae3 	bl	8000ae4 <HAL_GetTick>
 800151e:	0003      	movs	r3, r0
 8001520:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 8001522:	e008      	b.n	8001536 <HAL_RCC_OscConfig+0x45a>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 8001524:	f7ff fade 	bl	8000ae4 <HAL_GetTick>
 8001528:	0002      	movs	r2, r0
 800152a:	69bb      	ldr	r3, [r7, #24]
 800152c:	1ad3      	subs	r3, r2, r3
 800152e:	2b02      	cmp	r3, #2
 8001530:	d901      	bls.n	8001536 <HAL_RCC_OscConfig+0x45a>
        {
          return HAL_TIMEOUT;
 8001532:	2303      	movs	r3, #3
 8001534:	e152      	b.n	80017dc <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 8001536:	4b88      	ldr	r3, [pc, #544]	; (8001758 <HAL_RCC_OscConfig+0x67c>)
 8001538:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800153a:	2202      	movs	r2, #2
 800153c:	4013      	ands	r3, r2
 800153e:	d0f1      	beq.n	8001524 <HAL_RCC_OscConfig+0x448>
        }      
      } 

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 8001540:	4b85      	ldr	r3, [pc, #532]	; (8001758 <HAL_RCC_OscConfig+0x67c>)
 8001542:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001544:	22f8      	movs	r2, #248	; 0xf8
 8001546:	4393      	bics	r3, r2
 8001548:	0019      	movs	r1, r3
 800154a:	687b      	ldr	r3, [r7, #4]
 800154c:	699b      	ldr	r3, [r3, #24]
 800154e:	00da      	lsls	r2, r3, #3
 8001550:	4b81      	ldr	r3, [pc, #516]	; (8001758 <HAL_RCC_OscConfig+0x67c>)
 8001552:	430a      	orrs	r2, r1
 8001554:	635a      	str	r2, [r3, #52]	; 0x34
 8001556:	e034      	b.n	80015c2 <HAL_RCC_OscConfig+0x4e6>
    }
    else if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ADC_CONTROL)
 8001558:	687b      	ldr	r3, [r7, #4]
 800155a:	695b      	ldr	r3, [r3, #20]
 800155c:	3305      	adds	r3, #5
 800155e:	d111      	bne.n	8001584 <HAL_RCC_OscConfig+0x4a8>
    {
      /* Enable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_ENABLE();
 8001560:	4b7d      	ldr	r3, [pc, #500]	; (8001758 <HAL_RCC_OscConfig+0x67c>)
 8001562:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001564:	4b7c      	ldr	r3, [pc, #496]	; (8001758 <HAL_RCC_OscConfig+0x67c>)
 8001566:	2104      	movs	r1, #4
 8001568:	438a      	bics	r2, r1
 800156a:	635a      	str	r2, [r3, #52]	; 0x34

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 800156c:	4b7a      	ldr	r3, [pc, #488]	; (8001758 <HAL_RCC_OscConfig+0x67c>)
 800156e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001570:	22f8      	movs	r2, #248	; 0xf8
 8001572:	4393      	bics	r3, r2
 8001574:	0019      	movs	r1, r3
 8001576:	687b      	ldr	r3, [r7, #4]
 8001578:	699b      	ldr	r3, [r3, #24]
 800157a:	00da      	lsls	r2, r3, #3
 800157c:	4b76      	ldr	r3, [pc, #472]	; (8001758 <HAL_RCC_OscConfig+0x67c>)
 800157e:	430a      	orrs	r2, r1
 8001580:	635a      	str	r2, [r3, #52]	; 0x34
 8001582:	e01e      	b.n	80015c2 <HAL_RCC_OscConfig+0x4e6>
    }
    else
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 8001584:	4b74      	ldr	r3, [pc, #464]	; (8001758 <HAL_RCC_OscConfig+0x67c>)
 8001586:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001588:	4b73      	ldr	r3, [pc, #460]	; (8001758 <HAL_RCC_OscConfig+0x67c>)
 800158a:	2104      	movs	r1, #4
 800158c:	430a      	orrs	r2, r1
 800158e:	635a      	str	r2, [r3, #52]	; 0x34

      /* Disable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_DISABLE();
 8001590:	4b71      	ldr	r3, [pc, #452]	; (8001758 <HAL_RCC_OscConfig+0x67c>)
 8001592:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001594:	4b70      	ldr	r3, [pc, #448]	; (8001758 <HAL_RCC_OscConfig+0x67c>)
 8001596:	2101      	movs	r1, #1
 8001598:	438a      	bics	r2, r1
 800159a:	635a      	str	r2, [r3, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800159c:	f7ff faa2 	bl	8000ae4 <HAL_GetTick>
 80015a0:	0003      	movs	r3, r0
 80015a2:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 80015a4:	e008      	b.n	80015b8 <HAL_RCC_OscConfig+0x4dc>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 80015a6:	f7ff fa9d 	bl	8000ae4 <HAL_GetTick>
 80015aa:	0002      	movs	r2, r0
 80015ac:	69bb      	ldr	r3, [r7, #24]
 80015ae:	1ad3      	subs	r3, r2, r3
 80015b0:	2b02      	cmp	r3, #2
 80015b2:	d901      	bls.n	80015b8 <HAL_RCC_OscConfig+0x4dc>
        {
          return HAL_TIMEOUT;
 80015b4:	2303      	movs	r3, #3
 80015b6:	e111      	b.n	80017dc <HAL_RCC_OscConfig+0x700>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 80015b8:	4b67      	ldr	r3, [pc, #412]	; (8001758 <HAL_RCC_OscConfig+0x67c>)
 80015ba:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80015bc:	2202      	movs	r2, #2
 80015be:	4013      	ands	r3, r2
 80015c0:	d1f1      	bne.n	80015a6 <HAL_RCC_OscConfig+0x4ca>
    }
  }

#if defined(RCC_HSI48_SUPPORT)
  /*----------------------------- HSI48 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80015c2:	687b      	ldr	r3, [r7, #4]
 80015c4:	681b      	ldr	r3, [r3, #0]
 80015c6:	2220      	movs	r2, #32
 80015c8:	4013      	ands	r3, r2
 80015ca:	d05c      	beq.n	8001686 <HAL_RCC_OscConfig+0x5aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* When the HSI48 is used as system clock it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI48) ||
 80015cc:	4b62      	ldr	r3, [pc, #392]	; (8001758 <HAL_RCC_OscConfig+0x67c>)
 80015ce:	685b      	ldr	r3, [r3, #4]
 80015d0:	220c      	movs	r2, #12
 80015d2:	4013      	ands	r3, r2
 80015d4:	2b0c      	cmp	r3, #12
 80015d6:	d00e      	beq.n	80015f6 <HAL_RCC_OscConfig+0x51a>
       ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI48)))
 80015d8:	4b5f      	ldr	r3, [pc, #380]	; (8001758 <HAL_RCC_OscConfig+0x67c>)
 80015da:	685b      	ldr	r3, [r3, #4]
 80015dc:	220c      	movs	r2, #12
 80015de:	4013      	ands	r3, r2
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI48) ||
 80015e0:	2b08      	cmp	r3, #8
 80015e2:	d114      	bne.n	800160e <HAL_RCC_OscConfig+0x532>
       ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI48)))
 80015e4:	4b5c      	ldr	r3, [pc, #368]	; (8001758 <HAL_RCC_OscConfig+0x67c>)
 80015e6:	685a      	ldr	r2, [r3, #4]
 80015e8:	23c0      	movs	r3, #192	; 0xc0
 80015ea:	025b      	lsls	r3, r3, #9
 80015ec:	401a      	ands	r2, r3
 80015ee:	23c0      	movs	r3, #192	; 0xc0
 80015f0:	025b      	lsls	r3, r3, #9
 80015f2:	429a      	cmp	r2, r3
 80015f4:	d10b      	bne.n	800160e <HAL_RCC_OscConfig+0x532>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET) && (RCC_OscInitStruct->HSI48State != RCC_HSI48_ON))
 80015f6:	4b58      	ldr	r3, [pc, #352]	; (8001758 <HAL_RCC_OscConfig+0x67c>)
 80015f8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80015fa:	2380      	movs	r3, #128	; 0x80
 80015fc:	029b      	lsls	r3, r3, #10
 80015fe:	4013      	ands	r3, r2
 8001600:	d040      	beq.n	8001684 <HAL_RCC_OscConfig+0x5a8>
 8001602:	687b      	ldr	r3, [r7, #4]
 8001604:	6a1b      	ldr	r3, [r3, #32]
 8001606:	2b01      	cmp	r3, #1
 8001608:	d03c      	beq.n	8001684 <HAL_RCC_OscConfig+0x5a8>
      {
        return HAL_ERROR;
 800160a:	2301      	movs	r3, #1
 800160c:	e0e6      	b.n	80017dc <HAL_RCC_OscConfig+0x700>
      }
    }
    else
    {
      /* Check the HSI48 State */
      if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 800160e:	687b      	ldr	r3, [r7, #4]
 8001610:	6a1b      	ldr	r3, [r3, #32]
 8001612:	2b00      	cmp	r3, #0
 8001614:	d01b      	beq.n	800164e <HAL_RCC_OscConfig+0x572>
      {
        /* Enable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_ENABLE();
 8001616:	4b50      	ldr	r3, [pc, #320]	; (8001758 <HAL_RCC_OscConfig+0x67c>)
 8001618:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800161a:	4b4f      	ldr	r3, [pc, #316]	; (8001758 <HAL_RCC_OscConfig+0x67c>)
 800161c:	2180      	movs	r1, #128	; 0x80
 800161e:	0249      	lsls	r1, r1, #9
 8001620:	430a      	orrs	r2, r1
 8001622:	635a      	str	r2, [r3, #52]	; 0x34

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001624:	f7ff fa5e 	bl	8000ae4 <HAL_GetTick>
 8001628:	0003      	movs	r3, r0
 800162a:	61bb      	str	r3, [r7, #24]
      
        /* Wait till HSI48 is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == RESET)
 800162c:	e008      	b.n	8001640 <HAL_RCC_OscConfig+0x564>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800162e:	f7ff fa59 	bl	8000ae4 <HAL_GetTick>
 8001632:	0002      	movs	r2, r0
 8001634:	69bb      	ldr	r3, [r7, #24]
 8001636:	1ad3      	subs	r3, r2, r3
 8001638:	2b02      	cmp	r3, #2
 800163a:	d901      	bls.n	8001640 <HAL_RCC_OscConfig+0x564>
          {
            return HAL_TIMEOUT;
 800163c:	2303      	movs	r3, #3
 800163e:	e0cd      	b.n	80017dc <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == RESET)
 8001640:	4b45      	ldr	r3, [pc, #276]	; (8001758 <HAL_RCC_OscConfig+0x67c>)
 8001642:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001644:	2380      	movs	r3, #128	; 0x80
 8001646:	029b      	lsls	r3, r3, #10
 8001648:	4013      	ands	r3, r2
 800164a:	d0f0      	beq.n	800162e <HAL_RCC_OscConfig+0x552>
 800164c:	e01b      	b.n	8001686 <HAL_RCC_OscConfig+0x5aa>
        } 
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_DISABLE();
 800164e:	4b42      	ldr	r3, [pc, #264]	; (8001758 <HAL_RCC_OscConfig+0x67c>)
 8001650:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001652:	4b41      	ldr	r3, [pc, #260]	; (8001758 <HAL_RCC_OscConfig+0x67c>)
 8001654:	4943      	ldr	r1, [pc, #268]	; (8001764 <HAL_RCC_OscConfig+0x688>)
 8001656:	400a      	ands	r2, r1
 8001658:	635a      	str	r2, [r3, #52]	; 0x34

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800165a:	f7ff fa43 	bl	8000ae4 <HAL_GetTick>
 800165e:	0003      	movs	r3, r0
 8001660:	61bb      	str	r3, [r7, #24]
      
        /* Wait till HSI48 is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET)
 8001662:	e008      	b.n	8001676 <HAL_RCC_OscConfig+0x59a>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001664:	f7ff fa3e 	bl	8000ae4 <HAL_GetTick>
 8001668:	0002      	movs	r2, r0
 800166a:	69bb      	ldr	r3, [r7, #24]
 800166c:	1ad3      	subs	r3, r2, r3
 800166e:	2b02      	cmp	r3, #2
 8001670:	d901      	bls.n	8001676 <HAL_RCC_OscConfig+0x59a>
          {
            return HAL_TIMEOUT;
 8001672:	2303      	movs	r3, #3
 8001674:	e0b2      	b.n	80017dc <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET)
 8001676:	4b38      	ldr	r3, [pc, #224]	; (8001758 <HAL_RCC_OscConfig+0x67c>)
 8001678:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800167a:	2380      	movs	r3, #128	; 0x80
 800167c:	029b      	lsls	r3, r3, #10
 800167e:	4013      	ands	r3, r2
 8001680:	d1f0      	bne.n	8001664 <HAL_RCC_OscConfig+0x588>
 8001682:	e000      	b.n	8001686 <HAL_RCC_OscConfig+0x5aa>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET) && (RCC_OscInitStruct->HSI48State != RCC_HSI48_ON))
 8001684:	46c0      	nop			; (mov r8, r8)
#endif /* RCC_HSI48_SUPPORT */
       
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001686:	687b      	ldr	r3, [r7, #4]
 8001688:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800168a:	2b00      	cmp	r3, #0
 800168c:	d100      	bne.n	8001690 <HAL_RCC_OscConfig+0x5b4>
 800168e:	e0a4      	b.n	80017da <HAL_RCC_OscConfig+0x6fe>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001690:	4b31      	ldr	r3, [pc, #196]	; (8001758 <HAL_RCC_OscConfig+0x67c>)
 8001692:	685b      	ldr	r3, [r3, #4]
 8001694:	220c      	movs	r2, #12
 8001696:	4013      	ands	r3, r2
 8001698:	2b08      	cmp	r3, #8
 800169a:	d100      	bne.n	800169e <HAL_RCC_OscConfig+0x5c2>
 800169c:	e078      	b.n	8001790 <HAL_RCC_OscConfig+0x6b4>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800169e:	687b      	ldr	r3, [r7, #4]
 80016a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80016a2:	2b02      	cmp	r3, #2
 80016a4:	d14c      	bne.n	8001740 <HAL_RCC_OscConfig+0x664>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80016a6:	4b2c      	ldr	r3, [pc, #176]	; (8001758 <HAL_RCC_OscConfig+0x67c>)
 80016a8:	681a      	ldr	r2, [r3, #0]
 80016aa:	4b2b      	ldr	r3, [pc, #172]	; (8001758 <HAL_RCC_OscConfig+0x67c>)
 80016ac:	492e      	ldr	r1, [pc, #184]	; (8001768 <HAL_RCC_OscConfig+0x68c>)
 80016ae:	400a      	ands	r2, r1
 80016b0:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80016b2:	f7ff fa17 	bl	8000ae4 <HAL_GetTick>
 80016b6:	0003      	movs	r3, r0
 80016b8:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80016ba:	e008      	b.n	80016ce <HAL_RCC_OscConfig+0x5f2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80016bc:	f7ff fa12 	bl	8000ae4 <HAL_GetTick>
 80016c0:	0002      	movs	r2, r0
 80016c2:	69bb      	ldr	r3, [r7, #24]
 80016c4:	1ad3      	subs	r3, r2, r3
 80016c6:	2b02      	cmp	r3, #2
 80016c8:	d901      	bls.n	80016ce <HAL_RCC_OscConfig+0x5f2>
          {
            return HAL_TIMEOUT;
 80016ca:	2303      	movs	r3, #3
 80016cc:	e086      	b.n	80017dc <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80016ce:	4b22      	ldr	r3, [pc, #136]	; (8001758 <HAL_RCC_OscConfig+0x67c>)
 80016d0:	681a      	ldr	r2, [r3, #0]
 80016d2:	2380      	movs	r3, #128	; 0x80
 80016d4:	049b      	lsls	r3, r3, #18
 80016d6:	4013      	ands	r3, r2
 80016d8:	d1f0      	bne.n	80016bc <HAL_RCC_OscConfig+0x5e0>
          }
        }

        /* Configure the main PLL clock source, predivider and multiplication factor. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80016da:	4b1f      	ldr	r3, [pc, #124]	; (8001758 <HAL_RCC_OscConfig+0x67c>)
 80016dc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80016de:	220f      	movs	r2, #15
 80016e0:	4393      	bics	r3, r2
 80016e2:	0019      	movs	r1, r3
 80016e4:	687b      	ldr	r3, [r7, #4]
 80016e6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80016e8:	4b1b      	ldr	r3, [pc, #108]	; (8001758 <HAL_RCC_OscConfig+0x67c>)
 80016ea:	430a      	orrs	r2, r1
 80016ec:	62da      	str	r2, [r3, #44]	; 0x2c
 80016ee:	4b1a      	ldr	r3, [pc, #104]	; (8001758 <HAL_RCC_OscConfig+0x67c>)
 80016f0:	685b      	ldr	r3, [r3, #4]
 80016f2:	4a1e      	ldr	r2, [pc, #120]	; (800176c <HAL_RCC_OscConfig+0x690>)
 80016f4:	4013      	ands	r3, r2
 80016f6:	0019      	movs	r1, r3
 80016f8:	687b      	ldr	r3, [r7, #4]
 80016fa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80016fc:	687b      	ldr	r3, [r7, #4]
 80016fe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001700:	431a      	orrs	r2, r3
 8001702:	4b15      	ldr	r3, [pc, #84]	; (8001758 <HAL_RCC_OscConfig+0x67c>)
 8001704:	430a      	orrs	r2, r1
 8001706:	605a      	str	r2, [r3, #4]
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001708:	4b13      	ldr	r3, [pc, #76]	; (8001758 <HAL_RCC_OscConfig+0x67c>)
 800170a:	681a      	ldr	r2, [r3, #0]
 800170c:	4b12      	ldr	r3, [pc, #72]	; (8001758 <HAL_RCC_OscConfig+0x67c>)
 800170e:	2180      	movs	r1, #128	; 0x80
 8001710:	0449      	lsls	r1, r1, #17
 8001712:	430a      	orrs	r2, r1
 8001714:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001716:	f7ff f9e5 	bl	8000ae4 <HAL_GetTick>
 800171a:	0003      	movs	r3, r0
 800171c:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800171e:	e008      	b.n	8001732 <HAL_RCC_OscConfig+0x656>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001720:	f7ff f9e0 	bl	8000ae4 <HAL_GetTick>
 8001724:	0002      	movs	r2, r0
 8001726:	69bb      	ldr	r3, [r7, #24]
 8001728:	1ad3      	subs	r3, r2, r3
 800172a:	2b02      	cmp	r3, #2
 800172c:	d901      	bls.n	8001732 <HAL_RCC_OscConfig+0x656>
          {
            return HAL_TIMEOUT;
 800172e:	2303      	movs	r3, #3
 8001730:	e054      	b.n	80017dc <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001732:	4b09      	ldr	r3, [pc, #36]	; (8001758 <HAL_RCC_OscConfig+0x67c>)
 8001734:	681a      	ldr	r2, [r3, #0]
 8001736:	2380      	movs	r3, #128	; 0x80
 8001738:	049b      	lsls	r3, r3, #18
 800173a:	4013      	ands	r3, r2
 800173c:	d0f0      	beq.n	8001720 <HAL_RCC_OscConfig+0x644>
 800173e:	e04c      	b.n	80017da <HAL_RCC_OscConfig+0x6fe>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001740:	4b05      	ldr	r3, [pc, #20]	; (8001758 <HAL_RCC_OscConfig+0x67c>)
 8001742:	681a      	ldr	r2, [r3, #0]
 8001744:	4b04      	ldr	r3, [pc, #16]	; (8001758 <HAL_RCC_OscConfig+0x67c>)
 8001746:	4908      	ldr	r1, [pc, #32]	; (8001768 <HAL_RCC_OscConfig+0x68c>)
 8001748:	400a      	ands	r2, r1
 800174a:	601a      	str	r2, [r3, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800174c:	f7ff f9ca 	bl	8000ae4 <HAL_GetTick>
 8001750:	0003      	movs	r3, r0
 8001752:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001754:	e015      	b.n	8001782 <HAL_RCC_OscConfig+0x6a6>
 8001756:	46c0      	nop			; (mov r8, r8)
 8001758:	40021000 	.word	0x40021000
 800175c:	00001388 	.word	0x00001388
 8001760:	efffffff 	.word	0xefffffff
 8001764:	fffeffff 	.word	0xfffeffff
 8001768:	feffffff 	.word	0xfeffffff
 800176c:	ffc27fff 	.word	0xffc27fff
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001770:	f7ff f9b8 	bl	8000ae4 <HAL_GetTick>
 8001774:	0002      	movs	r2, r0
 8001776:	69bb      	ldr	r3, [r7, #24]
 8001778:	1ad3      	subs	r3, r2, r3
 800177a:	2b02      	cmp	r3, #2
 800177c:	d901      	bls.n	8001782 <HAL_RCC_OscConfig+0x6a6>
          {
            return HAL_TIMEOUT;
 800177e:	2303      	movs	r3, #3
 8001780:	e02c      	b.n	80017dc <HAL_RCC_OscConfig+0x700>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001782:	4b18      	ldr	r3, [pc, #96]	; (80017e4 <HAL_RCC_OscConfig+0x708>)
 8001784:	681a      	ldr	r2, [r3, #0]
 8001786:	2380      	movs	r3, #128	; 0x80
 8001788:	049b      	lsls	r3, r3, #18
 800178a:	4013      	ands	r3, r2
 800178c:	d1f0      	bne.n	8001770 <HAL_RCC_OscConfig+0x694>
 800178e:	e024      	b.n	80017da <HAL_RCC_OscConfig+0x6fe>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001790:	687b      	ldr	r3, [r7, #4]
 8001792:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001794:	2b01      	cmp	r3, #1
 8001796:	d101      	bne.n	800179c <HAL_RCC_OscConfig+0x6c0>
      {
        return HAL_ERROR;
 8001798:	2301      	movs	r3, #1
 800179a:	e01f      	b.n	80017dc <HAL_RCC_OscConfig+0x700>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config  = RCC->CFGR;
 800179c:	4b11      	ldr	r3, [pc, #68]	; (80017e4 <HAL_RCC_OscConfig+0x708>)
 800179e:	685b      	ldr	r3, [r3, #4]
 80017a0:	617b      	str	r3, [r7, #20]
        pll_config2 = RCC->CFGR2;
 80017a2:	4b10      	ldr	r3, [pc, #64]	; (80017e4 <HAL_RCC_OscConfig+0x708>)
 80017a4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80017a6:	613b      	str	r3, [r7, #16]
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80017a8:	697a      	ldr	r2, [r7, #20]
 80017aa:	23c0      	movs	r3, #192	; 0xc0
 80017ac:	025b      	lsls	r3, r3, #9
 80017ae:	401a      	ands	r2, r3
 80017b0:	687b      	ldr	r3, [r7, #4]
 80017b2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80017b4:	429a      	cmp	r2, r3
 80017b6:	d10e      	bne.n	80017d6 <HAL_RCC_OscConfig+0x6fa>
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 80017b8:	693b      	ldr	r3, [r7, #16]
 80017ba:	220f      	movs	r2, #15
 80017bc:	401a      	ands	r2, r3
 80017be:	687b      	ldr	r3, [r7, #4]
 80017c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80017c2:	429a      	cmp	r2, r3
 80017c4:	d107      	bne.n	80017d6 <HAL_RCC_OscConfig+0x6fa>
           (READ_BIT(pll_config,  RCC_CFGR_PLLMUL)  != RCC_OscInitStruct->PLL.PLLMUL))
 80017c6:	697a      	ldr	r2, [r7, #20]
 80017c8:	23f0      	movs	r3, #240	; 0xf0
 80017ca:	039b      	lsls	r3, r3, #14
 80017cc:	401a      	ands	r2, r3
 80017ce:	687b      	ldr	r3, [r7, #4]
 80017d0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 80017d2:	429a      	cmp	r2, r3
 80017d4:	d001      	beq.n	80017da <HAL_RCC_OscConfig+0x6fe>
        {
          return HAL_ERROR;
 80017d6:	2301      	movs	r3, #1
 80017d8:	e000      	b.n	80017dc <HAL_RCC_OscConfig+0x700>
        }
      }
    }
  }

  return HAL_OK;
 80017da:	2300      	movs	r3, #0
}
 80017dc:	0018      	movs	r0, r3
 80017de:	46bd      	mov	sp, r7
 80017e0:	b008      	add	sp, #32
 80017e2:	bd80      	pop	{r7, pc}
 80017e4:	40021000 	.word	0x40021000

080017e8 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80017e8:	b580      	push	{r7, lr}
 80017ea:	b084      	sub	sp, #16
 80017ec:	af00      	add	r7, sp, #0
 80017ee:	6078      	str	r0, [r7, #4]
 80017f0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80017f2:	687b      	ldr	r3, [r7, #4]
 80017f4:	2b00      	cmp	r3, #0
 80017f6:	d101      	bne.n	80017fc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80017f8:	2301      	movs	r3, #1
 80017fa:	e0bf      	b.n	800197c <HAL_RCC_ClockConfig+0x194>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80017fc:	4b61      	ldr	r3, [pc, #388]	; (8001984 <HAL_RCC_ClockConfig+0x19c>)
 80017fe:	681b      	ldr	r3, [r3, #0]
 8001800:	2201      	movs	r2, #1
 8001802:	4013      	ands	r3, r2
 8001804:	683a      	ldr	r2, [r7, #0]
 8001806:	429a      	cmp	r2, r3
 8001808:	d911      	bls.n	800182e <HAL_RCC_ClockConfig+0x46>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800180a:	4b5e      	ldr	r3, [pc, #376]	; (8001984 <HAL_RCC_ClockConfig+0x19c>)
 800180c:	681b      	ldr	r3, [r3, #0]
 800180e:	2201      	movs	r2, #1
 8001810:	4393      	bics	r3, r2
 8001812:	0019      	movs	r1, r3
 8001814:	4b5b      	ldr	r3, [pc, #364]	; (8001984 <HAL_RCC_ClockConfig+0x19c>)
 8001816:	683a      	ldr	r2, [r7, #0]
 8001818:	430a      	orrs	r2, r1
 800181a:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800181c:	4b59      	ldr	r3, [pc, #356]	; (8001984 <HAL_RCC_ClockConfig+0x19c>)
 800181e:	681b      	ldr	r3, [r3, #0]
 8001820:	2201      	movs	r2, #1
 8001822:	4013      	ands	r3, r2
 8001824:	683a      	ldr	r2, [r7, #0]
 8001826:	429a      	cmp	r2, r3
 8001828:	d001      	beq.n	800182e <HAL_RCC_ClockConfig+0x46>
    {
      return HAL_ERROR;
 800182a:	2301      	movs	r3, #1
 800182c:	e0a6      	b.n	800197c <HAL_RCC_ClockConfig+0x194>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800182e:	687b      	ldr	r3, [r7, #4]
 8001830:	681b      	ldr	r3, [r3, #0]
 8001832:	2202      	movs	r2, #2
 8001834:	4013      	ands	r3, r2
 8001836:	d015      	beq.n	8001864 <HAL_RCC_ClockConfig+0x7c>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001838:	687b      	ldr	r3, [r7, #4]
 800183a:	681b      	ldr	r3, [r3, #0]
 800183c:	2204      	movs	r2, #4
 800183e:	4013      	ands	r3, r2
 8001840:	d006      	beq.n	8001850 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 8001842:	4b51      	ldr	r3, [pc, #324]	; (8001988 <HAL_RCC_ClockConfig+0x1a0>)
 8001844:	685a      	ldr	r2, [r3, #4]
 8001846:	4b50      	ldr	r3, [pc, #320]	; (8001988 <HAL_RCC_ClockConfig+0x1a0>)
 8001848:	21e0      	movs	r1, #224	; 0xe0
 800184a:	00c9      	lsls	r1, r1, #3
 800184c:	430a      	orrs	r2, r1
 800184e:	605a      	str	r2, [r3, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001850:	4b4d      	ldr	r3, [pc, #308]	; (8001988 <HAL_RCC_ClockConfig+0x1a0>)
 8001852:	685b      	ldr	r3, [r3, #4]
 8001854:	22f0      	movs	r2, #240	; 0xf0
 8001856:	4393      	bics	r3, r2
 8001858:	0019      	movs	r1, r3
 800185a:	687b      	ldr	r3, [r7, #4]
 800185c:	689a      	ldr	r2, [r3, #8]
 800185e:	4b4a      	ldr	r3, [pc, #296]	; (8001988 <HAL_RCC_ClockConfig+0x1a0>)
 8001860:	430a      	orrs	r2, r1
 8001862:	605a      	str	r2, [r3, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001864:	687b      	ldr	r3, [r7, #4]
 8001866:	681b      	ldr	r3, [r3, #0]
 8001868:	2201      	movs	r2, #1
 800186a:	4013      	ands	r3, r2
 800186c:	d04c      	beq.n	8001908 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800186e:	687b      	ldr	r3, [r7, #4]
 8001870:	685b      	ldr	r3, [r3, #4]
 8001872:	2b01      	cmp	r3, #1
 8001874:	d107      	bne.n	8001886 <HAL_RCC_ClockConfig+0x9e>
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001876:	4b44      	ldr	r3, [pc, #272]	; (8001988 <HAL_RCC_ClockConfig+0x1a0>)
 8001878:	681a      	ldr	r2, [r3, #0]
 800187a:	2380      	movs	r3, #128	; 0x80
 800187c:	029b      	lsls	r3, r3, #10
 800187e:	4013      	ands	r3, r2
 8001880:	d120      	bne.n	80018c4 <HAL_RCC_ClockConfig+0xdc>
      {
        return HAL_ERROR;
 8001882:	2301      	movs	r3, #1
 8001884:	e07a      	b.n	800197c <HAL_RCC_ClockConfig+0x194>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001886:	687b      	ldr	r3, [r7, #4]
 8001888:	685b      	ldr	r3, [r3, #4]
 800188a:	2b02      	cmp	r3, #2
 800188c:	d107      	bne.n	800189e <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800188e:	4b3e      	ldr	r3, [pc, #248]	; (8001988 <HAL_RCC_ClockConfig+0x1a0>)
 8001890:	681a      	ldr	r2, [r3, #0]
 8001892:	2380      	movs	r3, #128	; 0x80
 8001894:	049b      	lsls	r3, r3, #18
 8001896:	4013      	ands	r3, r2
 8001898:	d114      	bne.n	80018c4 <HAL_RCC_ClockConfig+0xdc>
      {
        return HAL_ERROR;
 800189a:	2301      	movs	r3, #1
 800189c:	e06e      	b.n	800197c <HAL_RCC_ClockConfig+0x194>
      }
    }
#if defined(RCC_CFGR_SWS_HSI48)
    /* HSI48 is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI48)
 800189e:	687b      	ldr	r3, [r7, #4]
 80018a0:	685b      	ldr	r3, [r3, #4]
 80018a2:	2b03      	cmp	r3, #3
 80018a4:	d107      	bne.n	80018b6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the HSI48 ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == RESET)
 80018a6:	4b38      	ldr	r3, [pc, #224]	; (8001988 <HAL_RCC_ClockConfig+0x1a0>)
 80018a8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80018aa:	2380      	movs	r3, #128	; 0x80
 80018ac:	029b      	lsls	r3, r3, #10
 80018ae:	4013      	ands	r3, r2
 80018b0:	d108      	bne.n	80018c4 <HAL_RCC_ClockConfig+0xdc>
      {
        return HAL_ERROR;
 80018b2:	2301      	movs	r3, #1
 80018b4:	e062      	b.n	800197c <HAL_RCC_ClockConfig+0x194>
#endif /* RCC_CFGR_SWS_HSI48 */
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80018b6:	4b34      	ldr	r3, [pc, #208]	; (8001988 <HAL_RCC_ClockConfig+0x1a0>)
 80018b8:	681b      	ldr	r3, [r3, #0]
 80018ba:	2202      	movs	r2, #2
 80018bc:	4013      	ands	r3, r2
 80018be:	d101      	bne.n	80018c4 <HAL_RCC_ClockConfig+0xdc>
      {
        return HAL_ERROR;
 80018c0:	2301      	movs	r3, #1
 80018c2:	e05b      	b.n	800197c <HAL_RCC_ClockConfig+0x194>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80018c4:	4b30      	ldr	r3, [pc, #192]	; (8001988 <HAL_RCC_ClockConfig+0x1a0>)
 80018c6:	685b      	ldr	r3, [r3, #4]
 80018c8:	2203      	movs	r2, #3
 80018ca:	4393      	bics	r3, r2
 80018cc:	0019      	movs	r1, r3
 80018ce:	687b      	ldr	r3, [r7, #4]
 80018d0:	685a      	ldr	r2, [r3, #4]
 80018d2:	4b2d      	ldr	r3, [pc, #180]	; (8001988 <HAL_RCC_ClockConfig+0x1a0>)
 80018d4:	430a      	orrs	r2, r1
 80018d6:	605a      	str	r2, [r3, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80018d8:	f7ff f904 	bl	8000ae4 <HAL_GetTick>
 80018dc:	0003      	movs	r3, r0
 80018de:	60fb      	str	r3, [r7, #12]
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80018e0:	e009      	b.n	80018f6 <HAL_RCC_ClockConfig+0x10e>
    {
      if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80018e2:	f7ff f8ff 	bl	8000ae4 <HAL_GetTick>
 80018e6:	0002      	movs	r2, r0
 80018e8:	68fb      	ldr	r3, [r7, #12]
 80018ea:	1ad3      	subs	r3, r2, r3
 80018ec:	4a27      	ldr	r2, [pc, #156]	; (800198c <HAL_RCC_ClockConfig+0x1a4>)
 80018ee:	4293      	cmp	r3, r2
 80018f0:	d901      	bls.n	80018f6 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80018f2:	2303      	movs	r3, #3
 80018f4:	e042      	b.n	800197c <HAL_RCC_ClockConfig+0x194>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80018f6:	4b24      	ldr	r3, [pc, #144]	; (8001988 <HAL_RCC_ClockConfig+0x1a0>)
 80018f8:	685b      	ldr	r3, [r3, #4]
 80018fa:	220c      	movs	r2, #12
 80018fc:	401a      	ands	r2, r3
 80018fe:	687b      	ldr	r3, [r7, #4]
 8001900:	685b      	ldr	r3, [r3, #4]
 8001902:	009b      	lsls	r3, r3, #2
 8001904:	429a      	cmp	r2, r3
 8001906:	d1ec      	bne.n	80018e2 <HAL_RCC_ClockConfig+0xfa>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001908:	4b1e      	ldr	r3, [pc, #120]	; (8001984 <HAL_RCC_ClockConfig+0x19c>)
 800190a:	681b      	ldr	r3, [r3, #0]
 800190c:	2201      	movs	r2, #1
 800190e:	4013      	ands	r3, r2
 8001910:	683a      	ldr	r2, [r7, #0]
 8001912:	429a      	cmp	r2, r3
 8001914:	d211      	bcs.n	800193a <HAL_RCC_ClockConfig+0x152>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001916:	4b1b      	ldr	r3, [pc, #108]	; (8001984 <HAL_RCC_ClockConfig+0x19c>)
 8001918:	681b      	ldr	r3, [r3, #0]
 800191a:	2201      	movs	r2, #1
 800191c:	4393      	bics	r3, r2
 800191e:	0019      	movs	r1, r3
 8001920:	4b18      	ldr	r3, [pc, #96]	; (8001984 <HAL_RCC_ClockConfig+0x19c>)
 8001922:	683a      	ldr	r2, [r7, #0]
 8001924:	430a      	orrs	r2, r1
 8001926:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001928:	4b16      	ldr	r3, [pc, #88]	; (8001984 <HAL_RCC_ClockConfig+0x19c>)
 800192a:	681b      	ldr	r3, [r3, #0]
 800192c:	2201      	movs	r2, #1
 800192e:	4013      	ands	r3, r2
 8001930:	683a      	ldr	r2, [r7, #0]
 8001932:	429a      	cmp	r2, r3
 8001934:	d001      	beq.n	800193a <HAL_RCC_ClockConfig+0x152>
    {
      return HAL_ERROR;
 8001936:	2301      	movs	r3, #1
 8001938:	e020      	b.n	800197c <HAL_RCC_ClockConfig+0x194>
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800193a:	687b      	ldr	r3, [r7, #4]
 800193c:	681b      	ldr	r3, [r3, #0]
 800193e:	2204      	movs	r2, #4
 8001940:	4013      	ands	r3, r2
 8001942:	d009      	beq.n	8001958 <HAL_RCC_ClockConfig+0x170>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 8001944:	4b10      	ldr	r3, [pc, #64]	; (8001988 <HAL_RCC_ClockConfig+0x1a0>)
 8001946:	685b      	ldr	r3, [r3, #4]
 8001948:	4a11      	ldr	r2, [pc, #68]	; (8001990 <HAL_RCC_ClockConfig+0x1a8>)
 800194a:	4013      	ands	r3, r2
 800194c:	0019      	movs	r1, r3
 800194e:	687b      	ldr	r3, [r7, #4]
 8001950:	68da      	ldr	r2, [r3, #12]
 8001952:	4b0d      	ldr	r3, [pc, #52]	; (8001988 <HAL_RCC_ClockConfig+0x1a0>)
 8001954:	430a      	orrs	r2, r1
 8001956:	605a      	str	r2, [r3, #4]
  }
  
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8001958:	f000 f820 	bl	800199c <HAL_RCC_GetSysClockFreq>
 800195c:	0001      	movs	r1, r0
 800195e:	4b0a      	ldr	r3, [pc, #40]	; (8001988 <HAL_RCC_ClockConfig+0x1a0>)
 8001960:	685b      	ldr	r3, [r3, #4]
 8001962:	091b      	lsrs	r3, r3, #4
 8001964:	220f      	movs	r2, #15
 8001966:	4013      	ands	r3, r2
 8001968:	4a0a      	ldr	r2, [pc, #40]	; (8001994 <HAL_RCC_ClockConfig+0x1ac>)
 800196a:	5cd3      	ldrb	r3, [r2, r3]
 800196c:	000a      	movs	r2, r1
 800196e:	40da      	lsrs	r2, r3
 8001970:	4b09      	ldr	r3, [pc, #36]	; (8001998 <HAL_RCC_ClockConfig+0x1b0>)
 8001972:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (TICK_INT_PRIORITY);
 8001974:	2003      	movs	r0, #3
 8001976:	f7ff f86f 	bl	8000a58 <HAL_InitTick>
  
  return HAL_OK;
 800197a:	2300      	movs	r3, #0
}
 800197c:	0018      	movs	r0, r3
 800197e:	46bd      	mov	sp, r7
 8001980:	b004      	add	sp, #16
 8001982:	bd80      	pop	{r7, pc}
 8001984:	40022000 	.word	0x40022000
 8001988:	40021000 	.word	0x40021000
 800198c:	00001388 	.word	0x00001388
 8001990:	fffff8ff 	.word	0xfffff8ff
 8001994:	0800465c 	.word	0x0800465c
 8001998:	200000c0 	.word	0x200000c0

0800199c <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800199c:	b580      	push	{r7, lr}
 800199e:	b086      	sub	sp, #24
 80019a0:	af00      	add	r7, sp, #0
  static const uint8_t aPLLMULFactorTable[16U] = { 2U,  3U,  4U,  5U,  6U,  7U,  8U,  9U,
                                                   10U, 11U, 12U, 13U, 14U, 15U, 16U, 16U};
  static const uint8_t aPredivFactorTable[16U] = { 1U, 2U,  3U,  4U,  5U,  6U,  7U,  8U,
                                                   9U,10U, 11U, 12U, 13U, 14U, 15U, 16U};

  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80019a2:	2300      	movs	r3, #0
 80019a4:	60fb      	str	r3, [r7, #12]
 80019a6:	2300      	movs	r3, #0
 80019a8:	60bb      	str	r3, [r7, #8]
 80019aa:	2300      	movs	r3, #0
 80019ac:	617b      	str	r3, [r7, #20]
 80019ae:	2300      	movs	r3, #0
 80019b0:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 80019b2:	2300      	movs	r3, #0
 80019b4:	613b      	str	r3, [r7, #16]
  
  tmpreg = RCC->CFGR;
 80019b6:	4b2d      	ldr	r3, [pc, #180]	; (8001a6c <HAL_RCC_GetSysClockFreq+0xd0>)
 80019b8:	685b      	ldr	r3, [r3, #4]
 80019ba:	60fb      	str	r3, [r7, #12]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80019bc:	68fb      	ldr	r3, [r7, #12]
 80019be:	220c      	movs	r2, #12
 80019c0:	4013      	ands	r3, r2
 80019c2:	2b0c      	cmp	r3, #12
 80019c4:	d046      	beq.n	8001a54 <HAL_RCC_GetSysClockFreq+0xb8>
 80019c6:	d848      	bhi.n	8001a5a <HAL_RCC_GetSysClockFreq+0xbe>
 80019c8:	2b04      	cmp	r3, #4
 80019ca:	d002      	beq.n	80019d2 <HAL_RCC_GetSysClockFreq+0x36>
 80019cc:	2b08      	cmp	r3, #8
 80019ce:	d003      	beq.n	80019d8 <HAL_RCC_GetSysClockFreq+0x3c>
 80019d0:	e043      	b.n	8001a5a <HAL_RCC_GetSysClockFreq+0xbe>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80019d2:	4b27      	ldr	r3, [pc, #156]	; (8001a70 <HAL_RCC_GetSysClockFreq+0xd4>)
 80019d4:	613b      	str	r3, [r7, #16]
      break;
 80019d6:	e043      	b.n	8001a60 <HAL_RCC_GetSysClockFreq+0xc4>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_BITNUMBER];
 80019d8:	68fb      	ldr	r3, [r7, #12]
 80019da:	0c9b      	lsrs	r3, r3, #18
 80019dc:	220f      	movs	r2, #15
 80019de:	4013      	ands	r3, r2
 80019e0:	4a24      	ldr	r2, [pc, #144]	; (8001a74 <HAL_RCC_GetSysClockFreq+0xd8>)
 80019e2:	5cd3      	ldrb	r3, [r2, r3]
 80019e4:	607b      	str	r3, [r7, #4]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> RCC_CFGR2_PREDIV_BITNUMBER];
 80019e6:	4b21      	ldr	r3, [pc, #132]	; (8001a6c <HAL_RCC_GetSysClockFreq+0xd0>)
 80019e8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80019ea:	220f      	movs	r2, #15
 80019ec:	4013      	ands	r3, r2
 80019ee:	4a22      	ldr	r2, [pc, #136]	; (8001a78 <HAL_RCC_GetSysClockFreq+0xdc>)
 80019f0:	5cd3      	ldrb	r3, [r2, r3]
 80019f2:	60bb      	str	r3, [r7, #8]
      if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 80019f4:	68fa      	ldr	r2, [r7, #12]
 80019f6:	23c0      	movs	r3, #192	; 0xc0
 80019f8:	025b      	lsls	r3, r3, #9
 80019fa:	401a      	ands	r2, r3
 80019fc:	2380      	movs	r3, #128	; 0x80
 80019fe:	025b      	lsls	r3, r3, #9
 8001a00:	429a      	cmp	r2, r3
 8001a02:	d109      	bne.n	8001a18 <HAL_RCC_GetSysClockFreq+0x7c>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8001a04:	68b9      	ldr	r1, [r7, #8]
 8001a06:	481a      	ldr	r0, [pc, #104]	; (8001a70 <HAL_RCC_GetSysClockFreq+0xd4>)
 8001a08:	f7fe fb86 	bl	8000118 <__udivsi3>
 8001a0c:	0003      	movs	r3, r0
 8001a0e:	001a      	movs	r2, r3
 8001a10:	687b      	ldr	r3, [r7, #4]
 8001a12:	4353      	muls	r3, r2
 8001a14:	617b      	str	r3, [r7, #20]
 8001a16:	e01a      	b.n	8001a4e <HAL_RCC_GetSysClockFreq+0xb2>
      }
#if defined(RCC_CFGR_PLLSRC_HSI48_PREDIV)
      else if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSI48)
 8001a18:	68fa      	ldr	r2, [r7, #12]
 8001a1a:	23c0      	movs	r3, #192	; 0xc0
 8001a1c:	025b      	lsls	r3, r3, #9
 8001a1e:	401a      	ands	r2, r3
 8001a20:	23c0      	movs	r3, #192	; 0xc0
 8001a22:	025b      	lsls	r3, r3, #9
 8001a24:	429a      	cmp	r2, r3
 8001a26:	d109      	bne.n	8001a3c <HAL_RCC_GetSysClockFreq+0xa0>
      {
        /* HSI48 used as PLL clock source : PLLCLK = HSI48/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI48_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8001a28:	68b9      	ldr	r1, [r7, #8]
 8001a2a:	4814      	ldr	r0, [pc, #80]	; (8001a7c <HAL_RCC_GetSysClockFreq+0xe0>)
 8001a2c:	f7fe fb74 	bl	8000118 <__udivsi3>
 8001a30:	0003      	movs	r3, r0
 8001a32:	001a      	movs	r2, r3
 8001a34:	687b      	ldr	r3, [r7, #4]
 8001a36:	4353      	muls	r3, r2
 8001a38:	617b      	str	r3, [r7, #20]
 8001a3a:	e008      	b.n	8001a4e <HAL_RCC_GetSysClockFreq+0xb2>
#endif /* RCC_CFGR_PLLSRC_HSI48_PREDIV */
      else
      {
#if  (defined(STM32F042x6) || defined(STM32F048xx) || defined(STM32F070x6) || defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx) || defined(STM32F070xB) || defined(STM32F091xC) || defined(STM32F098xx) || defined(STM32F030xC))
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8001a3c:	68b9      	ldr	r1, [r7, #8]
 8001a3e:	480c      	ldr	r0, [pc, #48]	; (8001a70 <HAL_RCC_GetSysClockFreq+0xd4>)
 8001a40:	f7fe fb6a 	bl	8000118 <__udivsi3>
 8001a44:	0003      	movs	r3, r0
 8001a46:	001a      	movs	r2, r3
 8001a48:	687b      	ldr	r3, [r7, #4]
 8001a4a:	4353      	muls	r3, r2
 8001a4c:	617b      	str	r3, [r7, #20]
#else
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
#endif
      }
      sysclockfreq = pllclk;
 8001a4e:	697b      	ldr	r3, [r7, #20]
 8001a50:	613b      	str	r3, [r7, #16]
      break;
 8001a52:	e005      	b.n	8001a60 <HAL_RCC_GetSysClockFreq+0xc4>
    }
#if defined(RCC_CFGR_SWS_HSI48)
    case RCC_SYSCLKSOURCE_STATUS_HSI48:    /* HSI48 used as system clock source */
    {
      sysclockfreq = HSI48_VALUE;
 8001a54:	4b09      	ldr	r3, [pc, #36]	; (8001a7c <HAL_RCC_GetSysClockFreq+0xe0>)
 8001a56:	613b      	str	r3, [r7, #16]
      break;
 8001a58:	e002      	b.n	8001a60 <HAL_RCC_GetSysClockFreq+0xc4>
    }
#endif /* RCC_CFGR_SWS_HSI48 */
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8001a5a:	4b05      	ldr	r3, [pc, #20]	; (8001a70 <HAL_RCC_GetSysClockFreq+0xd4>)
 8001a5c:	613b      	str	r3, [r7, #16]
      break;
 8001a5e:	46c0      	nop			; (mov r8, r8)
    }
  }
  return sysclockfreq;
 8001a60:	693b      	ldr	r3, [r7, #16]
}
 8001a62:	0018      	movs	r0, r3
 8001a64:	46bd      	mov	sp, r7
 8001a66:	b006      	add	sp, #24
 8001a68:	bd80      	pop	{r7, pc}
 8001a6a:	46c0      	nop			; (mov r8, r8)
 8001a6c:	40021000 	.word	0x40021000
 8001a70:	007a1200 	.word	0x007a1200
 8001a74:	08004674 	.word	0x08004674
 8001a78:	08004684 	.word	0x08004684
 8001a7c:	02dc6c00 	.word	0x02dc6c00

08001a80 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001a80:	b580      	push	{r7, lr}
 8001a82:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001a84:	4b02      	ldr	r3, [pc, #8]	; (8001a90 <HAL_RCC_GetHCLKFreq+0x10>)
 8001a86:	681b      	ldr	r3, [r3, #0]
}
 8001a88:	0018      	movs	r0, r3
 8001a8a:	46bd      	mov	sp, r7
 8001a8c:	bd80      	pop	{r7, pc}
 8001a8e:	46c0      	nop			; (mov r8, r8)
 8001a90:	200000c0 	.word	0x200000c0

08001a94 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001a94:	b580      	push	{r7, lr}
 8001a96:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE) >> RCC_CFGR_PPRE_BITNUMBER]);
 8001a98:	f7ff fff2 	bl	8001a80 <HAL_RCC_GetHCLKFreq>
 8001a9c:	0001      	movs	r1, r0
 8001a9e:	4b06      	ldr	r3, [pc, #24]	; (8001ab8 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001aa0:	685b      	ldr	r3, [r3, #4]
 8001aa2:	0a1b      	lsrs	r3, r3, #8
 8001aa4:	2207      	movs	r2, #7
 8001aa6:	4013      	ands	r3, r2
 8001aa8:	4a04      	ldr	r2, [pc, #16]	; (8001abc <HAL_RCC_GetPCLK1Freq+0x28>)
 8001aaa:	5cd3      	ldrb	r3, [r2, r3]
 8001aac:	40d9      	lsrs	r1, r3
 8001aae:	000b      	movs	r3, r1
}    
 8001ab0:	0018      	movs	r0, r3
 8001ab2:	46bd      	mov	sp, r7
 8001ab4:	bd80      	pop	{r7, pc}
 8001ab6:	46c0      	nop			; (mov r8, r8)
 8001ab8:	40021000 	.word	0x40021000
 8001abc:	0800466c 	.word	0x0800466c

08001ac0 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8001ac0:	b580      	push	{r7, lr}
 8001ac2:	b086      	sub	sp, #24
 8001ac4:	af00      	add	r7, sp, #0
 8001ac6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8001ac8:	2300      	movs	r3, #0
 8001aca:	613b      	str	r3, [r7, #16]
  uint32_t temp_reg = 0U;
 8001acc:	2300      	movs	r3, #0
 8001ace:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8001ad0:	687b      	ldr	r3, [r7, #4]
 8001ad2:	681a      	ldr	r2, [r3, #0]
 8001ad4:	2380      	movs	r3, #128	; 0x80
 8001ad6:	025b      	lsls	r3, r3, #9
 8001ad8:	4013      	ands	r3, r2
 8001ada:	d100      	bne.n	8001ade <HAL_RCCEx_PeriphCLKConfig+0x1e>
 8001adc:	e08e      	b.n	8001bfc <HAL_RCCEx_PeriphCLKConfig+0x13c>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));
    
    FlagStatus       pwrclkchanged = RESET;
 8001ade:	2017      	movs	r0, #23
 8001ae0:	183b      	adds	r3, r7, r0
 8001ae2:	2200      	movs	r2, #0
 8001ae4:	701a      	strb	r2, [r3, #0]

    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001ae6:	4b6e      	ldr	r3, [pc, #440]	; (8001ca0 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8001ae8:	69da      	ldr	r2, [r3, #28]
 8001aea:	2380      	movs	r3, #128	; 0x80
 8001aec:	055b      	lsls	r3, r3, #21
 8001aee:	4013      	ands	r3, r2
 8001af0:	d110      	bne.n	8001b14 <HAL_RCCEx_PeriphCLKConfig+0x54>
    {
    __HAL_RCC_PWR_CLK_ENABLE();
 8001af2:	4b6b      	ldr	r3, [pc, #428]	; (8001ca0 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8001af4:	69da      	ldr	r2, [r3, #28]
 8001af6:	4b6a      	ldr	r3, [pc, #424]	; (8001ca0 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8001af8:	2180      	movs	r1, #128	; 0x80
 8001afa:	0549      	lsls	r1, r1, #21
 8001afc:	430a      	orrs	r2, r1
 8001afe:	61da      	str	r2, [r3, #28]
 8001b00:	4b67      	ldr	r3, [pc, #412]	; (8001ca0 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8001b02:	69da      	ldr	r2, [r3, #28]
 8001b04:	2380      	movs	r3, #128	; 0x80
 8001b06:	055b      	lsls	r3, r3, #21
 8001b08:	4013      	ands	r3, r2
 8001b0a:	60bb      	str	r3, [r7, #8]
 8001b0c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001b0e:	183b      	adds	r3, r7, r0
 8001b10:	2201      	movs	r2, #1
 8001b12:	701a      	strb	r2, [r3, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001b14:	4b63      	ldr	r3, [pc, #396]	; (8001ca4 <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 8001b16:	681a      	ldr	r2, [r3, #0]
 8001b18:	2380      	movs	r3, #128	; 0x80
 8001b1a:	005b      	lsls	r3, r3, #1
 8001b1c:	4013      	ands	r3, r2
 8001b1e:	d11a      	bne.n	8001b56 <HAL_RCCEx_PeriphCLKConfig+0x96>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001b20:	4b60      	ldr	r3, [pc, #384]	; (8001ca4 <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 8001b22:	681a      	ldr	r2, [r3, #0]
 8001b24:	4b5f      	ldr	r3, [pc, #380]	; (8001ca4 <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 8001b26:	2180      	movs	r1, #128	; 0x80
 8001b28:	0049      	lsls	r1, r1, #1
 8001b2a:	430a      	orrs	r2, r1
 8001b2c:	601a      	str	r2, [r3, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001b2e:	f7fe ffd9 	bl	8000ae4 <HAL_GetTick>
 8001b32:	0003      	movs	r3, r0
 8001b34:	613b      	str	r3, [r7, #16]
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001b36:	e008      	b.n	8001b4a <HAL_RCCEx_PeriphCLKConfig+0x8a>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001b38:	f7fe ffd4 	bl	8000ae4 <HAL_GetTick>
 8001b3c:	0002      	movs	r2, r0
 8001b3e:	693b      	ldr	r3, [r7, #16]
 8001b40:	1ad3      	subs	r3, r2, r3
 8001b42:	2b64      	cmp	r3, #100	; 0x64
 8001b44:	d901      	bls.n	8001b4a <HAL_RCCEx_PeriphCLKConfig+0x8a>
        {
          return HAL_TIMEOUT;
 8001b46:	2303      	movs	r3, #3
 8001b48:	e0a6      	b.n	8001c98 <HAL_RCCEx_PeriphCLKConfig+0x1d8>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001b4a:	4b56      	ldr	r3, [pc, #344]	; (8001ca4 <HAL_RCCEx_PeriphCLKConfig+0x1e4>)
 8001b4c:	681a      	ldr	r2, [r3, #0]
 8001b4e:	2380      	movs	r3, #128	; 0x80
 8001b50:	005b      	lsls	r3, r3, #1
 8001b52:	4013      	ands	r3, r2
 8001b54:	d0f0      	beq.n	8001b38 <HAL_RCCEx_PeriphCLKConfig+0x78>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8001b56:	4b52      	ldr	r3, [pc, #328]	; (8001ca0 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8001b58:	6a1a      	ldr	r2, [r3, #32]
 8001b5a:	23c0      	movs	r3, #192	; 0xc0
 8001b5c:	009b      	lsls	r3, r3, #2
 8001b5e:	4013      	ands	r3, r2
 8001b60:	60fb      	str	r3, [r7, #12]
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8001b62:	68fb      	ldr	r3, [r7, #12]
 8001b64:	2b00      	cmp	r3, #0
 8001b66:	d034      	beq.n	8001bd2 <HAL_RCCEx_PeriphCLKConfig+0x112>
 8001b68:	687b      	ldr	r3, [r7, #4]
 8001b6a:	685a      	ldr	r2, [r3, #4]
 8001b6c:	23c0      	movs	r3, #192	; 0xc0
 8001b6e:	009b      	lsls	r3, r3, #2
 8001b70:	4013      	ands	r3, r2
 8001b72:	68fa      	ldr	r2, [r7, #12]
 8001b74:	429a      	cmp	r2, r3
 8001b76:	d02c      	beq.n	8001bd2 <HAL_RCCEx_PeriphCLKConfig+0x112>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8001b78:	4b49      	ldr	r3, [pc, #292]	; (8001ca0 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8001b7a:	6a1b      	ldr	r3, [r3, #32]
 8001b7c:	4a4a      	ldr	r2, [pc, #296]	; (8001ca8 <HAL_RCCEx_PeriphCLKConfig+0x1e8>)
 8001b7e:	4013      	ands	r3, r2
 8001b80:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8001b82:	4b47      	ldr	r3, [pc, #284]	; (8001ca0 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8001b84:	6a1a      	ldr	r2, [r3, #32]
 8001b86:	4b46      	ldr	r3, [pc, #280]	; (8001ca0 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8001b88:	2180      	movs	r1, #128	; 0x80
 8001b8a:	0249      	lsls	r1, r1, #9
 8001b8c:	430a      	orrs	r2, r1
 8001b8e:	621a      	str	r2, [r3, #32]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8001b90:	4b43      	ldr	r3, [pc, #268]	; (8001ca0 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8001b92:	6a1a      	ldr	r2, [r3, #32]
 8001b94:	4b42      	ldr	r3, [pc, #264]	; (8001ca0 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8001b96:	4945      	ldr	r1, [pc, #276]	; (8001cac <HAL_RCCEx_PeriphCLKConfig+0x1ec>)
 8001b98:	400a      	ands	r2, r1
 8001b9a:	621a      	str	r2, [r3, #32]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8001b9c:	4b40      	ldr	r3, [pc, #256]	; (8001ca0 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8001b9e:	68fa      	ldr	r2, [r7, #12]
 8001ba0:	621a      	str	r2, [r3, #32]
      
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8001ba2:	68fb      	ldr	r3, [r7, #12]
 8001ba4:	2201      	movs	r2, #1
 8001ba6:	4013      	ands	r3, r2
 8001ba8:	d013      	beq.n	8001bd2 <HAL_RCCEx_PeriphCLKConfig+0x112>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001baa:	f7fe ff9b 	bl	8000ae4 <HAL_GetTick>
 8001bae:	0003      	movs	r3, r0
 8001bb0:	613b      	str	r3, [r7, #16]
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001bb2:	e009      	b.n	8001bc8 <HAL_RCCEx_PeriphCLKConfig+0x108>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001bb4:	f7fe ff96 	bl	8000ae4 <HAL_GetTick>
 8001bb8:	0002      	movs	r2, r0
 8001bba:	693b      	ldr	r3, [r7, #16]
 8001bbc:	1ad3      	subs	r3, r2, r3
 8001bbe:	4a3c      	ldr	r2, [pc, #240]	; (8001cb0 <HAL_RCCEx_PeriphCLKConfig+0x1f0>)
 8001bc0:	4293      	cmp	r3, r2
 8001bc2:	d901      	bls.n	8001bc8 <HAL_RCCEx_PeriphCLKConfig+0x108>
          {
            return HAL_TIMEOUT;
 8001bc4:	2303      	movs	r3, #3
 8001bc6:	e067      	b.n	8001c98 <HAL_RCCEx_PeriphCLKConfig+0x1d8>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001bc8:	4b35      	ldr	r3, [pc, #212]	; (8001ca0 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8001bca:	6a1b      	ldr	r3, [r3, #32]
 8001bcc:	2202      	movs	r2, #2
 8001bce:	4013      	ands	r3, r2
 8001bd0:	d0f0      	beq.n	8001bb4 <HAL_RCCEx_PeriphCLKConfig+0xf4>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8001bd2:	4b33      	ldr	r3, [pc, #204]	; (8001ca0 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8001bd4:	6a1b      	ldr	r3, [r3, #32]
 8001bd6:	4a34      	ldr	r2, [pc, #208]	; (8001ca8 <HAL_RCCEx_PeriphCLKConfig+0x1e8>)
 8001bd8:	4013      	ands	r3, r2
 8001bda:	0019      	movs	r1, r3
 8001bdc:	687b      	ldr	r3, [r7, #4]
 8001bde:	685a      	ldr	r2, [r3, #4]
 8001be0:	4b2f      	ldr	r3, [pc, #188]	; (8001ca0 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8001be2:	430a      	orrs	r2, r1
 8001be4:	621a      	str	r2, [r3, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8001be6:	2317      	movs	r3, #23
 8001be8:	18fb      	adds	r3, r7, r3
 8001bea:	781b      	ldrb	r3, [r3, #0]
 8001bec:	2b01      	cmp	r3, #1
 8001bee:	d105      	bne.n	8001bfc <HAL_RCCEx_PeriphCLKConfig+0x13c>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001bf0:	4b2b      	ldr	r3, [pc, #172]	; (8001ca0 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8001bf2:	69da      	ldr	r2, [r3, #28]
 8001bf4:	4b2a      	ldr	r3, [pc, #168]	; (8001ca0 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8001bf6:	492f      	ldr	r1, [pc, #188]	; (8001cb4 <HAL_RCCEx_PeriphCLKConfig+0x1f4>)
 8001bf8:	400a      	ands	r2, r1
 8001bfa:	61da      	str	r2, [r3, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8001bfc:	687b      	ldr	r3, [r7, #4]
 8001bfe:	681b      	ldr	r3, [r3, #0]
 8001c00:	2201      	movs	r2, #1
 8001c02:	4013      	ands	r3, r2
 8001c04:	d009      	beq.n	8001c1a <HAL_RCCEx_PeriphCLKConfig+0x15a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8001c06:	4b26      	ldr	r3, [pc, #152]	; (8001ca0 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8001c08:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c0a:	2203      	movs	r2, #3
 8001c0c:	4393      	bics	r3, r2
 8001c0e:	0019      	movs	r1, r3
 8001c10:	687b      	ldr	r3, [r7, #4]
 8001c12:	689a      	ldr	r2, [r3, #8]
 8001c14:	4b22      	ldr	r3, [pc, #136]	; (8001ca0 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8001c16:	430a      	orrs	r2, r1
 8001c18:	631a      	str	r2, [r3, #48]	; 0x30
  }
  
#if defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx)\
 || defined(STM32F091xC) || defined(STM32F098xx)
  /*----------------------------- USART2 Configuration --------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8001c1a:	687b      	ldr	r3, [r7, #4]
 8001c1c:	681b      	ldr	r3, [r3, #0]
 8001c1e:	2202      	movs	r2, #2
 8001c20:	4013      	ands	r3, r2
 8001c22:	d009      	beq.n	8001c38 <HAL_RCCEx_PeriphCLKConfig+0x178>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));
    
    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8001c24:	4b1e      	ldr	r3, [pc, #120]	; (8001ca0 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8001c26:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c28:	4a23      	ldr	r2, [pc, #140]	; (8001cb8 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8001c2a:	4013      	ands	r3, r2
 8001c2c:	0019      	movs	r1, r3
 8001c2e:	687b      	ldr	r3, [r7, #4]
 8001c30:	68da      	ldr	r2, [r3, #12]
 8001c32:	4b1b      	ldr	r3, [pc, #108]	; (8001ca0 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8001c34:	430a      	orrs	r2, r1
 8001c36:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
  }
#endif /* STM32F091xC || STM32F098xx */  

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8001c38:	687b      	ldr	r3, [r7, #4]
 8001c3a:	681b      	ldr	r3, [r3, #0]
 8001c3c:	2220      	movs	r2, #32
 8001c3e:	4013      	ands	r3, r2
 8001c40:	d009      	beq.n	8001c56 <HAL_RCCEx_PeriphCLKConfig+0x196>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8001c42:	4b17      	ldr	r3, [pc, #92]	; (8001ca0 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8001c44:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c46:	2210      	movs	r2, #16
 8001c48:	4393      	bics	r3, r2
 8001c4a:	0019      	movs	r1, r3
 8001c4c:	687b      	ldr	r3, [r7, #4]
 8001c4e:	691a      	ldr	r2, [r3, #16]
 8001c50:	4b13      	ldr	r3, [pc, #76]	; (8001ca0 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8001c52:	430a      	orrs	r2, r1
 8001c54:	631a      	str	r2, [r3, #48]	; 0x30
  }

#if defined(STM32F042x6) || defined(STM32F048xx) || defined(STM32F072xB) || defined(STM32F078xx) || defined(STM32F070xB) || defined(STM32F070x6)
  /*------------------------------ USB Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8001c56:	687b      	ldr	r3, [r7, #4]
 8001c58:	681a      	ldr	r2, [r3, #0]
 8001c5a:	2380      	movs	r3, #128	; 0x80
 8001c5c:	029b      	lsls	r3, r3, #10
 8001c5e:	4013      	ands	r3, r2
 8001c60:	d009      	beq.n	8001c76 <HAL_RCCEx_PeriphCLKConfig+0x1b6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    
    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8001c62:	4b0f      	ldr	r3, [pc, #60]	; (8001ca0 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8001c64:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c66:	2280      	movs	r2, #128	; 0x80
 8001c68:	4393      	bics	r3, r2
 8001c6a:	0019      	movs	r1, r3
 8001c6c:	687b      	ldr	r3, [r7, #4]
 8001c6e:	699a      	ldr	r2, [r3, #24]
 8001c70:	4b0b      	ldr	r3, [pc, #44]	; (8001ca0 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8001c72:	430a      	orrs	r2, r1
 8001c74:	631a      	str	r2, [r3, #48]	; 0x30
#if defined(STM32F042x6) || defined(STM32F048xx)\
 || defined(STM32F051x8) || defined(STM32F058xx)\
 || defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx)\
 || defined(STM32F091xC) || defined(STM32F098xx)
  /*------------------------------ CEC clock Configuration -------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8001c76:	687b      	ldr	r3, [r7, #4]
 8001c78:	681a      	ldr	r2, [r3, #0]
 8001c7a:	2380      	movs	r3, #128	; 0x80
 8001c7c:	00db      	lsls	r3, r3, #3
 8001c7e:	4013      	ands	r3, r2
 8001c80:	d009      	beq.n	8001c96 <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8001c82:	4b07      	ldr	r3, [pc, #28]	; (8001ca0 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8001c84:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c86:	2240      	movs	r2, #64	; 0x40
 8001c88:	4393      	bics	r3, r2
 8001c8a:	0019      	movs	r1, r3
 8001c8c:	687b      	ldr	r3, [r7, #4]
 8001c8e:	695a      	ldr	r2, [r3, #20]
 8001c90:	4b03      	ldr	r3, [pc, #12]	; (8001ca0 <HAL_RCCEx_PeriphCLKConfig+0x1e0>)
 8001c92:	430a      	orrs	r2, r1
 8001c94:	631a      	str	r2, [r3, #48]	; 0x30
#endif /* STM32F042x6 || STM32F048xx ||                */
       /* STM32F051x8 || STM32F058xx ||                */
       /* STM32F071xB || STM32F072xB || STM32F078xx || */
       /* STM32F091xC || STM32F098xx */
  
  return HAL_OK;
 8001c96:	2300      	movs	r3, #0
}
 8001c98:	0018      	movs	r0, r3
 8001c9a:	46bd      	mov	sp, r7
 8001c9c:	b006      	add	sp, #24
 8001c9e:	bd80      	pop	{r7, pc}
 8001ca0:	40021000 	.word	0x40021000
 8001ca4:	40007000 	.word	0x40007000
 8001ca8:	fffffcff 	.word	0xfffffcff
 8001cac:	fffeffff 	.word	0xfffeffff
 8001cb0:	00001388 	.word	0x00001388
 8001cb4:	efffffff 	.word	0xefffffff
 8001cb8:	fffcffff 	.word	0xfffcffff

08001cbc <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8001cbc:	b580      	push	{r7, lr}
 8001cbe:	b082      	sub	sp, #8
 8001cc0:	af00      	add	r7, sp, #0
 8001cc2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001cc4:	687b      	ldr	r3, [r7, #4]
 8001cc6:	2b00      	cmp	r3, #0
 8001cc8:	d101      	bne.n	8001cce <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8001cca:	2301      	movs	r3, #1
 8001ccc:	e042      	b.n	8001d54 <HAL_TIM_Base_Init+0x98>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001cce:	687b      	ldr	r3, [r7, #4]
 8001cd0:	223d      	movs	r2, #61	; 0x3d
 8001cd2:	5c9b      	ldrb	r3, [r3, r2]
 8001cd4:	b2db      	uxtb	r3, r3
 8001cd6:	2b00      	cmp	r3, #0
 8001cd8:	d107      	bne.n	8001cea <HAL_TIM_Base_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001cda:	687b      	ldr	r3, [r7, #4]
 8001cdc:	223c      	movs	r2, #60	; 0x3c
 8001cde:	2100      	movs	r1, #0
 8001ce0:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8001ce2:	687b      	ldr	r3, [r7, #4]
 8001ce4:	0018      	movs	r0, r3
 8001ce6:	f7fe fd81 	bl	80007ec <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001cea:	687b      	ldr	r3, [r7, #4]
 8001cec:	223d      	movs	r2, #61	; 0x3d
 8001cee:	2102      	movs	r1, #2
 8001cf0:	5499      	strb	r1, [r3, r2]

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001cf2:	687b      	ldr	r3, [r7, #4]
 8001cf4:	681a      	ldr	r2, [r3, #0]
 8001cf6:	687b      	ldr	r3, [r7, #4]
 8001cf8:	3304      	adds	r3, #4
 8001cfa:	0019      	movs	r1, r3
 8001cfc:	0010      	movs	r0, r2
 8001cfe:	f000 fd21 	bl	8002744 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8001d02:	687b      	ldr	r3, [r7, #4]
 8001d04:	2246      	movs	r2, #70	; 0x46
 8001d06:	2101      	movs	r1, #1
 8001d08:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001d0a:	687b      	ldr	r3, [r7, #4]
 8001d0c:	223e      	movs	r2, #62	; 0x3e
 8001d0e:	2101      	movs	r1, #1
 8001d10:	5499      	strb	r1, [r3, r2]
 8001d12:	687b      	ldr	r3, [r7, #4]
 8001d14:	223f      	movs	r2, #63	; 0x3f
 8001d16:	2101      	movs	r1, #1
 8001d18:	5499      	strb	r1, [r3, r2]
 8001d1a:	687b      	ldr	r3, [r7, #4]
 8001d1c:	2240      	movs	r2, #64	; 0x40
 8001d1e:	2101      	movs	r1, #1
 8001d20:	5499      	strb	r1, [r3, r2]
 8001d22:	687b      	ldr	r3, [r7, #4]
 8001d24:	2241      	movs	r2, #65	; 0x41
 8001d26:	2101      	movs	r1, #1
 8001d28:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001d2a:	687b      	ldr	r3, [r7, #4]
 8001d2c:	2242      	movs	r2, #66	; 0x42
 8001d2e:	2101      	movs	r1, #1
 8001d30:	5499      	strb	r1, [r3, r2]
 8001d32:	687b      	ldr	r3, [r7, #4]
 8001d34:	2243      	movs	r2, #67	; 0x43
 8001d36:	2101      	movs	r1, #1
 8001d38:	5499      	strb	r1, [r3, r2]
 8001d3a:	687b      	ldr	r3, [r7, #4]
 8001d3c:	2244      	movs	r2, #68	; 0x44
 8001d3e:	2101      	movs	r1, #1
 8001d40:	5499      	strb	r1, [r3, r2]
 8001d42:	687b      	ldr	r3, [r7, #4]
 8001d44:	2245      	movs	r2, #69	; 0x45
 8001d46:	2101      	movs	r1, #1
 8001d48:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001d4a:	687b      	ldr	r3, [r7, #4]
 8001d4c:	223d      	movs	r2, #61	; 0x3d
 8001d4e:	2101      	movs	r1, #1
 8001d50:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8001d52:	2300      	movs	r3, #0
}
 8001d54:	0018      	movs	r0, r3
 8001d56:	46bd      	mov	sp, r7
 8001d58:	b002      	add	sp, #8
 8001d5a:	bd80      	pop	{r7, pc}

08001d5c <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8001d5c:	b580      	push	{r7, lr}
 8001d5e:	b082      	sub	sp, #8
 8001d60:	af00      	add	r7, sp, #0
 8001d62:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001d64:	687b      	ldr	r3, [r7, #4]
 8001d66:	2b00      	cmp	r3, #0
 8001d68:	d101      	bne.n	8001d6e <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8001d6a:	2301      	movs	r3, #1
 8001d6c:	e042      	b.n	8001df4 <HAL_TIM_PWM_Init+0x98>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001d6e:	687b      	ldr	r3, [r7, #4]
 8001d70:	223d      	movs	r2, #61	; 0x3d
 8001d72:	5c9b      	ldrb	r3, [r3, r2]
 8001d74:	b2db      	uxtb	r3, r3
 8001d76:	2b00      	cmp	r3, #0
 8001d78:	d107      	bne.n	8001d8a <HAL_TIM_PWM_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001d7a:	687b      	ldr	r3, [r7, #4]
 8001d7c:	223c      	movs	r2, #60	; 0x3c
 8001d7e:	2100      	movs	r1, #0
 8001d80:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8001d82:	687b      	ldr	r3, [r7, #4]
 8001d84:	0018      	movs	r0, r3
 8001d86:	f000 f839 	bl	8001dfc <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001d8a:	687b      	ldr	r3, [r7, #4]
 8001d8c:	223d      	movs	r2, #61	; 0x3d
 8001d8e:	2102      	movs	r1, #2
 8001d90:	5499      	strb	r1, [r3, r2]

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001d92:	687b      	ldr	r3, [r7, #4]
 8001d94:	681a      	ldr	r2, [r3, #0]
 8001d96:	687b      	ldr	r3, [r7, #4]
 8001d98:	3304      	adds	r3, #4
 8001d9a:	0019      	movs	r1, r3
 8001d9c:	0010      	movs	r0, r2
 8001d9e:	f000 fcd1 	bl	8002744 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8001da2:	687b      	ldr	r3, [r7, #4]
 8001da4:	2246      	movs	r2, #70	; 0x46
 8001da6:	2101      	movs	r1, #1
 8001da8:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001daa:	687b      	ldr	r3, [r7, #4]
 8001dac:	223e      	movs	r2, #62	; 0x3e
 8001dae:	2101      	movs	r1, #1
 8001db0:	5499      	strb	r1, [r3, r2]
 8001db2:	687b      	ldr	r3, [r7, #4]
 8001db4:	223f      	movs	r2, #63	; 0x3f
 8001db6:	2101      	movs	r1, #1
 8001db8:	5499      	strb	r1, [r3, r2]
 8001dba:	687b      	ldr	r3, [r7, #4]
 8001dbc:	2240      	movs	r2, #64	; 0x40
 8001dbe:	2101      	movs	r1, #1
 8001dc0:	5499      	strb	r1, [r3, r2]
 8001dc2:	687b      	ldr	r3, [r7, #4]
 8001dc4:	2241      	movs	r2, #65	; 0x41
 8001dc6:	2101      	movs	r1, #1
 8001dc8:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001dca:	687b      	ldr	r3, [r7, #4]
 8001dcc:	2242      	movs	r2, #66	; 0x42
 8001dce:	2101      	movs	r1, #1
 8001dd0:	5499      	strb	r1, [r3, r2]
 8001dd2:	687b      	ldr	r3, [r7, #4]
 8001dd4:	2243      	movs	r2, #67	; 0x43
 8001dd6:	2101      	movs	r1, #1
 8001dd8:	5499      	strb	r1, [r3, r2]
 8001dda:	687b      	ldr	r3, [r7, #4]
 8001ddc:	2244      	movs	r2, #68	; 0x44
 8001dde:	2101      	movs	r1, #1
 8001de0:	5499      	strb	r1, [r3, r2]
 8001de2:	687b      	ldr	r3, [r7, #4]
 8001de4:	2245      	movs	r2, #69	; 0x45
 8001de6:	2101      	movs	r1, #1
 8001de8:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001dea:	687b      	ldr	r3, [r7, #4]
 8001dec:	223d      	movs	r2, #61	; 0x3d
 8001dee:	2101      	movs	r1, #1
 8001df0:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8001df2:	2300      	movs	r3, #0
}
 8001df4:	0018      	movs	r0, r3
 8001df6:	46bd      	mov	sp, r7
 8001df8:	b002      	add	sp, #8
 8001dfa:	bd80      	pop	{r7, pc}

08001dfc <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8001dfc:	b580      	push	{r7, lr}
 8001dfe:	b082      	sub	sp, #8
 8001e00:	af00      	add	r7, sp, #0
 8001e02:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8001e04:	46c0      	nop			; (mov r8, r8)
 8001e06:	46bd      	mov	sp, r7
 8001e08:	b002      	add	sp, #8
 8001e0a:	bd80      	pop	{r7, pc}

08001e0c <HAL_TIM_PWM_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8001e0c:	b580      	push	{r7, lr}
 8001e0e:	b084      	sub	sp, #16
 8001e10:	af00      	add	r7, sp, #0
 8001e12:	6078      	str	r0, [r7, #4]
 8001e14:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8001e16:	230f      	movs	r3, #15
 8001e18:	18fb      	adds	r3, r7, r3
 8001e1a:	2200      	movs	r2, #0
 8001e1c:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8001e1e:	683b      	ldr	r3, [r7, #0]
 8001e20:	2b00      	cmp	r3, #0
 8001e22:	d108      	bne.n	8001e36 <HAL_TIM_PWM_Start_IT+0x2a>
 8001e24:	687b      	ldr	r3, [r7, #4]
 8001e26:	223e      	movs	r2, #62	; 0x3e
 8001e28:	5c9b      	ldrb	r3, [r3, r2]
 8001e2a:	b2db      	uxtb	r3, r3
 8001e2c:	3b01      	subs	r3, #1
 8001e2e:	1e5a      	subs	r2, r3, #1
 8001e30:	4193      	sbcs	r3, r2
 8001e32:	b2db      	uxtb	r3, r3
 8001e34:	e01f      	b.n	8001e76 <HAL_TIM_PWM_Start_IT+0x6a>
 8001e36:	683b      	ldr	r3, [r7, #0]
 8001e38:	2b04      	cmp	r3, #4
 8001e3a:	d108      	bne.n	8001e4e <HAL_TIM_PWM_Start_IT+0x42>
 8001e3c:	687b      	ldr	r3, [r7, #4]
 8001e3e:	223f      	movs	r2, #63	; 0x3f
 8001e40:	5c9b      	ldrb	r3, [r3, r2]
 8001e42:	b2db      	uxtb	r3, r3
 8001e44:	3b01      	subs	r3, #1
 8001e46:	1e5a      	subs	r2, r3, #1
 8001e48:	4193      	sbcs	r3, r2
 8001e4a:	b2db      	uxtb	r3, r3
 8001e4c:	e013      	b.n	8001e76 <HAL_TIM_PWM_Start_IT+0x6a>
 8001e4e:	683b      	ldr	r3, [r7, #0]
 8001e50:	2b08      	cmp	r3, #8
 8001e52:	d108      	bne.n	8001e66 <HAL_TIM_PWM_Start_IT+0x5a>
 8001e54:	687b      	ldr	r3, [r7, #4]
 8001e56:	2240      	movs	r2, #64	; 0x40
 8001e58:	5c9b      	ldrb	r3, [r3, r2]
 8001e5a:	b2db      	uxtb	r3, r3
 8001e5c:	3b01      	subs	r3, #1
 8001e5e:	1e5a      	subs	r2, r3, #1
 8001e60:	4193      	sbcs	r3, r2
 8001e62:	b2db      	uxtb	r3, r3
 8001e64:	e007      	b.n	8001e76 <HAL_TIM_PWM_Start_IT+0x6a>
 8001e66:	687b      	ldr	r3, [r7, #4]
 8001e68:	2241      	movs	r2, #65	; 0x41
 8001e6a:	5c9b      	ldrb	r3, [r3, r2]
 8001e6c:	b2db      	uxtb	r3, r3
 8001e6e:	3b01      	subs	r3, #1
 8001e70:	1e5a      	subs	r2, r3, #1
 8001e72:	4193      	sbcs	r3, r2
 8001e74:	b2db      	uxtb	r3, r3
 8001e76:	2b00      	cmp	r3, #0
 8001e78:	d001      	beq.n	8001e7e <HAL_TIM_PWM_Start_IT+0x72>
  {
    return HAL_ERROR;
 8001e7a:	2301      	movs	r3, #1
 8001e7c:	e0b7      	b.n	8001fee <HAL_TIM_PWM_Start_IT+0x1e2>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8001e7e:	683b      	ldr	r3, [r7, #0]
 8001e80:	2b00      	cmp	r3, #0
 8001e82:	d104      	bne.n	8001e8e <HAL_TIM_PWM_Start_IT+0x82>
 8001e84:	687b      	ldr	r3, [r7, #4]
 8001e86:	223e      	movs	r2, #62	; 0x3e
 8001e88:	2102      	movs	r1, #2
 8001e8a:	5499      	strb	r1, [r3, r2]
 8001e8c:	e013      	b.n	8001eb6 <HAL_TIM_PWM_Start_IT+0xaa>
 8001e8e:	683b      	ldr	r3, [r7, #0]
 8001e90:	2b04      	cmp	r3, #4
 8001e92:	d104      	bne.n	8001e9e <HAL_TIM_PWM_Start_IT+0x92>
 8001e94:	687b      	ldr	r3, [r7, #4]
 8001e96:	223f      	movs	r2, #63	; 0x3f
 8001e98:	2102      	movs	r1, #2
 8001e9a:	5499      	strb	r1, [r3, r2]
 8001e9c:	e00b      	b.n	8001eb6 <HAL_TIM_PWM_Start_IT+0xaa>
 8001e9e:	683b      	ldr	r3, [r7, #0]
 8001ea0:	2b08      	cmp	r3, #8
 8001ea2:	d104      	bne.n	8001eae <HAL_TIM_PWM_Start_IT+0xa2>
 8001ea4:	687b      	ldr	r3, [r7, #4]
 8001ea6:	2240      	movs	r2, #64	; 0x40
 8001ea8:	2102      	movs	r1, #2
 8001eaa:	5499      	strb	r1, [r3, r2]
 8001eac:	e003      	b.n	8001eb6 <HAL_TIM_PWM_Start_IT+0xaa>
 8001eae:	687b      	ldr	r3, [r7, #4]
 8001eb0:	2241      	movs	r2, #65	; 0x41
 8001eb2:	2102      	movs	r1, #2
 8001eb4:	5499      	strb	r1, [r3, r2]

  switch (Channel)
 8001eb6:	683b      	ldr	r3, [r7, #0]
 8001eb8:	2b0c      	cmp	r3, #12
 8001eba:	d02a      	beq.n	8001f12 <HAL_TIM_PWM_Start_IT+0x106>
 8001ebc:	683b      	ldr	r3, [r7, #0]
 8001ebe:	2b0c      	cmp	r3, #12
 8001ec0:	d830      	bhi.n	8001f24 <HAL_TIM_PWM_Start_IT+0x118>
 8001ec2:	683b      	ldr	r3, [r7, #0]
 8001ec4:	2b08      	cmp	r3, #8
 8001ec6:	d01b      	beq.n	8001f00 <HAL_TIM_PWM_Start_IT+0xf4>
 8001ec8:	683b      	ldr	r3, [r7, #0]
 8001eca:	2b08      	cmp	r3, #8
 8001ecc:	d82a      	bhi.n	8001f24 <HAL_TIM_PWM_Start_IT+0x118>
 8001ece:	683b      	ldr	r3, [r7, #0]
 8001ed0:	2b00      	cmp	r3, #0
 8001ed2:	d003      	beq.n	8001edc <HAL_TIM_PWM_Start_IT+0xd0>
 8001ed4:	683b      	ldr	r3, [r7, #0]
 8001ed6:	2b04      	cmp	r3, #4
 8001ed8:	d009      	beq.n	8001eee <HAL_TIM_PWM_Start_IT+0xe2>
 8001eda:	e023      	b.n	8001f24 <HAL_TIM_PWM_Start_IT+0x118>
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8001edc:	687b      	ldr	r3, [r7, #4]
 8001ede:	681b      	ldr	r3, [r3, #0]
 8001ee0:	68da      	ldr	r2, [r3, #12]
 8001ee2:	687b      	ldr	r3, [r7, #4]
 8001ee4:	681b      	ldr	r3, [r3, #0]
 8001ee6:	2102      	movs	r1, #2
 8001ee8:	430a      	orrs	r2, r1
 8001eea:	60da      	str	r2, [r3, #12]
      break;
 8001eec:	e01f      	b.n	8001f2e <HAL_TIM_PWM_Start_IT+0x122>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 8001eee:	687b      	ldr	r3, [r7, #4]
 8001ef0:	681b      	ldr	r3, [r3, #0]
 8001ef2:	68da      	ldr	r2, [r3, #12]
 8001ef4:	687b      	ldr	r3, [r7, #4]
 8001ef6:	681b      	ldr	r3, [r3, #0]
 8001ef8:	2104      	movs	r1, #4
 8001efa:	430a      	orrs	r2, r1
 8001efc:	60da      	str	r2, [r3, #12]
      break;
 8001efe:	e016      	b.n	8001f2e <HAL_TIM_PWM_Start_IT+0x122>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 8001f00:	687b      	ldr	r3, [r7, #4]
 8001f02:	681b      	ldr	r3, [r3, #0]
 8001f04:	68da      	ldr	r2, [r3, #12]
 8001f06:	687b      	ldr	r3, [r7, #4]
 8001f08:	681b      	ldr	r3, [r3, #0]
 8001f0a:	2108      	movs	r1, #8
 8001f0c:	430a      	orrs	r2, r1
 8001f0e:	60da      	str	r2, [r3, #12]
      break;
 8001f10:	e00d      	b.n	8001f2e <HAL_TIM_PWM_Start_IT+0x122>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 8001f12:	687b      	ldr	r3, [r7, #4]
 8001f14:	681b      	ldr	r3, [r3, #0]
 8001f16:	68da      	ldr	r2, [r3, #12]
 8001f18:	687b      	ldr	r3, [r7, #4]
 8001f1a:	681b      	ldr	r3, [r3, #0]
 8001f1c:	2110      	movs	r1, #16
 8001f1e:	430a      	orrs	r2, r1
 8001f20:	60da      	str	r2, [r3, #12]
      break;
 8001f22:	e004      	b.n	8001f2e <HAL_TIM_PWM_Start_IT+0x122>
    }

    default:
      status = HAL_ERROR;
 8001f24:	230f      	movs	r3, #15
 8001f26:	18fb      	adds	r3, r7, r3
 8001f28:	2201      	movs	r2, #1
 8001f2a:	701a      	strb	r2, [r3, #0]
      break;
 8001f2c:	46c0      	nop			; (mov r8, r8)
  }

  if (status == HAL_OK)
 8001f2e:	230f      	movs	r3, #15
 8001f30:	18fb      	adds	r3, r7, r3
 8001f32:	781b      	ldrb	r3, [r3, #0]
 8001f34:	2b00      	cmp	r3, #0
 8001f36:	d157      	bne.n	8001fe8 <HAL_TIM_PWM_Start_IT+0x1dc>
  {
    /* Enable the Capture compare channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8001f38:	687b      	ldr	r3, [r7, #4]
 8001f3a:	681b      	ldr	r3, [r3, #0]
 8001f3c:	6839      	ldr	r1, [r7, #0]
 8001f3e:	2201      	movs	r2, #1
 8001f40:	0018      	movs	r0, r3
 8001f42:	f000 ff15 	bl	8002d70 <TIM_CCxChannelCmd>

    if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8001f46:	687b      	ldr	r3, [r7, #4]
 8001f48:	681b      	ldr	r3, [r3, #0]
 8001f4a:	4a2b      	ldr	r2, [pc, #172]	; (8001ff8 <HAL_TIM_PWM_Start_IT+0x1ec>)
 8001f4c:	4293      	cmp	r3, r2
 8001f4e:	d00e      	beq.n	8001f6e <HAL_TIM_PWM_Start_IT+0x162>
 8001f50:	687b      	ldr	r3, [r7, #4]
 8001f52:	681b      	ldr	r3, [r3, #0]
 8001f54:	4a29      	ldr	r2, [pc, #164]	; (8001ffc <HAL_TIM_PWM_Start_IT+0x1f0>)
 8001f56:	4293      	cmp	r3, r2
 8001f58:	d009      	beq.n	8001f6e <HAL_TIM_PWM_Start_IT+0x162>
 8001f5a:	687b      	ldr	r3, [r7, #4]
 8001f5c:	681b      	ldr	r3, [r3, #0]
 8001f5e:	4a28      	ldr	r2, [pc, #160]	; (8002000 <HAL_TIM_PWM_Start_IT+0x1f4>)
 8001f60:	4293      	cmp	r3, r2
 8001f62:	d004      	beq.n	8001f6e <HAL_TIM_PWM_Start_IT+0x162>
 8001f64:	687b      	ldr	r3, [r7, #4]
 8001f66:	681b      	ldr	r3, [r3, #0]
 8001f68:	4a26      	ldr	r2, [pc, #152]	; (8002004 <HAL_TIM_PWM_Start_IT+0x1f8>)
 8001f6a:	4293      	cmp	r3, r2
 8001f6c:	d101      	bne.n	8001f72 <HAL_TIM_PWM_Start_IT+0x166>
 8001f6e:	2301      	movs	r3, #1
 8001f70:	e000      	b.n	8001f74 <HAL_TIM_PWM_Start_IT+0x168>
 8001f72:	2300      	movs	r3, #0
 8001f74:	2b00      	cmp	r3, #0
 8001f76:	d008      	beq.n	8001f8a <HAL_TIM_PWM_Start_IT+0x17e>
    {
      /* Enable the main output */
      __HAL_TIM_MOE_ENABLE(htim);
 8001f78:	687b      	ldr	r3, [r7, #4]
 8001f7a:	681b      	ldr	r3, [r3, #0]
 8001f7c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8001f7e:	687b      	ldr	r3, [r7, #4]
 8001f80:	681b      	ldr	r3, [r3, #0]
 8001f82:	2180      	movs	r1, #128	; 0x80
 8001f84:	0209      	lsls	r1, r1, #8
 8001f86:	430a      	orrs	r2, r1
 8001f88:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8001f8a:	687b      	ldr	r3, [r7, #4]
 8001f8c:	681b      	ldr	r3, [r3, #0]
 8001f8e:	4a1a      	ldr	r2, [pc, #104]	; (8001ff8 <HAL_TIM_PWM_Start_IT+0x1ec>)
 8001f90:	4293      	cmp	r3, r2
 8001f92:	d00f      	beq.n	8001fb4 <HAL_TIM_PWM_Start_IT+0x1a8>
 8001f94:	687b      	ldr	r3, [r7, #4]
 8001f96:	681a      	ldr	r2, [r3, #0]
 8001f98:	2380      	movs	r3, #128	; 0x80
 8001f9a:	05db      	lsls	r3, r3, #23
 8001f9c:	429a      	cmp	r2, r3
 8001f9e:	d009      	beq.n	8001fb4 <HAL_TIM_PWM_Start_IT+0x1a8>
 8001fa0:	687b      	ldr	r3, [r7, #4]
 8001fa2:	681b      	ldr	r3, [r3, #0]
 8001fa4:	4a18      	ldr	r2, [pc, #96]	; (8002008 <HAL_TIM_PWM_Start_IT+0x1fc>)
 8001fa6:	4293      	cmp	r3, r2
 8001fa8:	d004      	beq.n	8001fb4 <HAL_TIM_PWM_Start_IT+0x1a8>
 8001faa:	687b      	ldr	r3, [r7, #4]
 8001fac:	681b      	ldr	r3, [r3, #0]
 8001fae:	4a13      	ldr	r2, [pc, #76]	; (8001ffc <HAL_TIM_PWM_Start_IT+0x1f0>)
 8001fb0:	4293      	cmp	r3, r2
 8001fb2:	d111      	bne.n	8001fd8 <HAL_TIM_PWM_Start_IT+0x1cc>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8001fb4:	687b      	ldr	r3, [r7, #4]
 8001fb6:	681b      	ldr	r3, [r3, #0]
 8001fb8:	689b      	ldr	r3, [r3, #8]
 8001fba:	2207      	movs	r2, #7
 8001fbc:	4013      	ands	r3, r2
 8001fbe:	60bb      	str	r3, [r7, #8]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001fc0:	68bb      	ldr	r3, [r7, #8]
 8001fc2:	2b06      	cmp	r3, #6
 8001fc4:	d010      	beq.n	8001fe8 <HAL_TIM_PWM_Start_IT+0x1dc>
      {
        __HAL_TIM_ENABLE(htim);
 8001fc6:	687b      	ldr	r3, [r7, #4]
 8001fc8:	681b      	ldr	r3, [r3, #0]
 8001fca:	681a      	ldr	r2, [r3, #0]
 8001fcc:	687b      	ldr	r3, [r7, #4]
 8001fce:	681b      	ldr	r3, [r3, #0]
 8001fd0:	2101      	movs	r1, #1
 8001fd2:	430a      	orrs	r2, r1
 8001fd4:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001fd6:	e007      	b.n	8001fe8 <HAL_TIM_PWM_Start_IT+0x1dc>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 8001fd8:	687b      	ldr	r3, [r7, #4]
 8001fda:	681b      	ldr	r3, [r3, #0]
 8001fdc:	681a      	ldr	r2, [r3, #0]
 8001fde:	687b      	ldr	r3, [r7, #4]
 8001fe0:	681b      	ldr	r3, [r3, #0]
 8001fe2:	2101      	movs	r1, #1
 8001fe4:	430a      	orrs	r2, r1
 8001fe6:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return status;
 8001fe8:	230f      	movs	r3, #15
 8001fea:	18fb      	adds	r3, r7, r3
 8001fec:	781b      	ldrb	r3, [r3, #0]
}
 8001fee:	0018      	movs	r0, r3
 8001ff0:	46bd      	mov	sp, r7
 8001ff2:	b004      	add	sp, #16
 8001ff4:	bd80      	pop	{r7, pc}
 8001ff6:	46c0      	nop			; (mov r8, r8)
 8001ff8:	40012c00 	.word	0x40012c00
 8001ffc:	40014000 	.word	0x40014000
 8002000:	40014400 	.word	0x40014400
 8002004:	40014800 	.word	0x40014800
 8002008:	40000400 	.word	0x40000400

0800200c <HAL_TIM_PWM_Stop_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800200c:	b580      	push	{r7, lr}
 800200e:	b084      	sub	sp, #16
 8002010:	af00      	add	r7, sp, #0
 8002012:	6078      	str	r0, [r7, #4]
 8002014:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002016:	230f      	movs	r3, #15
 8002018:	18fb      	adds	r3, r7, r3
 800201a:	2200      	movs	r2, #0
 800201c:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  switch (Channel)
 800201e:	683b      	ldr	r3, [r7, #0]
 8002020:	2b0c      	cmp	r3, #12
 8002022:	d02a      	beq.n	800207a <HAL_TIM_PWM_Stop_IT+0x6e>
 8002024:	683b      	ldr	r3, [r7, #0]
 8002026:	2b0c      	cmp	r3, #12
 8002028:	d830      	bhi.n	800208c <HAL_TIM_PWM_Stop_IT+0x80>
 800202a:	683b      	ldr	r3, [r7, #0]
 800202c:	2b08      	cmp	r3, #8
 800202e:	d01b      	beq.n	8002068 <HAL_TIM_PWM_Stop_IT+0x5c>
 8002030:	683b      	ldr	r3, [r7, #0]
 8002032:	2b08      	cmp	r3, #8
 8002034:	d82a      	bhi.n	800208c <HAL_TIM_PWM_Stop_IT+0x80>
 8002036:	683b      	ldr	r3, [r7, #0]
 8002038:	2b00      	cmp	r3, #0
 800203a:	d003      	beq.n	8002044 <HAL_TIM_PWM_Stop_IT+0x38>
 800203c:	683b      	ldr	r3, [r7, #0]
 800203e:	2b04      	cmp	r3, #4
 8002040:	d009      	beq.n	8002056 <HAL_TIM_PWM_Stop_IT+0x4a>
 8002042:	e023      	b.n	800208c <HAL_TIM_PWM_Stop_IT+0x80>
  {
    case TIM_CHANNEL_1:
    {
      /* Disable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC1);
 8002044:	687b      	ldr	r3, [r7, #4]
 8002046:	681b      	ldr	r3, [r3, #0]
 8002048:	68da      	ldr	r2, [r3, #12]
 800204a:	687b      	ldr	r3, [r7, #4]
 800204c:	681b      	ldr	r3, [r3, #0]
 800204e:	2102      	movs	r1, #2
 8002050:	438a      	bics	r2, r1
 8002052:	60da      	str	r2, [r3, #12]
      break;
 8002054:	e01f      	b.n	8002096 <HAL_TIM_PWM_Stop_IT+0x8a>
    }

    case TIM_CHANNEL_2:
    {
      /* Disable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC2);
 8002056:	687b      	ldr	r3, [r7, #4]
 8002058:	681b      	ldr	r3, [r3, #0]
 800205a:	68da      	ldr	r2, [r3, #12]
 800205c:	687b      	ldr	r3, [r7, #4]
 800205e:	681b      	ldr	r3, [r3, #0]
 8002060:	2104      	movs	r1, #4
 8002062:	438a      	bics	r2, r1
 8002064:	60da      	str	r2, [r3, #12]
      break;
 8002066:	e016      	b.n	8002096 <HAL_TIM_PWM_Stop_IT+0x8a>
    }

    case TIM_CHANNEL_3:
    {
      /* Disable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC3);
 8002068:	687b      	ldr	r3, [r7, #4]
 800206a:	681b      	ldr	r3, [r3, #0]
 800206c:	68da      	ldr	r2, [r3, #12]
 800206e:	687b      	ldr	r3, [r7, #4]
 8002070:	681b      	ldr	r3, [r3, #0]
 8002072:	2108      	movs	r1, #8
 8002074:	438a      	bics	r2, r1
 8002076:	60da      	str	r2, [r3, #12]
      break;
 8002078:	e00d      	b.n	8002096 <HAL_TIM_PWM_Stop_IT+0x8a>
    }

    case TIM_CHANNEL_4:
    {
      /* Disable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC4);
 800207a:	687b      	ldr	r3, [r7, #4]
 800207c:	681b      	ldr	r3, [r3, #0]
 800207e:	68da      	ldr	r2, [r3, #12]
 8002080:	687b      	ldr	r3, [r7, #4]
 8002082:	681b      	ldr	r3, [r3, #0]
 8002084:	2110      	movs	r1, #16
 8002086:	438a      	bics	r2, r1
 8002088:	60da      	str	r2, [r3, #12]
      break;
 800208a:	e004      	b.n	8002096 <HAL_TIM_PWM_Stop_IT+0x8a>
    }

    default:
      status = HAL_ERROR;
 800208c:	230f      	movs	r3, #15
 800208e:	18fb      	adds	r3, r7, r3
 8002090:	2201      	movs	r2, #1
 8002092:	701a      	strb	r2, [r3, #0]
      break;
 8002094:	46c0      	nop			; (mov r8, r8)
  }

  if (status == HAL_OK)
 8002096:	230f      	movs	r3, #15
 8002098:	18fb      	adds	r3, r7, r3
 800209a:	781b      	ldrb	r3, [r3, #0]
 800209c:	2b00      	cmp	r3, #0
 800209e:	d000      	beq.n	80020a2 <HAL_TIM_PWM_Stop_IT+0x96>
 80020a0:	e063      	b.n	800216a <HAL_TIM_PWM_Stop_IT+0x15e>
  {
    /* Disable the Capture compare channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 80020a2:	687b      	ldr	r3, [r7, #4]
 80020a4:	681b      	ldr	r3, [r3, #0]
 80020a6:	6839      	ldr	r1, [r7, #0]
 80020a8:	2200      	movs	r2, #0
 80020aa:	0018      	movs	r0, r3
 80020ac:	f000 fe60 	bl	8002d70 <TIM_CCxChannelCmd>

    if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80020b0:	687b      	ldr	r3, [r7, #4]
 80020b2:	681b      	ldr	r3, [r3, #0]
 80020b4:	4a30      	ldr	r2, [pc, #192]	; (8002178 <HAL_TIM_PWM_Stop_IT+0x16c>)
 80020b6:	4293      	cmp	r3, r2
 80020b8:	d00e      	beq.n	80020d8 <HAL_TIM_PWM_Stop_IT+0xcc>
 80020ba:	687b      	ldr	r3, [r7, #4]
 80020bc:	681b      	ldr	r3, [r3, #0]
 80020be:	4a2f      	ldr	r2, [pc, #188]	; (800217c <HAL_TIM_PWM_Stop_IT+0x170>)
 80020c0:	4293      	cmp	r3, r2
 80020c2:	d009      	beq.n	80020d8 <HAL_TIM_PWM_Stop_IT+0xcc>
 80020c4:	687b      	ldr	r3, [r7, #4]
 80020c6:	681b      	ldr	r3, [r3, #0]
 80020c8:	4a2d      	ldr	r2, [pc, #180]	; (8002180 <HAL_TIM_PWM_Stop_IT+0x174>)
 80020ca:	4293      	cmp	r3, r2
 80020cc:	d004      	beq.n	80020d8 <HAL_TIM_PWM_Stop_IT+0xcc>
 80020ce:	687b      	ldr	r3, [r7, #4]
 80020d0:	681b      	ldr	r3, [r3, #0]
 80020d2:	4a2c      	ldr	r2, [pc, #176]	; (8002184 <HAL_TIM_PWM_Stop_IT+0x178>)
 80020d4:	4293      	cmp	r3, r2
 80020d6:	d101      	bne.n	80020dc <HAL_TIM_PWM_Stop_IT+0xd0>
 80020d8:	2301      	movs	r3, #1
 80020da:	e000      	b.n	80020de <HAL_TIM_PWM_Stop_IT+0xd2>
 80020dc:	2300      	movs	r3, #0
 80020de:	2b00      	cmp	r3, #0
 80020e0:	d013      	beq.n	800210a <HAL_TIM_PWM_Stop_IT+0xfe>
    {
      /* Disable the Main Output */
      __HAL_TIM_MOE_DISABLE(htim);
 80020e2:	687b      	ldr	r3, [r7, #4]
 80020e4:	681b      	ldr	r3, [r3, #0]
 80020e6:	6a1b      	ldr	r3, [r3, #32]
 80020e8:	4a27      	ldr	r2, [pc, #156]	; (8002188 <HAL_TIM_PWM_Stop_IT+0x17c>)
 80020ea:	4013      	ands	r3, r2
 80020ec:	d10d      	bne.n	800210a <HAL_TIM_PWM_Stop_IT+0xfe>
 80020ee:	687b      	ldr	r3, [r7, #4]
 80020f0:	681b      	ldr	r3, [r3, #0]
 80020f2:	6a1b      	ldr	r3, [r3, #32]
 80020f4:	4a25      	ldr	r2, [pc, #148]	; (800218c <HAL_TIM_PWM_Stop_IT+0x180>)
 80020f6:	4013      	ands	r3, r2
 80020f8:	d107      	bne.n	800210a <HAL_TIM_PWM_Stop_IT+0xfe>
 80020fa:	687b      	ldr	r3, [r7, #4]
 80020fc:	681b      	ldr	r3, [r3, #0]
 80020fe:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8002100:	687b      	ldr	r3, [r7, #4]
 8002102:	681b      	ldr	r3, [r3, #0]
 8002104:	4922      	ldr	r1, [pc, #136]	; (8002190 <HAL_TIM_PWM_Stop_IT+0x184>)
 8002106:	400a      	ands	r2, r1
 8002108:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Disable the Peripheral */
    __HAL_TIM_DISABLE(htim);
 800210a:	687b      	ldr	r3, [r7, #4]
 800210c:	681b      	ldr	r3, [r3, #0]
 800210e:	6a1b      	ldr	r3, [r3, #32]
 8002110:	4a1d      	ldr	r2, [pc, #116]	; (8002188 <HAL_TIM_PWM_Stop_IT+0x17c>)
 8002112:	4013      	ands	r3, r2
 8002114:	d10d      	bne.n	8002132 <HAL_TIM_PWM_Stop_IT+0x126>
 8002116:	687b      	ldr	r3, [r7, #4]
 8002118:	681b      	ldr	r3, [r3, #0]
 800211a:	6a1b      	ldr	r3, [r3, #32]
 800211c:	4a1b      	ldr	r2, [pc, #108]	; (800218c <HAL_TIM_PWM_Stop_IT+0x180>)
 800211e:	4013      	ands	r3, r2
 8002120:	d107      	bne.n	8002132 <HAL_TIM_PWM_Stop_IT+0x126>
 8002122:	687b      	ldr	r3, [r7, #4]
 8002124:	681b      	ldr	r3, [r3, #0]
 8002126:	681a      	ldr	r2, [r3, #0]
 8002128:	687b      	ldr	r3, [r7, #4]
 800212a:	681b      	ldr	r3, [r3, #0]
 800212c:	2101      	movs	r1, #1
 800212e:	438a      	bics	r2, r1
 8002130:	601a      	str	r2, [r3, #0]

    /* Set the TIM channel state */
    TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 8002132:	683b      	ldr	r3, [r7, #0]
 8002134:	2b00      	cmp	r3, #0
 8002136:	d104      	bne.n	8002142 <HAL_TIM_PWM_Stop_IT+0x136>
 8002138:	687b      	ldr	r3, [r7, #4]
 800213a:	223e      	movs	r2, #62	; 0x3e
 800213c:	2101      	movs	r1, #1
 800213e:	5499      	strb	r1, [r3, r2]
 8002140:	e013      	b.n	800216a <HAL_TIM_PWM_Stop_IT+0x15e>
 8002142:	683b      	ldr	r3, [r7, #0]
 8002144:	2b04      	cmp	r3, #4
 8002146:	d104      	bne.n	8002152 <HAL_TIM_PWM_Stop_IT+0x146>
 8002148:	687b      	ldr	r3, [r7, #4]
 800214a:	223f      	movs	r2, #63	; 0x3f
 800214c:	2101      	movs	r1, #1
 800214e:	5499      	strb	r1, [r3, r2]
 8002150:	e00b      	b.n	800216a <HAL_TIM_PWM_Stop_IT+0x15e>
 8002152:	683b      	ldr	r3, [r7, #0]
 8002154:	2b08      	cmp	r3, #8
 8002156:	d104      	bne.n	8002162 <HAL_TIM_PWM_Stop_IT+0x156>
 8002158:	687b      	ldr	r3, [r7, #4]
 800215a:	2240      	movs	r2, #64	; 0x40
 800215c:	2101      	movs	r1, #1
 800215e:	5499      	strb	r1, [r3, r2]
 8002160:	e003      	b.n	800216a <HAL_TIM_PWM_Stop_IT+0x15e>
 8002162:	687b      	ldr	r3, [r7, #4]
 8002164:	2241      	movs	r2, #65	; 0x41
 8002166:	2101      	movs	r1, #1
 8002168:	5499      	strb	r1, [r3, r2]
  }

  /* Return function status */
  return status;
 800216a:	230f      	movs	r3, #15
 800216c:	18fb      	adds	r3, r7, r3
 800216e:	781b      	ldrb	r3, [r3, #0]
}
 8002170:	0018      	movs	r0, r3
 8002172:	46bd      	mov	sp, r7
 8002174:	b004      	add	sp, #16
 8002176:	bd80      	pop	{r7, pc}
 8002178:	40012c00 	.word	0x40012c00
 800217c:	40014000 	.word	0x40014000
 8002180:	40014400 	.word	0x40014400
 8002184:	40014800 	.word	0x40014800
 8002188:	00001111 	.word	0x00001111
 800218c:	00000444 	.word	0x00000444
 8002190:	ffff7fff 	.word	0xffff7fff

08002194 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8002194:	b580      	push	{r7, lr}
 8002196:	b082      	sub	sp, #8
 8002198:	af00      	add	r7, sp, #0
 800219a:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800219c:	687b      	ldr	r3, [r7, #4]
 800219e:	681b      	ldr	r3, [r3, #0]
 80021a0:	691b      	ldr	r3, [r3, #16]
 80021a2:	2202      	movs	r2, #2
 80021a4:	4013      	ands	r3, r2
 80021a6:	2b02      	cmp	r3, #2
 80021a8:	d124      	bne.n	80021f4 <HAL_TIM_IRQHandler+0x60>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80021aa:	687b      	ldr	r3, [r7, #4]
 80021ac:	681b      	ldr	r3, [r3, #0]
 80021ae:	68db      	ldr	r3, [r3, #12]
 80021b0:	2202      	movs	r2, #2
 80021b2:	4013      	ands	r3, r2
 80021b4:	2b02      	cmp	r3, #2
 80021b6:	d11d      	bne.n	80021f4 <HAL_TIM_IRQHandler+0x60>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80021b8:	687b      	ldr	r3, [r7, #4]
 80021ba:	681b      	ldr	r3, [r3, #0]
 80021bc:	2203      	movs	r2, #3
 80021be:	4252      	negs	r2, r2
 80021c0:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80021c2:	687b      	ldr	r3, [r7, #4]
 80021c4:	2201      	movs	r2, #1
 80021c6:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80021c8:	687b      	ldr	r3, [r7, #4]
 80021ca:	681b      	ldr	r3, [r3, #0]
 80021cc:	699b      	ldr	r3, [r3, #24]
 80021ce:	2203      	movs	r2, #3
 80021d0:	4013      	ands	r3, r2
 80021d2:	d004      	beq.n	80021de <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80021d4:	687b      	ldr	r3, [r7, #4]
 80021d6:	0018      	movs	r0, r3
 80021d8:	f000 fa9c 	bl	8002714 <HAL_TIM_IC_CaptureCallback>
 80021dc:	e007      	b.n	80021ee <HAL_TIM_IRQHandler+0x5a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80021de:	687b      	ldr	r3, [r7, #4]
 80021e0:	0018      	movs	r0, r3
 80021e2:	f000 fa8f 	bl	8002704 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80021e6:	687b      	ldr	r3, [r7, #4]
 80021e8:	0018      	movs	r0, r3
 80021ea:	f000 fa9b 	bl	8002724 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80021ee:	687b      	ldr	r3, [r7, #4]
 80021f0:	2200      	movs	r2, #0
 80021f2:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80021f4:	687b      	ldr	r3, [r7, #4]
 80021f6:	681b      	ldr	r3, [r3, #0]
 80021f8:	691b      	ldr	r3, [r3, #16]
 80021fa:	2204      	movs	r2, #4
 80021fc:	4013      	ands	r3, r2
 80021fe:	2b04      	cmp	r3, #4
 8002200:	d125      	bne.n	800224e <HAL_TIM_IRQHandler+0xba>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8002202:	687b      	ldr	r3, [r7, #4]
 8002204:	681b      	ldr	r3, [r3, #0]
 8002206:	68db      	ldr	r3, [r3, #12]
 8002208:	2204      	movs	r2, #4
 800220a:	4013      	ands	r3, r2
 800220c:	2b04      	cmp	r3, #4
 800220e:	d11e      	bne.n	800224e <HAL_TIM_IRQHandler+0xba>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8002210:	687b      	ldr	r3, [r7, #4]
 8002212:	681b      	ldr	r3, [r3, #0]
 8002214:	2205      	movs	r2, #5
 8002216:	4252      	negs	r2, r2
 8002218:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800221a:	687b      	ldr	r3, [r7, #4]
 800221c:	2202      	movs	r2, #2
 800221e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002220:	687b      	ldr	r3, [r7, #4]
 8002222:	681b      	ldr	r3, [r3, #0]
 8002224:	699a      	ldr	r2, [r3, #24]
 8002226:	23c0      	movs	r3, #192	; 0xc0
 8002228:	009b      	lsls	r3, r3, #2
 800222a:	4013      	ands	r3, r2
 800222c:	d004      	beq.n	8002238 <HAL_TIM_IRQHandler+0xa4>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800222e:	687b      	ldr	r3, [r7, #4]
 8002230:	0018      	movs	r0, r3
 8002232:	f000 fa6f 	bl	8002714 <HAL_TIM_IC_CaptureCallback>
 8002236:	e007      	b.n	8002248 <HAL_TIM_IRQHandler+0xb4>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002238:	687b      	ldr	r3, [r7, #4]
 800223a:	0018      	movs	r0, r3
 800223c:	f000 fa62 	bl	8002704 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002240:	687b      	ldr	r3, [r7, #4]
 8002242:	0018      	movs	r0, r3
 8002244:	f000 fa6e 	bl	8002724 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002248:	687b      	ldr	r3, [r7, #4]
 800224a:	2200      	movs	r2, #0
 800224c:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800224e:	687b      	ldr	r3, [r7, #4]
 8002250:	681b      	ldr	r3, [r3, #0]
 8002252:	691b      	ldr	r3, [r3, #16]
 8002254:	2208      	movs	r2, #8
 8002256:	4013      	ands	r3, r2
 8002258:	2b08      	cmp	r3, #8
 800225a:	d124      	bne.n	80022a6 <HAL_TIM_IRQHandler+0x112>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800225c:	687b      	ldr	r3, [r7, #4]
 800225e:	681b      	ldr	r3, [r3, #0]
 8002260:	68db      	ldr	r3, [r3, #12]
 8002262:	2208      	movs	r2, #8
 8002264:	4013      	ands	r3, r2
 8002266:	2b08      	cmp	r3, #8
 8002268:	d11d      	bne.n	80022a6 <HAL_TIM_IRQHandler+0x112>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800226a:	687b      	ldr	r3, [r7, #4]
 800226c:	681b      	ldr	r3, [r3, #0]
 800226e:	2209      	movs	r2, #9
 8002270:	4252      	negs	r2, r2
 8002272:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002274:	687b      	ldr	r3, [r7, #4]
 8002276:	2204      	movs	r2, #4
 8002278:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800227a:	687b      	ldr	r3, [r7, #4]
 800227c:	681b      	ldr	r3, [r3, #0]
 800227e:	69db      	ldr	r3, [r3, #28]
 8002280:	2203      	movs	r2, #3
 8002282:	4013      	ands	r3, r2
 8002284:	d004      	beq.n	8002290 <HAL_TIM_IRQHandler+0xfc>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002286:	687b      	ldr	r3, [r7, #4]
 8002288:	0018      	movs	r0, r3
 800228a:	f000 fa43 	bl	8002714 <HAL_TIM_IC_CaptureCallback>
 800228e:	e007      	b.n	80022a0 <HAL_TIM_IRQHandler+0x10c>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002290:	687b      	ldr	r3, [r7, #4]
 8002292:	0018      	movs	r0, r3
 8002294:	f000 fa36 	bl	8002704 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002298:	687b      	ldr	r3, [r7, #4]
 800229a:	0018      	movs	r0, r3
 800229c:	f000 fa42 	bl	8002724 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80022a0:	687b      	ldr	r3, [r7, #4]
 80022a2:	2200      	movs	r2, #0
 80022a4:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80022a6:	687b      	ldr	r3, [r7, #4]
 80022a8:	681b      	ldr	r3, [r3, #0]
 80022aa:	691b      	ldr	r3, [r3, #16]
 80022ac:	2210      	movs	r2, #16
 80022ae:	4013      	ands	r3, r2
 80022b0:	2b10      	cmp	r3, #16
 80022b2:	d125      	bne.n	8002300 <HAL_TIM_IRQHandler+0x16c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80022b4:	687b      	ldr	r3, [r7, #4]
 80022b6:	681b      	ldr	r3, [r3, #0]
 80022b8:	68db      	ldr	r3, [r3, #12]
 80022ba:	2210      	movs	r2, #16
 80022bc:	4013      	ands	r3, r2
 80022be:	2b10      	cmp	r3, #16
 80022c0:	d11e      	bne.n	8002300 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80022c2:	687b      	ldr	r3, [r7, #4]
 80022c4:	681b      	ldr	r3, [r3, #0]
 80022c6:	2211      	movs	r2, #17
 80022c8:	4252      	negs	r2, r2
 80022ca:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80022cc:	687b      	ldr	r3, [r7, #4]
 80022ce:	2208      	movs	r2, #8
 80022d0:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80022d2:	687b      	ldr	r3, [r7, #4]
 80022d4:	681b      	ldr	r3, [r3, #0]
 80022d6:	69da      	ldr	r2, [r3, #28]
 80022d8:	23c0      	movs	r3, #192	; 0xc0
 80022da:	009b      	lsls	r3, r3, #2
 80022dc:	4013      	ands	r3, r2
 80022de:	d004      	beq.n	80022ea <HAL_TIM_IRQHandler+0x156>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80022e0:	687b      	ldr	r3, [r7, #4]
 80022e2:	0018      	movs	r0, r3
 80022e4:	f000 fa16 	bl	8002714 <HAL_TIM_IC_CaptureCallback>
 80022e8:	e007      	b.n	80022fa <HAL_TIM_IRQHandler+0x166>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80022ea:	687b      	ldr	r3, [r7, #4]
 80022ec:	0018      	movs	r0, r3
 80022ee:	f000 fa09 	bl	8002704 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80022f2:	687b      	ldr	r3, [r7, #4]
 80022f4:	0018      	movs	r0, r3
 80022f6:	f000 fa15 	bl	8002724 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80022fa:	687b      	ldr	r3, [r7, #4]
 80022fc:	2200      	movs	r2, #0
 80022fe:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8002300:	687b      	ldr	r3, [r7, #4]
 8002302:	681b      	ldr	r3, [r3, #0]
 8002304:	691b      	ldr	r3, [r3, #16]
 8002306:	2201      	movs	r2, #1
 8002308:	4013      	ands	r3, r2
 800230a:	2b01      	cmp	r3, #1
 800230c:	d10f      	bne.n	800232e <HAL_TIM_IRQHandler+0x19a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800230e:	687b      	ldr	r3, [r7, #4]
 8002310:	681b      	ldr	r3, [r3, #0]
 8002312:	68db      	ldr	r3, [r3, #12]
 8002314:	2201      	movs	r2, #1
 8002316:	4013      	ands	r3, r2
 8002318:	2b01      	cmp	r3, #1
 800231a:	d108      	bne.n	800232e <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800231c:	687b      	ldr	r3, [r7, #4]
 800231e:	681b      	ldr	r3, [r3, #0]
 8002320:	2202      	movs	r2, #2
 8002322:	4252      	negs	r2, r2
 8002324:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8002326:	687b      	ldr	r3, [r7, #4]
 8002328:	0018      	movs	r0, r3
 800232a:	f000 f9e3 	bl	80026f4 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800232e:	687b      	ldr	r3, [r7, #4]
 8002330:	681b      	ldr	r3, [r3, #0]
 8002332:	691b      	ldr	r3, [r3, #16]
 8002334:	2280      	movs	r2, #128	; 0x80
 8002336:	4013      	ands	r3, r2
 8002338:	2b80      	cmp	r3, #128	; 0x80
 800233a:	d10f      	bne.n	800235c <HAL_TIM_IRQHandler+0x1c8>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800233c:	687b      	ldr	r3, [r7, #4]
 800233e:	681b      	ldr	r3, [r3, #0]
 8002340:	68db      	ldr	r3, [r3, #12]
 8002342:	2280      	movs	r2, #128	; 0x80
 8002344:	4013      	ands	r3, r2
 8002346:	2b80      	cmp	r3, #128	; 0x80
 8002348:	d108      	bne.n	800235c <HAL_TIM_IRQHandler+0x1c8>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800234a:	687b      	ldr	r3, [r7, #4]
 800234c:	681b      	ldr	r3, [r3, #0]
 800234e:	2281      	movs	r2, #129	; 0x81
 8002350:	4252      	negs	r2, r2
 8002352:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8002354:	687b      	ldr	r3, [r7, #4]
 8002356:	0018      	movs	r0, r3
 8002358:	f000 fdf2 	bl	8002f40 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800235c:	687b      	ldr	r3, [r7, #4]
 800235e:	681b      	ldr	r3, [r3, #0]
 8002360:	691b      	ldr	r3, [r3, #16]
 8002362:	2240      	movs	r2, #64	; 0x40
 8002364:	4013      	ands	r3, r2
 8002366:	2b40      	cmp	r3, #64	; 0x40
 8002368:	d10f      	bne.n	800238a <HAL_TIM_IRQHandler+0x1f6>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800236a:	687b      	ldr	r3, [r7, #4]
 800236c:	681b      	ldr	r3, [r3, #0]
 800236e:	68db      	ldr	r3, [r3, #12]
 8002370:	2240      	movs	r2, #64	; 0x40
 8002372:	4013      	ands	r3, r2
 8002374:	2b40      	cmp	r3, #64	; 0x40
 8002376:	d108      	bne.n	800238a <HAL_TIM_IRQHandler+0x1f6>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8002378:	687b      	ldr	r3, [r7, #4]
 800237a:	681b      	ldr	r3, [r3, #0]
 800237c:	2241      	movs	r2, #65	; 0x41
 800237e:	4252      	negs	r2, r2
 8002380:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8002382:	687b      	ldr	r3, [r7, #4]
 8002384:	0018      	movs	r0, r3
 8002386:	f000 f9d5 	bl	8002734 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800238a:	687b      	ldr	r3, [r7, #4]
 800238c:	681b      	ldr	r3, [r3, #0]
 800238e:	691b      	ldr	r3, [r3, #16]
 8002390:	2220      	movs	r2, #32
 8002392:	4013      	ands	r3, r2
 8002394:	2b20      	cmp	r3, #32
 8002396:	d10f      	bne.n	80023b8 <HAL_TIM_IRQHandler+0x224>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8002398:	687b      	ldr	r3, [r7, #4]
 800239a:	681b      	ldr	r3, [r3, #0]
 800239c:	68db      	ldr	r3, [r3, #12]
 800239e:	2220      	movs	r2, #32
 80023a0:	4013      	ands	r3, r2
 80023a2:	2b20      	cmp	r3, #32
 80023a4:	d108      	bne.n	80023b8 <HAL_TIM_IRQHandler+0x224>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80023a6:	687b      	ldr	r3, [r7, #4]
 80023a8:	681b      	ldr	r3, [r3, #0]
 80023aa:	2221      	movs	r2, #33	; 0x21
 80023ac:	4252      	negs	r2, r2
 80023ae:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80023b0:	687b      	ldr	r3, [r7, #4]
 80023b2:	0018      	movs	r0, r3
 80023b4:	f000 fdbc 	bl	8002f30 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80023b8:	46c0      	nop			; (mov r8, r8)
 80023ba:	46bd      	mov	sp, r7
 80023bc:	b002      	add	sp, #8
 80023be:	bd80      	pop	{r7, pc}

080023c0 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80023c0:	b580      	push	{r7, lr}
 80023c2:	b086      	sub	sp, #24
 80023c4:	af00      	add	r7, sp, #0
 80023c6:	60f8      	str	r0, [r7, #12]
 80023c8:	60b9      	str	r1, [r7, #8]
 80023ca:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80023cc:	2317      	movs	r3, #23
 80023ce:	18fb      	adds	r3, r7, r3
 80023d0:	2200      	movs	r2, #0
 80023d2:	701a      	strb	r2, [r3, #0]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80023d4:	68fb      	ldr	r3, [r7, #12]
 80023d6:	223c      	movs	r2, #60	; 0x3c
 80023d8:	5c9b      	ldrb	r3, [r3, r2]
 80023da:	2b01      	cmp	r3, #1
 80023dc:	d101      	bne.n	80023e2 <HAL_TIM_PWM_ConfigChannel+0x22>
 80023de:	2302      	movs	r3, #2
 80023e0:	e0ad      	b.n	800253e <HAL_TIM_PWM_ConfigChannel+0x17e>
 80023e2:	68fb      	ldr	r3, [r7, #12]
 80023e4:	223c      	movs	r2, #60	; 0x3c
 80023e6:	2101      	movs	r1, #1
 80023e8:	5499      	strb	r1, [r3, r2]

  switch (Channel)
 80023ea:	687b      	ldr	r3, [r7, #4]
 80023ec:	2b0c      	cmp	r3, #12
 80023ee:	d100      	bne.n	80023f2 <HAL_TIM_PWM_ConfigChannel+0x32>
 80023f0:	e076      	b.n	80024e0 <HAL_TIM_PWM_ConfigChannel+0x120>
 80023f2:	687b      	ldr	r3, [r7, #4]
 80023f4:	2b0c      	cmp	r3, #12
 80023f6:	d900      	bls.n	80023fa <HAL_TIM_PWM_ConfigChannel+0x3a>
 80023f8:	e095      	b.n	8002526 <HAL_TIM_PWM_ConfigChannel+0x166>
 80023fa:	687b      	ldr	r3, [r7, #4]
 80023fc:	2b08      	cmp	r3, #8
 80023fe:	d04e      	beq.n	800249e <HAL_TIM_PWM_ConfigChannel+0xde>
 8002400:	687b      	ldr	r3, [r7, #4]
 8002402:	2b08      	cmp	r3, #8
 8002404:	d900      	bls.n	8002408 <HAL_TIM_PWM_ConfigChannel+0x48>
 8002406:	e08e      	b.n	8002526 <HAL_TIM_PWM_ConfigChannel+0x166>
 8002408:	687b      	ldr	r3, [r7, #4]
 800240a:	2b00      	cmp	r3, #0
 800240c:	d003      	beq.n	8002416 <HAL_TIM_PWM_ConfigChannel+0x56>
 800240e:	687b      	ldr	r3, [r7, #4]
 8002410:	2b04      	cmp	r3, #4
 8002412:	d021      	beq.n	8002458 <HAL_TIM_PWM_ConfigChannel+0x98>
 8002414:	e087      	b.n	8002526 <HAL_TIM_PWM_ConfigChannel+0x166>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8002416:	68fb      	ldr	r3, [r7, #12]
 8002418:	681b      	ldr	r3, [r3, #0]
 800241a:	68ba      	ldr	r2, [r7, #8]
 800241c:	0011      	movs	r1, r2
 800241e:	0018      	movs	r0, r3
 8002420:	f000 fa10 	bl	8002844 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8002424:	68fb      	ldr	r3, [r7, #12]
 8002426:	681b      	ldr	r3, [r3, #0]
 8002428:	699a      	ldr	r2, [r3, #24]
 800242a:	68fb      	ldr	r3, [r7, #12]
 800242c:	681b      	ldr	r3, [r3, #0]
 800242e:	2108      	movs	r1, #8
 8002430:	430a      	orrs	r2, r1
 8002432:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8002434:	68fb      	ldr	r3, [r7, #12]
 8002436:	681b      	ldr	r3, [r3, #0]
 8002438:	699a      	ldr	r2, [r3, #24]
 800243a:	68fb      	ldr	r3, [r7, #12]
 800243c:	681b      	ldr	r3, [r3, #0]
 800243e:	2104      	movs	r1, #4
 8002440:	438a      	bics	r2, r1
 8002442:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8002444:	68fb      	ldr	r3, [r7, #12]
 8002446:	681b      	ldr	r3, [r3, #0]
 8002448:	6999      	ldr	r1, [r3, #24]
 800244a:	68bb      	ldr	r3, [r7, #8]
 800244c:	691a      	ldr	r2, [r3, #16]
 800244e:	68fb      	ldr	r3, [r7, #12]
 8002450:	681b      	ldr	r3, [r3, #0]
 8002452:	430a      	orrs	r2, r1
 8002454:	619a      	str	r2, [r3, #24]
      break;
 8002456:	e06b      	b.n	8002530 <HAL_TIM_PWM_ConfigChannel+0x170>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8002458:	68fb      	ldr	r3, [r7, #12]
 800245a:	681b      	ldr	r3, [r3, #0]
 800245c:	68ba      	ldr	r2, [r7, #8]
 800245e:	0011      	movs	r1, r2
 8002460:	0018      	movs	r0, r3
 8002462:	f000 fa77 	bl	8002954 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8002466:	68fb      	ldr	r3, [r7, #12]
 8002468:	681b      	ldr	r3, [r3, #0]
 800246a:	699a      	ldr	r2, [r3, #24]
 800246c:	68fb      	ldr	r3, [r7, #12]
 800246e:	681b      	ldr	r3, [r3, #0]
 8002470:	2180      	movs	r1, #128	; 0x80
 8002472:	0109      	lsls	r1, r1, #4
 8002474:	430a      	orrs	r2, r1
 8002476:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8002478:	68fb      	ldr	r3, [r7, #12]
 800247a:	681b      	ldr	r3, [r3, #0]
 800247c:	699a      	ldr	r2, [r3, #24]
 800247e:	68fb      	ldr	r3, [r7, #12]
 8002480:	681b      	ldr	r3, [r3, #0]
 8002482:	4931      	ldr	r1, [pc, #196]	; (8002548 <HAL_TIM_PWM_ConfigChannel+0x188>)
 8002484:	400a      	ands	r2, r1
 8002486:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8002488:	68fb      	ldr	r3, [r7, #12]
 800248a:	681b      	ldr	r3, [r3, #0]
 800248c:	6999      	ldr	r1, [r3, #24]
 800248e:	68bb      	ldr	r3, [r7, #8]
 8002490:	691b      	ldr	r3, [r3, #16]
 8002492:	021a      	lsls	r2, r3, #8
 8002494:	68fb      	ldr	r3, [r7, #12]
 8002496:	681b      	ldr	r3, [r3, #0]
 8002498:	430a      	orrs	r2, r1
 800249a:	619a      	str	r2, [r3, #24]
      break;
 800249c:	e048      	b.n	8002530 <HAL_TIM_PWM_ConfigChannel+0x170>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800249e:	68fb      	ldr	r3, [r7, #12]
 80024a0:	681b      	ldr	r3, [r3, #0]
 80024a2:	68ba      	ldr	r2, [r7, #8]
 80024a4:	0011      	movs	r1, r2
 80024a6:	0018      	movs	r0, r3
 80024a8:	f000 fad8 	bl	8002a5c <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80024ac:	68fb      	ldr	r3, [r7, #12]
 80024ae:	681b      	ldr	r3, [r3, #0]
 80024b0:	69da      	ldr	r2, [r3, #28]
 80024b2:	68fb      	ldr	r3, [r7, #12]
 80024b4:	681b      	ldr	r3, [r3, #0]
 80024b6:	2108      	movs	r1, #8
 80024b8:	430a      	orrs	r2, r1
 80024ba:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80024bc:	68fb      	ldr	r3, [r7, #12]
 80024be:	681b      	ldr	r3, [r3, #0]
 80024c0:	69da      	ldr	r2, [r3, #28]
 80024c2:	68fb      	ldr	r3, [r7, #12]
 80024c4:	681b      	ldr	r3, [r3, #0]
 80024c6:	2104      	movs	r1, #4
 80024c8:	438a      	bics	r2, r1
 80024ca:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80024cc:	68fb      	ldr	r3, [r7, #12]
 80024ce:	681b      	ldr	r3, [r3, #0]
 80024d0:	69d9      	ldr	r1, [r3, #28]
 80024d2:	68bb      	ldr	r3, [r7, #8]
 80024d4:	691a      	ldr	r2, [r3, #16]
 80024d6:	68fb      	ldr	r3, [r7, #12]
 80024d8:	681b      	ldr	r3, [r3, #0]
 80024da:	430a      	orrs	r2, r1
 80024dc:	61da      	str	r2, [r3, #28]
      break;
 80024de:	e027      	b.n	8002530 <HAL_TIM_PWM_ConfigChannel+0x170>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80024e0:	68fb      	ldr	r3, [r7, #12]
 80024e2:	681b      	ldr	r3, [r3, #0]
 80024e4:	68ba      	ldr	r2, [r7, #8]
 80024e6:	0011      	movs	r1, r2
 80024e8:	0018      	movs	r0, r3
 80024ea:	f000 fb3d 	bl	8002b68 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80024ee:	68fb      	ldr	r3, [r7, #12]
 80024f0:	681b      	ldr	r3, [r3, #0]
 80024f2:	69da      	ldr	r2, [r3, #28]
 80024f4:	68fb      	ldr	r3, [r7, #12]
 80024f6:	681b      	ldr	r3, [r3, #0]
 80024f8:	2180      	movs	r1, #128	; 0x80
 80024fa:	0109      	lsls	r1, r1, #4
 80024fc:	430a      	orrs	r2, r1
 80024fe:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8002500:	68fb      	ldr	r3, [r7, #12]
 8002502:	681b      	ldr	r3, [r3, #0]
 8002504:	69da      	ldr	r2, [r3, #28]
 8002506:	68fb      	ldr	r3, [r7, #12]
 8002508:	681b      	ldr	r3, [r3, #0]
 800250a:	490f      	ldr	r1, [pc, #60]	; (8002548 <HAL_TIM_PWM_ConfigChannel+0x188>)
 800250c:	400a      	ands	r2, r1
 800250e:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8002510:	68fb      	ldr	r3, [r7, #12]
 8002512:	681b      	ldr	r3, [r3, #0]
 8002514:	69d9      	ldr	r1, [r3, #28]
 8002516:	68bb      	ldr	r3, [r7, #8]
 8002518:	691b      	ldr	r3, [r3, #16]
 800251a:	021a      	lsls	r2, r3, #8
 800251c:	68fb      	ldr	r3, [r7, #12]
 800251e:	681b      	ldr	r3, [r3, #0]
 8002520:	430a      	orrs	r2, r1
 8002522:	61da      	str	r2, [r3, #28]
      break;
 8002524:	e004      	b.n	8002530 <HAL_TIM_PWM_ConfigChannel+0x170>
    }

    default:
      status = HAL_ERROR;
 8002526:	2317      	movs	r3, #23
 8002528:	18fb      	adds	r3, r7, r3
 800252a:	2201      	movs	r2, #1
 800252c:	701a      	strb	r2, [r3, #0]
      break;
 800252e:	46c0      	nop			; (mov r8, r8)
  }

  __HAL_UNLOCK(htim);
 8002530:	68fb      	ldr	r3, [r7, #12]
 8002532:	223c      	movs	r2, #60	; 0x3c
 8002534:	2100      	movs	r1, #0
 8002536:	5499      	strb	r1, [r3, r2]

  return status;
 8002538:	2317      	movs	r3, #23
 800253a:	18fb      	adds	r3, r7, r3
 800253c:	781b      	ldrb	r3, [r3, #0]
}
 800253e:	0018      	movs	r0, r3
 8002540:	46bd      	mov	sp, r7
 8002542:	b006      	add	sp, #24
 8002544:	bd80      	pop	{r7, pc}
 8002546:	46c0      	nop			; (mov r8, r8)
 8002548:	fffffbff 	.word	0xfffffbff

0800254c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800254c:	b580      	push	{r7, lr}
 800254e:	b084      	sub	sp, #16
 8002550:	af00      	add	r7, sp, #0
 8002552:	6078      	str	r0, [r7, #4]
 8002554:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002556:	230f      	movs	r3, #15
 8002558:	18fb      	adds	r3, r7, r3
 800255a:	2200      	movs	r2, #0
 800255c:	701a      	strb	r2, [r3, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800255e:	687b      	ldr	r3, [r7, #4]
 8002560:	223c      	movs	r2, #60	; 0x3c
 8002562:	5c9b      	ldrb	r3, [r3, r2]
 8002564:	2b01      	cmp	r3, #1
 8002566:	d101      	bne.n	800256c <HAL_TIM_ConfigClockSource+0x20>
 8002568:	2302      	movs	r3, #2
 800256a:	e0bc      	b.n	80026e6 <HAL_TIM_ConfigClockSource+0x19a>
 800256c:	687b      	ldr	r3, [r7, #4]
 800256e:	223c      	movs	r2, #60	; 0x3c
 8002570:	2101      	movs	r1, #1
 8002572:	5499      	strb	r1, [r3, r2]

  htim->State = HAL_TIM_STATE_BUSY;
 8002574:	687b      	ldr	r3, [r7, #4]
 8002576:	223d      	movs	r2, #61	; 0x3d
 8002578:	2102      	movs	r1, #2
 800257a:	5499      	strb	r1, [r3, r2]

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800257c:	687b      	ldr	r3, [r7, #4]
 800257e:	681b      	ldr	r3, [r3, #0]
 8002580:	689b      	ldr	r3, [r3, #8]
 8002582:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8002584:	68bb      	ldr	r3, [r7, #8]
 8002586:	2277      	movs	r2, #119	; 0x77
 8002588:	4393      	bics	r3, r2
 800258a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800258c:	68bb      	ldr	r3, [r7, #8]
 800258e:	4a58      	ldr	r2, [pc, #352]	; (80026f0 <HAL_TIM_ConfigClockSource+0x1a4>)
 8002590:	4013      	ands	r3, r2
 8002592:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8002594:	687b      	ldr	r3, [r7, #4]
 8002596:	681b      	ldr	r3, [r3, #0]
 8002598:	68ba      	ldr	r2, [r7, #8]
 800259a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800259c:	683b      	ldr	r3, [r7, #0]
 800259e:	681b      	ldr	r3, [r3, #0]
 80025a0:	2280      	movs	r2, #128	; 0x80
 80025a2:	0192      	lsls	r2, r2, #6
 80025a4:	4293      	cmp	r3, r2
 80025a6:	d040      	beq.n	800262a <HAL_TIM_ConfigClockSource+0xde>
 80025a8:	2280      	movs	r2, #128	; 0x80
 80025aa:	0192      	lsls	r2, r2, #6
 80025ac:	4293      	cmp	r3, r2
 80025ae:	d900      	bls.n	80025b2 <HAL_TIM_ConfigClockSource+0x66>
 80025b0:	e088      	b.n	80026c4 <HAL_TIM_ConfigClockSource+0x178>
 80025b2:	2280      	movs	r2, #128	; 0x80
 80025b4:	0152      	lsls	r2, r2, #5
 80025b6:	4293      	cmp	r3, r2
 80025b8:	d100      	bne.n	80025bc <HAL_TIM_ConfigClockSource+0x70>
 80025ba:	e088      	b.n	80026ce <HAL_TIM_ConfigClockSource+0x182>
 80025bc:	2280      	movs	r2, #128	; 0x80
 80025be:	0152      	lsls	r2, r2, #5
 80025c0:	4293      	cmp	r3, r2
 80025c2:	d900      	bls.n	80025c6 <HAL_TIM_ConfigClockSource+0x7a>
 80025c4:	e07e      	b.n	80026c4 <HAL_TIM_ConfigClockSource+0x178>
 80025c6:	2b70      	cmp	r3, #112	; 0x70
 80025c8:	d018      	beq.n	80025fc <HAL_TIM_ConfigClockSource+0xb0>
 80025ca:	d900      	bls.n	80025ce <HAL_TIM_ConfigClockSource+0x82>
 80025cc:	e07a      	b.n	80026c4 <HAL_TIM_ConfigClockSource+0x178>
 80025ce:	2b60      	cmp	r3, #96	; 0x60
 80025d0:	d04f      	beq.n	8002672 <HAL_TIM_ConfigClockSource+0x126>
 80025d2:	d900      	bls.n	80025d6 <HAL_TIM_ConfigClockSource+0x8a>
 80025d4:	e076      	b.n	80026c4 <HAL_TIM_ConfigClockSource+0x178>
 80025d6:	2b50      	cmp	r3, #80	; 0x50
 80025d8:	d03b      	beq.n	8002652 <HAL_TIM_ConfigClockSource+0x106>
 80025da:	d900      	bls.n	80025de <HAL_TIM_ConfigClockSource+0x92>
 80025dc:	e072      	b.n	80026c4 <HAL_TIM_ConfigClockSource+0x178>
 80025de:	2b40      	cmp	r3, #64	; 0x40
 80025e0:	d057      	beq.n	8002692 <HAL_TIM_ConfigClockSource+0x146>
 80025e2:	d900      	bls.n	80025e6 <HAL_TIM_ConfigClockSource+0x9a>
 80025e4:	e06e      	b.n	80026c4 <HAL_TIM_ConfigClockSource+0x178>
 80025e6:	2b30      	cmp	r3, #48	; 0x30
 80025e8:	d063      	beq.n	80026b2 <HAL_TIM_ConfigClockSource+0x166>
 80025ea:	d86b      	bhi.n	80026c4 <HAL_TIM_ConfigClockSource+0x178>
 80025ec:	2b20      	cmp	r3, #32
 80025ee:	d060      	beq.n	80026b2 <HAL_TIM_ConfigClockSource+0x166>
 80025f0:	d868      	bhi.n	80026c4 <HAL_TIM_ConfigClockSource+0x178>
 80025f2:	2b00      	cmp	r3, #0
 80025f4:	d05d      	beq.n	80026b2 <HAL_TIM_ConfigClockSource+0x166>
 80025f6:	2b10      	cmp	r3, #16
 80025f8:	d05b      	beq.n	80026b2 <HAL_TIM_ConfigClockSource+0x166>
 80025fa:	e063      	b.n	80026c4 <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80025fc:	687b      	ldr	r3, [r7, #4]
 80025fe:	6818      	ldr	r0, [r3, #0]
 8002600:	683b      	ldr	r3, [r7, #0]
 8002602:	6899      	ldr	r1, [r3, #8]
 8002604:	683b      	ldr	r3, [r7, #0]
 8002606:	685a      	ldr	r2, [r3, #4]
 8002608:	683b      	ldr	r3, [r7, #0]
 800260a:	68db      	ldr	r3, [r3, #12]
 800260c:	f000 fb90 	bl	8002d30 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8002610:	687b      	ldr	r3, [r7, #4]
 8002612:	681b      	ldr	r3, [r3, #0]
 8002614:	689b      	ldr	r3, [r3, #8]
 8002616:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8002618:	68bb      	ldr	r3, [r7, #8]
 800261a:	2277      	movs	r2, #119	; 0x77
 800261c:	4313      	orrs	r3, r2
 800261e:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8002620:	687b      	ldr	r3, [r7, #4]
 8002622:	681b      	ldr	r3, [r3, #0]
 8002624:	68ba      	ldr	r2, [r7, #8]
 8002626:	609a      	str	r2, [r3, #8]
      break;
 8002628:	e052      	b.n	80026d0 <HAL_TIM_ConfigClockSource+0x184>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800262a:	687b      	ldr	r3, [r7, #4]
 800262c:	6818      	ldr	r0, [r3, #0]
 800262e:	683b      	ldr	r3, [r7, #0]
 8002630:	6899      	ldr	r1, [r3, #8]
 8002632:	683b      	ldr	r3, [r7, #0]
 8002634:	685a      	ldr	r2, [r3, #4]
 8002636:	683b      	ldr	r3, [r7, #0]
 8002638:	68db      	ldr	r3, [r3, #12]
 800263a:	f000 fb79 	bl	8002d30 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800263e:	687b      	ldr	r3, [r7, #4]
 8002640:	681b      	ldr	r3, [r3, #0]
 8002642:	689a      	ldr	r2, [r3, #8]
 8002644:	687b      	ldr	r3, [r7, #4]
 8002646:	681b      	ldr	r3, [r3, #0]
 8002648:	2180      	movs	r1, #128	; 0x80
 800264a:	01c9      	lsls	r1, r1, #7
 800264c:	430a      	orrs	r2, r1
 800264e:	609a      	str	r2, [r3, #8]
      break;
 8002650:	e03e      	b.n	80026d0 <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8002652:	687b      	ldr	r3, [r7, #4]
 8002654:	6818      	ldr	r0, [r3, #0]
 8002656:	683b      	ldr	r3, [r7, #0]
 8002658:	6859      	ldr	r1, [r3, #4]
 800265a:	683b      	ldr	r3, [r7, #0]
 800265c:	68db      	ldr	r3, [r3, #12]
 800265e:	001a      	movs	r2, r3
 8002660:	f000 faec 	bl	8002c3c <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8002664:	687b      	ldr	r3, [r7, #4]
 8002666:	681b      	ldr	r3, [r3, #0]
 8002668:	2150      	movs	r1, #80	; 0x50
 800266a:	0018      	movs	r0, r3
 800266c:	f000 fb46 	bl	8002cfc <TIM_ITRx_SetConfig>
      break;
 8002670:	e02e      	b.n	80026d0 <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8002672:	687b      	ldr	r3, [r7, #4]
 8002674:	6818      	ldr	r0, [r3, #0]
 8002676:	683b      	ldr	r3, [r7, #0]
 8002678:	6859      	ldr	r1, [r3, #4]
 800267a:	683b      	ldr	r3, [r7, #0]
 800267c:	68db      	ldr	r3, [r3, #12]
 800267e:	001a      	movs	r2, r3
 8002680:	f000 fb0a 	bl	8002c98 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8002684:	687b      	ldr	r3, [r7, #4]
 8002686:	681b      	ldr	r3, [r3, #0]
 8002688:	2160      	movs	r1, #96	; 0x60
 800268a:	0018      	movs	r0, r3
 800268c:	f000 fb36 	bl	8002cfc <TIM_ITRx_SetConfig>
      break;
 8002690:	e01e      	b.n	80026d0 <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8002692:	687b      	ldr	r3, [r7, #4]
 8002694:	6818      	ldr	r0, [r3, #0]
 8002696:	683b      	ldr	r3, [r7, #0]
 8002698:	6859      	ldr	r1, [r3, #4]
 800269a:	683b      	ldr	r3, [r7, #0]
 800269c:	68db      	ldr	r3, [r3, #12]
 800269e:	001a      	movs	r2, r3
 80026a0:	f000 facc 	bl	8002c3c <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80026a4:	687b      	ldr	r3, [r7, #4]
 80026a6:	681b      	ldr	r3, [r3, #0]
 80026a8:	2140      	movs	r1, #64	; 0x40
 80026aa:	0018      	movs	r0, r3
 80026ac:	f000 fb26 	bl	8002cfc <TIM_ITRx_SetConfig>
      break;
 80026b0:	e00e      	b.n	80026d0 <HAL_TIM_ConfigClockSource+0x184>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80026b2:	687b      	ldr	r3, [r7, #4]
 80026b4:	681a      	ldr	r2, [r3, #0]
 80026b6:	683b      	ldr	r3, [r7, #0]
 80026b8:	681b      	ldr	r3, [r3, #0]
 80026ba:	0019      	movs	r1, r3
 80026bc:	0010      	movs	r0, r2
 80026be:	f000 fb1d 	bl	8002cfc <TIM_ITRx_SetConfig>
      break;
 80026c2:	e005      	b.n	80026d0 <HAL_TIM_ConfigClockSource+0x184>
    }

    default:
      status = HAL_ERROR;
 80026c4:	230f      	movs	r3, #15
 80026c6:	18fb      	adds	r3, r7, r3
 80026c8:	2201      	movs	r2, #1
 80026ca:	701a      	strb	r2, [r3, #0]
      break;
 80026cc:	e000      	b.n	80026d0 <HAL_TIM_ConfigClockSource+0x184>
      break;
 80026ce:	46c0      	nop			; (mov r8, r8)
  }
  htim->State = HAL_TIM_STATE_READY;
 80026d0:	687b      	ldr	r3, [r7, #4]
 80026d2:	223d      	movs	r2, #61	; 0x3d
 80026d4:	2101      	movs	r1, #1
 80026d6:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 80026d8:	687b      	ldr	r3, [r7, #4]
 80026da:	223c      	movs	r2, #60	; 0x3c
 80026dc:	2100      	movs	r1, #0
 80026de:	5499      	strb	r1, [r3, r2]

  return status;
 80026e0:	230f      	movs	r3, #15
 80026e2:	18fb      	adds	r3, r7, r3
 80026e4:	781b      	ldrb	r3, [r3, #0]
}
 80026e6:	0018      	movs	r0, r3
 80026e8:	46bd      	mov	sp, r7
 80026ea:	b004      	add	sp, #16
 80026ec:	bd80      	pop	{r7, pc}
 80026ee:	46c0      	nop			; (mov r8, r8)
 80026f0:	ffff00ff 	.word	0xffff00ff

080026f4 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80026f4:	b580      	push	{r7, lr}
 80026f6:	b082      	sub	sp, #8
 80026f8:	af00      	add	r7, sp, #0
 80026fa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 80026fc:	46c0      	nop			; (mov r8, r8)
 80026fe:	46bd      	mov	sp, r7
 8002700:	b002      	add	sp, #8
 8002702:	bd80      	pop	{r7, pc}

08002704 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002704:	b580      	push	{r7, lr}
 8002706:	b082      	sub	sp, #8
 8002708:	af00      	add	r7, sp, #0
 800270a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800270c:	46c0      	nop			; (mov r8, r8)
 800270e:	46bd      	mov	sp, r7
 8002710:	b002      	add	sp, #8
 8002712:	bd80      	pop	{r7, pc}

08002714 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8002714:	b580      	push	{r7, lr}
 8002716:	b082      	sub	sp, #8
 8002718:	af00      	add	r7, sp, #0
 800271a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800271c:	46c0      	nop			; (mov r8, r8)
 800271e:	46bd      	mov	sp, r7
 8002720:	b002      	add	sp, #8
 8002722:	bd80      	pop	{r7, pc}

08002724 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8002724:	b580      	push	{r7, lr}
 8002726:	b082      	sub	sp, #8
 8002728:	af00      	add	r7, sp, #0
 800272a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800272c:	46c0      	nop			; (mov r8, r8)
 800272e:	46bd      	mov	sp, r7
 8002730:	b002      	add	sp, #8
 8002732:	bd80      	pop	{r7, pc}

08002734 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8002734:	b580      	push	{r7, lr}
 8002736:	b082      	sub	sp, #8
 8002738:	af00      	add	r7, sp, #0
 800273a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800273c:	46c0      	nop			; (mov r8, r8)
 800273e:	46bd      	mov	sp, r7
 8002740:	b002      	add	sp, #8
 8002742:	bd80      	pop	{r7, pc}

08002744 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8002744:	b580      	push	{r7, lr}
 8002746:	b084      	sub	sp, #16
 8002748:	af00      	add	r7, sp, #0
 800274a:	6078      	str	r0, [r7, #4]
 800274c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800274e:	687b      	ldr	r3, [r7, #4]
 8002750:	681b      	ldr	r3, [r3, #0]
 8002752:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002754:	687b      	ldr	r3, [r7, #4]
 8002756:	4a34      	ldr	r2, [pc, #208]	; (8002828 <TIM_Base_SetConfig+0xe4>)
 8002758:	4293      	cmp	r3, r2
 800275a:	d008      	beq.n	800276e <TIM_Base_SetConfig+0x2a>
 800275c:	687a      	ldr	r2, [r7, #4]
 800275e:	2380      	movs	r3, #128	; 0x80
 8002760:	05db      	lsls	r3, r3, #23
 8002762:	429a      	cmp	r2, r3
 8002764:	d003      	beq.n	800276e <TIM_Base_SetConfig+0x2a>
 8002766:	687b      	ldr	r3, [r7, #4]
 8002768:	4a30      	ldr	r2, [pc, #192]	; (800282c <TIM_Base_SetConfig+0xe8>)
 800276a:	4293      	cmp	r3, r2
 800276c:	d108      	bne.n	8002780 <TIM_Base_SetConfig+0x3c>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800276e:	68fb      	ldr	r3, [r7, #12]
 8002770:	2270      	movs	r2, #112	; 0x70
 8002772:	4393      	bics	r3, r2
 8002774:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002776:	683b      	ldr	r3, [r7, #0]
 8002778:	685b      	ldr	r3, [r3, #4]
 800277a:	68fa      	ldr	r2, [r7, #12]
 800277c:	4313      	orrs	r3, r2
 800277e:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002780:	687b      	ldr	r3, [r7, #4]
 8002782:	4a29      	ldr	r2, [pc, #164]	; (8002828 <TIM_Base_SetConfig+0xe4>)
 8002784:	4293      	cmp	r3, r2
 8002786:	d018      	beq.n	80027ba <TIM_Base_SetConfig+0x76>
 8002788:	687a      	ldr	r2, [r7, #4]
 800278a:	2380      	movs	r3, #128	; 0x80
 800278c:	05db      	lsls	r3, r3, #23
 800278e:	429a      	cmp	r2, r3
 8002790:	d013      	beq.n	80027ba <TIM_Base_SetConfig+0x76>
 8002792:	687b      	ldr	r3, [r7, #4]
 8002794:	4a25      	ldr	r2, [pc, #148]	; (800282c <TIM_Base_SetConfig+0xe8>)
 8002796:	4293      	cmp	r3, r2
 8002798:	d00f      	beq.n	80027ba <TIM_Base_SetConfig+0x76>
 800279a:	687b      	ldr	r3, [r7, #4]
 800279c:	4a24      	ldr	r2, [pc, #144]	; (8002830 <TIM_Base_SetConfig+0xec>)
 800279e:	4293      	cmp	r3, r2
 80027a0:	d00b      	beq.n	80027ba <TIM_Base_SetConfig+0x76>
 80027a2:	687b      	ldr	r3, [r7, #4]
 80027a4:	4a23      	ldr	r2, [pc, #140]	; (8002834 <TIM_Base_SetConfig+0xf0>)
 80027a6:	4293      	cmp	r3, r2
 80027a8:	d007      	beq.n	80027ba <TIM_Base_SetConfig+0x76>
 80027aa:	687b      	ldr	r3, [r7, #4]
 80027ac:	4a22      	ldr	r2, [pc, #136]	; (8002838 <TIM_Base_SetConfig+0xf4>)
 80027ae:	4293      	cmp	r3, r2
 80027b0:	d003      	beq.n	80027ba <TIM_Base_SetConfig+0x76>
 80027b2:	687b      	ldr	r3, [r7, #4]
 80027b4:	4a21      	ldr	r2, [pc, #132]	; (800283c <TIM_Base_SetConfig+0xf8>)
 80027b6:	4293      	cmp	r3, r2
 80027b8:	d108      	bne.n	80027cc <TIM_Base_SetConfig+0x88>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80027ba:	68fb      	ldr	r3, [r7, #12]
 80027bc:	4a20      	ldr	r2, [pc, #128]	; (8002840 <TIM_Base_SetConfig+0xfc>)
 80027be:	4013      	ands	r3, r2
 80027c0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80027c2:	683b      	ldr	r3, [r7, #0]
 80027c4:	68db      	ldr	r3, [r3, #12]
 80027c6:	68fa      	ldr	r2, [r7, #12]
 80027c8:	4313      	orrs	r3, r2
 80027ca:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80027cc:	68fb      	ldr	r3, [r7, #12]
 80027ce:	2280      	movs	r2, #128	; 0x80
 80027d0:	4393      	bics	r3, r2
 80027d2:	001a      	movs	r2, r3
 80027d4:	683b      	ldr	r3, [r7, #0]
 80027d6:	695b      	ldr	r3, [r3, #20]
 80027d8:	4313      	orrs	r3, r2
 80027da:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80027dc:	687b      	ldr	r3, [r7, #4]
 80027de:	68fa      	ldr	r2, [r7, #12]
 80027e0:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80027e2:	683b      	ldr	r3, [r7, #0]
 80027e4:	689a      	ldr	r2, [r3, #8]
 80027e6:	687b      	ldr	r3, [r7, #4]
 80027e8:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80027ea:	683b      	ldr	r3, [r7, #0]
 80027ec:	681a      	ldr	r2, [r3, #0]
 80027ee:	687b      	ldr	r3, [r7, #4]
 80027f0:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80027f2:	687b      	ldr	r3, [r7, #4]
 80027f4:	4a0c      	ldr	r2, [pc, #48]	; (8002828 <TIM_Base_SetConfig+0xe4>)
 80027f6:	4293      	cmp	r3, r2
 80027f8:	d00b      	beq.n	8002812 <TIM_Base_SetConfig+0xce>
 80027fa:	687b      	ldr	r3, [r7, #4]
 80027fc:	4a0d      	ldr	r2, [pc, #52]	; (8002834 <TIM_Base_SetConfig+0xf0>)
 80027fe:	4293      	cmp	r3, r2
 8002800:	d007      	beq.n	8002812 <TIM_Base_SetConfig+0xce>
 8002802:	687b      	ldr	r3, [r7, #4]
 8002804:	4a0c      	ldr	r2, [pc, #48]	; (8002838 <TIM_Base_SetConfig+0xf4>)
 8002806:	4293      	cmp	r3, r2
 8002808:	d003      	beq.n	8002812 <TIM_Base_SetConfig+0xce>
 800280a:	687b      	ldr	r3, [r7, #4]
 800280c:	4a0b      	ldr	r2, [pc, #44]	; (800283c <TIM_Base_SetConfig+0xf8>)
 800280e:	4293      	cmp	r3, r2
 8002810:	d103      	bne.n	800281a <TIM_Base_SetConfig+0xd6>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002812:	683b      	ldr	r3, [r7, #0]
 8002814:	691a      	ldr	r2, [r3, #16]
 8002816:	687b      	ldr	r3, [r7, #4]
 8002818:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800281a:	687b      	ldr	r3, [r7, #4]
 800281c:	2201      	movs	r2, #1
 800281e:	615a      	str	r2, [r3, #20]
}
 8002820:	46c0      	nop			; (mov r8, r8)
 8002822:	46bd      	mov	sp, r7
 8002824:	b004      	add	sp, #16
 8002826:	bd80      	pop	{r7, pc}
 8002828:	40012c00 	.word	0x40012c00
 800282c:	40000400 	.word	0x40000400
 8002830:	40002000 	.word	0x40002000
 8002834:	40014000 	.word	0x40014000
 8002838:	40014400 	.word	0x40014400
 800283c:	40014800 	.word	0x40014800
 8002840:	fffffcff 	.word	0xfffffcff

08002844 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8002844:	b580      	push	{r7, lr}
 8002846:	b086      	sub	sp, #24
 8002848:	af00      	add	r7, sp, #0
 800284a:	6078      	str	r0, [r7, #4]
 800284c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800284e:	687b      	ldr	r3, [r7, #4]
 8002850:	6a1b      	ldr	r3, [r3, #32]
 8002852:	2201      	movs	r2, #1
 8002854:	4393      	bics	r3, r2
 8002856:	001a      	movs	r2, r3
 8002858:	687b      	ldr	r3, [r7, #4]
 800285a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800285c:	687b      	ldr	r3, [r7, #4]
 800285e:	6a1b      	ldr	r3, [r3, #32]
 8002860:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002862:	687b      	ldr	r3, [r7, #4]
 8002864:	685b      	ldr	r3, [r3, #4]
 8002866:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8002868:	687b      	ldr	r3, [r7, #4]
 800286a:	699b      	ldr	r3, [r3, #24]
 800286c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800286e:	68fb      	ldr	r3, [r7, #12]
 8002870:	2270      	movs	r2, #112	; 0x70
 8002872:	4393      	bics	r3, r2
 8002874:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8002876:	68fb      	ldr	r3, [r7, #12]
 8002878:	2203      	movs	r2, #3
 800287a:	4393      	bics	r3, r2
 800287c:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800287e:	683b      	ldr	r3, [r7, #0]
 8002880:	681b      	ldr	r3, [r3, #0]
 8002882:	68fa      	ldr	r2, [r7, #12]
 8002884:	4313      	orrs	r3, r2
 8002886:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8002888:	697b      	ldr	r3, [r7, #20]
 800288a:	2202      	movs	r2, #2
 800288c:	4393      	bics	r3, r2
 800288e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8002890:	683b      	ldr	r3, [r7, #0]
 8002892:	689b      	ldr	r3, [r3, #8]
 8002894:	697a      	ldr	r2, [r7, #20]
 8002896:	4313      	orrs	r3, r2
 8002898:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800289a:	687b      	ldr	r3, [r7, #4]
 800289c:	4a27      	ldr	r2, [pc, #156]	; (800293c <TIM_OC1_SetConfig+0xf8>)
 800289e:	4293      	cmp	r3, r2
 80028a0:	d00b      	beq.n	80028ba <TIM_OC1_SetConfig+0x76>
 80028a2:	687b      	ldr	r3, [r7, #4]
 80028a4:	4a26      	ldr	r2, [pc, #152]	; (8002940 <TIM_OC1_SetConfig+0xfc>)
 80028a6:	4293      	cmp	r3, r2
 80028a8:	d007      	beq.n	80028ba <TIM_OC1_SetConfig+0x76>
 80028aa:	687b      	ldr	r3, [r7, #4]
 80028ac:	4a25      	ldr	r2, [pc, #148]	; (8002944 <TIM_OC1_SetConfig+0x100>)
 80028ae:	4293      	cmp	r3, r2
 80028b0:	d003      	beq.n	80028ba <TIM_OC1_SetConfig+0x76>
 80028b2:	687b      	ldr	r3, [r7, #4]
 80028b4:	4a24      	ldr	r2, [pc, #144]	; (8002948 <TIM_OC1_SetConfig+0x104>)
 80028b6:	4293      	cmp	r3, r2
 80028b8:	d10c      	bne.n	80028d4 <TIM_OC1_SetConfig+0x90>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80028ba:	697b      	ldr	r3, [r7, #20]
 80028bc:	2208      	movs	r2, #8
 80028be:	4393      	bics	r3, r2
 80028c0:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80028c2:	683b      	ldr	r3, [r7, #0]
 80028c4:	68db      	ldr	r3, [r3, #12]
 80028c6:	697a      	ldr	r2, [r7, #20]
 80028c8:	4313      	orrs	r3, r2
 80028ca:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80028cc:	697b      	ldr	r3, [r7, #20]
 80028ce:	2204      	movs	r2, #4
 80028d0:	4393      	bics	r3, r2
 80028d2:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80028d4:	687b      	ldr	r3, [r7, #4]
 80028d6:	4a19      	ldr	r2, [pc, #100]	; (800293c <TIM_OC1_SetConfig+0xf8>)
 80028d8:	4293      	cmp	r3, r2
 80028da:	d00b      	beq.n	80028f4 <TIM_OC1_SetConfig+0xb0>
 80028dc:	687b      	ldr	r3, [r7, #4]
 80028de:	4a18      	ldr	r2, [pc, #96]	; (8002940 <TIM_OC1_SetConfig+0xfc>)
 80028e0:	4293      	cmp	r3, r2
 80028e2:	d007      	beq.n	80028f4 <TIM_OC1_SetConfig+0xb0>
 80028e4:	687b      	ldr	r3, [r7, #4]
 80028e6:	4a17      	ldr	r2, [pc, #92]	; (8002944 <TIM_OC1_SetConfig+0x100>)
 80028e8:	4293      	cmp	r3, r2
 80028ea:	d003      	beq.n	80028f4 <TIM_OC1_SetConfig+0xb0>
 80028ec:	687b      	ldr	r3, [r7, #4]
 80028ee:	4a16      	ldr	r2, [pc, #88]	; (8002948 <TIM_OC1_SetConfig+0x104>)
 80028f0:	4293      	cmp	r3, r2
 80028f2:	d111      	bne.n	8002918 <TIM_OC1_SetConfig+0xd4>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80028f4:	693b      	ldr	r3, [r7, #16]
 80028f6:	4a15      	ldr	r2, [pc, #84]	; (800294c <TIM_OC1_SetConfig+0x108>)
 80028f8:	4013      	ands	r3, r2
 80028fa:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80028fc:	693b      	ldr	r3, [r7, #16]
 80028fe:	4a14      	ldr	r2, [pc, #80]	; (8002950 <TIM_OC1_SetConfig+0x10c>)
 8002900:	4013      	ands	r3, r2
 8002902:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8002904:	683b      	ldr	r3, [r7, #0]
 8002906:	695b      	ldr	r3, [r3, #20]
 8002908:	693a      	ldr	r2, [r7, #16]
 800290a:	4313      	orrs	r3, r2
 800290c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800290e:	683b      	ldr	r3, [r7, #0]
 8002910:	699b      	ldr	r3, [r3, #24]
 8002912:	693a      	ldr	r2, [r7, #16]
 8002914:	4313      	orrs	r3, r2
 8002916:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002918:	687b      	ldr	r3, [r7, #4]
 800291a:	693a      	ldr	r2, [r7, #16]
 800291c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800291e:	687b      	ldr	r3, [r7, #4]
 8002920:	68fa      	ldr	r2, [r7, #12]
 8002922:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8002924:	683b      	ldr	r3, [r7, #0]
 8002926:	685a      	ldr	r2, [r3, #4]
 8002928:	687b      	ldr	r3, [r7, #4]
 800292a:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800292c:	687b      	ldr	r3, [r7, #4]
 800292e:	697a      	ldr	r2, [r7, #20]
 8002930:	621a      	str	r2, [r3, #32]
}
 8002932:	46c0      	nop			; (mov r8, r8)
 8002934:	46bd      	mov	sp, r7
 8002936:	b006      	add	sp, #24
 8002938:	bd80      	pop	{r7, pc}
 800293a:	46c0      	nop			; (mov r8, r8)
 800293c:	40012c00 	.word	0x40012c00
 8002940:	40014000 	.word	0x40014000
 8002944:	40014400 	.word	0x40014400
 8002948:	40014800 	.word	0x40014800
 800294c:	fffffeff 	.word	0xfffffeff
 8002950:	fffffdff 	.word	0xfffffdff

08002954 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8002954:	b580      	push	{r7, lr}
 8002956:	b086      	sub	sp, #24
 8002958:	af00      	add	r7, sp, #0
 800295a:	6078      	str	r0, [r7, #4]
 800295c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800295e:	687b      	ldr	r3, [r7, #4]
 8002960:	6a1b      	ldr	r3, [r3, #32]
 8002962:	2210      	movs	r2, #16
 8002964:	4393      	bics	r3, r2
 8002966:	001a      	movs	r2, r3
 8002968:	687b      	ldr	r3, [r7, #4]
 800296a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800296c:	687b      	ldr	r3, [r7, #4]
 800296e:	6a1b      	ldr	r3, [r3, #32]
 8002970:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002972:	687b      	ldr	r3, [r7, #4]
 8002974:	685b      	ldr	r3, [r3, #4]
 8002976:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8002978:	687b      	ldr	r3, [r7, #4]
 800297a:	699b      	ldr	r3, [r3, #24]
 800297c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800297e:	68fb      	ldr	r3, [r7, #12]
 8002980:	4a2e      	ldr	r2, [pc, #184]	; (8002a3c <TIM_OC2_SetConfig+0xe8>)
 8002982:	4013      	ands	r3, r2
 8002984:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8002986:	68fb      	ldr	r3, [r7, #12]
 8002988:	4a2d      	ldr	r2, [pc, #180]	; (8002a40 <TIM_OC2_SetConfig+0xec>)
 800298a:	4013      	ands	r3, r2
 800298c:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800298e:	683b      	ldr	r3, [r7, #0]
 8002990:	681b      	ldr	r3, [r3, #0]
 8002992:	021b      	lsls	r3, r3, #8
 8002994:	68fa      	ldr	r2, [r7, #12]
 8002996:	4313      	orrs	r3, r2
 8002998:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800299a:	697b      	ldr	r3, [r7, #20]
 800299c:	2220      	movs	r2, #32
 800299e:	4393      	bics	r3, r2
 80029a0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80029a2:	683b      	ldr	r3, [r7, #0]
 80029a4:	689b      	ldr	r3, [r3, #8]
 80029a6:	011b      	lsls	r3, r3, #4
 80029a8:	697a      	ldr	r2, [r7, #20]
 80029aa:	4313      	orrs	r3, r2
 80029ac:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80029ae:	687b      	ldr	r3, [r7, #4]
 80029b0:	4a24      	ldr	r2, [pc, #144]	; (8002a44 <TIM_OC2_SetConfig+0xf0>)
 80029b2:	4293      	cmp	r3, r2
 80029b4:	d10d      	bne.n	80029d2 <TIM_OC2_SetConfig+0x7e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80029b6:	697b      	ldr	r3, [r7, #20]
 80029b8:	2280      	movs	r2, #128	; 0x80
 80029ba:	4393      	bics	r3, r2
 80029bc:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80029be:	683b      	ldr	r3, [r7, #0]
 80029c0:	68db      	ldr	r3, [r3, #12]
 80029c2:	011b      	lsls	r3, r3, #4
 80029c4:	697a      	ldr	r2, [r7, #20]
 80029c6:	4313      	orrs	r3, r2
 80029c8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80029ca:	697b      	ldr	r3, [r7, #20]
 80029cc:	2240      	movs	r2, #64	; 0x40
 80029ce:	4393      	bics	r3, r2
 80029d0:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80029d2:	687b      	ldr	r3, [r7, #4]
 80029d4:	4a1b      	ldr	r2, [pc, #108]	; (8002a44 <TIM_OC2_SetConfig+0xf0>)
 80029d6:	4293      	cmp	r3, r2
 80029d8:	d00b      	beq.n	80029f2 <TIM_OC2_SetConfig+0x9e>
 80029da:	687b      	ldr	r3, [r7, #4]
 80029dc:	4a1a      	ldr	r2, [pc, #104]	; (8002a48 <TIM_OC2_SetConfig+0xf4>)
 80029de:	4293      	cmp	r3, r2
 80029e0:	d007      	beq.n	80029f2 <TIM_OC2_SetConfig+0x9e>
 80029e2:	687b      	ldr	r3, [r7, #4]
 80029e4:	4a19      	ldr	r2, [pc, #100]	; (8002a4c <TIM_OC2_SetConfig+0xf8>)
 80029e6:	4293      	cmp	r3, r2
 80029e8:	d003      	beq.n	80029f2 <TIM_OC2_SetConfig+0x9e>
 80029ea:	687b      	ldr	r3, [r7, #4]
 80029ec:	4a18      	ldr	r2, [pc, #96]	; (8002a50 <TIM_OC2_SetConfig+0xfc>)
 80029ee:	4293      	cmp	r3, r2
 80029f0:	d113      	bne.n	8002a1a <TIM_OC2_SetConfig+0xc6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80029f2:	693b      	ldr	r3, [r7, #16]
 80029f4:	4a17      	ldr	r2, [pc, #92]	; (8002a54 <TIM_OC2_SetConfig+0x100>)
 80029f6:	4013      	ands	r3, r2
 80029f8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80029fa:	693b      	ldr	r3, [r7, #16]
 80029fc:	4a16      	ldr	r2, [pc, #88]	; (8002a58 <TIM_OC2_SetConfig+0x104>)
 80029fe:	4013      	ands	r3, r2
 8002a00:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8002a02:	683b      	ldr	r3, [r7, #0]
 8002a04:	695b      	ldr	r3, [r3, #20]
 8002a06:	009b      	lsls	r3, r3, #2
 8002a08:	693a      	ldr	r2, [r7, #16]
 8002a0a:	4313      	orrs	r3, r2
 8002a0c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8002a0e:	683b      	ldr	r3, [r7, #0]
 8002a10:	699b      	ldr	r3, [r3, #24]
 8002a12:	009b      	lsls	r3, r3, #2
 8002a14:	693a      	ldr	r2, [r7, #16]
 8002a16:	4313      	orrs	r3, r2
 8002a18:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002a1a:	687b      	ldr	r3, [r7, #4]
 8002a1c:	693a      	ldr	r2, [r7, #16]
 8002a1e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8002a20:	687b      	ldr	r3, [r7, #4]
 8002a22:	68fa      	ldr	r2, [r7, #12]
 8002a24:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8002a26:	683b      	ldr	r3, [r7, #0]
 8002a28:	685a      	ldr	r2, [r3, #4]
 8002a2a:	687b      	ldr	r3, [r7, #4]
 8002a2c:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002a2e:	687b      	ldr	r3, [r7, #4]
 8002a30:	697a      	ldr	r2, [r7, #20]
 8002a32:	621a      	str	r2, [r3, #32]
}
 8002a34:	46c0      	nop			; (mov r8, r8)
 8002a36:	46bd      	mov	sp, r7
 8002a38:	b006      	add	sp, #24
 8002a3a:	bd80      	pop	{r7, pc}
 8002a3c:	ffff8fff 	.word	0xffff8fff
 8002a40:	fffffcff 	.word	0xfffffcff
 8002a44:	40012c00 	.word	0x40012c00
 8002a48:	40014000 	.word	0x40014000
 8002a4c:	40014400 	.word	0x40014400
 8002a50:	40014800 	.word	0x40014800
 8002a54:	fffffbff 	.word	0xfffffbff
 8002a58:	fffff7ff 	.word	0xfffff7ff

08002a5c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8002a5c:	b580      	push	{r7, lr}
 8002a5e:	b086      	sub	sp, #24
 8002a60:	af00      	add	r7, sp, #0
 8002a62:	6078      	str	r0, [r7, #4]
 8002a64:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8002a66:	687b      	ldr	r3, [r7, #4]
 8002a68:	6a1b      	ldr	r3, [r3, #32]
 8002a6a:	4a35      	ldr	r2, [pc, #212]	; (8002b40 <TIM_OC3_SetConfig+0xe4>)
 8002a6c:	401a      	ands	r2, r3
 8002a6e:	687b      	ldr	r3, [r7, #4]
 8002a70:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002a72:	687b      	ldr	r3, [r7, #4]
 8002a74:	6a1b      	ldr	r3, [r3, #32]
 8002a76:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002a78:	687b      	ldr	r3, [r7, #4]
 8002a7a:	685b      	ldr	r3, [r3, #4]
 8002a7c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8002a7e:	687b      	ldr	r3, [r7, #4]
 8002a80:	69db      	ldr	r3, [r3, #28]
 8002a82:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8002a84:	68fb      	ldr	r3, [r7, #12]
 8002a86:	2270      	movs	r2, #112	; 0x70
 8002a88:	4393      	bics	r3, r2
 8002a8a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8002a8c:	68fb      	ldr	r3, [r7, #12]
 8002a8e:	2203      	movs	r2, #3
 8002a90:	4393      	bics	r3, r2
 8002a92:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8002a94:	683b      	ldr	r3, [r7, #0]
 8002a96:	681b      	ldr	r3, [r3, #0]
 8002a98:	68fa      	ldr	r2, [r7, #12]
 8002a9a:	4313      	orrs	r3, r2
 8002a9c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8002a9e:	697b      	ldr	r3, [r7, #20]
 8002aa0:	4a28      	ldr	r2, [pc, #160]	; (8002b44 <TIM_OC3_SetConfig+0xe8>)
 8002aa2:	4013      	ands	r3, r2
 8002aa4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8002aa6:	683b      	ldr	r3, [r7, #0]
 8002aa8:	689b      	ldr	r3, [r3, #8]
 8002aaa:	021b      	lsls	r3, r3, #8
 8002aac:	697a      	ldr	r2, [r7, #20]
 8002aae:	4313      	orrs	r3, r2
 8002ab0:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8002ab2:	687b      	ldr	r3, [r7, #4]
 8002ab4:	4a24      	ldr	r2, [pc, #144]	; (8002b48 <TIM_OC3_SetConfig+0xec>)
 8002ab6:	4293      	cmp	r3, r2
 8002ab8:	d10d      	bne.n	8002ad6 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8002aba:	697b      	ldr	r3, [r7, #20]
 8002abc:	4a23      	ldr	r2, [pc, #140]	; (8002b4c <TIM_OC3_SetConfig+0xf0>)
 8002abe:	4013      	ands	r3, r2
 8002ac0:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8002ac2:	683b      	ldr	r3, [r7, #0]
 8002ac4:	68db      	ldr	r3, [r3, #12]
 8002ac6:	021b      	lsls	r3, r3, #8
 8002ac8:	697a      	ldr	r2, [r7, #20]
 8002aca:	4313      	orrs	r3, r2
 8002acc:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8002ace:	697b      	ldr	r3, [r7, #20]
 8002ad0:	4a1f      	ldr	r2, [pc, #124]	; (8002b50 <TIM_OC3_SetConfig+0xf4>)
 8002ad2:	4013      	ands	r3, r2
 8002ad4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002ad6:	687b      	ldr	r3, [r7, #4]
 8002ad8:	4a1b      	ldr	r2, [pc, #108]	; (8002b48 <TIM_OC3_SetConfig+0xec>)
 8002ada:	4293      	cmp	r3, r2
 8002adc:	d00b      	beq.n	8002af6 <TIM_OC3_SetConfig+0x9a>
 8002ade:	687b      	ldr	r3, [r7, #4]
 8002ae0:	4a1c      	ldr	r2, [pc, #112]	; (8002b54 <TIM_OC3_SetConfig+0xf8>)
 8002ae2:	4293      	cmp	r3, r2
 8002ae4:	d007      	beq.n	8002af6 <TIM_OC3_SetConfig+0x9a>
 8002ae6:	687b      	ldr	r3, [r7, #4]
 8002ae8:	4a1b      	ldr	r2, [pc, #108]	; (8002b58 <TIM_OC3_SetConfig+0xfc>)
 8002aea:	4293      	cmp	r3, r2
 8002aec:	d003      	beq.n	8002af6 <TIM_OC3_SetConfig+0x9a>
 8002aee:	687b      	ldr	r3, [r7, #4]
 8002af0:	4a1a      	ldr	r2, [pc, #104]	; (8002b5c <TIM_OC3_SetConfig+0x100>)
 8002af2:	4293      	cmp	r3, r2
 8002af4:	d113      	bne.n	8002b1e <TIM_OC3_SetConfig+0xc2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8002af6:	693b      	ldr	r3, [r7, #16]
 8002af8:	4a19      	ldr	r2, [pc, #100]	; (8002b60 <TIM_OC3_SetConfig+0x104>)
 8002afa:	4013      	ands	r3, r2
 8002afc:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8002afe:	693b      	ldr	r3, [r7, #16]
 8002b00:	4a18      	ldr	r2, [pc, #96]	; (8002b64 <TIM_OC3_SetConfig+0x108>)
 8002b02:	4013      	ands	r3, r2
 8002b04:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8002b06:	683b      	ldr	r3, [r7, #0]
 8002b08:	695b      	ldr	r3, [r3, #20]
 8002b0a:	011b      	lsls	r3, r3, #4
 8002b0c:	693a      	ldr	r2, [r7, #16]
 8002b0e:	4313      	orrs	r3, r2
 8002b10:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8002b12:	683b      	ldr	r3, [r7, #0]
 8002b14:	699b      	ldr	r3, [r3, #24]
 8002b16:	011b      	lsls	r3, r3, #4
 8002b18:	693a      	ldr	r2, [r7, #16]
 8002b1a:	4313      	orrs	r3, r2
 8002b1c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002b1e:	687b      	ldr	r3, [r7, #4]
 8002b20:	693a      	ldr	r2, [r7, #16]
 8002b22:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8002b24:	687b      	ldr	r3, [r7, #4]
 8002b26:	68fa      	ldr	r2, [r7, #12]
 8002b28:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8002b2a:	683b      	ldr	r3, [r7, #0]
 8002b2c:	685a      	ldr	r2, [r3, #4]
 8002b2e:	687b      	ldr	r3, [r7, #4]
 8002b30:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002b32:	687b      	ldr	r3, [r7, #4]
 8002b34:	697a      	ldr	r2, [r7, #20]
 8002b36:	621a      	str	r2, [r3, #32]
}
 8002b38:	46c0      	nop			; (mov r8, r8)
 8002b3a:	46bd      	mov	sp, r7
 8002b3c:	b006      	add	sp, #24
 8002b3e:	bd80      	pop	{r7, pc}
 8002b40:	fffffeff 	.word	0xfffffeff
 8002b44:	fffffdff 	.word	0xfffffdff
 8002b48:	40012c00 	.word	0x40012c00
 8002b4c:	fffff7ff 	.word	0xfffff7ff
 8002b50:	fffffbff 	.word	0xfffffbff
 8002b54:	40014000 	.word	0x40014000
 8002b58:	40014400 	.word	0x40014400
 8002b5c:	40014800 	.word	0x40014800
 8002b60:	ffffefff 	.word	0xffffefff
 8002b64:	ffffdfff 	.word	0xffffdfff

08002b68 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8002b68:	b580      	push	{r7, lr}
 8002b6a:	b086      	sub	sp, #24
 8002b6c:	af00      	add	r7, sp, #0
 8002b6e:	6078      	str	r0, [r7, #4]
 8002b70:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8002b72:	687b      	ldr	r3, [r7, #4]
 8002b74:	6a1b      	ldr	r3, [r3, #32]
 8002b76:	4a28      	ldr	r2, [pc, #160]	; (8002c18 <TIM_OC4_SetConfig+0xb0>)
 8002b78:	401a      	ands	r2, r3
 8002b7a:	687b      	ldr	r3, [r7, #4]
 8002b7c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002b7e:	687b      	ldr	r3, [r7, #4]
 8002b80:	6a1b      	ldr	r3, [r3, #32]
 8002b82:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002b84:	687b      	ldr	r3, [r7, #4]
 8002b86:	685b      	ldr	r3, [r3, #4]
 8002b88:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8002b8a:	687b      	ldr	r3, [r7, #4]
 8002b8c:	69db      	ldr	r3, [r3, #28]
 8002b8e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8002b90:	68fb      	ldr	r3, [r7, #12]
 8002b92:	4a22      	ldr	r2, [pc, #136]	; (8002c1c <TIM_OC4_SetConfig+0xb4>)
 8002b94:	4013      	ands	r3, r2
 8002b96:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8002b98:	68fb      	ldr	r3, [r7, #12]
 8002b9a:	4a21      	ldr	r2, [pc, #132]	; (8002c20 <TIM_OC4_SetConfig+0xb8>)
 8002b9c:	4013      	ands	r3, r2
 8002b9e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8002ba0:	683b      	ldr	r3, [r7, #0]
 8002ba2:	681b      	ldr	r3, [r3, #0]
 8002ba4:	021b      	lsls	r3, r3, #8
 8002ba6:	68fa      	ldr	r2, [r7, #12]
 8002ba8:	4313      	orrs	r3, r2
 8002baa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8002bac:	693b      	ldr	r3, [r7, #16]
 8002bae:	4a1d      	ldr	r2, [pc, #116]	; (8002c24 <TIM_OC4_SetConfig+0xbc>)
 8002bb0:	4013      	ands	r3, r2
 8002bb2:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8002bb4:	683b      	ldr	r3, [r7, #0]
 8002bb6:	689b      	ldr	r3, [r3, #8]
 8002bb8:	031b      	lsls	r3, r3, #12
 8002bba:	693a      	ldr	r2, [r7, #16]
 8002bbc:	4313      	orrs	r3, r2
 8002bbe:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002bc0:	687b      	ldr	r3, [r7, #4]
 8002bc2:	4a19      	ldr	r2, [pc, #100]	; (8002c28 <TIM_OC4_SetConfig+0xc0>)
 8002bc4:	4293      	cmp	r3, r2
 8002bc6:	d00b      	beq.n	8002be0 <TIM_OC4_SetConfig+0x78>
 8002bc8:	687b      	ldr	r3, [r7, #4]
 8002bca:	4a18      	ldr	r2, [pc, #96]	; (8002c2c <TIM_OC4_SetConfig+0xc4>)
 8002bcc:	4293      	cmp	r3, r2
 8002bce:	d007      	beq.n	8002be0 <TIM_OC4_SetConfig+0x78>
 8002bd0:	687b      	ldr	r3, [r7, #4]
 8002bd2:	4a17      	ldr	r2, [pc, #92]	; (8002c30 <TIM_OC4_SetConfig+0xc8>)
 8002bd4:	4293      	cmp	r3, r2
 8002bd6:	d003      	beq.n	8002be0 <TIM_OC4_SetConfig+0x78>
 8002bd8:	687b      	ldr	r3, [r7, #4]
 8002bda:	4a16      	ldr	r2, [pc, #88]	; (8002c34 <TIM_OC4_SetConfig+0xcc>)
 8002bdc:	4293      	cmp	r3, r2
 8002bde:	d109      	bne.n	8002bf4 <TIM_OC4_SetConfig+0x8c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8002be0:	697b      	ldr	r3, [r7, #20]
 8002be2:	4a15      	ldr	r2, [pc, #84]	; (8002c38 <TIM_OC4_SetConfig+0xd0>)
 8002be4:	4013      	ands	r3, r2
 8002be6:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8002be8:	683b      	ldr	r3, [r7, #0]
 8002bea:	695b      	ldr	r3, [r3, #20]
 8002bec:	019b      	lsls	r3, r3, #6
 8002bee:	697a      	ldr	r2, [r7, #20]
 8002bf0:	4313      	orrs	r3, r2
 8002bf2:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002bf4:	687b      	ldr	r3, [r7, #4]
 8002bf6:	697a      	ldr	r2, [r7, #20]
 8002bf8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8002bfa:	687b      	ldr	r3, [r7, #4]
 8002bfc:	68fa      	ldr	r2, [r7, #12]
 8002bfe:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8002c00:	683b      	ldr	r3, [r7, #0]
 8002c02:	685a      	ldr	r2, [r3, #4]
 8002c04:	687b      	ldr	r3, [r7, #4]
 8002c06:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002c08:	687b      	ldr	r3, [r7, #4]
 8002c0a:	693a      	ldr	r2, [r7, #16]
 8002c0c:	621a      	str	r2, [r3, #32]
}
 8002c0e:	46c0      	nop			; (mov r8, r8)
 8002c10:	46bd      	mov	sp, r7
 8002c12:	b006      	add	sp, #24
 8002c14:	bd80      	pop	{r7, pc}
 8002c16:	46c0      	nop			; (mov r8, r8)
 8002c18:	ffffefff 	.word	0xffffefff
 8002c1c:	ffff8fff 	.word	0xffff8fff
 8002c20:	fffffcff 	.word	0xfffffcff
 8002c24:	ffffdfff 	.word	0xffffdfff
 8002c28:	40012c00 	.word	0x40012c00
 8002c2c:	40014000 	.word	0x40014000
 8002c30:	40014400 	.word	0x40014400
 8002c34:	40014800 	.word	0x40014800
 8002c38:	ffffbfff 	.word	0xffffbfff

08002c3c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002c3c:	b580      	push	{r7, lr}
 8002c3e:	b086      	sub	sp, #24
 8002c40:	af00      	add	r7, sp, #0
 8002c42:	60f8      	str	r0, [r7, #12]
 8002c44:	60b9      	str	r1, [r7, #8]
 8002c46:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8002c48:	68fb      	ldr	r3, [r7, #12]
 8002c4a:	6a1b      	ldr	r3, [r3, #32]
 8002c4c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002c4e:	68fb      	ldr	r3, [r7, #12]
 8002c50:	6a1b      	ldr	r3, [r3, #32]
 8002c52:	2201      	movs	r2, #1
 8002c54:	4393      	bics	r3, r2
 8002c56:	001a      	movs	r2, r3
 8002c58:	68fb      	ldr	r3, [r7, #12]
 8002c5a:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002c5c:	68fb      	ldr	r3, [r7, #12]
 8002c5e:	699b      	ldr	r3, [r3, #24]
 8002c60:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8002c62:	693b      	ldr	r3, [r7, #16]
 8002c64:	22f0      	movs	r2, #240	; 0xf0
 8002c66:	4393      	bics	r3, r2
 8002c68:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8002c6a:	687b      	ldr	r3, [r7, #4]
 8002c6c:	011b      	lsls	r3, r3, #4
 8002c6e:	693a      	ldr	r2, [r7, #16]
 8002c70:	4313      	orrs	r3, r2
 8002c72:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8002c74:	697b      	ldr	r3, [r7, #20]
 8002c76:	220a      	movs	r2, #10
 8002c78:	4393      	bics	r3, r2
 8002c7a:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8002c7c:	697a      	ldr	r2, [r7, #20]
 8002c7e:	68bb      	ldr	r3, [r7, #8]
 8002c80:	4313      	orrs	r3, r2
 8002c82:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8002c84:	68fb      	ldr	r3, [r7, #12]
 8002c86:	693a      	ldr	r2, [r7, #16]
 8002c88:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002c8a:	68fb      	ldr	r3, [r7, #12]
 8002c8c:	697a      	ldr	r2, [r7, #20]
 8002c8e:	621a      	str	r2, [r3, #32]
}
 8002c90:	46c0      	nop			; (mov r8, r8)
 8002c92:	46bd      	mov	sp, r7
 8002c94:	b006      	add	sp, #24
 8002c96:	bd80      	pop	{r7, pc}

08002c98 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002c98:	b580      	push	{r7, lr}
 8002c9a:	b086      	sub	sp, #24
 8002c9c:	af00      	add	r7, sp, #0
 8002c9e:	60f8      	str	r0, [r7, #12]
 8002ca0:	60b9      	str	r1, [r7, #8]
 8002ca2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002ca4:	68fb      	ldr	r3, [r7, #12]
 8002ca6:	6a1b      	ldr	r3, [r3, #32]
 8002ca8:	2210      	movs	r2, #16
 8002caa:	4393      	bics	r3, r2
 8002cac:	001a      	movs	r2, r3
 8002cae:	68fb      	ldr	r3, [r7, #12]
 8002cb0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002cb2:	68fb      	ldr	r3, [r7, #12]
 8002cb4:	699b      	ldr	r3, [r3, #24]
 8002cb6:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8002cb8:	68fb      	ldr	r3, [r7, #12]
 8002cba:	6a1b      	ldr	r3, [r3, #32]
 8002cbc:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8002cbe:	697b      	ldr	r3, [r7, #20]
 8002cc0:	4a0d      	ldr	r2, [pc, #52]	; (8002cf8 <TIM_TI2_ConfigInputStage+0x60>)
 8002cc2:	4013      	ands	r3, r2
 8002cc4:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8002cc6:	687b      	ldr	r3, [r7, #4]
 8002cc8:	031b      	lsls	r3, r3, #12
 8002cca:	697a      	ldr	r2, [r7, #20]
 8002ccc:	4313      	orrs	r3, r2
 8002cce:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8002cd0:	693b      	ldr	r3, [r7, #16]
 8002cd2:	22a0      	movs	r2, #160	; 0xa0
 8002cd4:	4393      	bics	r3, r2
 8002cd6:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8002cd8:	68bb      	ldr	r3, [r7, #8]
 8002cda:	011b      	lsls	r3, r3, #4
 8002cdc:	693a      	ldr	r2, [r7, #16]
 8002cde:	4313      	orrs	r3, r2
 8002ce0:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8002ce2:	68fb      	ldr	r3, [r7, #12]
 8002ce4:	697a      	ldr	r2, [r7, #20]
 8002ce6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002ce8:	68fb      	ldr	r3, [r7, #12]
 8002cea:	693a      	ldr	r2, [r7, #16]
 8002cec:	621a      	str	r2, [r3, #32]
}
 8002cee:	46c0      	nop			; (mov r8, r8)
 8002cf0:	46bd      	mov	sp, r7
 8002cf2:	b006      	add	sp, #24
 8002cf4:	bd80      	pop	{r7, pc}
 8002cf6:	46c0      	nop			; (mov r8, r8)
 8002cf8:	ffff0fff 	.word	0xffff0fff

08002cfc <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8002cfc:	b580      	push	{r7, lr}
 8002cfe:	b084      	sub	sp, #16
 8002d00:	af00      	add	r7, sp, #0
 8002d02:	6078      	str	r0, [r7, #4]
 8002d04:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8002d06:	687b      	ldr	r3, [r7, #4]
 8002d08:	689b      	ldr	r3, [r3, #8]
 8002d0a:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8002d0c:	68fb      	ldr	r3, [r7, #12]
 8002d0e:	2270      	movs	r2, #112	; 0x70
 8002d10:	4393      	bics	r3, r2
 8002d12:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8002d14:	683a      	ldr	r2, [r7, #0]
 8002d16:	68fb      	ldr	r3, [r7, #12]
 8002d18:	4313      	orrs	r3, r2
 8002d1a:	2207      	movs	r2, #7
 8002d1c:	4313      	orrs	r3, r2
 8002d1e:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002d20:	687b      	ldr	r3, [r7, #4]
 8002d22:	68fa      	ldr	r2, [r7, #12]
 8002d24:	609a      	str	r2, [r3, #8]
}
 8002d26:	46c0      	nop			; (mov r8, r8)
 8002d28:	46bd      	mov	sp, r7
 8002d2a:	b004      	add	sp, #16
 8002d2c:	bd80      	pop	{r7, pc}
	...

08002d30 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8002d30:	b580      	push	{r7, lr}
 8002d32:	b086      	sub	sp, #24
 8002d34:	af00      	add	r7, sp, #0
 8002d36:	60f8      	str	r0, [r7, #12]
 8002d38:	60b9      	str	r1, [r7, #8]
 8002d3a:	607a      	str	r2, [r7, #4]
 8002d3c:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8002d3e:	68fb      	ldr	r3, [r7, #12]
 8002d40:	689b      	ldr	r3, [r3, #8]
 8002d42:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002d44:	697b      	ldr	r3, [r7, #20]
 8002d46:	4a09      	ldr	r2, [pc, #36]	; (8002d6c <TIM_ETR_SetConfig+0x3c>)
 8002d48:	4013      	ands	r3, r2
 8002d4a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8002d4c:	683b      	ldr	r3, [r7, #0]
 8002d4e:	021a      	lsls	r2, r3, #8
 8002d50:	687b      	ldr	r3, [r7, #4]
 8002d52:	431a      	orrs	r2, r3
 8002d54:	68bb      	ldr	r3, [r7, #8]
 8002d56:	4313      	orrs	r3, r2
 8002d58:	697a      	ldr	r2, [r7, #20]
 8002d5a:	4313      	orrs	r3, r2
 8002d5c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002d5e:	68fb      	ldr	r3, [r7, #12]
 8002d60:	697a      	ldr	r2, [r7, #20]
 8002d62:	609a      	str	r2, [r3, #8]
}
 8002d64:	46c0      	nop			; (mov r8, r8)
 8002d66:	46bd      	mov	sp, r7
 8002d68:	b006      	add	sp, #24
 8002d6a:	bd80      	pop	{r7, pc}
 8002d6c:	ffff00ff 	.word	0xffff00ff

08002d70 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8002d70:	b580      	push	{r7, lr}
 8002d72:	b086      	sub	sp, #24
 8002d74:	af00      	add	r7, sp, #0
 8002d76:	60f8      	str	r0, [r7, #12]
 8002d78:	60b9      	str	r1, [r7, #8]
 8002d7a:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8002d7c:	68bb      	ldr	r3, [r7, #8]
 8002d7e:	221f      	movs	r2, #31
 8002d80:	4013      	ands	r3, r2
 8002d82:	2201      	movs	r2, #1
 8002d84:	409a      	lsls	r2, r3
 8002d86:	0013      	movs	r3, r2
 8002d88:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8002d8a:	68fb      	ldr	r3, [r7, #12]
 8002d8c:	6a1b      	ldr	r3, [r3, #32]
 8002d8e:	697a      	ldr	r2, [r7, #20]
 8002d90:	43d2      	mvns	r2, r2
 8002d92:	401a      	ands	r2, r3
 8002d94:	68fb      	ldr	r3, [r7, #12]
 8002d96:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8002d98:	68fb      	ldr	r3, [r7, #12]
 8002d9a:	6a1a      	ldr	r2, [r3, #32]
 8002d9c:	68bb      	ldr	r3, [r7, #8]
 8002d9e:	211f      	movs	r1, #31
 8002da0:	400b      	ands	r3, r1
 8002da2:	6879      	ldr	r1, [r7, #4]
 8002da4:	4099      	lsls	r1, r3
 8002da6:	000b      	movs	r3, r1
 8002da8:	431a      	orrs	r2, r3
 8002daa:	68fb      	ldr	r3, [r7, #12]
 8002dac:	621a      	str	r2, [r3, #32]
}
 8002dae:	46c0      	nop			; (mov r8, r8)
 8002db0:	46bd      	mov	sp, r7
 8002db2:	b006      	add	sp, #24
 8002db4:	bd80      	pop	{r7, pc}
	...

08002db8 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8002db8:	b580      	push	{r7, lr}
 8002dba:	b084      	sub	sp, #16
 8002dbc:	af00      	add	r7, sp, #0
 8002dbe:	6078      	str	r0, [r7, #4]
 8002dc0:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8002dc2:	687b      	ldr	r3, [r7, #4]
 8002dc4:	223c      	movs	r2, #60	; 0x3c
 8002dc6:	5c9b      	ldrb	r3, [r3, r2]
 8002dc8:	2b01      	cmp	r3, #1
 8002dca:	d101      	bne.n	8002dd0 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8002dcc:	2302      	movs	r3, #2
 8002dce:	e047      	b.n	8002e60 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
 8002dd0:	687b      	ldr	r3, [r7, #4]
 8002dd2:	223c      	movs	r2, #60	; 0x3c
 8002dd4:	2101      	movs	r1, #1
 8002dd6:	5499      	strb	r1, [r3, r2]

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002dd8:	687b      	ldr	r3, [r7, #4]
 8002dda:	223d      	movs	r2, #61	; 0x3d
 8002ddc:	2102      	movs	r1, #2
 8002dde:	5499      	strb	r1, [r3, r2]

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8002de0:	687b      	ldr	r3, [r7, #4]
 8002de2:	681b      	ldr	r3, [r3, #0]
 8002de4:	685b      	ldr	r3, [r3, #4]
 8002de6:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8002de8:	687b      	ldr	r3, [r7, #4]
 8002dea:	681b      	ldr	r3, [r3, #0]
 8002dec:	689b      	ldr	r3, [r3, #8]
 8002dee:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8002df0:	68fb      	ldr	r3, [r7, #12]
 8002df2:	2270      	movs	r2, #112	; 0x70
 8002df4:	4393      	bics	r3, r2
 8002df6:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8002df8:	683b      	ldr	r3, [r7, #0]
 8002dfa:	681b      	ldr	r3, [r3, #0]
 8002dfc:	68fa      	ldr	r2, [r7, #12]
 8002dfe:	4313      	orrs	r3, r2
 8002e00:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8002e02:	687b      	ldr	r3, [r7, #4]
 8002e04:	681b      	ldr	r3, [r3, #0]
 8002e06:	68fa      	ldr	r2, [r7, #12]
 8002e08:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002e0a:	687b      	ldr	r3, [r7, #4]
 8002e0c:	681b      	ldr	r3, [r3, #0]
 8002e0e:	4a16      	ldr	r2, [pc, #88]	; (8002e68 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8002e10:	4293      	cmp	r3, r2
 8002e12:	d00f      	beq.n	8002e34 <HAL_TIMEx_MasterConfigSynchronization+0x7c>
 8002e14:	687b      	ldr	r3, [r7, #4]
 8002e16:	681a      	ldr	r2, [r3, #0]
 8002e18:	2380      	movs	r3, #128	; 0x80
 8002e1a:	05db      	lsls	r3, r3, #23
 8002e1c:	429a      	cmp	r2, r3
 8002e1e:	d009      	beq.n	8002e34 <HAL_TIMEx_MasterConfigSynchronization+0x7c>
 8002e20:	687b      	ldr	r3, [r7, #4]
 8002e22:	681b      	ldr	r3, [r3, #0]
 8002e24:	4a11      	ldr	r2, [pc, #68]	; (8002e6c <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8002e26:	4293      	cmp	r3, r2
 8002e28:	d004      	beq.n	8002e34 <HAL_TIMEx_MasterConfigSynchronization+0x7c>
 8002e2a:	687b      	ldr	r3, [r7, #4]
 8002e2c:	681b      	ldr	r3, [r3, #0]
 8002e2e:	4a10      	ldr	r2, [pc, #64]	; (8002e70 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 8002e30:	4293      	cmp	r3, r2
 8002e32:	d10c      	bne.n	8002e4e <HAL_TIMEx_MasterConfigSynchronization+0x96>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8002e34:	68bb      	ldr	r3, [r7, #8]
 8002e36:	2280      	movs	r2, #128	; 0x80
 8002e38:	4393      	bics	r3, r2
 8002e3a:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8002e3c:	683b      	ldr	r3, [r7, #0]
 8002e3e:	685b      	ldr	r3, [r3, #4]
 8002e40:	68ba      	ldr	r2, [r7, #8]
 8002e42:	4313      	orrs	r3, r2
 8002e44:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8002e46:	687b      	ldr	r3, [r7, #4]
 8002e48:	681b      	ldr	r3, [r3, #0]
 8002e4a:	68ba      	ldr	r2, [r7, #8]
 8002e4c:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8002e4e:	687b      	ldr	r3, [r7, #4]
 8002e50:	223d      	movs	r2, #61	; 0x3d
 8002e52:	2101      	movs	r1, #1
 8002e54:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 8002e56:	687b      	ldr	r3, [r7, #4]
 8002e58:	223c      	movs	r2, #60	; 0x3c
 8002e5a:	2100      	movs	r1, #0
 8002e5c:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8002e5e:	2300      	movs	r3, #0
}
 8002e60:	0018      	movs	r0, r3
 8002e62:	46bd      	mov	sp, r7
 8002e64:	b004      	add	sp, #16
 8002e66:	bd80      	pop	{r7, pc}
 8002e68:	40012c00 	.word	0x40012c00
 8002e6c:	40000400 	.word	0x40000400
 8002e70:	40014000 	.word	0x40014000

08002e74 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8002e74:	b580      	push	{r7, lr}
 8002e76:	b084      	sub	sp, #16
 8002e78:	af00      	add	r7, sp, #0
 8002e7a:	6078      	str	r0, [r7, #4]
 8002e7c:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8002e7e:	2300      	movs	r3, #0
 8002e80:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8002e82:	687b      	ldr	r3, [r7, #4]
 8002e84:	223c      	movs	r2, #60	; 0x3c
 8002e86:	5c9b      	ldrb	r3, [r3, r2]
 8002e88:	2b01      	cmp	r3, #1
 8002e8a:	d101      	bne.n	8002e90 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8002e8c:	2302      	movs	r3, #2
 8002e8e:	e03e      	b.n	8002f0e <HAL_TIMEx_ConfigBreakDeadTime+0x9a>
 8002e90:	687b      	ldr	r3, [r7, #4]
 8002e92:	223c      	movs	r2, #60	; 0x3c
 8002e94:	2101      	movs	r1, #1
 8002e96:	5499      	strb	r1, [r3, r2]

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8002e98:	68fb      	ldr	r3, [r7, #12]
 8002e9a:	22ff      	movs	r2, #255	; 0xff
 8002e9c:	4393      	bics	r3, r2
 8002e9e:	001a      	movs	r2, r3
 8002ea0:	683b      	ldr	r3, [r7, #0]
 8002ea2:	68db      	ldr	r3, [r3, #12]
 8002ea4:	4313      	orrs	r3, r2
 8002ea6:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8002ea8:	68fb      	ldr	r3, [r7, #12]
 8002eaa:	4a1b      	ldr	r2, [pc, #108]	; (8002f18 <HAL_TIMEx_ConfigBreakDeadTime+0xa4>)
 8002eac:	401a      	ands	r2, r3
 8002eae:	683b      	ldr	r3, [r7, #0]
 8002eb0:	689b      	ldr	r3, [r3, #8]
 8002eb2:	4313      	orrs	r3, r2
 8002eb4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8002eb6:	68fb      	ldr	r3, [r7, #12]
 8002eb8:	4a18      	ldr	r2, [pc, #96]	; (8002f1c <HAL_TIMEx_ConfigBreakDeadTime+0xa8>)
 8002eba:	401a      	ands	r2, r3
 8002ebc:	683b      	ldr	r3, [r7, #0]
 8002ebe:	685b      	ldr	r3, [r3, #4]
 8002ec0:	4313      	orrs	r3, r2
 8002ec2:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8002ec4:	68fb      	ldr	r3, [r7, #12]
 8002ec6:	4a16      	ldr	r2, [pc, #88]	; (8002f20 <HAL_TIMEx_ConfigBreakDeadTime+0xac>)
 8002ec8:	401a      	ands	r2, r3
 8002eca:	683b      	ldr	r3, [r7, #0]
 8002ecc:	681b      	ldr	r3, [r3, #0]
 8002ece:	4313      	orrs	r3, r2
 8002ed0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8002ed2:	68fb      	ldr	r3, [r7, #12]
 8002ed4:	4a13      	ldr	r2, [pc, #76]	; (8002f24 <HAL_TIMEx_ConfigBreakDeadTime+0xb0>)
 8002ed6:	401a      	ands	r2, r3
 8002ed8:	683b      	ldr	r3, [r7, #0]
 8002eda:	691b      	ldr	r3, [r3, #16]
 8002edc:	4313      	orrs	r3, r2
 8002ede:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8002ee0:	68fb      	ldr	r3, [r7, #12]
 8002ee2:	4a11      	ldr	r2, [pc, #68]	; (8002f28 <HAL_TIMEx_ConfigBreakDeadTime+0xb4>)
 8002ee4:	401a      	ands	r2, r3
 8002ee6:	683b      	ldr	r3, [r7, #0]
 8002ee8:	695b      	ldr	r3, [r3, #20]
 8002eea:	4313      	orrs	r3, r2
 8002eec:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8002eee:	68fb      	ldr	r3, [r7, #12]
 8002ef0:	4a0e      	ldr	r2, [pc, #56]	; (8002f2c <HAL_TIMEx_ConfigBreakDeadTime+0xb8>)
 8002ef2:	401a      	ands	r2, r3
 8002ef4:	683b      	ldr	r3, [r7, #0]
 8002ef6:	69db      	ldr	r3, [r3, #28]
 8002ef8:	4313      	orrs	r3, r2
 8002efa:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8002efc:	687b      	ldr	r3, [r7, #4]
 8002efe:	681b      	ldr	r3, [r3, #0]
 8002f00:	68fa      	ldr	r2, [r7, #12]
 8002f02:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8002f04:	687b      	ldr	r3, [r7, #4]
 8002f06:	223c      	movs	r2, #60	; 0x3c
 8002f08:	2100      	movs	r1, #0
 8002f0a:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8002f0c:	2300      	movs	r3, #0
}
 8002f0e:	0018      	movs	r0, r3
 8002f10:	46bd      	mov	sp, r7
 8002f12:	b004      	add	sp, #16
 8002f14:	bd80      	pop	{r7, pc}
 8002f16:	46c0      	nop			; (mov r8, r8)
 8002f18:	fffffcff 	.word	0xfffffcff
 8002f1c:	fffffbff 	.word	0xfffffbff
 8002f20:	fffff7ff 	.word	0xfffff7ff
 8002f24:	ffffefff 	.word	0xffffefff
 8002f28:	ffffdfff 	.word	0xffffdfff
 8002f2c:	ffffbfff 	.word	0xffffbfff

08002f30 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8002f30:	b580      	push	{r7, lr}
 8002f32:	b082      	sub	sp, #8
 8002f34:	af00      	add	r7, sp, #0
 8002f36:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8002f38:	46c0      	nop			; (mov r8, r8)
 8002f3a:	46bd      	mov	sp, r7
 8002f3c:	b002      	add	sp, #8
 8002f3e:	bd80      	pop	{r7, pc}

08002f40 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8002f40:	b580      	push	{r7, lr}
 8002f42:	b082      	sub	sp, #8
 8002f44:	af00      	add	r7, sp, #0
 8002f46:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8002f48:	46c0      	nop			; (mov r8, r8)
 8002f4a:	46bd      	mov	sp, r7
 8002f4c:	b002      	add	sp, #8
 8002f4e:	bd80      	pop	{r7, pc}

08002f50 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002f50:	b580      	push	{r7, lr}
 8002f52:	b082      	sub	sp, #8
 8002f54:	af00      	add	r7, sp, #0
 8002f56:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002f58:	687b      	ldr	r3, [r7, #4]
 8002f5a:	2b00      	cmp	r3, #0
 8002f5c:	d101      	bne.n	8002f62 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002f5e:	2301      	movs	r3, #1
 8002f60:	e044      	b.n	8002fec <HAL_UART_Init+0x9c>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8002f62:	687b      	ldr	r3, [r7, #4]
 8002f64:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002f66:	2b00      	cmp	r3, #0
 8002f68:	d107      	bne.n	8002f7a <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002f6a:	687b      	ldr	r3, [r7, #4]
 8002f6c:	2278      	movs	r2, #120	; 0x78
 8002f6e:	2100      	movs	r1, #0
 8002f70:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002f72:	687b      	ldr	r3, [r7, #4]
 8002f74:	0018      	movs	r0, r3
 8002f76:	f7fd fca1 	bl	80008bc <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002f7a:	687b      	ldr	r3, [r7, #4]
 8002f7c:	2224      	movs	r2, #36	; 0x24
 8002f7e:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 8002f80:	687b      	ldr	r3, [r7, #4]
 8002f82:	681b      	ldr	r3, [r3, #0]
 8002f84:	681a      	ldr	r2, [r3, #0]
 8002f86:	687b      	ldr	r3, [r7, #4]
 8002f88:	681b      	ldr	r3, [r3, #0]
 8002f8a:	2101      	movs	r1, #1
 8002f8c:	438a      	bics	r2, r1
 8002f8e:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8002f90:	687b      	ldr	r3, [r7, #4]
 8002f92:	0018      	movs	r0, r3
 8002f94:	f000 fbf4 	bl	8003780 <UART_SetConfig>
 8002f98:	0003      	movs	r3, r0
 8002f9a:	2b01      	cmp	r3, #1
 8002f9c:	d101      	bne.n	8002fa2 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 8002f9e:	2301      	movs	r3, #1
 8002fa0:	e024      	b.n	8002fec <HAL_UART_Init+0x9c>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8002fa2:	687b      	ldr	r3, [r7, #4]
 8002fa4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002fa6:	2b00      	cmp	r3, #0
 8002fa8:	d003      	beq.n	8002fb2 <HAL_UART_Init+0x62>
  {
    UART_AdvFeatureConfig(huart);
 8002faa:	687b      	ldr	r3, [r7, #4]
 8002fac:	0018      	movs	r0, r3
 8002fae:	f000 fd6f 	bl	8003a90 <UART_AdvFeatureConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN (if LIN is supported) and CLKEN bits in the USART_CR2 register,
  - SCEN (if Smartcard is supported), HDSEL and IREN (if IrDA is supported)  bits in the USART_CR3 register.*/
#if defined (USART_CR2_LINEN)
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002fb2:	687b      	ldr	r3, [r7, #4]
 8002fb4:	681b      	ldr	r3, [r3, #0]
 8002fb6:	685a      	ldr	r2, [r3, #4]
 8002fb8:	687b      	ldr	r3, [r7, #4]
 8002fba:	681b      	ldr	r3, [r3, #0]
 8002fbc:	490d      	ldr	r1, [pc, #52]	; (8002ff4 <HAL_UART_Init+0xa4>)
 8002fbe:	400a      	ands	r2, r1
 8002fc0:	605a      	str	r2, [r3, #4]
#else
  CLEAR_BIT(huart->Instance->CR2, USART_CR2_CLKEN);
#endif /* USART_CR2_LINEN */
#if defined (USART_CR3_SCEN)
#if defined (USART_CR3_IREN)
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002fc2:	687b      	ldr	r3, [r7, #4]
 8002fc4:	681b      	ldr	r3, [r3, #0]
 8002fc6:	689a      	ldr	r2, [r3, #8]
 8002fc8:	687b      	ldr	r3, [r7, #4]
 8002fca:	681b      	ldr	r3, [r3, #0]
 8002fcc:	212a      	movs	r1, #42	; 0x2a
 8002fce:	438a      	bics	r2, r1
 8002fd0:	609a      	str	r2, [r3, #8]
#else
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_HDSEL);
#endif /* USART_CR3_IREN*/
#endif /* USART_CR3_SCEN */

  __HAL_UART_ENABLE(huart);
 8002fd2:	687b      	ldr	r3, [r7, #4]
 8002fd4:	681b      	ldr	r3, [r3, #0]
 8002fd6:	681a      	ldr	r2, [r3, #0]
 8002fd8:	687b      	ldr	r3, [r7, #4]
 8002fda:	681b      	ldr	r3, [r3, #0]
 8002fdc:	2101      	movs	r1, #1
 8002fde:	430a      	orrs	r2, r1
 8002fe0:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8002fe2:	687b      	ldr	r3, [r7, #4]
 8002fe4:	0018      	movs	r0, r3
 8002fe6:	f000 fe07 	bl	8003bf8 <UART_CheckIdleState>
 8002fea:	0003      	movs	r3, r0
}
 8002fec:	0018      	movs	r0, r3
 8002fee:	46bd      	mov	sp, r7
 8002ff0:	b002      	add	sp, #8
 8002ff2:	bd80      	pop	{r7, pc}
 8002ff4:	ffffb7ff 	.word	0xffffb7ff

08002ff8 <HAL_UART_Transmit_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 8002ff8:	b580      	push	{r7, lr}
 8002ffa:	b088      	sub	sp, #32
 8002ffc:	af00      	add	r7, sp, #0
 8002ffe:	60f8      	str	r0, [r7, #12]
 8003000:	60b9      	str	r1, [r7, #8]
 8003002:	1dbb      	adds	r3, r7, #6
 8003004:	801a      	strh	r2, [r3, #0]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003006:	68fb      	ldr	r3, [r7, #12]
 8003008:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800300a:	2b20      	cmp	r3, #32
 800300c:	d15b      	bne.n	80030c6 <HAL_UART_Transmit_IT+0xce>
  {
    if ((pData == NULL) || (Size == 0U))
 800300e:	68bb      	ldr	r3, [r7, #8]
 8003010:	2b00      	cmp	r3, #0
 8003012:	d003      	beq.n	800301c <HAL_UART_Transmit_IT+0x24>
 8003014:	1dbb      	adds	r3, r7, #6
 8003016:	881b      	ldrh	r3, [r3, #0]
 8003018:	2b00      	cmp	r3, #0
 800301a:	d101      	bne.n	8003020 <HAL_UART_Transmit_IT+0x28>
    {
      return HAL_ERROR;
 800301c:	2301      	movs	r3, #1
 800301e:	e053      	b.n	80030c8 <HAL_UART_Transmit_IT+0xd0>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be filled into TDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003020:	68fb      	ldr	r3, [r7, #12]
 8003022:	689a      	ldr	r2, [r3, #8]
 8003024:	2380      	movs	r3, #128	; 0x80
 8003026:	015b      	lsls	r3, r3, #5
 8003028:	429a      	cmp	r2, r3
 800302a:	d109      	bne.n	8003040 <HAL_UART_Transmit_IT+0x48>
 800302c:	68fb      	ldr	r3, [r7, #12]
 800302e:	691b      	ldr	r3, [r3, #16]
 8003030:	2b00      	cmp	r3, #0
 8003032:	d105      	bne.n	8003040 <HAL_UART_Transmit_IT+0x48>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 8003034:	68bb      	ldr	r3, [r7, #8]
 8003036:	2201      	movs	r2, #1
 8003038:	4013      	ands	r3, r2
 800303a:	d001      	beq.n	8003040 <HAL_UART_Transmit_IT+0x48>
      {
        return  HAL_ERROR;
 800303c:	2301      	movs	r3, #1
 800303e:	e043      	b.n	80030c8 <HAL_UART_Transmit_IT+0xd0>
      }
    }

    huart->pTxBuffPtr  = pData;
 8003040:	68fb      	ldr	r3, [r7, #12]
 8003042:	68ba      	ldr	r2, [r7, #8]
 8003044:	64da      	str	r2, [r3, #76]	; 0x4c
    huart->TxXferSize  = Size;
 8003046:	68fb      	ldr	r3, [r7, #12]
 8003048:	1dba      	adds	r2, r7, #6
 800304a:	2150      	movs	r1, #80	; 0x50
 800304c:	8812      	ldrh	r2, [r2, #0]
 800304e:	525a      	strh	r2, [r3, r1]
    huart->TxXferCount = Size;
 8003050:	68fb      	ldr	r3, [r7, #12]
 8003052:	1dba      	adds	r2, r7, #6
 8003054:	2152      	movs	r1, #82	; 0x52
 8003056:	8812      	ldrh	r2, [r2, #0]
 8003058:	525a      	strh	r2, [r3, r1]
    huart->TxISR       = NULL;
 800305a:	68fb      	ldr	r3, [r7, #12]
 800305c:	2200      	movs	r2, #0
 800305e:	66da      	str	r2, [r3, #108]	; 0x6c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003060:	68fb      	ldr	r3, [r7, #12]
 8003062:	2284      	movs	r2, #132	; 0x84
 8003064:	2100      	movs	r1, #0
 8003066:	5099      	str	r1, [r3, r2]
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003068:	68fb      	ldr	r3, [r7, #12]
 800306a:	2221      	movs	r2, #33	; 0x21
 800306c:	67da      	str	r2, [r3, #124]	; 0x7c

    /* Set the Tx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800306e:	68fb      	ldr	r3, [r7, #12]
 8003070:	689a      	ldr	r2, [r3, #8]
 8003072:	2380      	movs	r3, #128	; 0x80
 8003074:	015b      	lsls	r3, r3, #5
 8003076:	429a      	cmp	r2, r3
 8003078:	d107      	bne.n	800308a <HAL_UART_Transmit_IT+0x92>
 800307a:	68fb      	ldr	r3, [r7, #12]
 800307c:	691b      	ldr	r3, [r3, #16]
 800307e:	2b00      	cmp	r3, #0
 8003080:	d103      	bne.n	800308a <HAL_UART_Transmit_IT+0x92>
    {
      huart->TxISR = UART_TxISR_16BIT;
 8003082:	68fb      	ldr	r3, [r7, #12]
 8003084:	4a12      	ldr	r2, [pc, #72]	; (80030d0 <HAL_UART_Transmit_IT+0xd8>)
 8003086:	66da      	str	r2, [r3, #108]	; 0x6c
 8003088:	e002      	b.n	8003090 <HAL_UART_Transmit_IT+0x98>
    }
    else
    {
      huart->TxISR = UART_TxISR_8BIT;
 800308a:	68fb      	ldr	r3, [r7, #12]
 800308c:	4a11      	ldr	r2, [pc, #68]	; (80030d4 <HAL_UART_Transmit_IT+0xdc>)
 800308e:	66da      	str	r2, [r3, #108]	; 0x6c
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003090:	f3ef 8310 	mrs	r3, PRIMASK
 8003094:	613b      	str	r3, [r7, #16]
  return(result);
 8003096:	693b      	ldr	r3, [r7, #16]
    }

    /* Enable the Transmit Data Register Empty interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 8003098:	61fb      	str	r3, [r7, #28]
 800309a:	2301      	movs	r3, #1
 800309c:	617b      	str	r3, [r7, #20]
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800309e:	697b      	ldr	r3, [r7, #20]
 80030a0:	f383 8810 	msr	PRIMASK, r3
}
 80030a4:	46c0      	nop			; (mov r8, r8)
 80030a6:	68fb      	ldr	r3, [r7, #12]
 80030a8:	681b      	ldr	r3, [r3, #0]
 80030aa:	681a      	ldr	r2, [r3, #0]
 80030ac:	68fb      	ldr	r3, [r7, #12]
 80030ae:	681b      	ldr	r3, [r3, #0]
 80030b0:	2180      	movs	r1, #128	; 0x80
 80030b2:	430a      	orrs	r2, r1
 80030b4:	601a      	str	r2, [r3, #0]
 80030b6:	69fb      	ldr	r3, [r7, #28]
 80030b8:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80030ba:	69bb      	ldr	r3, [r7, #24]
 80030bc:	f383 8810 	msr	PRIMASK, r3
}
 80030c0:	46c0      	nop			; (mov r8, r8)

    return HAL_OK;
 80030c2:	2300      	movs	r3, #0
 80030c4:	e000      	b.n	80030c8 <HAL_UART_Transmit_IT+0xd0>
  }
  else
  {
    return HAL_BUSY;
 80030c6:	2302      	movs	r3, #2
  }
}
 80030c8:	0018      	movs	r0, r3
 80030ca:	46bd      	mov	sp, r7
 80030cc:	b008      	add	sp, #32
 80030ce:	bd80      	pop	{r7, pc}
 80030d0:	0800415b 	.word	0x0800415b
 80030d4:	080040a7 	.word	0x080040a7

080030d8 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80030d8:	b580      	push	{r7, lr}
 80030da:	b088      	sub	sp, #32
 80030dc:	af00      	add	r7, sp, #0
 80030de:	60f8      	str	r0, [r7, #12]
 80030e0:	60b9      	str	r1, [r7, #8]
 80030e2:	1dbb      	adds	r3, r7, #6
 80030e4:	801a      	strh	r2, [r3, #0]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80030e6:	68fb      	ldr	r3, [r7, #12]
 80030e8:	2280      	movs	r2, #128	; 0x80
 80030ea:	589b      	ldr	r3, [r3, r2]
 80030ec:	2b20      	cmp	r3, #32
 80030ee:	d145      	bne.n	800317c <HAL_UART_Receive_IT+0xa4>
  {
    if ((pData == NULL) || (Size == 0U))
 80030f0:	68bb      	ldr	r3, [r7, #8]
 80030f2:	2b00      	cmp	r3, #0
 80030f4:	d003      	beq.n	80030fe <HAL_UART_Receive_IT+0x26>
 80030f6:	1dbb      	adds	r3, r7, #6
 80030f8:	881b      	ldrh	r3, [r3, #0]
 80030fa:	2b00      	cmp	r3, #0
 80030fc:	d101      	bne.n	8003102 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 80030fe:	2301      	movs	r3, #1
 8003100:	e03d      	b.n	800317e <HAL_UART_Receive_IT+0xa6>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be received from RDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003102:	68fb      	ldr	r3, [r7, #12]
 8003104:	689a      	ldr	r2, [r3, #8]
 8003106:	2380      	movs	r3, #128	; 0x80
 8003108:	015b      	lsls	r3, r3, #5
 800310a:	429a      	cmp	r2, r3
 800310c:	d109      	bne.n	8003122 <HAL_UART_Receive_IT+0x4a>
 800310e:	68fb      	ldr	r3, [r7, #12]
 8003110:	691b      	ldr	r3, [r3, #16]
 8003112:	2b00      	cmp	r3, #0
 8003114:	d105      	bne.n	8003122 <HAL_UART_Receive_IT+0x4a>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 8003116:	68bb      	ldr	r3, [r7, #8]
 8003118:	2201      	movs	r2, #1
 800311a:	4013      	ands	r3, r2
 800311c:	d001      	beq.n	8003122 <HAL_UART_Receive_IT+0x4a>
      {
        return  HAL_ERROR;
 800311e:	2301      	movs	r3, #1
 8003120:	e02d      	b.n	800317e <HAL_UART_Receive_IT+0xa6>
      }
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003122:	68fb      	ldr	r3, [r7, #12]
 8003124:	2200      	movs	r2, #0
 8003126:	661a      	str	r2, [r3, #96]	; 0x60

    /* Check that USART RTOEN bit is set */
    if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8003128:	68fb      	ldr	r3, [r7, #12]
 800312a:	681b      	ldr	r3, [r3, #0]
 800312c:	685a      	ldr	r2, [r3, #4]
 800312e:	2380      	movs	r3, #128	; 0x80
 8003130:	041b      	lsls	r3, r3, #16
 8003132:	4013      	ands	r3, r2
 8003134:	d019      	beq.n	800316a <HAL_UART_Receive_IT+0x92>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003136:	f3ef 8310 	mrs	r3, PRIMASK
 800313a:	613b      	str	r3, [r7, #16]
  return(result);
 800313c:	693b      	ldr	r3, [r7, #16]
    {
      /* Enable the UART Receiver Timeout Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800313e:	61fb      	str	r3, [r7, #28]
 8003140:	2301      	movs	r3, #1
 8003142:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003144:	697b      	ldr	r3, [r7, #20]
 8003146:	f383 8810 	msr	PRIMASK, r3
}
 800314a:	46c0      	nop			; (mov r8, r8)
 800314c:	68fb      	ldr	r3, [r7, #12]
 800314e:	681b      	ldr	r3, [r3, #0]
 8003150:	681a      	ldr	r2, [r3, #0]
 8003152:	68fb      	ldr	r3, [r7, #12]
 8003154:	681b      	ldr	r3, [r3, #0]
 8003156:	2180      	movs	r1, #128	; 0x80
 8003158:	04c9      	lsls	r1, r1, #19
 800315a:	430a      	orrs	r2, r1
 800315c:	601a      	str	r2, [r3, #0]
 800315e:	69fb      	ldr	r3, [r7, #28]
 8003160:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003162:	69bb      	ldr	r3, [r7, #24]
 8003164:	f383 8810 	msr	PRIMASK, r3
}
 8003168:	46c0      	nop			; (mov r8, r8)
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 800316a:	1dbb      	adds	r3, r7, #6
 800316c:	881a      	ldrh	r2, [r3, #0]
 800316e:	68b9      	ldr	r1, [r7, #8]
 8003170:	68fb      	ldr	r3, [r7, #12]
 8003172:	0018      	movs	r0, r3
 8003174:	f000 fe52 	bl	8003e1c <UART_Start_Receive_IT>
 8003178:	0003      	movs	r3, r0
 800317a:	e000      	b.n	800317e <HAL_UART_Receive_IT+0xa6>
  }
  else
  {
    return HAL_BUSY;
 800317c:	2302      	movs	r3, #2
  }
}
 800317e:	0018      	movs	r0, r3
 8003180:	46bd      	mov	sp, r7
 8003182:	b008      	add	sp, #32
 8003184:	bd80      	pop	{r7, pc}
	...

08003188 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8003188:	b590      	push	{r4, r7, lr}
 800318a:	b0ab      	sub	sp, #172	; 0xac
 800318c:	af00      	add	r7, sp, #0
 800318e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8003190:	687b      	ldr	r3, [r7, #4]
 8003192:	681b      	ldr	r3, [r3, #0]
 8003194:	69db      	ldr	r3, [r3, #28]
 8003196:	22a4      	movs	r2, #164	; 0xa4
 8003198:	18b9      	adds	r1, r7, r2
 800319a:	600b      	str	r3, [r1, #0]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800319c:	687b      	ldr	r3, [r7, #4]
 800319e:	681b      	ldr	r3, [r3, #0]
 80031a0:	681b      	ldr	r3, [r3, #0]
 80031a2:	20a0      	movs	r0, #160	; 0xa0
 80031a4:	1839      	adds	r1, r7, r0
 80031a6:	600b      	str	r3, [r1, #0]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80031a8:	687b      	ldr	r3, [r7, #4]
 80031aa:	681b      	ldr	r3, [r3, #0]
 80031ac:	689b      	ldr	r3, [r3, #8]
 80031ae:	219c      	movs	r1, #156	; 0x9c
 80031b0:	1879      	adds	r1, r7, r1
 80031b2:	600b      	str	r3, [r1, #0]

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 80031b4:	0011      	movs	r1, r2
 80031b6:	18bb      	adds	r3, r7, r2
 80031b8:	681b      	ldr	r3, [r3, #0]
 80031ba:	4a99      	ldr	r2, [pc, #612]	; (8003420 <HAL_UART_IRQHandler+0x298>)
 80031bc:	4013      	ands	r3, r2
 80031be:	2298      	movs	r2, #152	; 0x98
 80031c0:	18bc      	adds	r4, r7, r2
 80031c2:	6023      	str	r3, [r4, #0]
  if (errorflags == 0U)
 80031c4:	18bb      	adds	r3, r7, r2
 80031c6:	681b      	ldr	r3, [r3, #0]
 80031c8:	2b00      	cmp	r3, #0
 80031ca:	d114      	bne.n	80031f6 <HAL_UART_IRQHandler+0x6e>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 80031cc:	187b      	adds	r3, r7, r1
 80031ce:	681b      	ldr	r3, [r3, #0]
 80031d0:	2220      	movs	r2, #32
 80031d2:	4013      	ands	r3, r2
 80031d4:	d00f      	beq.n	80031f6 <HAL_UART_IRQHandler+0x6e>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 80031d6:	183b      	adds	r3, r7, r0
 80031d8:	681b      	ldr	r3, [r3, #0]
 80031da:	2220      	movs	r2, #32
 80031dc:	4013      	ands	r3, r2
 80031de:	d00a      	beq.n	80031f6 <HAL_UART_IRQHandler+0x6e>
    {
      if (huart->RxISR != NULL)
 80031e0:	687b      	ldr	r3, [r7, #4]
 80031e2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80031e4:	2b00      	cmp	r3, #0
 80031e6:	d100      	bne.n	80031ea <HAL_UART_IRQHandler+0x62>
 80031e8:	e29e      	b.n	8003728 <HAL_UART_IRQHandler+0x5a0>
      {
        huart->RxISR(huart);
 80031ea:	687b      	ldr	r3, [r7, #4]
 80031ec:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80031ee:	687a      	ldr	r2, [r7, #4]
 80031f0:	0010      	movs	r0, r2
 80031f2:	4798      	blx	r3
      }
      return;
 80031f4:	e298      	b.n	8003728 <HAL_UART_IRQHandler+0x5a0>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 80031f6:	2398      	movs	r3, #152	; 0x98
 80031f8:	18fb      	adds	r3, r7, r3
 80031fa:	681b      	ldr	r3, [r3, #0]
 80031fc:	2b00      	cmp	r3, #0
 80031fe:	d100      	bne.n	8003202 <HAL_UART_IRQHandler+0x7a>
 8003200:	e114      	b.n	800342c <HAL_UART_IRQHandler+0x2a4>
      && (((cr3its & USART_CR3_EIE) != 0U)
 8003202:	239c      	movs	r3, #156	; 0x9c
 8003204:	18fb      	adds	r3, r7, r3
 8003206:	681b      	ldr	r3, [r3, #0]
 8003208:	2201      	movs	r2, #1
 800320a:	4013      	ands	r3, r2
 800320c:	d106      	bne.n	800321c <HAL_UART_IRQHandler+0x94>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 800320e:	23a0      	movs	r3, #160	; 0xa0
 8003210:	18fb      	adds	r3, r7, r3
 8003212:	681b      	ldr	r3, [r3, #0]
 8003214:	4a83      	ldr	r2, [pc, #524]	; (8003424 <HAL_UART_IRQHandler+0x29c>)
 8003216:	4013      	ands	r3, r2
 8003218:	d100      	bne.n	800321c <HAL_UART_IRQHandler+0x94>
 800321a:	e107      	b.n	800342c <HAL_UART_IRQHandler+0x2a4>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800321c:	23a4      	movs	r3, #164	; 0xa4
 800321e:	18fb      	adds	r3, r7, r3
 8003220:	681b      	ldr	r3, [r3, #0]
 8003222:	2201      	movs	r2, #1
 8003224:	4013      	ands	r3, r2
 8003226:	d012      	beq.n	800324e <HAL_UART_IRQHandler+0xc6>
 8003228:	23a0      	movs	r3, #160	; 0xa0
 800322a:	18fb      	adds	r3, r7, r3
 800322c:	681a      	ldr	r2, [r3, #0]
 800322e:	2380      	movs	r3, #128	; 0x80
 8003230:	005b      	lsls	r3, r3, #1
 8003232:	4013      	ands	r3, r2
 8003234:	d00b      	beq.n	800324e <HAL_UART_IRQHandler+0xc6>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8003236:	687b      	ldr	r3, [r7, #4]
 8003238:	681b      	ldr	r3, [r3, #0]
 800323a:	2201      	movs	r2, #1
 800323c:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800323e:	687b      	ldr	r3, [r7, #4]
 8003240:	2284      	movs	r2, #132	; 0x84
 8003242:	589b      	ldr	r3, [r3, r2]
 8003244:	2201      	movs	r2, #1
 8003246:	431a      	orrs	r2, r3
 8003248:	687b      	ldr	r3, [r7, #4]
 800324a:	2184      	movs	r1, #132	; 0x84
 800324c:	505a      	str	r2, [r3, r1]
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800324e:	23a4      	movs	r3, #164	; 0xa4
 8003250:	18fb      	adds	r3, r7, r3
 8003252:	681b      	ldr	r3, [r3, #0]
 8003254:	2202      	movs	r2, #2
 8003256:	4013      	ands	r3, r2
 8003258:	d011      	beq.n	800327e <HAL_UART_IRQHandler+0xf6>
 800325a:	239c      	movs	r3, #156	; 0x9c
 800325c:	18fb      	adds	r3, r7, r3
 800325e:	681b      	ldr	r3, [r3, #0]
 8003260:	2201      	movs	r2, #1
 8003262:	4013      	ands	r3, r2
 8003264:	d00b      	beq.n	800327e <HAL_UART_IRQHandler+0xf6>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8003266:	687b      	ldr	r3, [r7, #4]
 8003268:	681b      	ldr	r3, [r3, #0]
 800326a:	2202      	movs	r2, #2
 800326c:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800326e:	687b      	ldr	r3, [r7, #4]
 8003270:	2284      	movs	r2, #132	; 0x84
 8003272:	589b      	ldr	r3, [r3, r2]
 8003274:	2204      	movs	r2, #4
 8003276:	431a      	orrs	r2, r3
 8003278:	687b      	ldr	r3, [r7, #4]
 800327a:	2184      	movs	r1, #132	; 0x84
 800327c:	505a      	str	r2, [r3, r1]
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800327e:	23a4      	movs	r3, #164	; 0xa4
 8003280:	18fb      	adds	r3, r7, r3
 8003282:	681b      	ldr	r3, [r3, #0]
 8003284:	2204      	movs	r2, #4
 8003286:	4013      	ands	r3, r2
 8003288:	d011      	beq.n	80032ae <HAL_UART_IRQHandler+0x126>
 800328a:	239c      	movs	r3, #156	; 0x9c
 800328c:	18fb      	adds	r3, r7, r3
 800328e:	681b      	ldr	r3, [r3, #0]
 8003290:	2201      	movs	r2, #1
 8003292:	4013      	ands	r3, r2
 8003294:	d00b      	beq.n	80032ae <HAL_UART_IRQHandler+0x126>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8003296:	687b      	ldr	r3, [r7, #4]
 8003298:	681b      	ldr	r3, [r3, #0]
 800329a:	2204      	movs	r2, #4
 800329c:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800329e:	687b      	ldr	r3, [r7, #4]
 80032a0:	2284      	movs	r2, #132	; 0x84
 80032a2:	589b      	ldr	r3, [r3, r2]
 80032a4:	2202      	movs	r2, #2
 80032a6:	431a      	orrs	r2, r3
 80032a8:	687b      	ldr	r3, [r7, #4]
 80032aa:	2184      	movs	r1, #132	; 0x84
 80032ac:	505a      	str	r2, [r3, r1]
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 80032ae:	23a4      	movs	r3, #164	; 0xa4
 80032b0:	18fb      	adds	r3, r7, r3
 80032b2:	681b      	ldr	r3, [r3, #0]
 80032b4:	2208      	movs	r2, #8
 80032b6:	4013      	ands	r3, r2
 80032b8:	d017      	beq.n	80032ea <HAL_UART_IRQHandler+0x162>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 80032ba:	23a0      	movs	r3, #160	; 0xa0
 80032bc:	18fb      	adds	r3, r7, r3
 80032be:	681b      	ldr	r3, [r3, #0]
 80032c0:	2220      	movs	r2, #32
 80032c2:	4013      	ands	r3, r2
 80032c4:	d105      	bne.n	80032d2 <HAL_UART_IRQHandler+0x14a>
            ((cr3its & USART_CR3_EIE) != 0U)))
 80032c6:	239c      	movs	r3, #156	; 0x9c
 80032c8:	18fb      	adds	r3, r7, r3
 80032ca:	681b      	ldr	r3, [r3, #0]
 80032cc:	2201      	movs	r2, #1
 80032ce:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 80032d0:	d00b      	beq.n	80032ea <HAL_UART_IRQHandler+0x162>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80032d2:	687b      	ldr	r3, [r7, #4]
 80032d4:	681b      	ldr	r3, [r3, #0]
 80032d6:	2208      	movs	r2, #8
 80032d8:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80032da:	687b      	ldr	r3, [r7, #4]
 80032dc:	2284      	movs	r2, #132	; 0x84
 80032de:	589b      	ldr	r3, [r3, r2]
 80032e0:	2208      	movs	r2, #8
 80032e2:	431a      	orrs	r2, r3
 80032e4:	687b      	ldr	r3, [r7, #4]
 80032e6:	2184      	movs	r1, #132	; 0x84
 80032e8:	505a      	str	r2, [r3, r1]
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 80032ea:	23a4      	movs	r3, #164	; 0xa4
 80032ec:	18fb      	adds	r3, r7, r3
 80032ee:	681a      	ldr	r2, [r3, #0]
 80032f0:	2380      	movs	r3, #128	; 0x80
 80032f2:	011b      	lsls	r3, r3, #4
 80032f4:	4013      	ands	r3, r2
 80032f6:	d013      	beq.n	8003320 <HAL_UART_IRQHandler+0x198>
 80032f8:	23a0      	movs	r3, #160	; 0xa0
 80032fa:	18fb      	adds	r3, r7, r3
 80032fc:	681a      	ldr	r2, [r3, #0]
 80032fe:	2380      	movs	r3, #128	; 0x80
 8003300:	04db      	lsls	r3, r3, #19
 8003302:	4013      	ands	r3, r2
 8003304:	d00c      	beq.n	8003320 <HAL_UART_IRQHandler+0x198>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8003306:	687b      	ldr	r3, [r7, #4]
 8003308:	681b      	ldr	r3, [r3, #0]
 800330a:	2280      	movs	r2, #128	; 0x80
 800330c:	0112      	lsls	r2, r2, #4
 800330e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8003310:	687b      	ldr	r3, [r7, #4]
 8003312:	2284      	movs	r2, #132	; 0x84
 8003314:	589b      	ldr	r3, [r3, r2]
 8003316:	2220      	movs	r2, #32
 8003318:	431a      	orrs	r2, r3
 800331a:	687b      	ldr	r3, [r7, #4]
 800331c:	2184      	movs	r1, #132	; 0x84
 800331e:	505a      	str	r2, [r3, r1]
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8003320:	687b      	ldr	r3, [r7, #4]
 8003322:	2284      	movs	r2, #132	; 0x84
 8003324:	589b      	ldr	r3, [r3, r2]
 8003326:	2b00      	cmp	r3, #0
 8003328:	d100      	bne.n	800332c <HAL_UART_IRQHandler+0x1a4>
 800332a:	e1ff      	b.n	800372c <HAL_UART_IRQHandler+0x5a4>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 800332c:	23a4      	movs	r3, #164	; 0xa4
 800332e:	18fb      	adds	r3, r7, r3
 8003330:	681b      	ldr	r3, [r3, #0]
 8003332:	2220      	movs	r2, #32
 8003334:	4013      	ands	r3, r2
 8003336:	d00e      	beq.n	8003356 <HAL_UART_IRQHandler+0x1ce>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8003338:	23a0      	movs	r3, #160	; 0xa0
 800333a:	18fb      	adds	r3, r7, r3
 800333c:	681b      	ldr	r3, [r3, #0]
 800333e:	2220      	movs	r2, #32
 8003340:	4013      	ands	r3, r2
 8003342:	d008      	beq.n	8003356 <HAL_UART_IRQHandler+0x1ce>
      {
        if (huart->RxISR != NULL)
 8003344:	687b      	ldr	r3, [r7, #4]
 8003346:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003348:	2b00      	cmp	r3, #0
 800334a:	d004      	beq.n	8003356 <HAL_UART_IRQHandler+0x1ce>
        {
          huart->RxISR(huart);
 800334c:	687b      	ldr	r3, [r7, #4]
 800334e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003350:	687a      	ldr	r2, [r7, #4]
 8003352:	0010      	movs	r0, r2
 8003354:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8003356:	687b      	ldr	r3, [r7, #4]
 8003358:	2284      	movs	r2, #132	; 0x84
 800335a:	589b      	ldr	r3, [r3, r2]
 800335c:	2194      	movs	r1, #148	; 0x94
 800335e:	187a      	adds	r2, r7, r1
 8003360:	6013      	str	r3, [r2, #0]
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8003362:	687b      	ldr	r3, [r7, #4]
 8003364:	681b      	ldr	r3, [r3, #0]
 8003366:	689b      	ldr	r3, [r3, #8]
 8003368:	2240      	movs	r2, #64	; 0x40
 800336a:	4013      	ands	r3, r2
 800336c:	2b40      	cmp	r3, #64	; 0x40
 800336e:	d004      	beq.n	800337a <HAL_UART_IRQHandler+0x1f2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8003370:	187b      	adds	r3, r7, r1
 8003372:	681b      	ldr	r3, [r3, #0]
 8003374:	2228      	movs	r2, #40	; 0x28
 8003376:	4013      	ands	r3, r2
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8003378:	d047      	beq.n	800340a <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800337a:	687b      	ldr	r3, [r7, #4]
 800337c:	0018      	movs	r0, r3
 800337e:	f000 fe17 	bl	8003fb0 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003382:	687b      	ldr	r3, [r7, #4]
 8003384:	681b      	ldr	r3, [r3, #0]
 8003386:	689b      	ldr	r3, [r3, #8]
 8003388:	2240      	movs	r2, #64	; 0x40
 800338a:	4013      	ands	r3, r2
 800338c:	2b40      	cmp	r3, #64	; 0x40
 800338e:	d137      	bne.n	8003400 <HAL_UART_IRQHandler+0x278>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003390:	f3ef 8310 	mrs	r3, PRIMASK
 8003394:	663b      	str	r3, [r7, #96]	; 0x60
  return(result);
 8003396:	6e3b      	ldr	r3, [r7, #96]	; 0x60
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003398:	2090      	movs	r0, #144	; 0x90
 800339a:	183a      	adds	r2, r7, r0
 800339c:	6013      	str	r3, [r2, #0]
 800339e:	2301      	movs	r3, #1
 80033a0:	667b      	str	r3, [r7, #100]	; 0x64
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80033a2:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80033a4:	f383 8810 	msr	PRIMASK, r3
}
 80033a8:	46c0      	nop			; (mov r8, r8)
 80033aa:	687b      	ldr	r3, [r7, #4]
 80033ac:	681b      	ldr	r3, [r3, #0]
 80033ae:	689a      	ldr	r2, [r3, #8]
 80033b0:	687b      	ldr	r3, [r7, #4]
 80033b2:	681b      	ldr	r3, [r3, #0]
 80033b4:	2140      	movs	r1, #64	; 0x40
 80033b6:	438a      	bics	r2, r1
 80033b8:	609a      	str	r2, [r3, #8]
 80033ba:	183b      	adds	r3, r7, r0
 80033bc:	681b      	ldr	r3, [r3, #0]
 80033be:	66bb      	str	r3, [r7, #104]	; 0x68
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80033c0:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80033c2:	f383 8810 	msr	PRIMASK, r3
}
 80033c6:	46c0      	nop			; (mov r8, r8)

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 80033c8:	687b      	ldr	r3, [r7, #4]
 80033ca:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80033cc:	2b00      	cmp	r3, #0
 80033ce:	d012      	beq.n	80033f6 <HAL_UART_IRQHandler+0x26e>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80033d0:	687b      	ldr	r3, [r7, #4]
 80033d2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80033d4:	4a14      	ldr	r2, [pc, #80]	; (8003428 <HAL_UART_IRQHandler+0x2a0>)
 80033d6:	635a      	str	r2, [r3, #52]	; 0x34

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80033d8:	687b      	ldr	r3, [r7, #4]
 80033da:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80033dc:	0018      	movs	r0, r3
 80033de:	f7fd fca1 	bl	8000d24 <HAL_DMA_Abort_IT>
 80033e2:	1e03      	subs	r3, r0, #0
 80033e4:	d01a      	beq.n	800341c <HAL_UART_IRQHandler+0x294>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80033e6:	687b      	ldr	r3, [r7, #4]
 80033e8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80033ea:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80033ec:	687b      	ldr	r3, [r7, #4]
 80033ee:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80033f0:	0018      	movs	r0, r3
 80033f2:	4790      	blx	r2
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80033f4:	e012      	b.n	800341c <HAL_UART_IRQHandler+0x294>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80033f6:	687b      	ldr	r3, [r7, #4]
 80033f8:	0018      	movs	r0, r3
 80033fa:	f000 f9ad 	bl	8003758 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80033fe:	e00d      	b.n	800341c <HAL_UART_IRQHandler+0x294>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8003400:	687b      	ldr	r3, [r7, #4]
 8003402:	0018      	movs	r0, r3
 8003404:	f000 f9a8 	bl	8003758 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003408:	e008      	b.n	800341c <HAL_UART_IRQHandler+0x294>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800340a:	687b      	ldr	r3, [r7, #4]
 800340c:	0018      	movs	r0, r3
 800340e:	f000 f9a3 	bl	8003758 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003412:	687b      	ldr	r3, [r7, #4]
 8003414:	2284      	movs	r2, #132	; 0x84
 8003416:	2100      	movs	r1, #0
 8003418:	5099      	str	r1, [r3, r2]
      }
    }
    return;
 800341a:	e187      	b.n	800372c <HAL_UART_IRQHandler+0x5a4>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800341c:	46c0      	nop			; (mov r8, r8)
    return;
 800341e:	e185      	b.n	800372c <HAL_UART_IRQHandler+0x5a4>
 8003420:	0000080f 	.word	0x0000080f
 8003424:	04000120 	.word	0x04000120
 8003428:	08004079 	.word	0x08004079

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800342c:	687b      	ldr	r3, [r7, #4]
 800342e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003430:	2b01      	cmp	r3, #1
 8003432:	d000      	beq.n	8003436 <HAL_UART_IRQHandler+0x2ae>
 8003434:	e139      	b.n	80036aa <HAL_UART_IRQHandler+0x522>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8003436:	23a4      	movs	r3, #164	; 0xa4
 8003438:	18fb      	adds	r3, r7, r3
 800343a:	681b      	ldr	r3, [r3, #0]
 800343c:	2210      	movs	r2, #16
 800343e:	4013      	ands	r3, r2
 8003440:	d100      	bne.n	8003444 <HAL_UART_IRQHandler+0x2bc>
 8003442:	e132      	b.n	80036aa <HAL_UART_IRQHandler+0x522>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8003444:	23a0      	movs	r3, #160	; 0xa0
 8003446:	18fb      	adds	r3, r7, r3
 8003448:	681b      	ldr	r3, [r3, #0]
 800344a:	2210      	movs	r2, #16
 800344c:	4013      	ands	r3, r2
 800344e:	d100      	bne.n	8003452 <HAL_UART_IRQHandler+0x2ca>
 8003450:	e12b      	b.n	80036aa <HAL_UART_IRQHandler+0x522>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8003452:	687b      	ldr	r3, [r7, #4]
 8003454:	681b      	ldr	r3, [r3, #0]
 8003456:	2210      	movs	r2, #16
 8003458:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800345a:	687b      	ldr	r3, [r7, #4]
 800345c:	681b      	ldr	r3, [r3, #0]
 800345e:	689b      	ldr	r3, [r3, #8]
 8003460:	2240      	movs	r2, #64	; 0x40
 8003462:	4013      	ands	r3, r2
 8003464:	2b40      	cmp	r3, #64	; 0x40
 8003466:	d000      	beq.n	800346a <HAL_UART_IRQHandler+0x2e2>
 8003468:	e09f      	b.n	80035aa <HAL_UART_IRQHandler+0x422>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800346a:	687b      	ldr	r3, [r7, #4]
 800346c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800346e:	681b      	ldr	r3, [r3, #0]
 8003470:	685a      	ldr	r2, [r3, #4]
 8003472:	217e      	movs	r1, #126	; 0x7e
 8003474:	187b      	adds	r3, r7, r1
 8003476:	801a      	strh	r2, [r3, #0]
      if ((nb_remaining_rx_data > 0U)
 8003478:	187b      	adds	r3, r7, r1
 800347a:	881b      	ldrh	r3, [r3, #0]
 800347c:	2b00      	cmp	r3, #0
 800347e:	d100      	bne.n	8003482 <HAL_UART_IRQHandler+0x2fa>
 8003480:	e156      	b.n	8003730 <HAL_UART_IRQHandler+0x5a8>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8003482:	687b      	ldr	r3, [r7, #4]
 8003484:	2258      	movs	r2, #88	; 0x58
 8003486:	5a9b      	ldrh	r3, [r3, r2]
 8003488:	187a      	adds	r2, r7, r1
 800348a:	8812      	ldrh	r2, [r2, #0]
 800348c:	429a      	cmp	r2, r3
 800348e:	d300      	bcc.n	8003492 <HAL_UART_IRQHandler+0x30a>
 8003490:	e14e      	b.n	8003730 <HAL_UART_IRQHandler+0x5a8>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8003492:	687b      	ldr	r3, [r7, #4]
 8003494:	187a      	adds	r2, r7, r1
 8003496:	215a      	movs	r1, #90	; 0x5a
 8003498:	8812      	ldrh	r2, [r2, #0]
 800349a:	525a      	strh	r2, [r3, r1]

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800349c:	687b      	ldr	r3, [r7, #4]
 800349e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80034a0:	699b      	ldr	r3, [r3, #24]
 80034a2:	2b20      	cmp	r3, #32
 80034a4:	d06f      	beq.n	8003586 <HAL_UART_IRQHandler+0x3fe>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80034a6:	f3ef 8310 	mrs	r3, PRIMASK
 80034aa:	633b      	str	r3, [r7, #48]	; 0x30
  return(result);
 80034ac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80034ae:	67bb      	str	r3, [r7, #120]	; 0x78
 80034b0:	2301      	movs	r3, #1
 80034b2:	637b      	str	r3, [r7, #52]	; 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80034b4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80034b6:	f383 8810 	msr	PRIMASK, r3
}
 80034ba:	46c0      	nop			; (mov r8, r8)
 80034bc:	687b      	ldr	r3, [r7, #4]
 80034be:	681b      	ldr	r3, [r3, #0]
 80034c0:	681a      	ldr	r2, [r3, #0]
 80034c2:	687b      	ldr	r3, [r7, #4]
 80034c4:	681b      	ldr	r3, [r3, #0]
 80034c6:	499e      	ldr	r1, [pc, #632]	; (8003740 <HAL_UART_IRQHandler+0x5b8>)
 80034c8:	400a      	ands	r2, r1
 80034ca:	601a      	str	r2, [r3, #0]
 80034cc:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80034ce:	63bb      	str	r3, [r7, #56]	; 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80034d0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80034d2:	f383 8810 	msr	PRIMASK, r3
}
 80034d6:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80034d8:	f3ef 8310 	mrs	r3, PRIMASK
 80034dc:	63fb      	str	r3, [r7, #60]	; 0x3c
  return(result);
 80034de:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80034e0:	677b      	str	r3, [r7, #116]	; 0x74
 80034e2:	2301      	movs	r3, #1
 80034e4:	643b      	str	r3, [r7, #64]	; 0x40
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80034e6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80034e8:	f383 8810 	msr	PRIMASK, r3
}
 80034ec:	46c0      	nop			; (mov r8, r8)
 80034ee:	687b      	ldr	r3, [r7, #4]
 80034f0:	681b      	ldr	r3, [r3, #0]
 80034f2:	689a      	ldr	r2, [r3, #8]
 80034f4:	687b      	ldr	r3, [r7, #4]
 80034f6:	681b      	ldr	r3, [r3, #0]
 80034f8:	2101      	movs	r1, #1
 80034fa:	438a      	bics	r2, r1
 80034fc:	609a      	str	r2, [r3, #8]
 80034fe:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003500:	647b      	str	r3, [r7, #68]	; 0x44
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003502:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003504:	f383 8810 	msr	PRIMASK, r3
}
 8003508:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800350a:	f3ef 8310 	mrs	r3, PRIMASK
 800350e:	64bb      	str	r3, [r7, #72]	; 0x48
  return(result);
 8003510:	6cbb      	ldr	r3, [r7, #72]	; 0x48

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003512:	673b      	str	r3, [r7, #112]	; 0x70
 8003514:	2301      	movs	r3, #1
 8003516:	64fb      	str	r3, [r7, #76]	; 0x4c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003518:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800351a:	f383 8810 	msr	PRIMASK, r3
}
 800351e:	46c0      	nop			; (mov r8, r8)
 8003520:	687b      	ldr	r3, [r7, #4]
 8003522:	681b      	ldr	r3, [r3, #0]
 8003524:	689a      	ldr	r2, [r3, #8]
 8003526:	687b      	ldr	r3, [r7, #4]
 8003528:	681b      	ldr	r3, [r3, #0]
 800352a:	2140      	movs	r1, #64	; 0x40
 800352c:	438a      	bics	r2, r1
 800352e:	609a      	str	r2, [r3, #8]
 8003530:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8003532:	653b      	str	r3, [r7, #80]	; 0x50
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003534:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003536:	f383 8810 	msr	PRIMASK, r3
}
 800353a:	46c0      	nop			; (mov r8, r8)

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800353c:	687b      	ldr	r3, [r7, #4]
 800353e:	2280      	movs	r2, #128	; 0x80
 8003540:	2120      	movs	r1, #32
 8003542:	5099      	str	r1, [r3, r2]
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003544:	687b      	ldr	r3, [r7, #4]
 8003546:	2200      	movs	r2, #0
 8003548:	661a      	str	r2, [r3, #96]	; 0x60
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800354a:	f3ef 8310 	mrs	r3, PRIMASK
 800354e:	657b      	str	r3, [r7, #84]	; 0x54
  return(result);
 8003550:	6d7b      	ldr	r3, [r7, #84]	; 0x54

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003552:	66fb      	str	r3, [r7, #108]	; 0x6c
 8003554:	2301      	movs	r3, #1
 8003556:	65bb      	str	r3, [r7, #88]	; 0x58
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003558:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800355a:	f383 8810 	msr	PRIMASK, r3
}
 800355e:	46c0      	nop			; (mov r8, r8)
 8003560:	687b      	ldr	r3, [r7, #4]
 8003562:	681b      	ldr	r3, [r3, #0]
 8003564:	681a      	ldr	r2, [r3, #0]
 8003566:	687b      	ldr	r3, [r7, #4]
 8003568:	681b      	ldr	r3, [r3, #0]
 800356a:	2110      	movs	r1, #16
 800356c:	438a      	bics	r2, r1
 800356e:	601a      	str	r2, [r3, #0]
 8003570:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003572:	65fb      	str	r3, [r7, #92]	; 0x5c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003574:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003576:	f383 8810 	msr	PRIMASK, r3
}
 800357a:	46c0      	nop			; (mov r8, r8)

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800357c:	687b      	ldr	r3, [r7, #4]
 800357e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003580:	0018      	movs	r0, r3
 8003582:	f7fd fb97 	bl	8000cb4 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8003586:	687b      	ldr	r3, [r7, #4]
 8003588:	2202      	movs	r2, #2
 800358a:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800358c:	687b      	ldr	r3, [r7, #4]
 800358e:	2258      	movs	r2, #88	; 0x58
 8003590:	5a9a      	ldrh	r2, [r3, r2]
 8003592:	687b      	ldr	r3, [r7, #4]
 8003594:	215a      	movs	r1, #90	; 0x5a
 8003596:	5a5b      	ldrh	r3, [r3, r1]
 8003598:	b29b      	uxth	r3, r3
 800359a:	1ad3      	subs	r3, r2, r3
 800359c:	b29a      	uxth	r2, r3
 800359e:	687b      	ldr	r3, [r7, #4]
 80035a0:	0011      	movs	r1, r2
 80035a2:	0018      	movs	r0, r3
 80035a4:	f000 f8e0 	bl	8003768 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 80035a8:	e0c2      	b.n	8003730 <HAL_UART_IRQHandler+0x5a8>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80035aa:	687b      	ldr	r3, [r7, #4]
 80035ac:	2258      	movs	r2, #88	; 0x58
 80035ae:	5a99      	ldrh	r1, [r3, r2]
 80035b0:	687b      	ldr	r3, [r7, #4]
 80035b2:	225a      	movs	r2, #90	; 0x5a
 80035b4:	5a9b      	ldrh	r3, [r3, r2]
 80035b6:	b29a      	uxth	r2, r3
 80035b8:	208e      	movs	r0, #142	; 0x8e
 80035ba:	183b      	adds	r3, r7, r0
 80035bc:	1a8a      	subs	r2, r1, r2
 80035be:	801a      	strh	r2, [r3, #0]
      if ((huart->RxXferCount > 0U)
 80035c0:	687b      	ldr	r3, [r7, #4]
 80035c2:	225a      	movs	r2, #90	; 0x5a
 80035c4:	5a9b      	ldrh	r3, [r3, r2]
 80035c6:	b29b      	uxth	r3, r3
 80035c8:	2b00      	cmp	r3, #0
 80035ca:	d100      	bne.n	80035ce <HAL_UART_IRQHandler+0x446>
 80035cc:	e0b2      	b.n	8003734 <HAL_UART_IRQHandler+0x5ac>
          && (nb_rx_data > 0U))
 80035ce:	183b      	adds	r3, r7, r0
 80035d0:	881b      	ldrh	r3, [r3, #0]
 80035d2:	2b00      	cmp	r3, #0
 80035d4:	d100      	bne.n	80035d8 <HAL_UART_IRQHandler+0x450>
 80035d6:	e0ad      	b.n	8003734 <HAL_UART_IRQHandler+0x5ac>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80035d8:	f3ef 8310 	mrs	r3, PRIMASK
 80035dc:	60fb      	str	r3, [r7, #12]
  return(result);
 80035de:	68fb      	ldr	r3, [r7, #12]
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80035e0:	2488      	movs	r4, #136	; 0x88
 80035e2:	193a      	adds	r2, r7, r4
 80035e4:	6013      	str	r3, [r2, #0]
 80035e6:	2301      	movs	r3, #1
 80035e8:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80035ea:	693b      	ldr	r3, [r7, #16]
 80035ec:	f383 8810 	msr	PRIMASK, r3
}
 80035f0:	46c0      	nop			; (mov r8, r8)
 80035f2:	687b      	ldr	r3, [r7, #4]
 80035f4:	681b      	ldr	r3, [r3, #0]
 80035f6:	681a      	ldr	r2, [r3, #0]
 80035f8:	687b      	ldr	r3, [r7, #4]
 80035fa:	681b      	ldr	r3, [r3, #0]
 80035fc:	4951      	ldr	r1, [pc, #324]	; (8003744 <HAL_UART_IRQHandler+0x5bc>)
 80035fe:	400a      	ands	r2, r1
 8003600:	601a      	str	r2, [r3, #0]
 8003602:	193b      	adds	r3, r7, r4
 8003604:	681b      	ldr	r3, [r3, #0]
 8003606:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003608:	697b      	ldr	r3, [r7, #20]
 800360a:	f383 8810 	msr	PRIMASK, r3
}
 800360e:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003610:	f3ef 8310 	mrs	r3, PRIMASK
 8003614:	61bb      	str	r3, [r7, #24]
  return(result);
 8003616:	69bb      	ldr	r3, [r7, #24]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003618:	2484      	movs	r4, #132	; 0x84
 800361a:	193a      	adds	r2, r7, r4
 800361c:	6013      	str	r3, [r2, #0]
 800361e:	2301      	movs	r3, #1
 8003620:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003622:	69fb      	ldr	r3, [r7, #28]
 8003624:	f383 8810 	msr	PRIMASK, r3
}
 8003628:	46c0      	nop			; (mov r8, r8)
 800362a:	687b      	ldr	r3, [r7, #4]
 800362c:	681b      	ldr	r3, [r3, #0]
 800362e:	689a      	ldr	r2, [r3, #8]
 8003630:	687b      	ldr	r3, [r7, #4]
 8003632:	681b      	ldr	r3, [r3, #0]
 8003634:	2101      	movs	r1, #1
 8003636:	438a      	bics	r2, r1
 8003638:	609a      	str	r2, [r3, #8]
 800363a:	193b      	adds	r3, r7, r4
 800363c:	681b      	ldr	r3, [r3, #0]
 800363e:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003640:	6a3b      	ldr	r3, [r7, #32]
 8003642:	f383 8810 	msr	PRIMASK, r3
}
 8003646:	46c0      	nop			; (mov r8, r8)

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8003648:	687b      	ldr	r3, [r7, #4]
 800364a:	2280      	movs	r2, #128	; 0x80
 800364c:	2120      	movs	r1, #32
 800364e:	5099      	str	r1, [r3, r2]
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003650:	687b      	ldr	r3, [r7, #4]
 8003652:	2200      	movs	r2, #0
 8003654:	661a      	str	r2, [r3, #96]	; 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8003656:	687b      	ldr	r3, [r7, #4]
 8003658:	2200      	movs	r2, #0
 800365a:	669a      	str	r2, [r3, #104]	; 0x68
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800365c:	f3ef 8310 	mrs	r3, PRIMASK
 8003660:	627b      	str	r3, [r7, #36]	; 0x24
  return(result);
 8003662:	6a7b      	ldr	r3, [r7, #36]	; 0x24

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003664:	2480      	movs	r4, #128	; 0x80
 8003666:	193a      	adds	r2, r7, r4
 8003668:	6013      	str	r3, [r2, #0]
 800366a:	2301      	movs	r3, #1
 800366c:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800366e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003670:	f383 8810 	msr	PRIMASK, r3
}
 8003674:	46c0      	nop			; (mov r8, r8)
 8003676:	687b      	ldr	r3, [r7, #4]
 8003678:	681b      	ldr	r3, [r3, #0]
 800367a:	681a      	ldr	r2, [r3, #0]
 800367c:	687b      	ldr	r3, [r7, #4]
 800367e:	681b      	ldr	r3, [r3, #0]
 8003680:	2110      	movs	r1, #16
 8003682:	438a      	bics	r2, r1
 8003684:	601a      	str	r2, [r3, #0]
 8003686:	193b      	adds	r3, r7, r4
 8003688:	681b      	ldr	r3, [r3, #0]
 800368a:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800368c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800368e:	f383 8810 	msr	PRIMASK, r3
}
 8003692:	46c0      	nop			; (mov r8, r8)

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8003694:	687b      	ldr	r3, [r7, #4]
 8003696:	2202      	movs	r2, #2
 8003698:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800369a:	183b      	adds	r3, r7, r0
 800369c:	881a      	ldrh	r2, [r3, #0]
 800369e:	687b      	ldr	r3, [r7, #4]
 80036a0:	0011      	movs	r1, r2
 80036a2:	0018      	movs	r0, r3
 80036a4:	f000 f860 	bl	8003768 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 80036a8:	e044      	b.n	8003734 <HAL_UART_IRQHandler+0x5ac>
  }
#if defined(USART_CR1_UESM)
#if defined(USART_CR3_WUFIE)

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 80036aa:	23a4      	movs	r3, #164	; 0xa4
 80036ac:	18fb      	adds	r3, r7, r3
 80036ae:	681a      	ldr	r2, [r3, #0]
 80036b0:	2380      	movs	r3, #128	; 0x80
 80036b2:	035b      	lsls	r3, r3, #13
 80036b4:	4013      	ands	r3, r2
 80036b6:	d010      	beq.n	80036da <HAL_UART_IRQHandler+0x552>
 80036b8:	239c      	movs	r3, #156	; 0x9c
 80036ba:	18fb      	adds	r3, r7, r3
 80036bc:	681a      	ldr	r2, [r3, #0]
 80036be:	2380      	movs	r3, #128	; 0x80
 80036c0:	03db      	lsls	r3, r3, #15
 80036c2:	4013      	ands	r3, r2
 80036c4:	d009      	beq.n	80036da <HAL_UART_IRQHandler+0x552>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 80036c6:	687b      	ldr	r3, [r7, #4]
 80036c8:	681b      	ldr	r3, [r3, #0]
 80036ca:	2280      	movs	r2, #128	; 0x80
 80036cc:	0352      	lsls	r2, r2, #13
 80036ce:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 80036d0:	687b      	ldr	r3, [r7, #4]
 80036d2:	0018      	movs	r0, r3
 80036d4:	f000 ff82 	bl	80045dc <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 80036d8:	e02f      	b.n	800373a <HAL_UART_IRQHandler+0x5b2>
  }
#endif /* USART_CR3_WUFIE */
#endif /* USART_CR1_UESM */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 80036da:	23a4      	movs	r3, #164	; 0xa4
 80036dc:	18fb      	adds	r3, r7, r3
 80036de:	681b      	ldr	r3, [r3, #0]
 80036e0:	2280      	movs	r2, #128	; 0x80
 80036e2:	4013      	ands	r3, r2
 80036e4:	d00f      	beq.n	8003706 <HAL_UART_IRQHandler+0x57e>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 80036e6:	23a0      	movs	r3, #160	; 0xa0
 80036e8:	18fb      	adds	r3, r7, r3
 80036ea:	681b      	ldr	r3, [r3, #0]
 80036ec:	2280      	movs	r2, #128	; 0x80
 80036ee:	4013      	ands	r3, r2
 80036f0:	d009      	beq.n	8003706 <HAL_UART_IRQHandler+0x57e>
  {
    if (huart->TxISR != NULL)
 80036f2:	687b      	ldr	r3, [r7, #4]
 80036f4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80036f6:	2b00      	cmp	r3, #0
 80036f8:	d01e      	beq.n	8003738 <HAL_UART_IRQHandler+0x5b0>
    {
      huart->TxISR(huart);
 80036fa:	687b      	ldr	r3, [r7, #4]
 80036fc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80036fe:	687a      	ldr	r2, [r7, #4]
 8003700:	0010      	movs	r0, r2
 8003702:	4798      	blx	r3
    }
    return;
 8003704:	e018      	b.n	8003738 <HAL_UART_IRQHandler+0x5b0>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8003706:	23a4      	movs	r3, #164	; 0xa4
 8003708:	18fb      	adds	r3, r7, r3
 800370a:	681b      	ldr	r3, [r3, #0]
 800370c:	2240      	movs	r2, #64	; 0x40
 800370e:	4013      	ands	r3, r2
 8003710:	d013      	beq.n	800373a <HAL_UART_IRQHandler+0x5b2>
 8003712:	23a0      	movs	r3, #160	; 0xa0
 8003714:	18fb      	adds	r3, r7, r3
 8003716:	681b      	ldr	r3, [r3, #0]
 8003718:	2240      	movs	r2, #64	; 0x40
 800371a:	4013      	ands	r3, r2
 800371c:	d00d      	beq.n	800373a <HAL_UART_IRQHandler+0x5b2>
  {
    UART_EndTransmit_IT(huart);
 800371e:	687b      	ldr	r3, [r7, #4]
 8003720:	0018      	movs	r0, r3
 8003722:	f000 fd78 	bl	8004216 <UART_EndTransmit_IT>
    return;
 8003726:	e008      	b.n	800373a <HAL_UART_IRQHandler+0x5b2>
      return;
 8003728:	46c0      	nop			; (mov r8, r8)
 800372a:	e006      	b.n	800373a <HAL_UART_IRQHandler+0x5b2>
    return;
 800372c:	46c0      	nop			; (mov r8, r8)
 800372e:	e004      	b.n	800373a <HAL_UART_IRQHandler+0x5b2>
      return;
 8003730:	46c0      	nop			; (mov r8, r8)
 8003732:	e002      	b.n	800373a <HAL_UART_IRQHandler+0x5b2>
      return;
 8003734:	46c0      	nop			; (mov r8, r8)
 8003736:	e000      	b.n	800373a <HAL_UART_IRQHandler+0x5b2>
    return;
 8003738:	46c0      	nop			; (mov r8, r8)
  }

}
 800373a:	46bd      	mov	sp, r7
 800373c:	b02b      	add	sp, #172	; 0xac
 800373e:	bd90      	pop	{r4, r7, pc}
 8003740:	fffffeff 	.word	0xfffffeff
 8003744:	fffffedf 	.word	0xfffffedf

08003748 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8003748:	b580      	push	{r7, lr}
 800374a:	b082      	sub	sp, #8
 800374c:	af00      	add	r7, sp, #0
 800374e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8003750:	46c0      	nop			; (mov r8, r8)
 8003752:	46bd      	mov	sp, r7
 8003754:	b002      	add	sp, #8
 8003756:	bd80      	pop	{r7, pc}

08003758 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8003758:	b580      	push	{r7, lr}
 800375a:	b082      	sub	sp, #8
 800375c:	af00      	add	r7, sp, #0
 800375e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8003760:	46c0      	nop			; (mov r8, r8)
 8003762:	46bd      	mov	sp, r7
 8003764:	b002      	add	sp, #8
 8003766:	bd80      	pop	{r7, pc}

08003768 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8003768:	b580      	push	{r7, lr}
 800376a:	b082      	sub	sp, #8
 800376c:	af00      	add	r7, sp, #0
 800376e:	6078      	str	r0, [r7, #4]
 8003770:	000a      	movs	r2, r1
 8003772:	1cbb      	adds	r3, r7, #2
 8003774:	801a      	strh	r2, [r3, #0]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8003776:	46c0      	nop			; (mov r8, r8)
 8003778:	46bd      	mov	sp, r7
 800377a:	b002      	add	sp, #8
 800377c:	bd80      	pop	{r7, pc}
	...

08003780 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003780:	b580      	push	{r7, lr}
 8003782:	b088      	sub	sp, #32
 8003784:	af00      	add	r7, sp, #0
 8003786:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8003788:	231e      	movs	r3, #30
 800378a:	18fb      	adds	r3, r7, r3
 800378c:	2200      	movs	r2, #0
 800378e:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8003790:	687b      	ldr	r3, [r7, #4]
 8003792:	689a      	ldr	r2, [r3, #8]
 8003794:	687b      	ldr	r3, [r7, #4]
 8003796:	691b      	ldr	r3, [r3, #16]
 8003798:	431a      	orrs	r2, r3
 800379a:	687b      	ldr	r3, [r7, #4]
 800379c:	695b      	ldr	r3, [r3, #20]
 800379e:	431a      	orrs	r2, r3
 80037a0:	687b      	ldr	r3, [r7, #4]
 80037a2:	69db      	ldr	r3, [r3, #28]
 80037a4:	4313      	orrs	r3, r2
 80037a6:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80037a8:	687b      	ldr	r3, [r7, #4]
 80037aa:	681b      	ldr	r3, [r3, #0]
 80037ac:	681b      	ldr	r3, [r3, #0]
 80037ae:	4aaf      	ldr	r2, [pc, #700]	; (8003a6c <UART_SetConfig+0x2ec>)
 80037b0:	4013      	ands	r3, r2
 80037b2:	0019      	movs	r1, r3
 80037b4:	687b      	ldr	r3, [r7, #4]
 80037b6:	681b      	ldr	r3, [r3, #0]
 80037b8:	697a      	ldr	r2, [r7, #20]
 80037ba:	430a      	orrs	r2, r1
 80037bc:	601a      	str	r2, [r3, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80037be:	687b      	ldr	r3, [r7, #4]
 80037c0:	681b      	ldr	r3, [r3, #0]
 80037c2:	685b      	ldr	r3, [r3, #4]
 80037c4:	4aaa      	ldr	r2, [pc, #680]	; (8003a70 <UART_SetConfig+0x2f0>)
 80037c6:	4013      	ands	r3, r2
 80037c8:	0019      	movs	r1, r3
 80037ca:	687b      	ldr	r3, [r7, #4]
 80037cc:	68da      	ldr	r2, [r3, #12]
 80037ce:	687b      	ldr	r3, [r7, #4]
 80037d0:	681b      	ldr	r3, [r3, #0]
 80037d2:	430a      	orrs	r2, r1
 80037d4:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80037d6:	687b      	ldr	r3, [r7, #4]
 80037d8:	699b      	ldr	r3, [r3, #24]
 80037da:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 80037dc:	687b      	ldr	r3, [r7, #4]
 80037de:	6a1b      	ldr	r3, [r3, #32]
 80037e0:	697a      	ldr	r2, [r7, #20]
 80037e2:	4313      	orrs	r3, r2
 80037e4:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80037e6:	687b      	ldr	r3, [r7, #4]
 80037e8:	681b      	ldr	r3, [r3, #0]
 80037ea:	689b      	ldr	r3, [r3, #8]
 80037ec:	4aa1      	ldr	r2, [pc, #644]	; (8003a74 <UART_SetConfig+0x2f4>)
 80037ee:	4013      	ands	r3, r2
 80037f0:	0019      	movs	r1, r3
 80037f2:	687b      	ldr	r3, [r7, #4]
 80037f4:	681b      	ldr	r3, [r3, #0]
 80037f6:	697a      	ldr	r2, [r7, #20]
 80037f8:	430a      	orrs	r2, r1
 80037fa:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80037fc:	687b      	ldr	r3, [r7, #4]
 80037fe:	681b      	ldr	r3, [r3, #0]
 8003800:	4a9d      	ldr	r2, [pc, #628]	; (8003a78 <UART_SetConfig+0x2f8>)
 8003802:	4293      	cmp	r3, r2
 8003804:	d127      	bne.n	8003856 <UART_SetConfig+0xd6>
 8003806:	4b9d      	ldr	r3, [pc, #628]	; (8003a7c <UART_SetConfig+0x2fc>)
 8003808:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800380a:	2203      	movs	r2, #3
 800380c:	4013      	ands	r3, r2
 800380e:	2b03      	cmp	r3, #3
 8003810:	d00d      	beq.n	800382e <UART_SetConfig+0xae>
 8003812:	d81b      	bhi.n	800384c <UART_SetConfig+0xcc>
 8003814:	2b02      	cmp	r3, #2
 8003816:	d014      	beq.n	8003842 <UART_SetConfig+0xc2>
 8003818:	d818      	bhi.n	800384c <UART_SetConfig+0xcc>
 800381a:	2b00      	cmp	r3, #0
 800381c:	d002      	beq.n	8003824 <UART_SetConfig+0xa4>
 800381e:	2b01      	cmp	r3, #1
 8003820:	d00a      	beq.n	8003838 <UART_SetConfig+0xb8>
 8003822:	e013      	b.n	800384c <UART_SetConfig+0xcc>
 8003824:	231f      	movs	r3, #31
 8003826:	18fb      	adds	r3, r7, r3
 8003828:	2200      	movs	r2, #0
 800382a:	701a      	strb	r2, [r3, #0]
 800382c:	e065      	b.n	80038fa <UART_SetConfig+0x17a>
 800382e:	231f      	movs	r3, #31
 8003830:	18fb      	adds	r3, r7, r3
 8003832:	2202      	movs	r2, #2
 8003834:	701a      	strb	r2, [r3, #0]
 8003836:	e060      	b.n	80038fa <UART_SetConfig+0x17a>
 8003838:	231f      	movs	r3, #31
 800383a:	18fb      	adds	r3, r7, r3
 800383c:	2204      	movs	r2, #4
 800383e:	701a      	strb	r2, [r3, #0]
 8003840:	e05b      	b.n	80038fa <UART_SetConfig+0x17a>
 8003842:	231f      	movs	r3, #31
 8003844:	18fb      	adds	r3, r7, r3
 8003846:	2208      	movs	r2, #8
 8003848:	701a      	strb	r2, [r3, #0]
 800384a:	e056      	b.n	80038fa <UART_SetConfig+0x17a>
 800384c:	231f      	movs	r3, #31
 800384e:	18fb      	adds	r3, r7, r3
 8003850:	2210      	movs	r2, #16
 8003852:	701a      	strb	r2, [r3, #0]
 8003854:	e051      	b.n	80038fa <UART_SetConfig+0x17a>
 8003856:	687b      	ldr	r3, [r7, #4]
 8003858:	681b      	ldr	r3, [r3, #0]
 800385a:	4a89      	ldr	r2, [pc, #548]	; (8003a80 <UART_SetConfig+0x300>)
 800385c:	4293      	cmp	r3, r2
 800385e:	d134      	bne.n	80038ca <UART_SetConfig+0x14a>
 8003860:	4b86      	ldr	r3, [pc, #536]	; (8003a7c <UART_SetConfig+0x2fc>)
 8003862:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003864:	23c0      	movs	r3, #192	; 0xc0
 8003866:	029b      	lsls	r3, r3, #10
 8003868:	4013      	ands	r3, r2
 800386a:	22c0      	movs	r2, #192	; 0xc0
 800386c:	0292      	lsls	r2, r2, #10
 800386e:	4293      	cmp	r3, r2
 8003870:	d017      	beq.n	80038a2 <UART_SetConfig+0x122>
 8003872:	22c0      	movs	r2, #192	; 0xc0
 8003874:	0292      	lsls	r2, r2, #10
 8003876:	4293      	cmp	r3, r2
 8003878:	d822      	bhi.n	80038c0 <UART_SetConfig+0x140>
 800387a:	2280      	movs	r2, #128	; 0x80
 800387c:	0292      	lsls	r2, r2, #10
 800387e:	4293      	cmp	r3, r2
 8003880:	d019      	beq.n	80038b6 <UART_SetConfig+0x136>
 8003882:	2280      	movs	r2, #128	; 0x80
 8003884:	0292      	lsls	r2, r2, #10
 8003886:	4293      	cmp	r3, r2
 8003888:	d81a      	bhi.n	80038c0 <UART_SetConfig+0x140>
 800388a:	2b00      	cmp	r3, #0
 800388c:	d004      	beq.n	8003898 <UART_SetConfig+0x118>
 800388e:	2280      	movs	r2, #128	; 0x80
 8003890:	0252      	lsls	r2, r2, #9
 8003892:	4293      	cmp	r3, r2
 8003894:	d00a      	beq.n	80038ac <UART_SetConfig+0x12c>
 8003896:	e013      	b.n	80038c0 <UART_SetConfig+0x140>
 8003898:	231f      	movs	r3, #31
 800389a:	18fb      	adds	r3, r7, r3
 800389c:	2200      	movs	r2, #0
 800389e:	701a      	strb	r2, [r3, #0]
 80038a0:	e02b      	b.n	80038fa <UART_SetConfig+0x17a>
 80038a2:	231f      	movs	r3, #31
 80038a4:	18fb      	adds	r3, r7, r3
 80038a6:	2202      	movs	r2, #2
 80038a8:	701a      	strb	r2, [r3, #0]
 80038aa:	e026      	b.n	80038fa <UART_SetConfig+0x17a>
 80038ac:	231f      	movs	r3, #31
 80038ae:	18fb      	adds	r3, r7, r3
 80038b0:	2204      	movs	r2, #4
 80038b2:	701a      	strb	r2, [r3, #0]
 80038b4:	e021      	b.n	80038fa <UART_SetConfig+0x17a>
 80038b6:	231f      	movs	r3, #31
 80038b8:	18fb      	adds	r3, r7, r3
 80038ba:	2208      	movs	r2, #8
 80038bc:	701a      	strb	r2, [r3, #0]
 80038be:	e01c      	b.n	80038fa <UART_SetConfig+0x17a>
 80038c0:	231f      	movs	r3, #31
 80038c2:	18fb      	adds	r3, r7, r3
 80038c4:	2210      	movs	r2, #16
 80038c6:	701a      	strb	r2, [r3, #0]
 80038c8:	e017      	b.n	80038fa <UART_SetConfig+0x17a>
 80038ca:	687b      	ldr	r3, [r7, #4]
 80038cc:	681b      	ldr	r3, [r3, #0]
 80038ce:	4a6d      	ldr	r2, [pc, #436]	; (8003a84 <UART_SetConfig+0x304>)
 80038d0:	4293      	cmp	r3, r2
 80038d2:	d104      	bne.n	80038de <UART_SetConfig+0x15e>
 80038d4:	231f      	movs	r3, #31
 80038d6:	18fb      	adds	r3, r7, r3
 80038d8:	2200      	movs	r2, #0
 80038da:	701a      	strb	r2, [r3, #0]
 80038dc:	e00d      	b.n	80038fa <UART_SetConfig+0x17a>
 80038de:	687b      	ldr	r3, [r7, #4]
 80038e0:	681b      	ldr	r3, [r3, #0]
 80038e2:	4a69      	ldr	r2, [pc, #420]	; (8003a88 <UART_SetConfig+0x308>)
 80038e4:	4293      	cmp	r3, r2
 80038e6:	d104      	bne.n	80038f2 <UART_SetConfig+0x172>
 80038e8:	231f      	movs	r3, #31
 80038ea:	18fb      	adds	r3, r7, r3
 80038ec:	2200      	movs	r2, #0
 80038ee:	701a      	strb	r2, [r3, #0]
 80038f0:	e003      	b.n	80038fa <UART_SetConfig+0x17a>
 80038f2:	231f      	movs	r3, #31
 80038f4:	18fb      	adds	r3, r7, r3
 80038f6:	2210      	movs	r2, #16
 80038f8:	701a      	strb	r2, [r3, #0]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80038fa:	687b      	ldr	r3, [r7, #4]
 80038fc:	69da      	ldr	r2, [r3, #28]
 80038fe:	2380      	movs	r3, #128	; 0x80
 8003900:	021b      	lsls	r3, r3, #8
 8003902:	429a      	cmp	r2, r3
 8003904:	d15c      	bne.n	80039c0 <UART_SetConfig+0x240>
  {
    switch (clocksource)
 8003906:	231f      	movs	r3, #31
 8003908:	18fb      	adds	r3, r7, r3
 800390a:	781b      	ldrb	r3, [r3, #0]
 800390c:	2b08      	cmp	r3, #8
 800390e:	d015      	beq.n	800393c <UART_SetConfig+0x1bc>
 8003910:	dc18      	bgt.n	8003944 <UART_SetConfig+0x1c4>
 8003912:	2b04      	cmp	r3, #4
 8003914:	d00d      	beq.n	8003932 <UART_SetConfig+0x1b2>
 8003916:	dc15      	bgt.n	8003944 <UART_SetConfig+0x1c4>
 8003918:	2b00      	cmp	r3, #0
 800391a:	d002      	beq.n	8003922 <UART_SetConfig+0x1a2>
 800391c:	2b02      	cmp	r3, #2
 800391e:	d005      	beq.n	800392c <UART_SetConfig+0x1ac>
 8003920:	e010      	b.n	8003944 <UART_SetConfig+0x1c4>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003922:	f7fe f8b7 	bl	8001a94 <HAL_RCC_GetPCLK1Freq>
 8003926:	0003      	movs	r3, r0
 8003928:	61bb      	str	r3, [r7, #24]
        break;
 800392a:	e012      	b.n	8003952 <UART_SetConfig+0x1d2>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800392c:	4b57      	ldr	r3, [pc, #348]	; (8003a8c <UART_SetConfig+0x30c>)
 800392e:	61bb      	str	r3, [r7, #24]
        break;
 8003930:	e00f      	b.n	8003952 <UART_SetConfig+0x1d2>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003932:	f7fe f833 	bl	800199c <HAL_RCC_GetSysClockFreq>
 8003936:	0003      	movs	r3, r0
 8003938:	61bb      	str	r3, [r7, #24]
        break;
 800393a:	e00a      	b.n	8003952 <UART_SetConfig+0x1d2>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800393c:	2380      	movs	r3, #128	; 0x80
 800393e:	021b      	lsls	r3, r3, #8
 8003940:	61bb      	str	r3, [r7, #24]
        break;
 8003942:	e006      	b.n	8003952 <UART_SetConfig+0x1d2>
      default:
        pclk = 0U;
 8003944:	2300      	movs	r3, #0
 8003946:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8003948:	231e      	movs	r3, #30
 800394a:	18fb      	adds	r3, r7, r3
 800394c:	2201      	movs	r2, #1
 800394e:	701a      	strb	r2, [r3, #0]
        break;
 8003950:	46c0      	nop			; (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8003952:	69bb      	ldr	r3, [r7, #24]
 8003954:	2b00      	cmp	r3, #0
 8003956:	d100      	bne.n	800395a <UART_SetConfig+0x1da>
 8003958:	e07a      	b.n	8003a50 <UART_SetConfig+0x2d0>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800395a:	69bb      	ldr	r3, [r7, #24]
 800395c:	005a      	lsls	r2, r3, #1
 800395e:	687b      	ldr	r3, [r7, #4]
 8003960:	685b      	ldr	r3, [r3, #4]
 8003962:	085b      	lsrs	r3, r3, #1
 8003964:	18d2      	adds	r2, r2, r3
 8003966:	687b      	ldr	r3, [r7, #4]
 8003968:	685b      	ldr	r3, [r3, #4]
 800396a:	0019      	movs	r1, r3
 800396c:	0010      	movs	r0, r2
 800396e:	f7fc fbd3 	bl	8000118 <__udivsi3>
 8003972:	0003      	movs	r3, r0
 8003974:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003976:	693b      	ldr	r3, [r7, #16]
 8003978:	2b0f      	cmp	r3, #15
 800397a:	d91c      	bls.n	80039b6 <UART_SetConfig+0x236>
 800397c:	693a      	ldr	r2, [r7, #16]
 800397e:	2380      	movs	r3, #128	; 0x80
 8003980:	025b      	lsls	r3, r3, #9
 8003982:	429a      	cmp	r2, r3
 8003984:	d217      	bcs.n	80039b6 <UART_SetConfig+0x236>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8003986:	693b      	ldr	r3, [r7, #16]
 8003988:	b29a      	uxth	r2, r3
 800398a:	200e      	movs	r0, #14
 800398c:	183b      	adds	r3, r7, r0
 800398e:	210f      	movs	r1, #15
 8003990:	438a      	bics	r2, r1
 8003992:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8003994:	693b      	ldr	r3, [r7, #16]
 8003996:	085b      	lsrs	r3, r3, #1
 8003998:	b29b      	uxth	r3, r3
 800399a:	2207      	movs	r2, #7
 800399c:	4013      	ands	r3, r2
 800399e:	b299      	uxth	r1, r3
 80039a0:	183b      	adds	r3, r7, r0
 80039a2:	183a      	adds	r2, r7, r0
 80039a4:	8812      	ldrh	r2, [r2, #0]
 80039a6:	430a      	orrs	r2, r1
 80039a8:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
 80039aa:	687b      	ldr	r3, [r7, #4]
 80039ac:	681b      	ldr	r3, [r3, #0]
 80039ae:	183a      	adds	r2, r7, r0
 80039b0:	8812      	ldrh	r2, [r2, #0]
 80039b2:	60da      	str	r2, [r3, #12]
 80039b4:	e04c      	b.n	8003a50 <UART_SetConfig+0x2d0>
      }
      else
      {
        ret = HAL_ERROR;
 80039b6:	231e      	movs	r3, #30
 80039b8:	18fb      	adds	r3, r7, r3
 80039ba:	2201      	movs	r2, #1
 80039bc:	701a      	strb	r2, [r3, #0]
 80039be:	e047      	b.n	8003a50 <UART_SetConfig+0x2d0>
      }
    }
  }
  else
  {
    switch (clocksource)
 80039c0:	231f      	movs	r3, #31
 80039c2:	18fb      	adds	r3, r7, r3
 80039c4:	781b      	ldrb	r3, [r3, #0]
 80039c6:	2b08      	cmp	r3, #8
 80039c8:	d015      	beq.n	80039f6 <UART_SetConfig+0x276>
 80039ca:	dc18      	bgt.n	80039fe <UART_SetConfig+0x27e>
 80039cc:	2b04      	cmp	r3, #4
 80039ce:	d00d      	beq.n	80039ec <UART_SetConfig+0x26c>
 80039d0:	dc15      	bgt.n	80039fe <UART_SetConfig+0x27e>
 80039d2:	2b00      	cmp	r3, #0
 80039d4:	d002      	beq.n	80039dc <UART_SetConfig+0x25c>
 80039d6:	2b02      	cmp	r3, #2
 80039d8:	d005      	beq.n	80039e6 <UART_SetConfig+0x266>
 80039da:	e010      	b.n	80039fe <UART_SetConfig+0x27e>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80039dc:	f7fe f85a 	bl	8001a94 <HAL_RCC_GetPCLK1Freq>
 80039e0:	0003      	movs	r3, r0
 80039e2:	61bb      	str	r3, [r7, #24]
        break;
 80039e4:	e012      	b.n	8003a0c <UART_SetConfig+0x28c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80039e6:	4b29      	ldr	r3, [pc, #164]	; (8003a8c <UART_SetConfig+0x30c>)
 80039e8:	61bb      	str	r3, [r7, #24]
        break;
 80039ea:	e00f      	b.n	8003a0c <UART_SetConfig+0x28c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80039ec:	f7fd ffd6 	bl	800199c <HAL_RCC_GetSysClockFreq>
 80039f0:	0003      	movs	r3, r0
 80039f2:	61bb      	str	r3, [r7, #24]
        break;
 80039f4:	e00a      	b.n	8003a0c <UART_SetConfig+0x28c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80039f6:	2380      	movs	r3, #128	; 0x80
 80039f8:	021b      	lsls	r3, r3, #8
 80039fa:	61bb      	str	r3, [r7, #24]
        break;
 80039fc:	e006      	b.n	8003a0c <UART_SetConfig+0x28c>
      default:
        pclk = 0U;
 80039fe:	2300      	movs	r3, #0
 8003a00:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8003a02:	231e      	movs	r3, #30
 8003a04:	18fb      	adds	r3, r7, r3
 8003a06:	2201      	movs	r2, #1
 8003a08:	701a      	strb	r2, [r3, #0]
        break;
 8003a0a:	46c0      	nop			; (mov r8, r8)
    }

    if (pclk != 0U)
 8003a0c:	69bb      	ldr	r3, [r7, #24]
 8003a0e:	2b00      	cmp	r3, #0
 8003a10:	d01e      	beq.n	8003a50 <UART_SetConfig+0x2d0>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8003a12:	687b      	ldr	r3, [r7, #4]
 8003a14:	685b      	ldr	r3, [r3, #4]
 8003a16:	085a      	lsrs	r2, r3, #1
 8003a18:	69bb      	ldr	r3, [r7, #24]
 8003a1a:	18d2      	adds	r2, r2, r3
 8003a1c:	687b      	ldr	r3, [r7, #4]
 8003a1e:	685b      	ldr	r3, [r3, #4]
 8003a20:	0019      	movs	r1, r3
 8003a22:	0010      	movs	r0, r2
 8003a24:	f7fc fb78 	bl	8000118 <__udivsi3>
 8003a28:	0003      	movs	r3, r0
 8003a2a:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003a2c:	693b      	ldr	r3, [r7, #16]
 8003a2e:	2b0f      	cmp	r3, #15
 8003a30:	d90a      	bls.n	8003a48 <UART_SetConfig+0x2c8>
 8003a32:	693a      	ldr	r2, [r7, #16]
 8003a34:	2380      	movs	r3, #128	; 0x80
 8003a36:	025b      	lsls	r3, r3, #9
 8003a38:	429a      	cmp	r2, r3
 8003a3a:	d205      	bcs.n	8003a48 <UART_SetConfig+0x2c8>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8003a3c:	693b      	ldr	r3, [r7, #16]
 8003a3e:	b29a      	uxth	r2, r3
 8003a40:	687b      	ldr	r3, [r7, #4]
 8003a42:	681b      	ldr	r3, [r3, #0]
 8003a44:	60da      	str	r2, [r3, #12]
 8003a46:	e003      	b.n	8003a50 <UART_SetConfig+0x2d0>
      }
      else
      {
        ret = HAL_ERROR;
 8003a48:	231e      	movs	r3, #30
 8003a4a:	18fb      	adds	r3, r7, r3
 8003a4c:	2201      	movs	r2, #1
 8003a4e:	701a      	strb	r2, [r3, #0]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8003a50:	687b      	ldr	r3, [r7, #4]
 8003a52:	2200      	movs	r2, #0
 8003a54:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 8003a56:	687b      	ldr	r3, [r7, #4]
 8003a58:	2200      	movs	r2, #0
 8003a5a:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 8003a5c:	231e      	movs	r3, #30
 8003a5e:	18fb      	adds	r3, r7, r3
 8003a60:	781b      	ldrb	r3, [r3, #0]
}
 8003a62:	0018      	movs	r0, r3
 8003a64:	46bd      	mov	sp, r7
 8003a66:	b008      	add	sp, #32
 8003a68:	bd80      	pop	{r7, pc}
 8003a6a:	46c0      	nop			; (mov r8, r8)
 8003a6c:	efff69f3 	.word	0xefff69f3
 8003a70:	ffffcfff 	.word	0xffffcfff
 8003a74:	fffff4ff 	.word	0xfffff4ff
 8003a78:	40013800 	.word	0x40013800
 8003a7c:	40021000 	.word	0x40021000
 8003a80:	40004400 	.word	0x40004400
 8003a84:	40004800 	.word	0x40004800
 8003a88:	40004c00 	.word	0x40004c00
 8003a8c:	007a1200 	.word	0x007a1200

08003a90 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8003a90:	b580      	push	{r7, lr}
 8003a92:	b082      	sub	sp, #8
 8003a94:	af00      	add	r7, sp, #0
 8003a96:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8003a98:	687b      	ldr	r3, [r7, #4]
 8003a9a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a9c:	2201      	movs	r2, #1
 8003a9e:	4013      	ands	r3, r2
 8003aa0:	d00b      	beq.n	8003aba <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8003aa2:	687b      	ldr	r3, [r7, #4]
 8003aa4:	681b      	ldr	r3, [r3, #0]
 8003aa6:	685b      	ldr	r3, [r3, #4]
 8003aa8:	4a4a      	ldr	r2, [pc, #296]	; (8003bd4 <UART_AdvFeatureConfig+0x144>)
 8003aaa:	4013      	ands	r3, r2
 8003aac:	0019      	movs	r1, r3
 8003aae:	687b      	ldr	r3, [r7, #4]
 8003ab0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003ab2:	687b      	ldr	r3, [r7, #4]
 8003ab4:	681b      	ldr	r3, [r3, #0]
 8003ab6:	430a      	orrs	r2, r1
 8003ab8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8003aba:	687b      	ldr	r3, [r7, #4]
 8003abc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003abe:	2202      	movs	r2, #2
 8003ac0:	4013      	ands	r3, r2
 8003ac2:	d00b      	beq.n	8003adc <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8003ac4:	687b      	ldr	r3, [r7, #4]
 8003ac6:	681b      	ldr	r3, [r3, #0]
 8003ac8:	685b      	ldr	r3, [r3, #4]
 8003aca:	4a43      	ldr	r2, [pc, #268]	; (8003bd8 <UART_AdvFeatureConfig+0x148>)
 8003acc:	4013      	ands	r3, r2
 8003ace:	0019      	movs	r1, r3
 8003ad0:	687b      	ldr	r3, [r7, #4]
 8003ad2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003ad4:	687b      	ldr	r3, [r7, #4]
 8003ad6:	681b      	ldr	r3, [r3, #0]
 8003ad8:	430a      	orrs	r2, r1
 8003ada:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8003adc:	687b      	ldr	r3, [r7, #4]
 8003ade:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ae0:	2204      	movs	r2, #4
 8003ae2:	4013      	ands	r3, r2
 8003ae4:	d00b      	beq.n	8003afe <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8003ae6:	687b      	ldr	r3, [r7, #4]
 8003ae8:	681b      	ldr	r3, [r3, #0]
 8003aea:	685b      	ldr	r3, [r3, #4]
 8003aec:	4a3b      	ldr	r2, [pc, #236]	; (8003bdc <UART_AdvFeatureConfig+0x14c>)
 8003aee:	4013      	ands	r3, r2
 8003af0:	0019      	movs	r1, r3
 8003af2:	687b      	ldr	r3, [r7, #4]
 8003af4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003af6:	687b      	ldr	r3, [r7, #4]
 8003af8:	681b      	ldr	r3, [r3, #0]
 8003afa:	430a      	orrs	r2, r1
 8003afc:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8003afe:	687b      	ldr	r3, [r7, #4]
 8003b00:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b02:	2208      	movs	r2, #8
 8003b04:	4013      	ands	r3, r2
 8003b06:	d00b      	beq.n	8003b20 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8003b08:	687b      	ldr	r3, [r7, #4]
 8003b0a:	681b      	ldr	r3, [r3, #0]
 8003b0c:	685b      	ldr	r3, [r3, #4]
 8003b0e:	4a34      	ldr	r2, [pc, #208]	; (8003be0 <UART_AdvFeatureConfig+0x150>)
 8003b10:	4013      	ands	r3, r2
 8003b12:	0019      	movs	r1, r3
 8003b14:	687b      	ldr	r3, [r7, #4]
 8003b16:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003b18:	687b      	ldr	r3, [r7, #4]
 8003b1a:	681b      	ldr	r3, [r3, #0]
 8003b1c:	430a      	orrs	r2, r1
 8003b1e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8003b20:	687b      	ldr	r3, [r7, #4]
 8003b22:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b24:	2210      	movs	r2, #16
 8003b26:	4013      	ands	r3, r2
 8003b28:	d00b      	beq.n	8003b42 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8003b2a:	687b      	ldr	r3, [r7, #4]
 8003b2c:	681b      	ldr	r3, [r3, #0]
 8003b2e:	689b      	ldr	r3, [r3, #8]
 8003b30:	4a2c      	ldr	r2, [pc, #176]	; (8003be4 <UART_AdvFeatureConfig+0x154>)
 8003b32:	4013      	ands	r3, r2
 8003b34:	0019      	movs	r1, r3
 8003b36:	687b      	ldr	r3, [r7, #4]
 8003b38:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003b3a:	687b      	ldr	r3, [r7, #4]
 8003b3c:	681b      	ldr	r3, [r3, #0]
 8003b3e:	430a      	orrs	r2, r1
 8003b40:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8003b42:	687b      	ldr	r3, [r7, #4]
 8003b44:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b46:	2220      	movs	r2, #32
 8003b48:	4013      	ands	r3, r2
 8003b4a:	d00b      	beq.n	8003b64 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8003b4c:	687b      	ldr	r3, [r7, #4]
 8003b4e:	681b      	ldr	r3, [r3, #0]
 8003b50:	689b      	ldr	r3, [r3, #8]
 8003b52:	4a25      	ldr	r2, [pc, #148]	; (8003be8 <UART_AdvFeatureConfig+0x158>)
 8003b54:	4013      	ands	r3, r2
 8003b56:	0019      	movs	r1, r3
 8003b58:	687b      	ldr	r3, [r7, #4]
 8003b5a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003b5c:	687b      	ldr	r3, [r7, #4]
 8003b5e:	681b      	ldr	r3, [r3, #0]
 8003b60:	430a      	orrs	r2, r1
 8003b62:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8003b64:	687b      	ldr	r3, [r7, #4]
 8003b66:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b68:	2240      	movs	r2, #64	; 0x40
 8003b6a:	4013      	ands	r3, r2
 8003b6c:	d01d      	beq.n	8003baa <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8003b6e:	687b      	ldr	r3, [r7, #4]
 8003b70:	681b      	ldr	r3, [r3, #0]
 8003b72:	685b      	ldr	r3, [r3, #4]
 8003b74:	4a1d      	ldr	r2, [pc, #116]	; (8003bec <UART_AdvFeatureConfig+0x15c>)
 8003b76:	4013      	ands	r3, r2
 8003b78:	0019      	movs	r1, r3
 8003b7a:	687b      	ldr	r3, [r7, #4]
 8003b7c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003b7e:	687b      	ldr	r3, [r7, #4]
 8003b80:	681b      	ldr	r3, [r3, #0]
 8003b82:	430a      	orrs	r2, r1
 8003b84:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8003b86:	687b      	ldr	r3, [r7, #4]
 8003b88:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003b8a:	2380      	movs	r3, #128	; 0x80
 8003b8c:	035b      	lsls	r3, r3, #13
 8003b8e:	429a      	cmp	r2, r3
 8003b90:	d10b      	bne.n	8003baa <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8003b92:	687b      	ldr	r3, [r7, #4]
 8003b94:	681b      	ldr	r3, [r3, #0]
 8003b96:	685b      	ldr	r3, [r3, #4]
 8003b98:	4a15      	ldr	r2, [pc, #84]	; (8003bf0 <UART_AdvFeatureConfig+0x160>)
 8003b9a:	4013      	ands	r3, r2
 8003b9c:	0019      	movs	r1, r3
 8003b9e:	687b      	ldr	r3, [r7, #4]
 8003ba0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003ba2:	687b      	ldr	r3, [r7, #4]
 8003ba4:	681b      	ldr	r3, [r3, #0]
 8003ba6:	430a      	orrs	r2, r1
 8003ba8:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8003baa:	687b      	ldr	r3, [r7, #4]
 8003bac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003bae:	2280      	movs	r2, #128	; 0x80
 8003bb0:	4013      	ands	r3, r2
 8003bb2:	d00b      	beq.n	8003bcc <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8003bb4:	687b      	ldr	r3, [r7, #4]
 8003bb6:	681b      	ldr	r3, [r3, #0]
 8003bb8:	685b      	ldr	r3, [r3, #4]
 8003bba:	4a0e      	ldr	r2, [pc, #56]	; (8003bf4 <UART_AdvFeatureConfig+0x164>)
 8003bbc:	4013      	ands	r3, r2
 8003bbe:	0019      	movs	r1, r3
 8003bc0:	687b      	ldr	r3, [r7, #4]
 8003bc2:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8003bc4:	687b      	ldr	r3, [r7, #4]
 8003bc6:	681b      	ldr	r3, [r3, #0]
 8003bc8:	430a      	orrs	r2, r1
 8003bca:	605a      	str	r2, [r3, #4]
  }
}
 8003bcc:	46c0      	nop			; (mov r8, r8)
 8003bce:	46bd      	mov	sp, r7
 8003bd0:	b002      	add	sp, #8
 8003bd2:	bd80      	pop	{r7, pc}
 8003bd4:	fffdffff 	.word	0xfffdffff
 8003bd8:	fffeffff 	.word	0xfffeffff
 8003bdc:	fffbffff 	.word	0xfffbffff
 8003be0:	ffff7fff 	.word	0xffff7fff
 8003be4:	ffffefff 	.word	0xffffefff
 8003be8:	ffffdfff 	.word	0xffffdfff
 8003bec:	ffefffff 	.word	0xffefffff
 8003bf0:	ff9fffff 	.word	0xff9fffff
 8003bf4:	fff7ffff 	.word	0xfff7ffff

08003bf8 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8003bf8:	b580      	push	{r7, lr}
 8003bfa:	b092      	sub	sp, #72	; 0x48
 8003bfc:	af02      	add	r7, sp, #8
 8003bfe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003c00:	687b      	ldr	r3, [r7, #4]
 8003c02:	2284      	movs	r2, #132	; 0x84
 8003c04:	2100      	movs	r1, #0
 8003c06:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8003c08:	f7fc ff6c 	bl	8000ae4 <HAL_GetTick>
 8003c0c:	0003      	movs	r3, r0
 8003c0e:	63fb      	str	r3, [r7, #60]	; 0x3c

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8003c10:	687b      	ldr	r3, [r7, #4]
 8003c12:	681b      	ldr	r3, [r3, #0]
 8003c14:	681b      	ldr	r3, [r3, #0]
 8003c16:	2208      	movs	r2, #8
 8003c18:	4013      	ands	r3, r2
 8003c1a:	2b08      	cmp	r3, #8
 8003c1c:	d12c      	bne.n	8003c78 <UART_CheckIdleState+0x80>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003c1e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003c20:	2280      	movs	r2, #128	; 0x80
 8003c22:	0391      	lsls	r1, r2, #14
 8003c24:	6878      	ldr	r0, [r7, #4]
 8003c26:	4a46      	ldr	r2, [pc, #280]	; (8003d40 <UART_CheckIdleState+0x148>)
 8003c28:	9200      	str	r2, [sp, #0]
 8003c2a:	2200      	movs	r2, #0
 8003c2c:	f000 f88c 	bl	8003d48 <UART_WaitOnFlagUntilTimeout>
 8003c30:	1e03      	subs	r3, r0, #0
 8003c32:	d021      	beq.n	8003c78 <UART_CheckIdleState+0x80>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003c34:	f3ef 8310 	mrs	r3, PRIMASK
 8003c38:	627b      	str	r3, [r7, #36]	; 0x24
  return(result);
 8003c3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 8003c3c:	63bb      	str	r3, [r7, #56]	; 0x38
 8003c3e:	2301      	movs	r3, #1
 8003c40:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003c42:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003c44:	f383 8810 	msr	PRIMASK, r3
}
 8003c48:	46c0      	nop			; (mov r8, r8)
 8003c4a:	687b      	ldr	r3, [r7, #4]
 8003c4c:	681b      	ldr	r3, [r3, #0]
 8003c4e:	681a      	ldr	r2, [r3, #0]
 8003c50:	687b      	ldr	r3, [r7, #4]
 8003c52:	681b      	ldr	r3, [r3, #0]
 8003c54:	2180      	movs	r1, #128	; 0x80
 8003c56:	438a      	bics	r2, r1
 8003c58:	601a      	str	r2, [r3, #0]
 8003c5a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003c5c:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003c5e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003c60:	f383 8810 	msr	PRIMASK, r3
}
 8003c64:	46c0      	nop			; (mov r8, r8)

      huart->gState = HAL_UART_STATE_READY;
 8003c66:	687b      	ldr	r3, [r7, #4]
 8003c68:	2220      	movs	r2, #32
 8003c6a:	67da      	str	r2, [r3, #124]	; 0x7c

      __HAL_UNLOCK(huart);
 8003c6c:	687b      	ldr	r3, [r7, #4]
 8003c6e:	2278      	movs	r2, #120	; 0x78
 8003c70:	2100      	movs	r1, #0
 8003c72:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003c74:	2303      	movs	r3, #3
 8003c76:	e05f      	b.n	8003d38 <UART_CheckIdleState+0x140>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8003c78:	687b      	ldr	r3, [r7, #4]
 8003c7a:	681b      	ldr	r3, [r3, #0]
 8003c7c:	681b      	ldr	r3, [r3, #0]
 8003c7e:	2204      	movs	r2, #4
 8003c80:	4013      	ands	r3, r2
 8003c82:	2b04      	cmp	r3, #4
 8003c84:	d146      	bne.n	8003d14 <UART_CheckIdleState+0x11c>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003c86:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003c88:	2280      	movs	r2, #128	; 0x80
 8003c8a:	03d1      	lsls	r1, r2, #15
 8003c8c:	6878      	ldr	r0, [r7, #4]
 8003c8e:	4a2c      	ldr	r2, [pc, #176]	; (8003d40 <UART_CheckIdleState+0x148>)
 8003c90:	9200      	str	r2, [sp, #0]
 8003c92:	2200      	movs	r2, #0
 8003c94:	f000 f858 	bl	8003d48 <UART_WaitOnFlagUntilTimeout>
 8003c98:	1e03      	subs	r3, r0, #0
 8003c9a:	d03b      	beq.n	8003d14 <UART_CheckIdleState+0x11c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003c9c:	f3ef 8310 	mrs	r3, PRIMASK
 8003ca0:	60fb      	str	r3, [r7, #12]
  return(result);
 8003ca2:	68fb      	ldr	r3, [r7, #12]
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003ca4:	637b      	str	r3, [r7, #52]	; 0x34
 8003ca6:	2301      	movs	r3, #1
 8003ca8:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003caa:	693b      	ldr	r3, [r7, #16]
 8003cac:	f383 8810 	msr	PRIMASK, r3
}
 8003cb0:	46c0      	nop			; (mov r8, r8)
 8003cb2:	687b      	ldr	r3, [r7, #4]
 8003cb4:	681b      	ldr	r3, [r3, #0]
 8003cb6:	681a      	ldr	r2, [r3, #0]
 8003cb8:	687b      	ldr	r3, [r7, #4]
 8003cba:	681b      	ldr	r3, [r3, #0]
 8003cbc:	4921      	ldr	r1, [pc, #132]	; (8003d44 <UART_CheckIdleState+0x14c>)
 8003cbe:	400a      	ands	r2, r1
 8003cc0:	601a      	str	r2, [r3, #0]
 8003cc2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003cc4:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003cc6:	697b      	ldr	r3, [r7, #20]
 8003cc8:	f383 8810 	msr	PRIMASK, r3
}
 8003ccc:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003cce:	f3ef 8310 	mrs	r3, PRIMASK
 8003cd2:	61bb      	str	r3, [r7, #24]
  return(result);
 8003cd4:	69bb      	ldr	r3, [r7, #24]
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003cd6:	633b      	str	r3, [r7, #48]	; 0x30
 8003cd8:	2301      	movs	r3, #1
 8003cda:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003cdc:	69fb      	ldr	r3, [r7, #28]
 8003cde:	f383 8810 	msr	PRIMASK, r3
}
 8003ce2:	46c0      	nop			; (mov r8, r8)
 8003ce4:	687b      	ldr	r3, [r7, #4]
 8003ce6:	681b      	ldr	r3, [r3, #0]
 8003ce8:	689a      	ldr	r2, [r3, #8]
 8003cea:	687b      	ldr	r3, [r7, #4]
 8003cec:	681b      	ldr	r3, [r3, #0]
 8003cee:	2101      	movs	r1, #1
 8003cf0:	438a      	bics	r2, r1
 8003cf2:	609a      	str	r2, [r3, #8]
 8003cf4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003cf6:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003cf8:	6a3b      	ldr	r3, [r7, #32]
 8003cfa:	f383 8810 	msr	PRIMASK, r3
}
 8003cfe:	46c0      	nop			; (mov r8, r8)

      huart->RxState = HAL_UART_STATE_READY;
 8003d00:	687b      	ldr	r3, [r7, #4]
 8003d02:	2280      	movs	r2, #128	; 0x80
 8003d04:	2120      	movs	r1, #32
 8003d06:	5099      	str	r1, [r3, r2]

      __HAL_UNLOCK(huart);
 8003d08:	687b      	ldr	r3, [r7, #4]
 8003d0a:	2278      	movs	r2, #120	; 0x78
 8003d0c:	2100      	movs	r1, #0
 8003d0e:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003d10:	2303      	movs	r3, #3
 8003d12:	e011      	b.n	8003d38 <UART_CheckIdleState+0x140>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8003d14:	687b      	ldr	r3, [r7, #4]
 8003d16:	2220      	movs	r2, #32
 8003d18:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8003d1a:	687b      	ldr	r3, [r7, #4]
 8003d1c:	2280      	movs	r2, #128	; 0x80
 8003d1e:	2120      	movs	r1, #32
 8003d20:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003d22:	687b      	ldr	r3, [r7, #4]
 8003d24:	2200      	movs	r2, #0
 8003d26:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003d28:	687b      	ldr	r3, [r7, #4]
 8003d2a:	2200      	movs	r2, #0
 8003d2c:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 8003d2e:	687b      	ldr	r3, [r7, #4]
 8003d30:	2278      	movs	r2, #120	; 0x78
 8003d32:	2100      	movs	r1, #0
 8003d34:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8003d36:	2300      	movs	r3, #0
}
 8003d38:	0018      	movs	r0, r3
 8003d3a:	46bd      	mov	sp, r7
 8003d3c:	b010      	add	sp, #64	; 0x40
 8003d3e:	bd80      	pop	{r7, pc}
 8003d40:	01ffffff 	.word	0x01ffffff
 8003d44:	fffffedf 	.word	0xfffffedf

08003d48 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8003d48:	b580      	push	{r7, lr}
 8003d4a:	b084      	sub	sp, #16
 8003d4c:	af00      	add	r7, sp, #0
 8003d4e:	60f8      	str	r0, [r7, #12]
 8003d50:	60b9      	str	r1, [r7, #8]
 8003d52:	603b      	str	r3, [r7, #0]
 8003d54:	1dfb      	adds	r3, r7, #7
 8003d56:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003d58:	e04b      	b.n	8003df2 <UART_WaitOnFlagUntilTimeout+0xaa>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003d5a:	69bb      	ldr	r3, [r7, #24]
 8003d5c:	3301      	adds	r3, #1
 8003d5e:	d048      	beq.n	8003df2 <UART_WaitOnFlagUntilTimeout+0xaa>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003d60:	f7fc fec0 	bl	8000ae4 <HAL_GetTick>
 8003d64:	0002      	movs	r2, r0
 8003d66:	683b      	ldr	r3, [r7, #0]
 8003d68:	1ad3      	subs	r3, r2, r3
 8003d6a:	69ba      	ldr	r2, [r7, #24]
 8003d6c:	429a      	cmp	r2, r3
 8003d6e:	d302      	bcc.n	8003d76 <UART_WaitOnFlagUntilTimeout+0x2e>
 8003d70:	69bb      	ldr	r3, [r7, #24]
 8003d72:	2b00      	cmp	r3, #0
 8003d74:	d101      	bne.n	8003d7a <UART_WaitOnFlagUntilTimeout+0x32>
      {

        return HAL_TIMEOUT;
 8003d76:	2303      	movs	r3, #3
 8003d78:	e04b      	b.n	8003e12 <UART_WaitOnFlagUntilTimeout+0xca>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8003d7a:	68fb      	ldr	r3, [r7, #12]
 8003d7c:	681b      	ldr	r3, [r3, #0]
 8003d7e:	681b      	ldr	r3, [r3, #0]
 8003d80:	2204      	movs	r2, #4
 8003d82:	4013      	ands	r3, r2
 8003d84:	d035      	beq.n	8003df2 <UART_WaitOnFlagUntilTimeout+0xaa>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8003d86:	68fb      	ldr	r3, [r7, #12]
 8003d88:	681b      	ldr	r3, [r3, #0]
 8003d8a:	69db      	ldr	r3, [r3, #28]
 8003d8c:	2208      	movs	r2, #8
 8003d8e:	4013      	ands	r3, r2
 8003d90:	2b08      	cmp	r3, #8
 8003d92:	d111      	bne.n	8003db8 <UART_WaitOnFlagUntilTimeout+0x70>
        {
           /* Clear Overrun Error flag*/
           __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8003d94:	68fb      	ldr	r3, [r7, #12]
 8003d96:	681b      	ldr	r3, [r3, #0]
 8003d98:	2208      	movs	r2, #8
 8003d9a:	621a      	str	r2, [r3, #32]

           /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts if ongoing */
           UART_EndRxTransfer(huart);
 8003d9c:	68fb      	ldr	r3, [r7, #12]
 8003d9e:	0018      	movs	r0, r3
 8003da0:	f000 f906 	bl	8003fb0 <UART_EndRxTransfer>

           huart->ErrorCode = HAL_UART_ERROR_ORE;
 8003da4:	68fb      	ldr	r3, [r7, #12]
 8003da6:	2284      	movs	r2, #132	; 0x84
 8003da8:	2108      	movs	r1, #8
 8003daa:	5099      	str	r1, [r3, r2]

           /* Process Unlocked */
           __HAL_UNLOCK(huart);
 8003dac:	68fb      	ldr	r3, [r7, #12]
 8003dae:	2278      	movs	r2, #120	; 0x78
 8003db0:	2100      	movs	r1, #0
 8003db2:	5499      	strb	r1, [r3, r2]

           return HAL_ERROR;
 8003db4:	2301      	movs	r3, #1
 8003db6:	e02c      	b.n	8003e12 <UART_WaitOnFlagUntilTimeout+0xca>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8003db8:	68fb      	ldr	r3, [r7, #12]
 8003dba:	681b      	ldr	r3, [r3, #0]
 8003dbc:	69da      	ldr	r2, [r3, #28]
 8003dbe:	2380      	movs	r3, #128	; 0x80
 8003dc0:	011b      	lsls	r3, r3, #4
 8003dc2:	401a      	ands	r2, r3
 8003dc4:	2380      	movs	r3, #128	; 0x80
 8003dc6:	011b      	lsls	r3, r3, #4
 8003dc8:	429a      	cmp	r2, r3
 8003dca:	d112      	bne.n	8003df2 <UART_WaitOnFlagUntilTimeout+0xaa>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8003dcc:	68fb      	ldr	r3, [r7, #12]
 8003dce:	681b      	ldr	r3, [r3, #0]
 8003dd0:	2280      	movs	r2, #128	; 0x80
 8003dd2:	0112      	lsls	r2, r2, #4
 8003dd4:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8003dd6:	68fb      	ldr	r3, [r7, #12]
 8003dd8:	0018      	movs	r0, r3
 8003dda:	f000 f8e9 	bl	8003fb0 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8003dde:	68fb      	ldr	r3, [r7, #12]
 8003de0:	2284      	movs	r2, #132	; 0x84
 8003de2:	2120      	movs	r1, #32
 8003de4:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8003de6:	68fb      	ldr	r3, [r7, #12]
 8003de8:	2278      	movs	r2, #120	; 0x78
 8003dea:	2100      	movs	r1, #0
 8003dec:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 8003dee:	2303      	movs	r3, #3
 8003df0:	e00f      	b.n	8003e12 <UART_WaitOnFlagUntilTimeout+0xca>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003df2:	68fb      	ldr	r3, [r7, #12]
 8003df4:	681b      	ldr	r3, [r3, #0]
 8003df6:	69db      	ldr	r3, [r3, #28]
 8003df8:	68ba      	ldr	r2, [r7, #8]
 8003dfa:	4013      	ands	r3, r2
 8003dfc:	68ba      	ldr	r2, [r7, #8]
 8003dfe:	1ad3      	subs	r3, r2, r3
 8003e00:	425a      	negs	r2, r3
 8003e02:	4153      	adcs	r3, r2
 8003e04:	b2db      	uxtb	r3, r3
 8003e06:	001a      	movs	r2, r3
 8003e08:	1dfb      	adds	r3, r7, #7
 8003e0a:	781b      	ldrb	r3, [r3, #0]
 8003e0c:	429a      	cmp	r2, r3
 8003e0e:	d0a4      	beq.n	8003d5a <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003e10:	2300      	movs	r3, #0
}
 8003e12:	0018      	movs	r0, r3
 8003e14:	46bd      	mov	sp, r7
 8003e16:	b004      	add	sp, #16
 8003e18:	bd80      	pop	{r7, pc}
	...

08003e1c <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8003e1c:	b580      	push	{r7, lr}
 8003e1e:	b090      	sub	sp, #64	; 0x40
 8003e20:	af00      	add	r7, sp, #0
 8003e22:	60f8      	str	r0, [r7, #12]
 8003e24:	60b9      	str	r1, [r7, #8]
 8003e26:	1dbb      	adds	r3, r7, #6
 8003e28:	801a      	strh	r2, [r3, #0]
  huart->pRxBuffPtr  = pData;
 8003e2a:	68fb      	ldr	r3, [r7, #12]
 8003e2c:	68ba      	ldr	r2, [r7, #8]
 8003e2e:	655a      	str	r2, [r3, #84]	; 0x54
  huart->RxXferSize  = Size;
 8003e30:	68fb      	ldr	r3, [r7, #12]
 8003e32:	1dba      	adds	r2, r7, #6
 8003e34:	2158      	movs	r1, #88	; 0x58
 8003e36:	8812      	ldrh	r2, [r2, #0]
 8003e38:	525a      	strh	r2, [r3, r1]
  huart->RxXferCount = Size;
 8003e3a:	68fb      	ldr	r3, [r7, #12]
 8003e3c:	1dba      	adds	r2, r7, #6
 8003e3e:	215a      	movs	r1, #90	; 0x5a
 8003e40:	8812      	ldrh	r2, [r2, #0]
 8003e42:	525a      	strh	r2, [r3, r1]
  huart->RxISR       = NULL;
 8003e44:	68fb      	ldr	r3, [r7, #12]
 8003e46:	2200      	movs	r2, #0
 8003e48:	669a      	str	r2, [r3, #104]	; 0x68

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 8003e4a:	68fb      	ldr	r3, [r7, #12]
 8003e4c:	689a      	ldr	r2, [r3, #8]
 8003e4e:	2380      	movs	r3, #128	; 0x80
 8003e50:	015b      	lsls	r3, r3, #5
 8003e52:	429a      	cmp	r2, r3
 8003e54:	d10d      	bne.n	8003e72 <UART_Start_Receive_IT+0x56>
 8003e56:	68fb      	ldr	r3, [r7, #12]
 8003e58:	691b      	ldr	r3, [r3, #16]
 8003e5a:	2b00      	cmp	r3, #0
 8003e5c:	d104      	bne.n	8003e68 <UART_Start_Receive_IT+0x4c>
 8003e5e:	68fb      	ldr	r3, [r7, #12]
 8003e60:	225c      	movs	r2, #92	; 0x5c
 8003e62:	4950      	ldr	r1, [pc, #320]	; (8003fa4 <UART_Start_Receive_IT+0x188>)
 8003e64:	5299      	strh	r1, [r3, r2]
 8003e66:	e02e      	b.n	8003ec6 <UART_Start_Receive_IT+0xaa>
 8003e68:	68fb      	ldr	r3, [r7, #12]
 8003e6a:	225c      	movs	r2, #92	; 0x5c
 8003e6c:	21ff      	movs	r1, #255	; 0xff
 8003e6e:	5299      	strh	r1, [r3, r2]
 8003e70:	e029      	b.n	8003ec6 <UART_Start_Receive_IT+0xaa>
 8003e72:	68fb      	ldr	r3, [r7, #12]
 8003e74:	689b      	ldr	r3, [r3, #8]
 8003e76:	2b00      	cmp	r3, #0
 8003e78:	d10d      	bne.n	8003e96 <UART_Start_Receive_IT+0x7a>
 8003e7a:	68fb      	ldr	r3, [r7, #12]
 8003e7c:	691b      	ldr	r3, [r3, #16]
 8003e7e:	2b00      	cmp	r3, #0
 8003e80:	d104      	bne.n	8003e8c <UART_Start_Receive_IT+0x70>
 8003e82:	68fb      	ldr	r3, [r7, #12]
 8003e84:	225c      	movs	r2, #92	; 0x5c
 8003e86:	21ff      	movs	r1, #255	; 0xff
 8003e88:	5299      	strh	r1, [r3, r2]
 8003e8a:	e01c      	b.n	8003ec6 <UART_Start_Receive_IT+0xaa>
 8003e8c:	68fb      	ldr	r3, [r7, #12]
 8003e8e:	225c      	movs	r2, #92	; 0x5c
 8003e90:	217f      	movs	r1, #127	; 0x7f
 8003e92:	5299      	strh	r1, [r3, r2]
 8003e94:	e017      	b.n	8003ec6 <UART_Start_Receive_IT+0xaa>
 8003e96:	68fb      	ldr	r3, [r7, #12]
 8003e98:	689a      	ldr	r2, [r3, #8]
 8003e9a:	2380      	movs	r3, #128	; 0x80
 8003e9c:	055b      	lsls	r3, r3, #21
 8003e9e:	429a      	cmp	r2, r3
 8003ea0:	d10d      	bne.n	8003ebe <UART_Start_Receive_IT+0xa2>
 8003ea2:	68fb      	ldr	r3, [r7, #12]
 8003ea4:	691b      	ldr	r3, [r3, #16]
 8003ea6:	2b00      	cmp	r3, #0
 8003ea8:	d104      	bne.n	8003eb4 <UART_Start_Receive_IT+0x98>
 8003eaa:	68fb      	ldr	r3, [r7, #12]
 8003eac:	225c      	movs	r2, #92	; 0x5c
 8003eae:	217f      	movs	r1, #127	; 0x7f
 8003eb0:	5299      	strh	r1, [r3, r2]
 8003eb2:	e008      	b.n	8003ec6 <UART_Start_Receive_IT+0xaa>
 8003eb4:	68fb      	ldr	r3, [r7, #12]
 8003eb6:	225c      	movs	r2, #92	; 0x5c
 8003eb8:	213f      	movs	r1, #63	; 0x3f
 8003eba:	5299      	strh	r1, [r3, r2]
 8003ebc:	e003      	b.n	8003ec6 <UART_Start_Receive_IT+0xaa>
 8003ebe:	68fb      	ldr	r3, [r7, #12]
 8003ec0:	225c      	movs	r2, #92	; 0x5c
 8003ec2:	2100      	movs	r1, #0
 8003ec4:	5299      	strh	r1, [r3, r2]

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003ec6:	68fb      	ldr	r3, [r7, #12]
 8003ec8:	2284      	movs	r2, #132	; 0x84
 8003eca:	2100      	movs	r1, #0
 8003ecc:	5099      	str	r1, [r3, r2]
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8003ece:	68fb      	ldr	r3, [r7, #12]
 8003ed0:	2280      	movs	r2, #128	; 0x80
 8003ed2:	2122      	movs	r1, #34	; 0x22
 8003ed4:	5099      	str	r1, [r3, r2]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003ed6:	f3ef 8310 	mrs	r3, PRIMASK
 8003eda:	62bb      	str	r3, [r7, #40]	; 0x28
  return(result);
 8003edc:	6abb      	ldr	r3, [r7, #40]	; 0x28

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003ede:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003ee0:	2301      	movs	r3, #1
 8003ee2:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003ee4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003ee6:	f383 8810 	msr	PRIMASK, r3
}
 8003eea:	46c0      	nop			; (mov r8, r8)
 8003eec:	68fb      	ldr	r3, [r7, #12]
 8003eee:	681b      	ldr	r3, [r3, #0]
 8003ef0:	689a      	ldr	r2, [r3, #8]
 8003ef2:	68fb      	ldr	r3, [r7, #12]
 8003ef4:	681b      	ldr	r3, [r3, #0]
 8003ef6:	2101      	movs	r1, #1
 8003ef8:	430a      	orrs	r2, r1
 8003efa:	609a      	str	r2, [r3, #8]
 8003efc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003efe:	633b      	str	r3, [r7, #48]	; 0x30
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003f00:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003f02:	f383 8810 	msr	PRIMASK, r3
}
 8003f06:	46c0      	nop			; (mov r8, r8)

  /* Set the Rx ISR function pointer according to the data word length */
  if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003f08:	68fb      	ldr	r3, [r7, #12]
 8003f0a:	689a      	ldr	r2, [r3, #8]
 8003f0c:	2380      	movs	r3, #128	; 0x80
 8003f0e:	015b      	lsls	r3, r3, #5
 8003f10:	429a      	cmp	r2, r3
 8003f12:	d107      	bne.n	8003f24 <UART_Start_Receive_IT+0x108>
 8003f14:	68fb      	ldr	r3, [r7, #12]
 8003f16:	691b      	ldr	r3, [r3, #16]
 8003f18:	2b00      	cmp	r3, #0
 8003f1a:	d103      	bne.n	8003f24 <UART_Start_Receive_IT+0x108>
  {
    huart->RxISR = UART_RxISR_16BIT;
 8003f1c:	68fb      	ldr	r3, [r7, #12]
 8003f1e:	4a22      	ldr	r2, [pc, #136]	; (8003fa8 <UART_Start_Receive_IT+0x18c>)
 8003f20:	669a      	str	r2, [r3, #104]	; 0x68
 8003f22:	e002      	b.n	8003f2a <UART_Start_Receive_IT+0x10e>
  }
  else
  {
    huart->RxISR = UART_RxISR_8BIT;
 8003f24:	68fb      	ldr	r3, [r7, #12]
 8003f26:	4a21      	ldr	r2, [pc, #132]	; (8003fac <UART_Start_Receive_IT+0x190>)
 8003f28:	669a      	str	r2, [r3, #104]	; 0x68
  }

  /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 8003f2a:	68fb      	ldr	r3, [r7, #12]
 8003f2c:	691b      	ldr	r3, [r3, #16]
 8003f2e:	2b00      	cmp	r3, #0
 8003f30:	d019      	beq.n	8003f66 <UART_Start_Receive_IT+0x14a>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003f32:	f3ef 8310 	mrs	r3, PRIMASK
 8003f36:	61fb      	str	r3, [r7, #28]
  return(result);
 8003f38:	69fb      	ldr	r3, [r7, #28]
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE);
 8003f3a:	637b      	str	r3, [r7, #52]	; 0x34
 8003f3c:	2301      	movs	r3, #1
 8003f3e:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003f40:	6a3b      	ldr	r3, [r7, #32]
 8003f42:	f383 8810 	msr	PRIMASK, r3
}
 8003f46:	46c0      	nop			; (mov r8, r8)
 8003f48:	68fb      	ldr	r3, [r7, #12]
 8003f4a:	681b      	ldr	r3, [r3, #0]
 8003f4c:	681a      	ldr	r2, [r3, #0]
 8003f4e:	68fb      	ldr	r3, [r7, #12]
 8003f50:	681b      	ldr	r3, [r3, #0]
 8003f52:	2190      	movs	r1, #144	; 0x90
 8003f54:	0049      	lsls	r1, r1, #1
 8003f56:	430a      	orrs	r2, r1
 8003f58:	601a      	str	r2, [r3, #0]
 8003f5a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003f5c:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003f5e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f60:	f383 8810 	msr	PRIMASK, r3
}
 8003f64:	e018      	b.n	8003f98 <UART_Start_Receive_IT+0x17c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003f66:	f3ef 8310 	mrs	r3, PRIMASK
 8003f6a:	613b      	str	r3, [r7, #16]
  return(result);
 8003f6c:	693b      	ldr	r3, [r7, #16]
  }
  else
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE);
 8003f6e:	63bb      	str	r3, [r7, #56]	; 0x38
 8003f70:	2301      	movs	r3, #1
 8003f72:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003f74:	697b      	ldr	r3, [r7, #20]
 8003f76:	f383 8810 	msr	PRIMASK, r3
}
 8003f7a:	46c0      	nop			; (mov r8, r8)
 8003f7c:	68fb      	ldr	r3, [r7, #12]
 8003f7e:	681b      	ldr	r3, [r3, #0]
 8003f80:	681a      	ldr	r2, [r3, #0]
 8003f82:	68fb      	ldr	r3, [r7, #12]
 8003f84:	681b      	ldr	r3, [r3, #0]
 8003f86:	2120      	movs	r1, #32
 8003f88:	430a      	orrs	r2, r1
 8003f8a:	601a      	str	r2, [r3, #0]
 8003f8c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003f8e:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003f90:	69bb      	ldr	r3, [r7, #24]
 8003f92:	f383 8810 	msr	PRIMASK, r3
}
 8003f96:	46c0      	nop			; (mov r8, r8)
  }
  return HAL_OK;
 8003f98:	2300      	movs	r3, #0
}
 8003f9a:	0018      	movs	r0, r3
 8003f9c:	46bd      	mov	sp, r7
 8003f9e:	b010      	add	sp, #64	; 0x40
 8003fa0:	bd80      	pop	{r7, pc}
 8003fa2:	46c0      	nop			; (mov r8, r8)
 8003fa4:	000001ff 	.word	0x000001ff
 8003fa8:	08004425 	.word	0x08004425
 8003fac:	0800426d 	.word	0x0800426d

08003fb0 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8003fb0:	b580      	push	{r7, lr}
 8003fb2:	b08e      	sub	sp, #56	; 0x38
 8003fb4:	af00      	add	r7, sp, #0
 8003fb6:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003fb8:	f3ef 8310 	mrs	r3, PRIMASK
 8003fbc:	617b      	str	r3, [r7, #20]
  return(result);
 8003fbe:	697b      	ldr	r3, [r7, #20]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003fc0:	637b      	str	r3, [r7, #52]	; 0x34
 8003fc2:	2301      	movs	r3, #1
 8003fc4:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003fc6:	69bb      	ldr	r3, [r7, #24]
 8003fc8:	f383 8810 	msr	PRIMASK, r3
}
 8003fcc:	46c0      	nop			; (mov r8, r8)
 8003fce:	687b      	ldr	r3, [r7, #4]
 8003fd0:	681b      	ldr	r3, [r3, #0]
 8003fd2:	681a      	ldr	r2, [r3, #0]
 8003fd4:	687b      	ldr	r3, [r7, #4]
 8003fd6:	681b      	ldr	r3, [r3, #0]
 8003fd8:	4926      	ldr	r1, [pc, #152]	; (8004074 <UART_EndRxTransfer+0xc4>)
 8003fda:	400a      	ands	r2, r1
 8003fdc:	601a      	str	r2, [r3, #0]
 8003fde:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003fe0:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003fe2:	69fb      	ldr	r3, [r7, #28]
 8003fe4:	f383 8810 	msr	PRIMASK, r3
}
 8003fe8:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003fea:	f3ef 8310 	mrs	r3, PRIMASK
 8003fee:	623b      	str	r3, [r7, #32]
  return(result);
 8003ff0:	6a3b      	ldr	r3, [r7, #32]
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003ff2:	633b      	str	r3, [r7, #48]	; 0x30
 8003ff4:	2301      	movs	r3, #1
 8003ff6:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003ff8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ffa:	f383 8810 	msr	PRIMASK, r3
}
 8003ffe:	46c0      	nop			; (mov r8, r8)
 8004000:	687b      	ldr	r3, [r7, #4]
 8004002:	681b      	ldr	r3, [r3, #0]
 8004004:	689a      	ldr	r2, [r3, #8]
 8004006:	687b      	ldr	r3, [r7, #4]
 8004008:	681b      	ldr	r3, [r3, #0]
 800400a:	2101      	movs	r1, #1
 800400c:	438a      	bics	r2, r1
 800400e:	609a      	str	r2, [r3, #8]
 8004010:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004012:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004014:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004016:	f383 8810 	msr	PRIMASK, r3
}
 800401a:	46c0      	nop			; (mov r8, r8)

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800401c:	687b      	ldr	r3, [r7, #4]
 800401e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004020:	2b01      	cmp	r3, #1
 8004022:	d118      	bne.n	8004056 <UART_EndRxTransfer+0xa6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004024:	f3ef 8310 	mrs	r3, PRIMASK
 8004028:	60bb      	str	r3, [r7, #8]
  return(result);
 800402a:	68bb      	ldr	r3, [r7, #8]
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800402c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800402e:	2301      	movs	r3, #1
 8004030:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004032:	68fb      	ldr	r3, [r7, #12]
 8004034:	f383 8810 	msr	PRIMASK, r3
}
 8004038:	46c0      	nop			; (mov r8, r8)
 800403a:	687b      	ldr	r3, [r7, #4]
 800403c:	681b      	ldr	r3, [r3, #0]
 800403e:	681a      	ldr	r2, [r3, #0]
 8004040:	687b      	ldr	r3, [r7, #4]
 8004042:	681b      	ldr	r3, [r3, #0]
 8004044:	2110      	movs	r1, #16
 8004046:	438a      	bics	r2, r1
 8004048:	601a      	str	r2, [r3, #0]
 800404a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800404c:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800404e:	693b      	ldr	r3, [r7, #16]
 8004050:	f383 8810 	msr	PRIMASK, r3
}
 8004054:	46c0      	nop			; (mov r8, r8)
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8004056:	687b      	ldr	r3, [r7, #4]
 8004058:	2280      	movs	r2, #128	; 0x80
 800405a:	2120      	movs	r1, #32
 800405c:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800405e:	687b      	ldr	r3, [r7, #4]
 8004060:	2200      	movs	r2, #0
 8004062:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8004064:	687b      	ldr	r3, [r7, #4]
 8004066:	2200      	movs	r2, #0
 8004068:	669a      	str	r2, [r3, #104]	; 0x68
}
 800406a:	46c0      	nop			; (mov r8, r8)
 800406c:	46bd      	mov	sp, r7
 800406e:	b00e      	add	sp, #56	; 0x38
 8004070:	bd80      	pop	{r7, pc}
 8004072:	46c0      	nop			; (mov r8, r8)
 8004074:	fffffedf 	.word	0xfffffedf

08004078 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8004078:	b580      	push	{r7, lr}
 800407a:	b084      	sub	sp, #16
 800407c:	af00      	add	r7, sp, #0
 800407e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8004080:	687b      	ldr	r3, [r7, #4]
 8004082:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004084:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8004086:	68fb      	ldr	r3, [r7, #12]
 8004088:	225a      	movs	r2, #90	; 0x5a
 800408a:	2100      	movs	r1, #0
 800408c:	5299      	strh	r1, [r3, r2]
  huart->TxXferCount = 0U;
 800408e:	68fb      	ldr	r3, [r7, #12]
 8004090:	2252      	movs	r2, #82	; 0x52
 8004092:	2100      	movs	r1, #0
 8004094:	5299      	strh	r1, [r3, r2]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8004096:	68fb      	ldr	r3, [r7, #12]
 8004098:	0018      	movs	r0, r3
 800409a:	f7ff fb5d 	bl	8003758 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800409e:	46c0      	nop			; (mov r8, r8)
 80040a0:	46bd      	mov	sp, r7
 80040a2:	b004      	add	sp, #16
 80040a4:	bd80      	pop	{r7, pc}

080040a6 <UART_TxISR_8BIT>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_8BIT(UART_HandleTypeDef *huart)
{
 80040a6:	b580      	push	{r7, lr}
 80040a8:	b08a      	sub	sp, #40	; 0x28
 80040aa:	af00      	add	r7, sp, #0
 80040ac:	6078      	str	r0, [r7, #4]
  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80040ae:	687b      	ldr	r3, [r7, #4]
 80040b0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80040b2:	2b21      	cmp	r3, #33	; 0x21
 80040b4:	d14d      	bne.n	8004152 <UART_TxISR_8BIT+0xac>
  {
    if (huart->TxXferCount == 0U)
 80040b6:	687b      	ldr	r3, [r7, #4]
 80040b8:	2252      	movs	r2, #82	; 0x52
 80040ba:	5a9b      	ldrh	r3, [r3, r2]
 80040bc:	b29b      	uxth	r3, r3
 80040be:	2b00      	cmp	r3, #0
 80040c0:	d132      	bne.n	8004128 <UART_TxISR_8BIT+0x82>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80040c2:	f3ef 8310 	mrs	r3, PRIMASK
 80040c6:	60bb      	str	r3, [r7, #8]
  return(result);
 80040c8:	68bb      	ldr	r3, [r7, #8]
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 80040ca:	627b      	str	r3, [r7, #36]	; 0x24
 80040cc:	2301      	movs	r3, #1
 80040ce:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80040d0:	68fb      	ldr	r3, [r7, #12]
 80040d2:	f383 8810 	msr	PRIMASK, r3
}
 80040d6:	46c0      	nop			; (mov r8, r8)
 80040d8:	687b      	ldr	r3, [r7, #4]
 80040da:	681b      	ldr	r3, [r3, #0]
 80040dc:	681a      	ldr	r2, [r3, #0]
 80040de:	687b      	ldr	r3, [r7, #4]
 80040e0:	681b      	ldr	r3, [r3, #0]
 80040e2:	2180      	movs	r1, #128	; 0x80
 80040e4:	438a      	bics	r2, r1
 80040e6:	601a      	str	r2, [r3, #0]
 80040e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80040ea:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80040ec:	693b      	ldr	r3, [r7, #16]
 80040ee:	f383 8810 	msr	PRIMASK, r3
}
 80040f2:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80040f4:	f3ef 8310 	mrs	r3, PRIMASK
 80040f8:	617b      	str	r3, [r7, #20]
  return(result);
 80040fa:	697b      	ldr	r3, [r7, #20]

      /* Enable the UART Transmit Complete Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80040fc:	623b      	str	r3, [r7, #32]
 80040fe:	2301      	movs	r3, #1
 8004100:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004102:	69bb      	ldr	r3, [r7, #24]
 8004104:	f383 8810 	msr	PRIMASK, r3
}
 8004108:	46c0      	nop			; (mov r8, r8)
 800410a:	687b      	ldr	r3, [r7, #4]
 800410c:	681b      	ldr	r3, [r3, #0]
 800410e:	681a      	ldr	r2, [r3, #0]
 8004110:	687b      	ldr	r3, [r7, #4]
 8004112:	681b      	ldr	r3, [r3, #0]
 8004114:	2140      	movs	r1, #64	; 0x40
 8004116:	430a      	orrs	r2, r1
 8004118:	601a      	str	r2, [r3, #0]
 800411a:	6a3b      	ldr	r3, [r7, #32]
 800411c:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800411e:	69fb      	ldr	r3, [r7, #28]
 8004120:	f383 8810 	msr	PRIMASK, r3
}
 8004124:	46c0      	nop			; (mov r8, r8)
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
      huart->pTxBuffPtr++;
      huart->TxXferCount--;
    }
  }
}
 8004126:	e014      	b.n	8004152 <UART_TxISR_8BIT+0xac>
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
 8004128:	687b      	ldr	r3, [r7, #4]
 800412a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800412c:	781a      	ldrb	r2, [r3, #0]
 800412e:	687b      	ldr	r3, [r7, #4]
 8004130:	681b      	ldr	r3, [r3, #0]
 8004132:	b292      	uxth	r2, r2
 8004134:	851a      	strh	r2, [r3, #40]	; 0x28
      huart->pTxBuffPtr++;
 8004136:	687b      	ldr	r3, [r7, #4]
 8004138:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800413a:	1c5a      	adds	r2, r3, #1
 800413c:	687b      	ldr	r3, [r7, #4]
 800413e:	64da      	str	r2, [r3, #76]	; 0x4c
      huart->TxXferCount--;
 8004140:	687b      	ldr	r3, [r7, #4]
 8004142:	2252      	movs	r2, #82	; 0x52
 8004144:	5a9b      	ldrh	r3, [r3, r2]
 8004146:	b29b      	uxth	r3, r3
 8004148:	3b01      	subs	r3, #1
 800414a:	b299      	uxth	r1, r3
 800414c:	687b      	ldr	r3, [r7, #4]
 800414e:	2252      	movs	r2, #82	; 0x52
 8004150:	5299      	strh	r1, [r3, r2]
}
 8004152:	46c0      	nop			; (mov r8, r8)
 8004154:	46bd      	mov	sp, r7
 8004156:	b00a      	add	sp, #40	; 0x28
 8004158:	bd80      	pop	{r7, pc}

0800415a <UART_TxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_16BIT(UART_HandleTypeDef *huart)
{
 800415a:	b580      	push	{r7, lr}
 800415c:	b08c      	sub	sp, #48	; 0x30
 800415e:	af00      	add	r7, sp, #0
 8004160:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8004162:	687b      	ldr	r3, [r7, #4]
 8004164:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004166:	2b21      	cmp	r3, #33	; 0x21
 8004168:	d151      	bne.n	800420e <UART_TxISR_16BIT+0xb4>
  {
    if (huart->TxXferCount == 0U)
 800416a:	687b      	ldr	r3, [r7, #4]
 800416c:	2252      	movs	r2, #82	; 0x52
 800416e:	5a9b      	ldrh	r3, [r3, r2]
 8004170:	b29b      	uxth	r3, r3
 8004172:	2b00      	cmp	r3, #0
 8004174:	d132      	bne.n	80041dc <UART_TxISR_16BIT+0x82>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004176:	f3ef 8310 	mrs	r3, PRIMASK
 800417a:	60fb      	str	r3, [r7, #12]
  return(result);
 800417c:	68fb      	ldr	r3, [r7, #12]
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 800417e:	62bb      	str	r3, [r7, #40]	; 0x28
 8004180:	2301      	movs	r3, #1
 8004182:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004184:	693b      	ldr	r3, [r7, #16]
 8004186:	f383 8810 	msr	PRIMASK, r3
}
 800418a:	46c0      	nop			; (mov r8, r8)
 800418c:	687b      	ldr	r3, [r7, #4]
 800418e:	681b      	ldr	r3, [r3, #0]
 8004190:	681a      	ldr	r2, [r3, #0]
 8004192:	687b      	ldr	r3, [r7, #4]
 8004194:	681b      	ldr	r3, [r3, #0]
 8004196:	2180      	movs	r1, #128	; 0x80
 8004198:	438a      	bics	r2, r1
 800419a:	601a      	str	r2, [r3, #0]
 800419c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800419e:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80041a0:	697b      	ldr	r3, [r7, #20]
 80041a2:	f383 8810 	msr	PRIMASK, r3
}
 80041a6:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80041a8:	f3ef 8310 	mrs	r3, PRIMASK
 80041ac:	61bb      	str	r3, [r7, #24]
  return(result);
 80041ae:	69bb      	ldr	r3, [r7, #24]

      /* Enable the UART Transmit Complete Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80041b0:	627b      	str	r3, [r7, #36]	; 0x24
 80041b2:	2301      	movs	r3, #1
 80041b4:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80041b6:	69fb      	ldr	r3, [r7, #28]
 80041b8:	f383 8810 	msr	PRIMASK, r3
}
 80041bc:	46c0      	nop			; (mov r8, r8)
 80041be:	687b      	ldr	r3, [r7, #4]
 80041c0:	681b      	ldr	r3, [r3, #0]
 80041c2:	681a      	ldr	r2, [r3, #0]
 80041c4:	687b      	ldr	r3, [r7, #4]
 80041c6:	681b      	ldr	r3, [r3, #0]
 80041c8:	2140      	movs	r1, #64	; 0x40
 80041ca:	430a      	orrs	r2, r1
 80041cc:	601a      	str	r2, [r3, #0]
 80041ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80041d0:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80041d2:	6a3b      	ldr	r3, [r7, #32]
 80041d4:	f383 8810 	msr	PRIMASK, r3
}
 80041d8:	46c0      	nop			; (mov r8, r8)
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
      huart->pTxBuffPtr += 2U;
      huart->TxXferCount--;
    }
  }
}
 80041da:	e018      	b.n	800420e <UART_TxISR_16BIT+0xb4>
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 80041dc:	687b      	ldr	r3, [r7, #4]
 80041de:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80041e0:	62fb      	str	r3, [r7, #44]	; 0x2c
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
 80041e2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80041e4:	881a      	ldrh	r2, [r3, #0]
 80041e6:	687b      	ldr	r3, [r7, #4]
 80041e8:	681b      	ldr	r3, [r3, #0]
 80041ea:	05d2      	lsls	r2, r2, #23
 80041ec:	0dd2      	lsrs	r2, r2, #23
 80041ee:	b292      	uxth	r2, r2
 80041f0:	851a      	strh	r2, [r3, #40]	; 0x28
      huart->pTxBuffPtr += 2U;
 80041f2:	687b      	ldr	r3, [r7, #4]
 80041f4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80041f6:	1c9a      	adds	r2, r3, #2
 80041f8:	687b      	ldr	r3, [r7, #4]
 80041fa:	64da      	str	r2, [r3, #76]	; 0x4c
      huart->TxXferCount--;
 80041fc:	687b      	ldr	r3, [r7, #4]
 80041fe:	2252      	movs	r2, #82	; 0x52
 8004200:	5a9b      	ldrh	r3, [r3, r2]
 8004202:	b29b      	uxth	r3, r3
 8004204:	3b01      	subs	r3, #1
 8004206:	b299      	uxth	r1, r3
 8004208:	687b      	ldr	r3, [r7, #4]
 800420a:	2252      	movs	r2, #82	; 0x52
 800420c:	5299      	strh	r1, [r3, r2]
}
 800420e:	46c0      	nop			; (mov r8, r8)
 8004210:	46bd      	mov	sp, r7
 8004212:	b00c      	add	sp, #48	; 0x30
 8004214:	bd80      	pop	{r7, pc}

08004216 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8004216:	b580      	push	{r7, lr}
 8004218:	b086      	sub	sp, #24
 800421a:	af00      	add	r7, sp, #0
 800421c:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800421e:	f3ef 8310 	mrs	r3, PRIMASK
 8004222:	60bb      	str	r3, [r7, #8]
  return(result);
 8004224:	68bb      	ldr	r3, [r7, #8]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8004226:	617b      	str	r3, [r7, #20]
 8004228:	2301      	movs	r3, #1
 800422a:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800422c:	68fb      	ldr	r3, [r7, #12]
 800422e:	f383 8810 	msr	PRIMASK, r3
}
 8004232:	46c0      	nop			; (mov r8, r8)
 8004234:	687b      	ldr	r3, [r7, #4]
 8004236:	681b      	ldr	r3, [r3, #0]
 8004238:	681a      	ldr	r2, [r3, #0]
 800423a:	687b      	ldr	r3, [r7, #4]
 800423c:	681b      	ldr	r3, [r3, #0]
 800423e:	2140      	movs	r1, #64	; 0x40
 8004240:	438a      	bics	r2, r1
 8004242:	601a      	str	r2, [r3, #0]
 8004244:	697b      	ldr	r3, [r7, #20]
 8004246:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004248:	693b      	ldr	r3, [r7, #16]
 800424a:	f383 8810 	msr	PRIMASK, r3
}
 800424e:	46c0      	nop			; (mov r8, r8)

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8004250:	687b      	ldr	r3, [r7, #4]
 8004252:	2220      	movs	r2, #32
 8004254:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8004256:	687b      	ldr	r3, [r7, #4]
 8004258:	2200      	movs	r2, #0
 800425a:	66da      	str	r2, [r3, #108]	; 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800425c:	687b      	ldr	r3, [r7, #4]
 800425e:	0018      	movs	r0, r3
 8004260:	f7ff fa72 	bl	8003748 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004264:	46c0      	nop			; (mov r8, r8)
 8004266:	46bd      	mov	sp, r7
 8004268:	b006      	add	sp, #24
 800426a:	bd80      	pop	{r7, pc}

0800426c <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 800426c:	b580      	push	{r7, lr}
 800426e:	b094      	sub	sp, #80	; 0x50
 8004270:	af00      	add	r7, sp, #0
 8004272:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 8004274:	204e      	movs	r0, #78	; 0x4e
 8004276:	183b      	adds	r3, r7, r0
 8004278:	687a      	ldr	r2, [r7, #4]
 800427a:	215c      	movs	r1, #92	; 0x5c
 800427c:	5a52      	ldrh	r2, [r2, r1]
 800427e:	801a      	strh	r2, [r3, #0]
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8004280:	687b      	ldr	r3, [r7, #4]
 8004282:	2280      	movs	r2, #128	; 0x80
 8004284:	589b      	ldr	r3, [r3, r2]
 8004286:	2b22      	cmp	r3, #34	; 0x22
 8004288:	d000      	beq.n	800428c <UART_RxISR_8BIT+0x20>
 800428a:	e0ba      	b.n	8004402 <UART_RxISR_8BIT+0x196>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800428c:	687b      	ldr	r3, [r7, #4]
 800428e:	681a      	ldr	r2, [r3, #0]
 8004290:	214c      	movs	r1, #76	; 0x4c
 8004292:	187b      	adds	r3, r7, r1
 8004294:	8c92      	ldrh	r2, [r2, #36]	; 0x24
 8004296:	801a      	strh	r2, [r3, #0]
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8004298:	187b      	adds	r3, r7, r1
 800429a:	881b      	ldrh	r3, [r3, #0]
 800429c:	b2da      	uxtb	r2, r3
 800429e:	183b      	adds	r3, r7, r0
 80042a0:	881b      	ldrh	r3, [r3, #0]
 80042a2:	b2d9      	uxtb	r1, r3
 80042a4:	687b      	ldr	r3, [r7, #4]
 80042a6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80042a8:	400a      	ands	r2, r1
 80042aa:	b2d2      	uxtb	r2, r2
 80042ac:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 80042ae:	687b      	ldr	r3, [r7, #4]
 80042b0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80042b2:	1c5a      	adds	r2, r3, #1
 80042b4:	687b      	ldr	r3, [r7, #4]
 80042b6:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 80042b8:	687b      	ldr	r3, [r7, #4]
 80042ba:	225a      	movs	r2, #90	; 0x5a
 80042bc:	5a9b      	ldrh	r3, [r3, r2]
 80042be:	b29b      	uxth	r3, r3
 80042c0:	3b01      	subs	r3, #1
 80042c2:	b299      	uxth	r1, r3
 80042c4:	687b      	ldr	r3, [r7, #4]
 80042c6:	225a      	movs	r2, #90	; 0x5a
 80042c8:	5299      	strh	r1, [r3, r2]

    if (huart->RxXferCount == 0U)
 80042ca:	687b      	ldr	r3, [r7, #4]
 80042cc:	225a      	movs	r2, #90	; 0x5a
 80042ce:	5a9b      	ldrh	r3, [r3, r2]
 80042d0:	b29b      	uxth	r3, r3
 80042d2:	2b00      	cmp	r3, #0
 80042d4:	d000      	beq.n	80042d8 <UART_RxISR_8BIT+0x6c>
 80042d6:	e09c      	b.n	8004412 <UART_RxISR_8BIT+0x1a6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80042d8:	f3ef 8310 	mrs	r3, PRIMASK
 80042dc:	627b      	str	r3, [r7, #36]	; 0x24
  return(result);
 80042de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80042e0:	64bb      	str	r3, [r7, #72]	; 0x48
 80042e2:	2301      	movs	r3, #1
 80042e4:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80042e6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80042e8:	f383 8810 	msr	PRIMASK, r3
}
 80042ec:	46c0      	nop			; (mov r8, r8)
 80042ee:	687b      	ldr	r3, [r7, #4]
 80042f0:	681b      	ldr	r3, [r3, #0]
 80042f2:	681a      	ldr	r2, [r3, #0]
 80042f4:	687b      	ldr	r3, [r7, #4]
 80042f6:	681b      	ldr	r3, [r3, #0]
 80042f8:	4948      	ldr	r1, [pc, #288]	; (800441c <UART_RxISR_8BIT+0x1b0>)
 80042fa:	400a      	ands	r2, r1
 80042fc:	601a      	str	r2, [r3, #0]
 80042fe:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004300:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004302:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004304:	f383 8810 	msr	PRIMASK, r3
}
 8004308:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800430a:	f3ef 8310 	mrs	r3, PRIMASK
 800430e:	633b      	str	r3, [r7, #48]	; 0x30
  return(result);
 8004310:	6b3b      	ldr	r3, [r7, #48]	; 0x30

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004312:	647b      	str	r3, [r7, #68]	; 0x44
 8004314:	2301      	movs	r3, #1
 8004316:	637b      	str	r3, [r7, #52]	; 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004318:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800431a:	f383 8810 	msr	PRIMASK, r3
}
 800431e:	46c0      	nop			; (mov r8, r8)
 8004320:	687b      	ldr	r3, [r7, #4]
 8004322:	681b      	ldr	r3, [r3, #0]
 8004324:	689a      	ldr	r2, [r3, #8]
 8004326:	687b      	ldr	r3, [r7, #4]
 8004328:	681b      	ldr	r3, [r3, #0]
 800432a:	2101      	movs	r1, #1
 800432c:	438a      	bics	r2, r1
 800432e:	609a      	str	r2, [r3, #8]
 8004330:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004332:	63bb      	str	r3, [r7, #56]	; 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004334:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004336:	f383 8810 	msr	PRIMASK, r3
}
 800433a:	46c0      	nop			; (mov r8, r8)

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800433c:	687b      	ldr	r3, [r7, #4]
 800433e:	2280      	movs	r2, #128	; 0x80
 8004340:	2120      	movs	r1, #32
 8004342:	5099      	str	r1, [r3, r2]

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8004344:	687b      	ldr	r3, [r7, #4]
 8004346:	2200      	movs	r2, #0
 8004348:	669a      	str	r2, [r3, #104]	; 0x68

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 800434a:	687b      	ldr	r3, [r7, #4]
 800434c:	2200      	movs	r2, #0
 800434e:	665a      	str	r2, [r3, #100]	; 0x64

      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8004350:	687b      	ldr	r3, [r7, #4]
 8004352:	681b      	ldr	r3, [r3, #0]
 8004354:	685a      	ldr	r2, [r3, #4]
 8004356:	2380      	movs	r3, #128	; 0x80
 8004358:	041b      	lsls	r3, r3, #16
 800435a:	4013      	ands	r3, r2
 800435c:	d018      	beq.n	8004390 <UART_RxISR_8BIT+0x124>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800435e:	f3ef 8310 	mrs	r3, PRIMASK
 8004362:	61bb      	str	r3, [r7, #24]
  return(result);
 8004364:	69bb      	ldr	r3, [r7, #24]
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8004366:	643b      	str	r3, [r7, #64]	; 0x40
 8004368:	2301      	movs	r3, #1
 800436a:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800436c:	69fb      	ldr	r3, [r7, #28]
 800436e:	f383 8810 	msr	PRIMASK, r3
}
 8004372:	46c0      	nop			; (mov r8, r8)
 8004374:	687b      	ldr	r3, [r7, #4]
 8004376:	681b      	ldr	r3, [r3, #0]
 8004378:	681a      	ldr	r2, [r3, #0]
 800437a:	687b      	ldr	r3, [r7, #4]
 800437c:	681b      	ldr	r3, [r3, #0]
 800437e:	4928      	ldr	r1, [pc, #160]	; (8004420 <UART_RxISR_8BIT+0x1b4>)
 8004380:	400a      	ands	r2, r1
 8004382:	601a      	str	r2, [r3, #0]
 8004384:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004386:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004388:	6a3b      	ldr	r3, [r7, #32]
 800438a:	f383 8810 	msr	PRIMASK, r3
}
 800438e:	46c0      	nop			; (mov r8, r8)
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004390:	687b      	ldr	r3, [r7, #4]
 8004392:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004394:	2b01      	cmp	r3, #1
 8004396:	d12f      	bne.n	80043f8 <UART_RxISR_8BIT+0x18c>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004398:	687b      	ldr	r3, [r7, #4]
 800439a:	2200      	movs	r2, #0
 800439c:	661a      	str	r2, [r3, #96]	; 0x60
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800439e:	f3ef 8310 	mrs	r3, PRIMASK
 80043a2:	60fb      	str	r3, [r7, #12]
  return(result);
 80043a4:	68fb      	ldr	r3, [r7, #12]

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80043a6:	63fb      	str	r3, [r7, #60]	; 0x3c
 80043a8:	2301      	movs	r3, #1
 80043aa:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80043ac:	693b      	ldr	r3, [r7, #16]
 80043ae:	f383 8810 	msr	PRIMASK, r3
}
 80043b2:	46c0      	nop			; (mov r8, r8)
 80043b4:	687b      	ldr	r3, [r7, #4]
 80043b6:	681b      	ldr	r3, [r3, #0]
 80043b8:	681a      	ldr	r2, [r3, #0]
 80043ba:	687b      	ldr	r3, [r7, #4]
 80043bc:	681b      	ldr	r3, [r3, #0]
 80043be:	2110      	movs	r1, #16
 80043c0:	438a      	bics	r2, r1
 80043c2:	601a      	str	r2, [r3, #0]
 80043c4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80043c6:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80043c8:	697b      	ldr	r3, [r7, #20]
 80043ca:	f383 8810 	msr	PRIMASK, r3
}
 80043ce:	46c0      	nop			; (mov r8, r8)

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 80043d0:	687b      	ldr	r3, [r7, #4]
 80043d2:	681b      	ldr	r3, [r3, #0]
 80043d4:	69db      	ldr	r3, [r3, #28]
 80043d6:	2210      	movs	r2, #16
 80043d8:	4013      	ands	r3, r2
 80043da:	2b10      	cmp	r3, #16
 80043dc:	d103      	bne.n	80043e6 <UART_RxISR_8BIT+0x17a>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80043de:	687b      	ldr	r3, [r7, #4]
 80043e0:	681b      	ldr	r3, [r3, #0]
 80043e2:	2210      	movs	r2, #16
 80043e4:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80043e6:	687b      	ldr	r3, [r7, #4]
 80043e8:	2258      	movs	r2, #88	; 0x58
 80043ea:	5a9a      	ldrh	r2, [r3, r2]
 80043ec:	687b      	ldr	r3, [r7, #4]
 80043ee:	0011      	movs	r1, r2
 80043f0:	0018      	movs	r0, r3
 80043f2:	f7ff f9b9 	bl	8003768 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 80043f6:	e00c      	b.n	8004412 <UART_RxISR_8BIT+0x1a6>
        HAL_UART_RxCpltCallback(huart);
 80043f8:	687b      	ldr	r3, [r7, #4]
 80043fa:	0018      	movs	r0, r3
 80043fc:	f7fb ff7c 	bl	80002f8 <HAL_UART_RxCpltCallback>
}
 8004400:	e007      	b.n	8004412 <UART_RxISR_8BIT+0x1a6>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8004402:	687b      	ldr	r3, [r7, #4]
 8004404:	681b      	ldr	r3, [r3, #0]
 8004406:	699a      	ldr	r2, [r3, #24]
 8004408:	687b      	ldr	r3, [r7, #4]
 800440a:	681b      	ldr	r3, [r3, #0]
 800440c:	2108      	movs	r1, #8
 800440e:	430a      	orrs	r2, r1
 8004410:	619a      	str	r2, [r3, #24]
}
 8004412:	46c0      	nop			; (mov r8, r8)
 8004414:	46bd      	mov	sp, r7
 8004416:	b014      	add	sp, #80	; 0x50
 8004418:	bd80      	pop	{r7, pc}
 800441a:	46c0      	nop			; (mov r8, r8)
 800441c:	fffffedf 	.word	0xfffffedf
 8004420:	fbffffff 	.word	0xfbffffff

08004424 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 8004424:	b580      	push	{r7, lr}
 8004426:	b094      	sub	sp, #80	; 0x50
 8004428:	af00      	add	r7, sp, #0
 800442a:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 800442c:	204e      	movs	r0, #78	; 0x4e
 800442e:	183b      	adds	r3, r7, r0
 8004430:	687a      	ldr	r2, [r7, #4]
 8004432:	215c      	movs	r1, #92	; 0x5c
 8004434:	5a52      	ldrh	r2, [r2, r1]
 8004436:	801a      	strh	r2, [r3, #0]
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8004438:	687b      	ldr	r3, [r7, #4]
 800443a:	2280      	movs	r2, #128	; 0x80
 800443c:	589b      	ldr	r3, [r3, r2]
 800443e:	2b22      	cmp	r3, #34	; 0x22
 8004440:	d000      	beq.n	8004444 <UART_RxISR_16BIT+0x20>
 8004442:	e0ba      	b.n	80045ba <UART_RxISR_16BIT+0x196>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8004444:	687b      	ldr	r3, [r7, #4]
 8004446:	681a      	ldr	r2, [r3, #0]
 8004448:	214c      	movs	r1, #76	; 0x4c
 800444a:	187b      	adds	r3, r7, r1
 800444c:	8c92      	ldrh	r2, [r2, #36]	; 0x24
 800444e:	801a      	strh	r2, [r3, #0]
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 8004450:	687b      	ldr	r3, [r7, #4]
 8004452:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004454:	64bb      	str	r3, [r7, #72]	; 0x48
    *tmp = (uint16_t)(uhdata & uhMask);
 8004456:	187b      	adds	r3, r7, r1
 8004458:	183a      	adds	r2, r7, r0
 800445a:	881b      	ldrh	r3, [r3, #0]
 800445c:	8812      	ldrh	r2, [r2, #0]
 800445e:	4013      	ands	r3, r2
 8004460:	b29a      	uxth	r2, r3
 8004462:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004464:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 8004466:	687b      	ldr	r3, [r7, #4]
 8004468:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800446a:	1c9a      	adds	r2, r3, #2
 800446c:	687b      	ldr	r3, [r7, #4]
 800446e:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 8004470:	687b      	ldr	r3, [r7, #4]
 8004472:	225a      	movs	r2, #90	; 0x5a
 8004474:	5a9b      	ldrh	r3, [r3, r2]
 8004476:	b29b      	uxth	r3, r3
 8004478:	3b01      	subs	r3, #1
 800447a:	b299      	uxth	r1, r3
 800447c:	687b      	ldr	r3, [r7, #4]
 800447e:	225a      	movs	r2, #90	; 0x5a
 8004480:	5299      	strh	r1, [r3, r2]

    if (huart->RxXferCount == 0U)
 8004482:	687b      	ldr	r3, [r7, #4]
 8004484:	225a      	movs	r2, #90	; 0x5a
 8004486:	5a9b      	ldrh	r3, [r3, r2]
 8004488:	b29b      	uxth	r3, r3
 800448a:	2b00      	cmp	r3, #0
 800448c:	d000      	beq.n	8004490 <UART_RxISR_16BIT+0x6c>
 800448e:	e09c      	b.n	80045ca <UART_RxISR_16BIT+0x1a6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004490:	f3ef 8310 	mrs	r3, PRIMASK
 8004494:	623b      	str	r3, [r7, #32]
  return(result);
 8004496:	6a3b      	ldr	r3, [r7, #32]
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004498:	647b      	str	r3, [r7, #68]	; 0x44
 800449a:	2301      	movs	r3, #1
 800449c:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800449e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80044a0:	f383 8810 	msr	PRIMASK, r3
}
 80044a4:	46c0      	nop			; (mov r8, r8)
 80044a6:	687b      	ldr	r3, [r7, #4]
 80044a8:	681b      	ldr	r3, [r3, #0]
 80044aa:	681a      	ldr	r2, [r3, #0]
 80044ac:	687b      	ldr	r3, [r7, #4]
 80044ae:	681b      	ldr	r3, [r3, #0]
 80044b0:	4948      	ldr	r1, [pc, #288]	; (80045d4 <UART_RxISR_16BIT+0x1b0>)
 80044b2:	400a      	ands	r2, r1
 80044b4:	601a      	str	r2, [r3, #0]
 80044b6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80044b8:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80044ba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80044bc:	f383 8810 	msr	PRIMASK, r3
}
 80044c0:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80044c2:	f3ef 8310 	mrs	r3, PRIMASK
 80044c6:	62fb      	str	r3, [r7, #44]	; 0x2c
  return(result);
 80044c8:	6afb      	ldr	r3, [r7, #44]	; 0x2c

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80044ca:	643b      	str	r3, [r7, #64]	; 0x40
 80044cc:	2301      	movs	r3, #1
 80044ce:	633b      	str	r3, [r7, #48]	; 0x30
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80044d0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80044d2:	f383 8810 	msr	PRIMASK, r3
}
 80044d6:	46c0      	nop			; (mov r8, r8)
 80044d8:	687b      	ldr	r3, [r7, #4]
 80044da:	681b      	ldr	r3, [r3, #0]
 80044dc:	689a      	ldr	r2, [r3, #8]
 80044de:	687b      	ldr	r3, [r7, #4]
 80044e0:	681b      	ldr	r3, [r3, #0]
 80044e2:	2101      	movs	r1, #1
 80044e4:	438a      	bics	r2, r1
 80044e6:	609a      	str	r2, [r3, #8]
 80044e8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80044ea:	637b      	str	r3, [r7, #52]	; 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80044ec:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80044ee:	f383 8810 	msr	PRIMASK, r3
}
 80044f2:	46c0      	nop			; (mov r8, r8)

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80044f4:	687b      	ldr	r3, [r7, #4]
 80044f6:	2280      	movs	r2, #128	; 0x80
 80044f8:	2120      	movs	r1, #32
 80044fa:	5099      	str	r1, [r3, r2]

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 80044fc:	687b      	ldr	r3, [r7, #4]
 80044fe:	2200      	movs	r2, #0
 8004500:	669a      	str	r2, [r3, #104]	; 0x68

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004502:	687b      	ldr	r3, [r7, #4]
 8004504:	2200      	movs	r2, #0
 8004506:	665a      	str	r2, [r3, #100]	; 0x64

      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8004508:	687b      	ldr	r3, [r7, #4]
 800450a:	681b      	ldr	r3, [r3, #0]
 800450c:	685a      	ldr	r2, [r3, #4]
 800450e:	2380      	movs	r3, #128	; 0x80
 8004510:	041b      	lsls	r3, r3, #16
 8004512:	4013      	ands	r3, r2
 8004514:	d018      	beq.n	8004548 <UART_RxISR_16BIT+0x124>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004516:	f3ef 8310 	mrs	r3, PRIMASK
 800451a:	617b      	str	r3, [r7, #20]
  return(result);
 800451c:	697b      	ldr	r3, [r7, #20]
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800451e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004520:	2301      	movs	r3, #1
 8004522:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004524:	69bb      	ldr	r3, [r7, #24]
 8004526:	f383 8810 	msr	PRIMASK, r3
}
 800452a:	46c0      	nop			; (mov r8, r8)
 800452c:	687b      	ldr	r3, [r7, #4]
 800452e:	681b      	ldr	r3, [r3, #0]
 8004530:	681a      	ldr	r2, [r3, #0]
 8004532:	687b      	ldr	r3, [r7, #4]
 8004534:	681b      	ldr	r3, [r3, #0]
 8004536:	4928      	ldr	r1, [pc, #160]	; (80045d8 <UART_RxISR_16BIT+0x1b4>)
 8004538:	400a      	ands	r2, r1
 800453a:	601a      	str	r2, [r3, #0]
 800453c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800453e:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004540:	69fb      	ldr	r3, [r7, #28]
 8004542:	f383 8810 	msr	PRIMASK, r3
}
 8004546:	46c0      	nop			; (mov r8, r8)
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004548:	687b      	ldr	r3, [r7, #4]
 800454a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800454c:	2b01      	cmp	r3, #1
 800454e:	d12f      	bne.n	80045b0 <UART_RxISR_16BIT+0x18c>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004550:	687b      	ldr	r3, [r7, #4]
 8004552:	2200      	movs	r2, #0
 8004554:	661a      	str	r2, [r3, #96]	; 0x60
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004556:	f3ef 8310 	mrs	r3, PRIMASK
 800455a:	60bb      	str	r3, [r7, #8]
  return(result);
 800455c:	68bb      	ldr	r3, [r7, #8]

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800455e:	63bb      	str	r3, [r7, #56]	; 0x38
 8004560:	2301      	movs	r3, #1
 8004562:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004564:	68fb      	ldr	r3, [r7, #12]
 8004566:	f383 8810 	msr	PRIMASK, r3
}
 800456a:	46c0      	nop			; (mov r8, r8)
 800456c:	687b      	ldr	r3, [r7, #4]
 800456e:	681b      	ldr	r3, [r3, #0]
 8004570:	681a      	ldr	r2, [r3, #0]
 8004572:	687b      	ldr	r3, [r7, #4]
 8004574:	681b      	ldr	r3, [r3, #0]
 8004576:	2110      	movs	r1, #16
 8004578:	438a      	bics	r2, r1
 800457a:	601a      	str	r2, [r3, #0]
 800457c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800457e:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004580:	693b      	ldr	r3, [r7, #16]
 8004582:	f383 8810 	msr	PRIMASK, r3
}
 8004586:	46c0      	nop			; (mov r8, r8)

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8004588:	687b      	ldr	r3, [r7, #4]
 800458a:	681b      	ldr	r3, [r3, #0]
 800458c:	69db      	ldr	r3, [r3, #28]
 800458e:	2210      	movs	r2, #16
 8004590:	4013      	ands	r3, r2
 8004592:	2b10      	cmp	r3, #16
 8004594:	d103      	bne.n	800459e <UART_RxISR_16BIT+0x17a>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8004596:	687b      	ldr	r3, [r7, #4]
 8004598:	681b      	ldr	r3, [r3, #0]
 800459a:	2210      	movs	r2, #16
 800459c:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800459e:	687b      	ldr	r3, [r7, #4]
 80045a0:	2258      	movs	r2, #88	; 0x58
 80045a2:	5a9a      	ldrh	r2, [r3, r2]
 80045a4:	687b      	ldr	r3, [r7, #4]
 80045a6:	0011      	movs	r1, r2
 80045a8:	0018      	movs	r0, r3
 80045aa:	f7ff f8dd 	bl	8003768 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 80045ae:	e00c      	b.n	80045ca <UART_RxISR_16BIT+0x1a6>
        HAL_UART_RxCpltCallback(huart);
 80045b0:	687b      	ldr	r3, [r7, #4]
 80045b2:	0018      	movs	r0, r3
 80045b4:	f7fb fea0 	bl	80002f8 <HAL_UART_RxCpltCallback>
}
 80045b8:	e007      	b.n	80045ca <UART_RxISR_16BIT+0x1a6>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 80045ba:	687b      	ldr	r3, [r7, #4]
 80045bc:	681b      	ldr	r3, [r3, #0]
 80045be:	699a      	ldr	r2, [r3, #24]
 80045c0:	687b      	ldr	r3, [r7, #4]
 80045c2:	681b      	ldr	r3, [r3, #0]
 80045c4:	2108      	movs	r1, #8
 80045c6:	430a      	orrs	r2, r1
 80045c8:	619a      	str	r2, [r3, #24]
}
 80045ca:	46c0      	nop			; (mov r8, r8)
 80045cc:	46bd      	mov	sp, r7
 80045ce:	b014      	add	sp, #80	; 0x50
 80045d0:	bd80      	pop	{r7, pc}
 80045d2:	46c0      	nop			; (mov r8, r8)
 80045d4:	fffffedf 	.word	0xfffffedf
 80045d8:	fbffffff 	.word	0xfbffffff

080045dc <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 80045dc:	b580      	push	{r7, lr}
 80045de:	b082      	sub	sp, #8
 80045e0:	af00      	add	r7, sp, #0
 80045e2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 80045e4:	46c0      	nop			; (mov r8, r8)
 80045e6:	46bd      	mov	sp, r7
 80045e8:	b002      	add	sp, #8
 80045ea:	bd80      	pop	{r7, pc}

080045ec <__libc_init_array>:
 80045ec:	b570      	push	{r4, r5, r6, lr}
 80045ee:	2600      	movs	r6, #0
 80045f0:	4d0c      	ldr	r5, [pc, #48]	; (8004624 <__libc_init_array+0x38>)
 80045f2:	4c0d      	ldr	r4, [pc, #52]	; (8004628 <__libc_init_array+0x3c>)
 80045f4:	1b64      	subs	r4, r4, r5
 80045f6:	10a4      	asrs	r4, r4, #2
 80045f8:	42a6      	cmp	r6, r4
 80045fa:	d109      	bne.n	8004610 <__libc_init_array+0x24>
 80045fc:	2600      	movs	r6, #0
 80045fe:	f000 f821 	bl	8004644 <_init>
 8004602:	4d0a      	ldr	r5, [pc, #40]	; (800462c <__libc_init_array+0x40>)
 8004604:	4c0a      	ldr	r4, [pc, #40]	; (8004630 <__libc_init_array+0x44>)
 8004606:	1b64      	subs	r4, r4, r5
 8004608:	10a4      	asrs	r4, r4, #2
 800460a:	42a6      	cmp	r6, r4
 800460c:	d105      	bne.n	800461a <__libc_init_array+0x2e>
 800460e:	bd70      	pop	{r4, r5, r6, pc}
 8004610:	00b3      	lsls	r3, r6, #2
 8004612:	58eb      	ldr	r3, [r5, r3]
 8004614:	4798      	blx	r3
 8004616:	3601      	adds	r6, #1
 8004618:	e7ee      	b.n	80045f8 <__libc_init_array+0xc>
 800461a:	00b3      	lsls	r3, r6, #2
 800461c:	58eb      	ldr	r3, [r5, r3]
 800461e:	4798      	blx	r3
 8004620:	3601      	adds	r6, #1
 8004622:	e7f2      	b.n	800460a <__libc_init_array+0x1e>
 8004624:	08004694 	.word	0x08004694
 8004628:	08004694 	.word	0x08004694
 800462c:	08004694 	.word	0x08004694
 8004630:	08004698 	.word	0x08004698

08004634 <memset>:
 8004634:	0003      	movs	r3, r0
 8004636:	1882      	adds	r2, r0, r2
 8004638:	4293      	cmp	r3, r2
 800463a:	d100      	bne.n	800463e <memset+0xa>
 800463c:	4770      	bx	lr
 800463e:	7019      	strb	r1, [r3, #0]
 8004640:	3301      	adds	r3, #1
 8004642:	e7f9      	b.n	8004638 <memset+0x4>

08004644 <_init>:
 8004644:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004646:	46c0      	nop			; (mov r8, r8)
 8004648:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800464a:	bc08      	pop	{r3}
 800464c:	469e      	mov	lr, r3
 800464e:	4770      	bx	lr

08004650 <_fini>:
 8004650:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004652:	46c0      	nop			; (mov r8, r8)
 8004654:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004656:	bc08      	pop	{r3}
 8004658:	469e      	mov	lr, r3
 800465a:	4770      	bx	lr
